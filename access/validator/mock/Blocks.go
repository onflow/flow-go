// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockBlocks is an autogenerated mock type for the Blocks type
type MockBlocks struct {
	mock.Mock
}

type MockBlocks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlocks) EXPECT() *MockBlocks_Expecter {
	return &MockBlocks_Expecter{mock: &_m.Mock}
}

// FinalizedHeader provides a mock function with no fields
func (_m *MockBlocks) FinalizedHeader() (*flow.Header, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizedHeader")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.Header, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_FinalizedHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizedHeader'
type MockBlocks_FinalizedHeader_Call struct {
	*mock.Call
}

// FinalizedHeader is a helper method to define mock.On call
func (_e *MockBlocks_Expecter) FinalizedHeader() *MockBlocks_FinalizedHeader_Call {
	return &MockBlocks_FinalizedHeader_Call{Call: _e.mock.On("FinalizedHeader")}
}

func (_c *MockBlocks_FinalizedHeader_Call) Run(run func()) *MockBlocks_FinalizedHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlocks_FinalizedHeader_Call) Return(_a0 *flow.Header, _a1 error) *MockBlocks_FinalizedHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_FinalizedHeader_Call) RunAndReturn(run func() (*flow.Header, error)) *MockBlocks_FinalizedHeader_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByID provides a mock function with given fields: id
func (_m *MockBlocks) HeaderByID(id flow.Identifier) (*flow.Header, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByID")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Header, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Header); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_HeaderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByID'
type MockBlocks_HeaderByID_Call struct {
	*mock.Call
}

// HeaderByID is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockBlocks_Expecter) HeaderByID(id interface{}) *MockBlocks_HeaderByID_Call {
	return &MockBlocks_HeaderByID_Call{Call: _e.mock.On("HeaderByID", id)}
}

func (_c *MockBlocks_HeaderByID_Call) Run(run func(id flow.Identifier)) *MockBlocks_HeaderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBlocks_HeaderByID_Call) Return(_a0 *flow.Header, _a1 error) *MockBlocks_HeaderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_HeaderByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Header, error)) *MockBlocks_HeaderByID_Call {
	_c.Call.Return(run)
	return _c
}

// IndexedHeight provides a mock function with no fields
func (_m *MockBlocks) IndexedHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IndexedHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_IndexedHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexedHeight'
type MockBlocks_IndexedHeight_Call struct {
	*mock.Call
}

// IndexedHeight is a helper method to define mock.On call
func (_e *MockBlocks_Expecter) IndexedHeight() *MockBlocks_IndexedHeight_Call {
	return &MockBlocks_IndexedHeight_Call{Call: _e.mock.On("IndexedHeight")}
}

func (_c *MockBlocks_IndexedHeight_Call) Run(run func()) *MockBlocks_IndexedHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlocks_IndexedHeight_Call) Return(_a0 uint64, _a1 error) *MockBlocks_IndexedHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_IndexedHeight_Call) RunAndReturn(run func() (uint64, error)) *MockBlocks_IndexedHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SealedHeader provides a mock function with no fields
func (_m *MockBlocks) SealedHeader() (*flow.Header, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SealedHeader")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.Header, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_SealedHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SealedHeader'
type MockBlocks_SealedHeader_Call struct {
	*mock.Call
}

// SealedHeader is a helper method to define mock.On call
func (_e *MockBlocks_Expecter) SealedHeader() *MockBlocks_SealedHeader_Call {
	return &MockBlocks_SealedHeader_Call{Call: _e.mock.On("SealedHeader")}
}

func (_c *MockBlocks_SealedHeader_Call) Run(run func()) *MockBlocks_SealedHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlocks_SealedHeader_Call) Return(_a0 *flow.Header, _a1 error) *MockBlocks_SealedHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_SealedHeader_Call) RunAndReturn(run func() (*flow.Header, error)) *MockBlocks_SealedHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlocks creates a new instance of MockBlocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlocks {
	mock := &MockBlocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
