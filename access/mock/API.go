// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"

	mock "github.com/stretchr/testify/mock"

	modelaccess "github.com/onflow/flow-go/model/access"

	subscription "github.com/onflow/flow-go/engine/access/subscription"
)

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

type MockAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPI) EXPECT() *MockAPI_Expecter {
	return &MockAPI_Expecter{mock: &_m.Mock}
}

// ExecuteScriptAtBlockHeight provides a mock function with given fields: ctx, blockHeight, script, arguments
func (_m *MockAPI) ExecuteScriptAtBlockHeight(ctx context.Context, blockHeight uint64, script []byte, arguments [][]byte) ([]byte, error) {
	ret := _m.Called(ctx, blockHeight, script, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockHeight")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte, [][]byte) ([]byte, error)); ok {
		return rf(ctx, blockHeight, script, arguments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte, [][]byte) []byte); ok {
		r0 = rf(ctx, blockHeight, script, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []byte, [][]byte) error); ok {
		r1 = rf(ctx, blockHeight, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_ExecuteScriptAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockHeight'
type MockAPI_ExecuteScriptAtBlockHeight_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHeight uint64
//   - script []byte
//   - arguments [][]byte
func (_e *MockAPI_Expecter) ExecuteScriptAtBlockHeight(ctx interface{}, blockHeight interface{}, script interface{}, arguments interface{}) *MockAPI_ExecuteScriptAtBlockHeight_Call {
	return &MockAPI_ExecuteScriptAtBlockHeight_Call{Call: _e.mock.On("ExecuteScriptAtBlockHeight", ctx, blockHeight, script, arguments)}
}

func (_c *MockAPI_ExecuteScriptAtBlockHeight_Call) Run(run func(ctx context.Context, blockHeight uint64, script []byte, arguments [][]byte)) *MockAPI_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]byte), args[3].([][]byte))
	})
	return _c
}

func (_c *MockAPI_ExecuteScriptAtBlockHeight_Call) Return(_a0 []byte, _a1 error) *MockAPI_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_ExecuteScriptAtBlockHeight_Call) RunAndReturn(run func(context.Context, uint64, []byte, [][]byte) ([]byte, error)) *MockAPI_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptAtBlockID provides a mock function with given fields: ctx, blockID, script, arguments
func (_m *MockAPI) ExecuteScriptAtBlockID(ctx context.Context, blockID flow.Identifier, script []byte, arguments [][]byte) ([]byte, error) {
	ret := _m.Called(ctx, blockID, script, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, [][]byte) ([]byte, error)); ok {
		return rf(ctx, blockID, script, arguments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, [][]byte) []byte); ok {
		r0 = rf(ctx, blockID, script, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, []byte, [][]byte) error); ok {
		r1 = rf(ctx, blockID, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_ExecuteScriptAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockID'
type MockAPI_ExecuteScriptAtBlockID_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - script []byte
//   - arguments [][]byte
func (_e *MockAPI_Expecter) ExecuteScriptAtBlockID(ctx interface{}, blockID interface{}, script interface{}, arguments interface{}) *MockAPI_ExecuteScriptAtBlockID_Call {
	return &MockAPI_ExecuteScriptAtBlockID_Call{Call: _e.mock.On("ExecuteScriptAtBlockID", ctx, blockID, script, arguments)}
}

func (_c *MockAPI_ExecuteScriptAtBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier, script []byte, arguments [][]byte)) *MockAPI_ExecuteScriptAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].([]byte), args[3].([][]byte))
	})
	return _c
}

func (_c *MockAPI_ExecuteScriptAtBlockID_Call) Return(_a0 []byte, _a1 error) *MockAPI_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_ExecuteScriptAtBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, []byte, [][]byte) ([]byte, error)) *MockAPI_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptAtLatestBlock provides a mock function with given fields: ctx, script, arguments
func (_m *MockAPI) ExecuteScriptAtLatestBlock(ctx context.Context, script []byte, arguments [][]byte) ([]byte, error) {
	ret := _m.Called(ctx, script, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtLatestBlock")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte) ([]byte, error)); ok {
		return rf(ctx, script, arguments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte) []byte); ok {
		r0 = rf(ctx, script, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, [][]byte) error); ok {
		r1 = rf(ctx, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_ExecuteScriptAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtLatestBlock'
type MockAPI_ExecuteScriptAtLatestBlock_Call struct {
	*mock.Call
}

// ExecuteScriptAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - script []byte
//   - arguments [][]byte
func (_e *MockAPI_Expecter) ExecuteScriptAtLatestBlock(ctx interface{}, script interface{}, arguments interface{}) *MockAPI_ExecuteScriptAtLatestBlock_Call {
	return &MockAPI_ExecuteScriptAtLatestBlock_Call{Call: _e.mock.On("ExecuteScriptAtLatestBlock", ctx, script, arguments)}
}

func (_c *MockAPI_ExecuteScriptAtLatestBlock_Call) Run(run func(ctx context.Context, script []byte, arguments [][]byte)) *MockAPI_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([][]byte))
	})
	return _c
}

func (_c *MockAPI_ExecuteScriptAtLatestBlock_Call) Return(_a0 []byte, _a1 error) *MockAPI_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_ExecuteScriptAtLatestBlock_Call) RunAndReturn(run func(context.Context, []byte, [][]byte) ([]byte, error)) *MockAPI_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, address
func (_m *MockAPI) GetAccount(ctx context.Context, address flow.Address) (*flow.Account, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (*flow.Account, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) *flow.Account); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockAPI_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
func (_e *MockAPI_Expecter) GetAccount(ctx interface{}, address interface{}) *MockAPI_GetAccount_Call {
	return &MockAPI_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, address)}
}

func (_c *MockAPI_GetAccount_Call) Run(run func(ctx context.Context, address flow.Address)) *MockAPI_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address))
	})
	return _c
}

func (_c *MockAPI_GetAccount_Call) Return(_a0 *flow.Account, _a1 error) *MockAPI_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccount_Call) RunAndReturn(run func(context.Context, flow.Address) (*flow.Account, error)) *MockAPI_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtBlockHeight provides a mock function with given fields: ctx, address, height
func (_m *MockAPI) GetAccountAtBlockHeight(ctx context.Context, address flow.Address, height uint64) (*flow.Account, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockHeight")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (*flow.Account, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) *flow.Account); ok {
		r0 = rf(ctx, address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtBlockHeight'
type MockAPI_GetAccountAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - height uint64
func (_e *MockAPI_Expecter) GetAccountAtBlockHeight(ctx interface{}, address interface{}, height interface{}) *MockAPI_GetAccountAtBlockHeight_Call {
	return &MockAPI_GetAccountAtBlockHeight_Call{Call: _e.mock.On("GetAccountAtBlockHeight", ctx, address, height)}
}

func (_c *MockAPI_GetAccountAtBlockHeight_Call) Run(run func(ctx context.Context, address flow.Address, height uint64)) *MockAPI_GetAccountAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetAccountAtBlockHeight_Call) Return(_a0 *flow.Account, _a1 error) *MockAPI_GetAccountAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountAtBlockHeight_Call) RunAndReturn(run func(context.Context, flow.Address, uint64) (*flow.Account, error)) *MockAPI_GetAccountAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *MockAPI) GetAccountAtLatestBlock(ctx context.Context, address flow.Address) (*flow.Account, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtLatestBlock")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (*flow.Account, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) *flow.Account); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtLatestBlock'
type MockAPI_GetAccountAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
func (_e *MockAPI_Expecter) GetAccountAtLatestBlock(ctx interface{}, address interface{}) *MockAPI_GetAccountAtLatestBlock_Call {
	return &MockAPI_GetAccountAtLatestBlock_Call{Call: _e.mock.On("GetAccountAtLatestBlock", ctx, address)}
}

func (_c *MockAPI_GetAccountAtLatestBlock_Call) Run(run func(ctx context.Context, address flow.Address)) *MockAPI_GetAccountAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address))
	})
	return _c
}

func (_c *MockAPI_GetAccountAtLatestBlock_Call) Return(_a0 *flow.Account, _a1 error) *MockAPI_GetAccountAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountAtLatestBlock_Call) RunAndReturn(run func(context.Context, flow.Address) (*flow.Account, error)) *MockAPI_GetAccountAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalanceAtBlockHeight provides a mock function with given fields: ctx, address, height
func (_m *MockAPI) GetAccountBalanceAtBlockHeight(ctx context.Context, address flow.Address, height uint64) (uint64, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (uint64, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) uint64); ok {
		r0 = rf(ctx, address, height)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountBalanceAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalanceAtBlockHeight'
type MockAPI_GetAccountBalanceAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountBalanceAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - height uint64
func (_e *MockAPI_Expecter) GetAccountBalanceAtBlockHeight(ctx interface{}, address interface{}, height interface{}) *MockAPI_GetAccountBalanceAtBlockHeight_Call {
	return &MockAPI_GetAccountBalanceAtBlockHeight_Call{Call: _e.mock.On("GetAccountBalanceAtBlockHeight", ctx, address, height)}
}

func (_c *MockAPI_GetAccountBalanceAtBlockHeight_Call) Run(run func(ctx context.Context, address flow.Address, height uint64)) *MockAPI_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetAccountBalanceAtBlockHeight_Call) Return(_a0 uint64, _a1 error) *MockAPI_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountBalanceAtBlockHeight_Call) RunAndReturn(run func(context.Context, flow.Address, uint64) (uint64, error)) *MockAPI_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalanceAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *MockAPI) GetAccountBalanceAtLatestBlock(ctx context.Context, address flow.Address) (uint64, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtLatestBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (uint64, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) uint64); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountBalanceAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalanceAtLatestBlock'
type MockAPI_GetAccountBalanceAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountBalanceAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
func (_e *MockAPI_Expecter) GetAccountBalanceAtLatestBlock(ctx interface{}, address interface{}) *MockAPI_GetAccountBalanceAtLatestBlock_Call {
	return &MockAPI_GetAccountBalanceAtLatestBlock_Call{Call: _e.mock.On("GetAccountBalanceAtLatestBlock", ctx, address)}
}

func (_c *MockAPI_GetAccountBalanceAtLatestBlock_Call) Run(run func(ctx context.Context, address flow.Address)) *MockAPI_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address))
	})
	return _c
}

func (_c *MockAPI_GetAccountBalanceAtLatestBlock_Call) Return(_a0 uint64, _a1 error) *MockAPI_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountBalanceAtLatestBlock_Call) RunAndReturn(run func(context.Context, flow.Address) (uint64, error)) *MockAPI_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeyAtBlockHeight provides a mock function with given fields: ctx, address, keyIndex, height
func (_m *MockAPI) GetAccountKeyAtBlockHeight(ctx context.Context, address flow.Address, keyIndex uint32, height uint64) (*flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, keyIndex, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtBlockHeight")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) (*flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, keyIndex, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, keyIndex, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32, uint64) error); ok {
		r1 = rf(ctx, address, keyIndex, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountKeyAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeyAtBlockHeight'
type MockAPI_GetAccountKeyAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountKeyAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - keyIndex uint32
//   - height uint64
func (_e *MockAPI_Expecter) GetAccountKeyAtBlockHeight(ctx interface{}, address interface{}, keyIndex interface{}, height interface{}) *MockAPI_GetAccountKeyAtBlockHeight_Call {
	return &MockAPI_GetAccountKeyAtBlockHeight_Call{Call: _e.mock.On("GetAccountKeyAtBlockHeight", ctx, address, keyIndex, height)}
}

func (_c *MockAPI_GetAccountKeyAtBlockHeight_Call) Run(run func(ctx context.Context, address flow.Address, keyIndex uint32, height uint64)) *MockAPI_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint32), args[3].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetAccountKeyAtBlockHeight_Call) Return(_a0 *flow.AccountPublicKey, _a1 error) *MockAPI_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountKeyAtBlockHeight_Call) RunAndReturn(run func(context.Context, flow.Address, uint32, uint64) (*flow.AccountPublicKey, error)) *MockAPI_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeyAtLatestBlock provides a mock function with given fields: ctx, address, keyIndex
func (_m *MockAPI) GetAccountKeyAtLatestBlock(ctx context.Context, address flow.Address, keyIndex uint32) (*flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, keyIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtLatestBlock")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32) (*flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, keyIndex)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32) error); ok {
		r1 = rf(ctx, address, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountKeyAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeyAtLatestBlock'
type MockAPI_GetAccountKeyAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountKeyAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - keyIndex uint32
func (_e *MockAPI_Expecter) GetAccountKeyAtLatestBlock(ctx interface{}, address interface{}, keyIndex interface{}) *MockAPI_GetAccountKeyAtLatestBlock_Call {
	return &MockAPI_GetAccountKeyAtLatestBlock_Call{Call: _e.mock.On("GetAccountKeyAtLatestBlock", ctx, address, keyIndex)}
}

func (_c *MockAPI_GetAccountKeyAtLatestBlock_Call) Run(run func(ctx context.Context, address flow.Address, keyIndex uint32)) *MockAPI_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint32))
	})
	return _c
}

func (_c *MockAPI_GetAccountKeyAtLatestBlock_Call) Return(_a0 *flow.AccountPublicKey, _a1 error) *MockAPI_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountKeyAtLatestBlock_Call) RunAndReturn(run func(context.Context, flow.Address, uint32) (*flow.AccountPublicKey, error)) *MockAPI_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeysAtBlockHeight provides a mock function with given fields: ctx, address, height
func (_m *MockAPI) GetAccountKeysAtBlockHeight(ctx context.Context, address flow.Address, height uint64) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtBlockHeight")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) ([]flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountKeysAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeysAtBlockHeight'
type MockAPI_GetAccountKeysAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountKeysAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - height uint64
func (_e *MockAPI_Expecter) GetAccountKeysAtBlockHeight(ctx interface{}, address interface{}, height interface{}) *MockAPI_GetAccountKeysAtBlockHeight_Call {
	return &MockAPI_GetAccountKeysAtBlockHeight_Call{Call: _e.mock.On("GetAccountKeysAtBlockHeight", ctx, address, height)}
}

func (_c *MockAPI_GetAccountKeysAtBlockHeight_Call) Run(run func(ctx context.Context, address flow.Address, height uint64)) *MockAPI_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetAccountKeysAtBlockHeight_Call) Return(_a0 []flow.AccountPublicKey, _a1 error) *MockAPI_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountKeysAtBlockHeight_Call) RunAndReturn(run func(context.Context, flow.Address, uint64) ([]flow.AccountPublicKey, error)) *MockAPI_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeysAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *MockAPI) GetAccountKeysAtLatestBlock(ctx context.Context, address flow.Address) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtLatestBlock")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) ([]flow.AccountPublicKey, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetAccountKeysAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeysAtLatestBlock'
type MockAPI_GetAccountKeysAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountKeysAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
func (_e *MockAPI_Expecter) GetAccountKeysAtLatestBlock(ctx interface{}, address interface{}) *MockAPI_GetAccountKeysAtLatestBlock_Call {
	return &MockAPI_GetAccountKeysAtLatestBlock_Call{Call: _e.mock.On("GetAccountKeysAtLatestBlock", ctx, address)}
}

func (_c *MockAPI_GetAccountKeysAtLatestBlock_Call) Run(run func(ctx context.Context, address flow.Address)) *MockAPI_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address))
	})
	return _c
}

func (_c *MockAPI_GetAccountKeysAtLatestBlock_Call) Return(_a0 []flow.AccountPublicKey, _a1 error) *MockAPI_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetAccountKeysAtLatestBlock_Call) RunAndReturn(run func(context.Context, flow.Address) ([]flow.AccountPublicKey, error)) *MockAPI_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByHeight provides a mock function with given fields: ctx, height
func (_m *MockAPI) GetBlockByHeight(ctx context.Context, height uint64) (*flow.Block, flow.BlockStatus, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 *flow.Block
	var r1 flow.BlockStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.Block, flow.BlockStatus, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.Block); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) flow.BlockStatus); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Get(1).(flow.BlockStatus)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64) error); ok {
		r2 = rf(ctx, height)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPI_GetBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHeight'
type MockAPI_GetBlockByHeight_Call struct {
	*mock.Call
}

// GetBlockByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockAPI_Expecter) GetBlockByHeight(ctx interface{}, height interface{}) *MockAPI_GetBlockByHeight_Call {
	return &MockAPI_GetBlockByHeight_Call{Call: _e.mock.On("GetBlockByHeight", ctx, height)}
}

func (_c *MockAPI_GetBlockByHeight_Call) Run(run func(ctx context.Context, height uint64)) *MockAPI_GetBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetBlockByHeight_Call) Return(_a0 *flow.Block, _a1 flow.BlockStatus, _a2 error) *MockAPI_GetBlockByHeight_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPI_GetBlockByHeight_Call) RunAndReturn(run func(context.Context, uint64) (*flow.Block, flow.BlockStatus, error)) *MockAPI_GetBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByID provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetBlockByID(ctx context.Context, id flow.Identifier) (*flow.Block, flow.BlockStatus, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByID")
	}

	var r0 *flow.Block
	var r1 flow.BlockStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Block, flow.BlockStatus, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Block); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) flow.BlockStatus); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(flow.BlockStatus)
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPI_GetBlockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByID'
type MockAPI_GetBlockByID_Call struct {
	*mock.Call
}

// GetBlockByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetBlockByID(ctx interface{}, id interface{}) *MockAPI_GetBlockByID_Call {
	return &MockAPI_GetBlockByID_Call{Call: _e.mock.On("GetBlockByID", ctx, id)}
}

func (_c *MockAPI_GetBlockByID_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetBlockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetBlockByID_Call) Return(_a0 *flow.Block, _a1 flow.BlockStatus, _a2 error) *MockAPI_GetBlockByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPI_GetBlockByID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.Block, flow.BlockStatus, error)) *MockAPI_GetBlockByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByHeight provides a mock function with given fields: ctx, height
func (_m *MockAPI) GetBlockHeaderByHeight(ctx context.Context, height uint64) (*flow.Header, flow.BlockStatus, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByHeight")
	}

	var r0 *flow.Header
	var r1 flow.BlockStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.Header, flow.BlockStatus, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.Header); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) flow.BlockStatus); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Get(1).(flow.BlockStatus)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64) error); ok {
		r2 = rf(ctx, height)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPI_GetBlockHeaderByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByHeight'
type MockAPI_GetBlockHeaderByHeight_Call struct {
	*mock.Call
}

// GetBlockHeaderByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockAPI_Expecter) GetBlockHeaderByHeight(ctx interface{}, height interface{}) *MockAPI_GetBlockHeaderByHeight_Call {
	return &MockAPI_GetBlockHeaderByHeight_Call{Call: _e.mock.On("GetBlockHeaderByHeight", ctx, height)}
}

func (_c *MockAPI_GetBlockHeaderByHeight_Call) Run(run func(ctx context.Context, height uint64)) *MockAPI_GetBlockHeaderByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetBlockHeaderByHeight_Call) Return(_a0 *flow.Header, _a1 flow.BlockStatus, _a2 error) *MockAPI_GetBlockHeaderByHeight_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPI_GetBlockHeaderByHeight_Call) RunAndReturn(run func(context.Context, uint64) (*flow.Header, flow.BlockStatus, error)) *MockAPI_GetBlockHeaderByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByID provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetBlockHeaderByID(ctx context.Context, id flow.Identifier) (*flow.Header, flow.BlockStatus, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByID")
	}

	var r0 *flow.Header
	var r1 flow.BlockStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Header, flow.BlockStatus, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Header); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) flow.BlockStatus); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(flow.BlockStatus)
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPI_GetBlockHeaderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByID'
type MockAPI_GetBlockHeaderByID_Call struct {
	*mock.Call
}

// GetBlockHeaderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetBlockHeaderByID(ctx interface{}, id interface{}) *MockAPI_GetBlockHeaderByID_Call {
	return &MockAPI_GetBlockHeaderByID_Call{Call: _e.mock.On("GetBlockHeaderByID", ctx, id)}
}

func (_c *MockAPI_GetBlockHeaderByID_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetBlockHeaderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetBlockHeaderByID_Call) Return(_a0 *flow.Header, _a1 flow.BlockStatus, _a2 error) *MockAPI_GetBlockHeaderByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPI_GetBlockHeaderByID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.Header, flow.BlockStatus, error)) *MockAPI_GetBlockHeaderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionByID provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetCollectionByID(ctx context.Context, id flow.Identifier) (*flow.LightCollection, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionByID")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.LightCollection, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.LightCollection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetCollectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionByID'
type MockAPI_GetCollectionByID_Call struct {
	*mock.Call
}

// GetCollectionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetCollectionByID(ctx interface{}, id interface{}) *MockAPI_GetCollectionByID_Call {
	return &MockAPI_GetCollectionByID_Call{Call: _e.mock.On("GetCollectionByID", ctx, id)}
}

func (_c *MockAPI_GetCollectionByID_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetCollectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetCollectionByID_Call) Return(_a0 *flow.LightCollection, _a1 error) *MockAPI_GetCollectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetCollectionByID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.LightCollection, error)) *MockAPI_GetCollectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForBlockIDs provides a mock function with given fields: ctx, eventType, blockIDs, requiredEventEncodingVersion
func (_m *MockAPI) GetEventsForBlockIDs(ctx context.Context, eventType string, blockIDs []flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion) ([]flow.BlockEvents, error) {
	ret := _m.Called(ctx, eventType, blockIDs, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForBlockIDs")
	}

	var r0 []flow.BlockEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []flow.Identifier, entities.EventEncodingVersion) ([]flow.BlockEvents, error)); ok {
		return rf(ctx, eventType, blockIDs, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []flow.Identifier, entities.EventEncodingVersion) []flow.BlockEvents); ok {
		r0 = rf(ctx, eventType, blockIDs, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, eventType, blockIDs, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetEventsForBlockIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForBlockIDs'
type MockAPI_GetEventsForBlockIDs_Call struct {
	*mock.Call
}

// GetEventsForBlockIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - eventType string
//   - blockIDs []flow.Identifier
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) GetEventsForBlockIDs(ctx interface{}, eventType interface{}, blockIDs interface{}, requiredEventEncodingVersion interface{}) *MockAPI_GetEventsForBlockIDs_Call {
	return &MockAPI_GetEventsForBlockIDs_Call{Call: _e.mock.On("GetEventsForBlockIDs", ctx, eventType, blockIDs, requiredEventEncodingVersion)}
}

func (_c *MockAPI_GetEventsForBlockIDs_Call) Run(run func(ctx context.Context, eventType string, blockIDs []flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_GetEventsForBlockIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]flow.Identifier), args[3].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_GetEventsForBlockIDs_Call) Return(_a0 []flow.BlockEvents, _a1 error) *MockAPI_GetEventsForBlockIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetEventsForBlockIDs_Call) RunAndReturn(run func(context.Context, string, []flow.Identifier, entities.EventEncodingVersion) ([]flow.BlockEvents, error)) *MockAPI_GetEventsForBlockIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForHeightRange provides a mock function with given fields: ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion
func (_m *MockAPI) GetEventsForHeightRange(ctx context.Context, eventType string, startHeight uint64, endHeight uint64, requiredEventEncodingVersion entities.EventEncodingVersion) ([]flow.BlockEvents, error) {
	ret := _m.Called(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForHeightRange")
	}

	var r0 []flow.BlockEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, entities.EventEncodingVersion) ([]flow.BlockEvents, error)); ok {
		return rf(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, entities.EventEncodingVersion) []flow.BlockEvents); ok {
		r0 = rf(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetEventsForHeightRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForHeightRange'
type MockAPI_GetEventsForHeightRange_Call struct {
	*mock.Call
}

// GetEventsForHeightRange is a helper method to define mock.On call
//   - ctx context.Context
//   - eventType string
//   - startHeight uint64
//   - endHeight uint64
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) GetEventsForHeightRange(ctx interface{}, eventType interface{}, startHeight interface{}, endHeight interface{}, requiredEventEncodingVersion interface{}) *MockAPI_GetEventsForHeightRange_Call {
	return &MockAPI_GetEventsForHeightRange_Call{Call: _e.mock.On("GetEventsForHeightRange", ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)}
}

func (_c *MockAPI_GetEventsForHeightRange_Call) Run(run func(ctx context.Context, eventType string, startHeight uint64, endHeight uint64, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_GetEventsForHeightRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64), args[4].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_GetEventsForHeightRange_Call) Return(_a0 []flow.BlockEvents, _a1 error) *MockAPI_GetEventsForHeightRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetEventsForHeightRange_Call) RunAndReturn(run func(context.Context, string, uint64, uint64, entities.EventEncodingVersion) ([]flow.BlockEvents, error)) *MockAPI_GetEventsForHeightRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionResultByID provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetExecutionResultByID(ctx context.Context, id flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultByID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetExecutionResultByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionResultByID'
type MockAPI_GetExecutionResultByID_Call struct {
	*mock.Call
}

// GetExecutionResultByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetExecutionResultByID(ctx interface{}, id interface{}) *MockAPI_GetExecutionResultByID_Call {
	return &MockAPI_GetExecutionResultByID_Call{Call: _e.mock.On("GetExecutionResultByID", ctx, id)}
}

func (_c *MockAPI_GetExecutionResultByID_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetExecutionResultByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetExecutionResultByID_Call) Return(_a0 *flow.ExecutionResult, _a1 error) *MockAPI_GetExecutionResultByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetExecutionResultByID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.ExecutionResult, error)) *MockAPI_GetExecutionResultByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionResultForBlockID provides a mock function with given fields: ctx, blockID
func (_m *MockAPI) GetExecutionResultForBlockID(ctx context.Context, blockID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultForBlockID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetExecutionResultForBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionResultForBlockID'
type MockAPI_GetExecutionResultForBlockID_Call struct {
	*mock.Call
}

// GetExecutionResultForBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockAPI_Expecter) GetExecutionResultForBlockID(ctx interface{}, blockID interface{}) *MockAPI_GetExecutionResultForBlockID_Call {
	return &MockAPI_GetExecutionResultForBlockID_Call{Call: _e.mock.On("GetExecutionResultForBlockID", ctx, blockID)}
}

func (_c *MockAPI_GetExecutionResultForBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockAPI_GetExecutionResultForBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetExecutionResultForBlockID_Call) Return(_a0 *flow.ExecutionResult, _a1 error) *MockAPI_GetExecutionResultForBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetExecutionResultForBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.ExecutionResult, error)) *MockAPI_GetExecutionResultForBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullCollectionByID provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetFullCollectionByID(ctx context.Context, id flow.Identifier) (*flow.Collection, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFullCollectionByID")
	}

	var r0 *flow.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Collection, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Collection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetFullCollectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullCollectionByID'
type MockAPI_GetFullCollectionByID_Call struct {
	*mock.Call
}

// GetFullCollectionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetFullCollectionByID(ctx interface{}, id interface{}) *MockAPI_GetFullCollectionByID_Call {
	return &MockAPI_GetFullCollectionByID_Call{Call: _e.mock.On("GetFullCollectionByID", ctx, id)}
}

func (_c *MockAPI_GetFullCollectionByID_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetFullCollectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetFullCollectionByID_Call) Return(_a0 *flow.Collection, _a1 error) *MockAPI_GetFullCollectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetFullCollectionByID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.Collection, error)) *MockAPI_GetFullCollectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx, isSealed
func (_m *MockAPI) GetLatestBlock(ctx context.Context, isSealed bool) (*flow.Block, flow.BlockStatus, error) {
	ret := _m.Called(ctx, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *flow.Block
	var r1 flow.BlockStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*flow.Block, flow.BlockStatus, error)); ok {
		return rf(ctx, isSealed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *flow.Block); ok {
		r0 = rf(ctx, isSealed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) flow.BlockStatus); ok {
		r1 = rf(ctx, isSealed)
	} else {
		r1 = ret.Get(1).(flow.BlockStatus)
	}

	if rf, ok := ret.Get(2).(func(context.Context, bool) error); ok {
		r2 = rf(ctx, isSealed)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPI_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockAPI_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - isSealed bool
func (_e *MockAPI_Expecter) GetLatestBlock(ctx interface{}, isSealed interface{}) *MockAPI_GetLatestBlock_Call {
	return &MockAPI_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", ctx, isSealed)}
}

func (_c *MockAPI_GetLatestBlock_Call) Run(run func(ctx context.Context, isSealed bool)) *MockAPI_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockAPI_GetLatestBlock_Call) Return(_a0 *flow.Block, _a1 flow.BlockStatus, _a2 error) *MockAPI_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPI_GetLatestBlock_Call) RunAndReturn(run func(context.Context, bool) (*flow.Block, flow.BlockStatus, error)) *MockAPI_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields: ctx, isSealed
func (_m *MockAPI) GetLatestBlockHeader(ctx context.Context, isSealed bool) (*flow.Header, flow.BlockStatus, error) {
	ret := _m.Called(ctx, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *flow.Header
	var r1 flow.BlockStatus
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*flow.Header, flow.BlockStatus, error)); ok {
		return rf(ctx, isSealed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *flow.Header); ok {
		r0 = rf(ctx, isSealed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) flow.BlockStatus); ok {
		r1 = rf(ctx, isSealed)
	} else {
		r1 = ret.Get(1).(flow.BlockStatus)
	}

	if rf, ok := ret.Get(2).(func(context.Context, bool) error); ok {
		r2 = rf(ctx, isSealed)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPI_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type MockAPI_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - isSealed bool
func (_e *MockAPI_Expecter) GetLatestBlockHeader(ctx interface{}, isSealed interface{}) *MockAPI_GetLatestBlockHeader_Call {
	return &MockAPI_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader", ctx, isSealed)}
}

func (_c *MockAPI_GetLatestBlockHeader_Call) Run(run func(ctx context.Context, isSealed bool)) *MockAPI_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockAPI_GetLatestBlockHeader_Call) Return(_a0 *flow.Header, _a1 flow.BlockStatus, _a2 error) *MockAPI_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPI_GetLatestBlockHeader_Call) RunAndReturn(run func(context.Context, bool) (*flow.Header, flow.BlockStatus, error)) *MockAPI_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProtocolStateSnapshot provides a mock function with given fields: ctx
func (_m *MockAPI) GetLatestProtocolStateSnapshot(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProtocolStateSnapshot")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetLatestProtocolStateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProtocolStateSnapshot'
type MockAPI_GetLatestProtocolStateSnapshot_Call struct {
	*mock.Call
}

// GetLatestProtocolStateSnapshot is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetLatestProtocolStateSnapshot(ctx interface{}) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	return &MockAPI_GetLatestProtocolStateSnapshot_Call{Call: _e.mock.On("GetLatestProtocolStateSnapshot", ctx)}
}

func (_c *MockAPI_GetLatestProtocolStateSnapshot_Call) Run(run func(ctx context.Context)) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetLatestProtocolStateSnapshot_Call) Return(_a0 []byte, _a1 error) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetLatestProtocolStateSnapshot_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkParameters provides a mock function with given fields: ctx
func (_m *MockAPI) GetNetworkParameters(ctx context.Context) modelaccess.NetworkParameters {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkParameters")
	}

	var r0 modelaccess.NetworkParameters
	if rf, ok := ret.Get(0).(func(context.Context) modelaccess.NetworkParameters); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(modelaccess.NetworkParameters)
	}

	return r0
}

// MockAPI_GetNetworkParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkParameters'
type MockAPI_GetNetworkParameters_Call struct {
	*mock.Call
}

// GetNetworkParameters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetNetworkParameters(ctx interface{}) *MockAPI_GetNetworkParameters_Call {
	return &MockAPI_GetNetworkParameters_Call{Call: _e.mock.On("GetNetworkParameters", ctx)}
}

func (_c *MockAPI_GetNetworkParameters_Call) Run(run func(ctx context.Context)) *MockAPI_GetNetworkParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetNetworkParameters_Call) Return(_a0 modelaccess.NetworkParameters) *MockAPI_GetNetworkParameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_GetNetworkParameters_Call) RunAndReturn(run func(context.Context) modelaccess.NetworkParameters) *MockAPI_GetNetworkParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeVersionInfo provides a mock function with given fields: ctx
func (_m *MockAPI) GetNodeVersionInfo(ctx context.Context) (*modelaccess.NodeVersionInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeVersionInfo")
	}

	var r0 *modelaccess.NodeVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*modelaccess.NodeVersionInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *modelaccess.NodeVersionInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.NodeVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetNodeVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeVersionInfo'
type MockAPI_GetNodeVersionInfo_Call struct {
	*mock.Call
}

// GetNodeVersionInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetNodeVersionInfo(ctx interface{}) *MockAPI_GetNodeVersionInfo_Call {
	return &MockAPI_GetNodeVersionInfo_Call{Call: _e.mock.On("GetNodeVersionInfo", ctx)}
}

func (_c *MockAPI_GetNodeVersionInfo_Call) Run(run func(ctx context.Context)) *MockAPI_GetNodeVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetNodeVersionInfo_Call) Return(_a0 *modelaccess.NodeVersionInfo, _a1 error) *MockAPI_GetNodeVersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetNodeVersionInfo_Call) RunAndReturn(run func(context.Context) (*modelaccess.NodeVersionInfo, error)) *MockAPI_GetNodeVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByBlockID provides a mock function with given fields: ctx, blockID
func (_m *MockAPI) GetProtocolStateSnapshotByBlockID(ctx context.Context, blockID flow.Identifier) ([]byte, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByBlockID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]byte, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []byte); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetProtocolStateSnapshotByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByBlockID'
type MockAPI_GetProtocolStateSnapshotByBlockID_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockAPI_Expecter) GetProtocolStateSnapshotByBlockID(ctx interface{}, blockID interface{}) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	return &MockAPI_GetProtocolStateSnapshotByBlockID_Call{Call: _e.mock.On("GetProtocolStateSnapshotByBlockID", ctx, blockID)}
}

func (_c *MockAPI_GetProtocolStateSnapshotByBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByBlockID_Call) Return(_a0 []byte, _a1 error) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier) ([]byte, error)) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByHeight provides a mock function with given fields: ctx, blockHeight
func (_m *MockAPI) GetProtocolStateSnapshotByHeight(ctx context.Context, blockHeight uint64) ([]byte, error) {
	ret := _m.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByHeight")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]byte, error)); ok {
		return rf(ctx, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []byte); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetProtocolStateSnapshotByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByHeight'
type MockAPI_GetProtocolStateSnapshotByHeight_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHeight uint64
func (_e *MockAPI_Expecter) GetProtocolStateSnapshotByHeight(ctx interface{}, blockHeight interface{}) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	return &MockAPI_GetProtocolStateSnapshotByHeight_Call{Call: _e.mock.On("GetProtocolStateSnapshotByHeight", ctx, blockHeight)}
}

func (_c *MockAPI_GetProtocolStateSnapshotByHeight_Call) Run(run func(ctx context.Context, blockHeight uint64)) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByHeight_Call) Return(_a0 []byte, _a1 error) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByHeight_Call) RunAndReturn(run func(context.Context, uint64) ([]byte, error)) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransaction provides a mock function with given fields: ctx, blockID
func (_m *MockAPI) GetSystemTransaction(ctx context.Context, blockID flow.Identifier) (*flow.TransactionBody, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransaction")
	}

	var r0 *flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.TransactionBody, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.TransactionBody); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetSystemTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransaction'
type MockAPI_GetSystemTransaction_Call struct {
	*mock.Call
}

// GetSystemTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockAPI_Expecter) GetSystemTransaction(ctx interface{}, blockID interface{}) *MockAPI_GetSystemTransaction_Call {
	return &MockAPI_GetSystemTransaction_Call{Call: _e.mock.On("GetSystemTransaction", ctx, blockID)}
}

func (_c *MockAPI_GetSystemTransaction_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockAPI_GetSystemTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetSystemTransaction_Call) Return(_a0 *flow.TransactionBody, _a1 error) *MockAPI_GetSystemTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetSystemTransaction_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.TransactionBody, error)) *MockAPI_GetSystemTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransactionResult provides a mock function with given fields: ctx, blockID, requiredEventEncodingVersion
func (_m *MockAPI) GetSystemTransactionResult(ctx context.Context, blockID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion) (*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, blockID, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransactionResult")
	}

	var r0 *modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, blockID, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) *modelaccess.TransactionResult); ok {
		r0 = rf(ctx, blockID, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, blockID, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetSystemTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransactionResult'
type MockAPI_GetSystemTransactionResult_Call struct {
	*mock.Call
}

// GetSystemTransactionResult is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) GetSystemTransactionResult(ctx interface{}, blockID interface{}, requiredEventEncodingVersion interface{}) *MockAPI_GetSystemTransactionResult_Call {
	return &MockAPI_GetSystemTransactionResult_Call{Call: _e.mock.On("GetSystemTransactionResult", ctx, blockID, requiredEventEncodingVersion)}
}

func (_c *MockAPI_GetSystemTransactionResult_Call) Run(run func(ctx context.Context, blockID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_GetSystemTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_GetSystemTransactionResult_Call) Return(_a0 *modelaccess.TransactionResult, _a1 error) *MockAPI_GetSystemTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetSystemTransactionResult_Call) RunAndReturn(run func(context.Context, flow.Identifier, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)) *MockAPI_GetSystemTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetTransaction(ctx context.Context, id flow.Identifier) (*flow.TransactionBody, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.TransactionBody, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.TransactionBody); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockAPI_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetTransaction(ctx interface{}, id interface{}) *MockAPI_GetTransaction_Call {
	return &MockAPI_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx, id)}
}

func (_c *MockAPI_GetTransaction_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetTransaction_Call) Return(_a0 *flow.TransactionBody, _a1 error) *MockAPI_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetTransaction_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.TransactionBody, error)) *MockAPI_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResult provides a mock function with given fields: ctx, id, blockID, collectionID, requiredEventEncodingVersion
func (_m *MockAPI) GetTransactionResult(ctx context.Context, id flow.Identifier, blockID flow.Identifier, collectionID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion) (*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, id, blockID, collectionID, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, id, blockID, collectionID, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) *modelaccess.TransactionResult); ok {
		r0 = rf(ctx, id, blockID, collectionID, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, id, blockID, collectionID, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResult'
type MockAPI_GetTransactionResult_Call struct {
	*mock.Call
}

// GetTransactionResult is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
//   - blockID flow.Identifier
//   - collectionID flow.Identifier
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) GetTransactionResult(ctx interface{}, id interface{}, blockID interface{}, collectionID interface{}, requiredEventEncodingVersion interface{}) *MockAPI_GetTransactionResult_Call {
	return &MockAPI_GetTransactionResult_Call{Call: _e.mock.On("GetTransactionResult", ctx, id, blockID, collectionID, requiredEventEncodingVersion)}
}

func (_c *MockAPI_GetTransactionResult_Call) Run(run func(ctx context.Context, id flow.Identifier, blockID flow.Identifier, collectionID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_GetTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(flow.Identifier), args[3].(flow.Identifier), args[4].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_GetTransactionResult_Call) Return(_a0 *modelaccess.TransactionResult, _a1 error) *MockAPI_GetTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetTransactionResult_Call) RunAndReturn(run func(context.Context, flow.Identifier, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)) *MockAPI_GetTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultByIndex provides a mock function with given fields: ctx, blockID, index, requiredEventEncodingVersion
func (_m *MockAPI) GetTransactionResultByIndex(ctx context.Context, blockID flow.Identifier, index uint32, requiredEventEncodingVersion entities.EventEncodingVersion) (*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, blockID, index, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultByIndex")
	}

	var r0 *modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint32, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, blockID, index, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint32, entities.EventEncodingVersion) *modelaccess.TransactionResult); ok {
		r0 = rf(ctx, blockID, index, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, uint32, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, blockID, index, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetTransactionResultByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultByIndex'
type MockAPI_GetTransactionResultByIndex_Call struct {
	*mock.Call
}

// GetTransactionResultByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - index uint32
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) GetTransactionResultByIndex(ctx interface{}, blockID interface{}, index interface{}, requiredEventEncodingVersion interface{}) *MockAPI_GetTransactionResultByIndex_Call {
	return &MockAPI_GetTransactionResultByIndex_Call{Call: _e.mock.On("GetTransactionResultByIndex", ctx, blockID, index, requiredEventEncodingVersion)}
}

func (_c *MockAPI_GetTransactionResultByIndex_Call) Run(run func(ctx context.Context, blockID flow.Identifier, index uint32, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_GetTransactionResultByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(uint32), args[3].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_GetTransactionResultByIndex_Call) Return(_a0 *modelaccess.TransactionResult, _a1 error) *MockAPI_GetTransactionResultByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetTransactionResultByIndex_Call) RunAndReturn(run func(context.Context, flow.Identifier, uint32, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)) *MockAPI_GetTransactionResultByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultsByBlockID provides a mock function with given fields: ctx, blockID, requiredEventEncodingVersion
func (_m *MockAPI) GetTransactionResultsByBlockID(ctx context.Context, blockID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion) ([]*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, blockID, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultsByBlockID")
	}

	var r0 []*modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) ([]*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, blockID, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) []*modelaccess.TransactionResult); ok {
		r0 = rf(ctx, blockID, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, blockID, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetTransactionResultsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultsByBlockID'
type MockAPI_GetTransactionResultsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionResultsByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) GetTransactionResultsByBlockID(ctx interface{}, blockID interface{}, requiredEventEncodingVersion interface{}) *MockAPI_GetTransactionResultsByBlockID_Call {
	return &MockAPI_GetTransactionResultsByBlockID_Call{Call: _e.mock.On("GetTransactionResultsByBlockID", ctx, blockID, requiredEventEncodingVersion)}
}

func (_c *MockAPI_GetTransactionResultsByBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_GetTransactionResultsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_GetTransactionResultsByBlockID_Call) Return(_a0 []*modelaccess.TransactionResult, _a1 error) *MockAPI_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetTransactionResultsByBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, entities.EventEncodingVersion) ([]*modelaccess.TransactionResult, error)) *MockAPI_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByBlockID provides a mock function with given fields: ctx, blockID
func (_m *MockAPI) GetTransactionsByBlockID(ctx context.Context, blockID flow.Identifier) ([]*flow.TransactionBody, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByBlockID")
	}

	var r0 []*flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]*flow.TransactionBody, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []*flow.TransactionBody); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetTransactionsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByBlockID'
type MockAPI_GetTransactionsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionsByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockAPI_Expecter) GetTransactionsByBlockID(ctx interface{}, blockID interface{}) *MockAPI_GetTransactionsByBlockID_Call {
	return &MockAPI_GetTransactionsByBlockID_Call{Call: _e.mock.On("GetTransactionsByBlockID", ctx, blockID)}
}

func (_c *MockAPI_GetTransactionsByBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockAPI_GetTransactionsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetTransactionsByBlockID_Call) Return(_a0 []*flow.TransactionBody, _a1 error) *MockAPI_GetTransactionsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetTransactionsByBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier) ([]*flow.TransactionBody, error)) *MockAPI_GetTransactionsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockAPI) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPI_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockAPI_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) Ping(ctx interface{}) *MockAPI_Ping_Call {
	return &MockAPI_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockAPI_Ping_Call) Run(run func(ctx context.Context)) *MockAPI_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_Ping_Call) Return(_a0 error) *MockAPI_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_Ping_Call) RunAndReturn(run func(context.Context) error) *MockAPI_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SendAndSubscribeTransactionStatuses provides a mock function with given fields: ctx, tx, requiredEventEncodingVersion
func (_m *MockAPI) SendAndSubscribeTransactionStatuses(ctx context.Context, tx *flow.TransactionBody, requiredEventEncodingVersion entities.EventEncodingVersion) subscription.Subscription {
	ret := _m.Called(ctx, tx, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for SendAndSubscribeTransactionStatuses")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *flow.TransactionBody, entities.EventEncodingVersion) subscription.Subscription); ok {
		r0 = rf(ctx, tx, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SendAndSubscribeTransactionStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAndSubscribeTransactionStatuses'
type MockAPI_SendAndSubscribeTransactionStatuses_Call struct {
	*mock.Call
}

// SendAndSubscribeTransactionStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *flow.TransactionBody
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) SendAndSubscribeTransactionStatuses(ctx interface{}, tx interface{}, requiredEventEncodingVersion interface{}) *MockAPI_SendAndSubscribeTransactionStatuses_Call {
	return &MockAPI_SendAndSubscribeTransactionStatuses_Call{Call: _e.mock.On("SendAndSubscribeTransactionStatuses", ctx, tx, requiredEventEncodingVersion)}
}

func (_c *MockAPI_SendAndSubscribeTransactionStatuses_Call) Run(run func(ctx context.Context, tx *flow.TransactionBody, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*flow.TransactionBody), args[2].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_SendAndSubscribeTransactionStatuses_Call) Return(_a0 subscription.Subscription) *MockAPI_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SendAndSubscribeTransactionStatuses_Call) RunAndReturn(run func(context.Context, *flow.TransactionBody, entities.EventEncodingVersion) subscription.Subscription) *MockAPI_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransaction provides a mock function with given fields: ctx, tx
func (_m *MockAPI) SendTransaction(ctx context.Context, tx *flow.TransactionBody) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.TransactionBody) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPI_SendTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransaction'
type MockAPI_SendTransaction_Call struct {
	*mock.Call
}

// SendTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *flow.TransactionBody
func (_e *MockAPI_Expecter) SendTransaction(ctx interface{}, tx interface{}) *MockAPI_SendTransaction_Call {
	return &MockAPI_SendTransaction_Call{Call: _e.mock.On("SendTransaction", ctx, tx)}
}

func (_c *MockAPI_SendTransaction_Call) Run(run func(ctx context.Context, tx *flow.TransactionBody)) *MockAPI_SendTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*flow.TransactionBody))
	})
	return _c
}

func (_c *MockAPI_SendTransaction_Call) Return(_a0 error) *MockAPI_SendTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SendTransaction_Call) RunAndReturn(run func(context.Context, *flow.TransactionBody) error) *MockAPI_SendTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromLatest provides a mock function with given fields: ctx, blockStatus
func (_m *MockAPI) SubscribeBlockDigestsFromLatest(ctx context.Context, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromLatest")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlockDigestsFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromLatest'
type MockAPI_SubscribeBlockDigestsFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlockDigestsFromLatest(ctx interface{}, blockStatus interface{}) *MockAPI_SubscribeBlockDigestsFromLatest_Call {
	return &MockAPI_SubscribeBlockDigestsFromLatest_Call{Call: _e.mock.On("SubscribeBlockDigestsFromLatest", ctx, blockStatus)}
}

func (_c *MockAPI_SubscribeBlockDigestsFromLatest_Call) Run(run func(ctx context.Context, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlockDigestsFromLatest_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlockDigestsFromLatest_Call) RunAndReturn(run func(context.Context, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromStartBlockID provides a mock function with given fields: ctx, startBlockID, blockStatus
func (_m *MockAPI) SubscribeBlockDigestsFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartBlockID")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlockDigestsFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromStartBlockID'
type MockAPI_SubscribeBlockDigestsFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlockDigestsFromStartBlockID(ctx interface{}, startBlockID interface{}, blockStatus interface{}) *MockAPI_SubscribeBlockDigestsFromStartBlockID_Call {
	return &MockAPI_SubscribeBlockDigestsFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlockDigestsFromStartBlockID", ctx, startBlockID, blockStatus)}
}

func (_c *MockAPI_SubscribeBlockDigestsFromStartBlockID_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlockDigestsFromStartBlockID_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlockDigestsFromStartBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromStartHeight provides a mock function with given fields: ctx, startHeight, blockStatus
func (_m *MockAPI) SubscribeBlockDigestsFromStartHeight(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, startHeight, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartHeight")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlockDigestsFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromStartHeight'
type MockAPI_SubscribeBlockDigestsFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - startHeight uint64
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlockDigestsFromStartHeight(ctx interface{}, startHeight interface{}, blockStatus interface{}) *MockAPI_SubscribeBlockDigestsFromStartHeight_Call {
	return &MockAPI_SubscribeBlockDigestsFromStartHeight_Call{Call: _e.mock.On("SubscribeBlockDigestsFromStartHeight", ctx, startHeight, blockStatus)}
}

func (_c *MockAPI_SubscribeBlockDigestsFromStartHeight_Call) Run(run func(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlockDigestsFromStartHeight_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlockDigestsFromStartHeight_Call) RunAndReturn(run func(context.Context, uint64, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromLatest provides a mock function with given fields: ctx, blockStatus
func (_m *MockAPI) SubscribeBlockHeadersFromLatest(ctx context.Context, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromLatest")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlockHeadersFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromLatest'
type MockAPI_SubscribeBlockHeadersFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlockHeadersFromLatest(ctx interface{}, blockStatus interface{}) *MockAPI_SubscribeBlockHeadersFromLatest_Call {
	return &MockAPI_SubscribeBlockHeadersFromLatest_Call{Call: _e.mock.On("SubscribeBlockHeadersFromLatest", ctx, blockStatus)}
}

func (_c *MockAPI_SubscribeBlockHeadersFromLatest_Call) Run(run func(ctx context.Context, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlockHeadersFromLatest_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlockHeadersFromLatest_Call) RunAndReturn(run func(context.Context, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromStartBlockID provides a mock function with given fields: ctx, startBlockID, blockStatus
func (_m *MockAPI) SubscribeBlockHeadersFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartBlockID")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlockHeadersFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromStartBlockID'
type MockAPI_SubscribeBlockHeadersFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlockHeadersFromStartBlockID(ctx interface{}, startBlockID interface{}, blockStatus interface{}) *MockAPI_SubscribeBlockHeadersFromStartBlockID_Call {
	return &MockAPI_SubscribeBlockHeadersFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlockHeadersFromStartBlockID", ctx, startBlockID, blockStatus)}
}

func (_c *MockAPI_SubscribeBlockHeadersFromStartBlockID_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlockHeadersFromStartBlockID_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlockHeadersFromStartBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromStartHeight provides a mock function with given fields: ctx, startHeight, blockStatus
func (_m *MockAPI) SubscribeBlockHeadersFromStartHeight(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, startHeight, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartHeight")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlockHeadersFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromStartHeight'
type MockAPI_SubscribeBlockHeadersFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - startHeight uint64
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlockHeadersFromStartHeight(ctx interface{}, startHeight interface{}, blockStatus interface{}) *MockAPI_SubscribeBlockHeadersFromStartHeight_Call {
	return &MockAPI_SubscribeBlockHeadersFromStartHeight_Call{Call: _e.mock.On("SubscribeBlockHeadersFromStartHeight", ctx, startHeight, blockStatus)}
}

func (_c *MockAPI_SubscribeBlockHeadersFromStartHeight_Call) Run(run func(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlockHeadersFromStartHeight_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlockHeadersFromStartHeight_Call) RunAndReturn(run func(context.Context, uint64, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromLatest provides a mock function with given fields: ctx, blockStatus
func (_m *MockAPI) SubscribeBlocksFromLatest(ctx context.Context, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromLatest")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlocksFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromLatest'
type MockAPI_SubscribeBlocksFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlocksFromLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlocksFromLatest(ctx interface{}, blockStatus interface{}) *MockAPI_SubscribeBlocksFromLatest_Call {
	return &MockAPI_SubscribeBlocksFromLatest_Call{Call: _e.mock.On("SubscribeBlocksFromLatest", ctx, blockStatus)}
}

func (_c *MockAPI_SubscribeBlocksFromLatest_Call) Run(run func(ctx context.Context, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlocksFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlocksFromLatest_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlocksFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlocksFromLatest_Call) RunAndReturn(run func(context.Context, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlocksFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromStartBlockID provides a mock function with given fields: ctx, startBlockID, blockStatus
func (_m *MockAPI) SubscribeBlocksFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartBlockID")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlocksFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromStartBlockID'
type MockAPI_SubscribeBlocksFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlocksFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlocksFromStartBlockID(ctx interface{}, startBlockID interface{}, blockStatus interface{}) *MockAPI_SubscribeBlocksFromStartBlockID_Call {
	return &MockAPI_SubscribeBlocksFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlocksFromStartBlockID", ctx, startBlockID, blockStatus)}
}

func (_c *MockAPI_SubscribeBlocksFromStartBlockID_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlocksFromStartBlockID_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlocksFromStartBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromStartHeight provides a mock function with given fields: ctx, startHeight, blockStatus
func (_m *MockAPI) SubscribeBlocksFromStartHeight(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus) subscription.Subscription {
	ret := _m.Called(ctx, startHeight, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartHeight")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) subscription.Subscription); ok {
		r0 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeBlocksFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromStartHeight'
type MockAPI_SubscribeBlocksFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlocksFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - startHeight uint64
//   - blockStatus flow.BlockStatus
func (_e *MockAPI_Expecter) SubscribeBlocksFromStartHeight(ctx interface{}, startHeight interface{}, blockStatus interface{}) *MockAPI_SubscribeBlocksFromStartHeight_Call {
	return &MockAPI_SubscribeBlocksFromStartHeight_Call{Call: _e.mock.On("SubscribeBlocksFromStartHeight", ctx, startHeight, blockStatus)}
}

func (_c *MockAPI_SubscribeBlocksFromStartHeight_Call) Run(run func(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus)) *MockAPI_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockAPI_SubscribeBlocksFromStartHeight_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeBlocksFromStartHeight_Call) RunAndReturn(run func(context.Context, uint64, flow.BlockStatus) subscription.Subscription) *MockAPI_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeTransactionStatuses provides a mock function with given fields: ctx, txID, requiredEventEncodingVersion
func (_m *MockAPI) SubscribeTransactionStatuses(ctx context.Context, txID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion) subscription.Subscription {
	ret := _m.Called(ctx, txID, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeTransactionStatuses")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) subscription.Subscription); ok {
		r0 = rf(ctx, txID, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeTransactionStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeTransactionStatuses'
type MockAPI_SubscribeTransactionStatuses_Call struct {
	*mock.Call
}

// SubscribeTransactionStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - txID flow.Identifier
//   - requiredEventEncodingVersion entities.EventEncodingVersion
func (_e *MockAPI_Expecter) SubscribeTransactionStatuses(ctx interface{}, txID interface{}, requiredEventEncodingVersion interface{}) *MockAPI_SubscribeTransactionStatuses_Call {
	return &MockAPI_SubscribeTransactionStatuses_Call{Call: _e.mock.On("SubscribeTransactionStatuses", ctx, txID, requiredEventEncodingVersion)}
}

func (_c *MockAPI_SubscribeTransactionStatuses_Call) Run(run func(ctx context.Context, txID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion)) *MockAPI_SubscribeTransactionStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(entities.EventEncodingVersion))
	})
	return _c
}

func (_c *MockAPI_SubscribeTransactionStatuses_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeTransactionStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeTransactionStatuses_Call) RunAndReturn(run func(context.Context, flow.Identifier, entities.EventEncodingVersion) subscription.Subscription) *MockAPI_SubscribeTransactionStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPI creates a new instance of MockAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPI {
	mock := &MockAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
