// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"

	mock "github.com/stretchr/testify/mock"
)

// EventsAPI is an autogenerated mock type for the EventsAPI type
type EventsAPI struct {
	mock.Mock
}

// GetEventsForBlockIDs provides a mock function with given fields: ctx, eventType, blockIDs, requiredEventEncodingVersion
func (_m *EventsAPI) GetEventsForBlockIDs(ctx context.Context, eventType string, blockIDs []flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion) ([]flow.BlockEvents, error) {
	ret := _m.Called(ctx, eventType, blockIDs, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForBlockIDs")
	}

	var r0 []flow.BlockEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []flow.Identifier, entities.EventEncodingVersion) ([]flow.BlockEvents, error)); ok {
		return rf(ctx, eventType, blockIDs, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []flow.Identifier, entities.EventEncodingVersion) []flow.BlockEvents); ok {
		r0 = rf(ctx, eventType, blockIDs, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, eventType, blockIDs, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsForHeightRange provides a mock function with given fields: ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion
func (_m *EventsAPI) GetEventsForHeightRange(ctx context.Context, eventType string, startHeight uint64, endHeight uint64, requiredEventEncodingVersion entities.EventEncodingVersion) ([]flow.BlockEvents, error) {
	ret := _m.Called(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForHeightRange")
	}

	var r0 []flow.BlockEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, entities.EventEncodingVersion) ([]flow.BlockEvents, error)); ok {
		return rf(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64, entities.EventEncodingVersion) []flow.BlockEvents); ok {
		r0 = rf(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, eventType, startHeight, endHeight, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventsAPI creates a new instance of EventsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventsAPI {
	mock := &EventsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
