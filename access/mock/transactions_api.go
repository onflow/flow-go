// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"

	mock "github.com/stretchr/testify/mock"

	modelaccess "github.com/onflow/flow-go/model/access"
)

// TransactionsAPI is an autogenerated mock type for the TransactionsAPI type
type TransactionsAPI struct {
	mock.Mock
}

// GetScheduledTransaction provides a mock function with given fields: ctx, scheduledTxID
func (_m *TransactionsAPI) GetScheduledTransaction(ctx context.Context, scheduledTxID uint64) (*flow.TransactionBody, error) {
	ret := _m.Called(ctx, scheduledTxID)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledTransaction")
	}

	var r0 *flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.TransactionBody, error)); ok {
		return rf(ctx, scheduledTxID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.TransactionBody); ok {
		r0 = rf(ctx, scheduledTxID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, scheduledTxID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduledTransactionResult provides a mock function with given fields: ctx, scheduledTxID, encodingVersion
func (_m *TransactionsAPI) GetScheduledTransactionResult(ctx context.Context, scheduledTxID uint64, encodingVersion entities.EventEncodingVersion) (*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, scheduledTxID, encodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledTransactionResult")
	}

	var r0 *modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, scheduledTxID, encodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.EventEncodingVersion) *modelaccess.TransactionResult); ok {
		r0 = rf(ctx, scheduledTxID, encodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, scheduledTxID, encodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemTransaction provides a mock function with given fields: ctx, txID, blockID
func (_m *TransactionsAPI) GetSystemTransaction(ctx context.Context, txID flow.Identifier, blockID flow.Identifier) (*flow.TransactionBody, error) {
	ret := _m.Called(ctx, txID, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransaction")
	}

	var r0 *flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier) (*flow.TransactionBody, error)); ok {
		return rf(ctx, txID, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier) *flow.TransactionBody); ok {
		r0 = rf(ctx, txID, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.Identifier) error); ok {
		r1 = rf(ctx, txID, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemTransactionResult provides a mock function with given fields: ctx, txID, blockID, encodingVersion
func (_m *TransactionsAPI) GetSystemTransactionResult(ctx context.Context, txID flow.Identifier, blockID flow.Identifier, encodingVersion entities.EventEncodingVersion) (*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, txID, blockID, encodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransactionResult")
	}

	var r0 *modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, txID, blockID, encodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) *modelaccess.TransactionResult); ok {
		r0 = rf(ctx, txID, blockID, encodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, txID, blockID, encodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionsAPI) GetTransaction(ctx context.Context, id flow.Identifier) (*flow.TransactionBody, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.TransactionBody, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.TransactionBody); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResult provides a mock function with given fields: ctx, txID, blockID, collectionID, encodingVersion
func (_m *TransactionsAPI) GetTransactionResult(ctx context.Context, txID flow.Identifier, blockID flow.Identifier, collectionID flow.Identifier, encodingVersion entities.EventEncodingVersion) (*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, txID, blockID, collectionID, encodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, txID, blockID, collectionID, encodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) *modelaccess.TransactionResult); ok {
		r0 = rf(ctx, txID, blockID, collectionID, encodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.Identifier, flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, txID, blockID, collectionID, encodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResultByIndex provides a mock function with given fields: ctx, blockID, index, encodingVersion
func (_m *TransactionsAPI) GetTransactionResultByIndex(ctx context.Context, blockID flow.Identifier, index uint32, encodingVersion entities.EventEncodingVersion) (*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, blockID, index, encodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultByIndex")
	}

	var r0 *modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint32, entities.EventEncodingVersion) (*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, blockID, index, encodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint32, entities.EventEncodingVersion) *modelaccess.TransactionResult); ok {
		r0 = rf(ctx, blockID, index, encodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, uint32, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, blockID, index, encodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResultsByBlockID provides a mock function with given fields: ctx, blockID, encodingVersion
func (_m *TransactionsAPI) GetTransactionResultsByBlockID(ctx context.Context, blockID flow.Identifier, encodingVersion entities.EventEncodingVersion) ([]*modelaccess.TransactionResult, error) {
	ret := _m.Called(ctx, blockID, encodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultsByBlockID")
	}

	var r0 []*modelaccess.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) ([]*modelaccess.TransactionResult, error)); ok {
		return rf(ctx, blockID, encodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) []*modelaccess.TransactionResult); ok {
		r0 = rf(ctx, blockID, encodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modelaccess.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, blockID, encodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByBlockID provides a mock function with given fields: ctx, blockID
func (_m *TransactionsAPI) GetTransactionsByBlockID(ctx context.Context, blockID flow.Identifier) ([]*flow.TransactionBody, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByBlockID")
	}

	var r0 []*flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]*flow.TransactionBody, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []*flow.TransactionBody); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTransaction provides a mock function with given fields: ctx, tx
func (_m *TransactionsAPI) SendTransaction(ctx context.Context, tx *flow.TransactionBody) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.TransactionBody) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionsAPI creates a new instance of TransactionsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionsAPI {
	mock := &TransactionsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
