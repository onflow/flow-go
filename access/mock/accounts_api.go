// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow-go/model/access"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
)

// AccountsAPI is an autogenerated mock type for the AccountsAPI type
type AccountsAPI struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: ctx, address, criteria
func (_m *AccountsAPI) GetAccount(ctx context.Context, address flow.Address, criteria optimistic_sync.Criteria) (*flow.Account, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, address, criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, optimistic_sync.Criteria) (*flow.Account, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, address, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, optimistic_sync.Criteria) *flow.Account); ok {
		r0 = rf(ctx, address, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, optimistic_sync.Criteria) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, address, criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Address, optimistic_sync.Criteria) error); ok {
		r2 = rf(ctx, address, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAccountAtBlockHeight provides a mock function with given fields: ctx, address, height, criteria
func (_m *AccountsAPI) GetAccountAtBlockHeight(ctx context.Context, address flow.Address, height uint64, criteria optimistic_sync.Criteria) (*flow.Account, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, address, height, criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockHeight")
	}

	var r0 *flow.Account
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64, optimistic_sync.Criteria) (*flow.Account, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, address, height, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64, optimistic_sync.Criteria) *flow.Account); ok {
		r0 = rf(ctx, address, height, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64, optimistic_sync.Criteria) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, address, height, criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Address, uint64, optimistic_sync.Criteria) error); ok {
		r2 = rf(ctx, address, height, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAccountAtLatestBlock provides a mock function with given fields: ctx, address, criteria
func (_m *AccountsAPI) GetAccountAtLatestBlock(ctx context.Context, address flow.Address, criteria optimistic_sync.Criteria) (*flow.Account, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, address, criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtLatestBlock")
	}

	var r0 *flow.Account
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, optimistic_sync.Criteria) (*flow.Account, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, address, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, optimistic_sync.Criteria) *flow.Account); ok {
		r0 = rf(ctx, address, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, optimistic_sync.Criteria) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, address, criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Address, optimistic_sync.Criteria) error); ok {
		r2 = rf(ctx, address, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAccountBalanceAtBlockHeight provides a mock function with given fields: ctx, address, height
func (_m *AccountsAPI) GetAccountBalanceAtBlockHeight(ctx context.Context, address flow.Address, height uint64) (uint64, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (uint64, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) uint64); ok {
		r0 = rf(ctx, address, height)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBalanceAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *AccountsAPI) GetAccountBalanceAtLatestBlock(ctx context.Context, address flow.Address) (uint64, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtLatestBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (uint64, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) uint64); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeyAtBlockHeight provides a mock function with given fields: ctx, address, keyIndex, height
func (_m *AccountsAPI) GetAccountKeyAtBlockHeight(ctx context.Context, address flow.Address, keyIndex uint32, height uint64) (*flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, keyIndex, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtBlockHeight")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) (*flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, keyIndex, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, keyIndex, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32, uint64) error); ok {
		r1 = rf(ctx, address, keyIndex, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeyAtLatestBlock provides a mock function with given fields: ctx, address, keyIndex
func (_m *AccountsAPI) GetAccountKeyAtLatestBlock(ctx context.Context, address flow.Address, keyIndex uint32) (*flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, keyIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtLatestBlock")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32) (*flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, keyIndex)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32) error); ok {
		r1 = rf(ctx, address, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeysAtBlockHeight provides a mock function with given fields: ctx, address, height
func (_m *AccountsAPI) GetAccountKeysAtBlockHeight(ctx context.Context, address flow.Address, height uint64) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtBlockHeight")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) ([]flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeysAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *AccountsAPI) GetAccountKeysAtLatestBlock(ctx context.Context, address flow.Address) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtLatestBlock")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) ([]flow.AccountPublicKey, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountsAPI creates a new instance of AccountsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountsAPI {
	mock := &AccountsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
