// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow-go/model/access"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
)

// ScriptsAPI is an autogenerated mock type for the ScriptsAPI type
type ScriptsAPI struct {
	mock.Mock
}

// ExecuteScriptAtBlockHeight provides a mock function with given fields: ctx, blockHeight, script, arguments, criteria
func (_m *ScriptsAPI) ExecuteScriptAtBlockHeight(ctx context.Context, blockHeight uint64, script []byte, arguments [][]byte, criteria optimistic_sync.Criteria) ([]byte, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, blockHeight, script, arguments, criteria)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockHeight")
	}

	var r0 []byte
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte, [][]byte, optimistic_sync.Criteria) ([]byte, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, blockHeight, script, arguments, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte, [][]byte, optimistic_sync.Criteria) []byte); ok {
		r0 = rf(ctx, blockHeight, script, arguments, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []byte, [][]byte, optimistic_sync.Criteria) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, blockHeight, script, arguments, criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, []byte, [][]byte, optimistic_sync.Criteria) error); ok {
		r2 = rf(ctx, blockHeight, script, arguments, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecuteScriptAtBlockID provides a mock function with given fields: ctx, blockID, script, arguments, criteria
func (_m *ScriptsAPI) ExecuteScriptAtBlockID(ctx context.Context, blockID flow.Identifier, script []byte, arguments [][]byte, criteria optimistic_sync.Criteria) ([]byte, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, blockID, script, arguments, criteria)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 []byte
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, [][]byte, optimistic_sync.Criteria) ([]byte, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, blockID, script, arguments, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, [][]byte, optimistic_sync.Criteria) []byte); ok {
		r0 = rf(ctx, blockID, script, arguments, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, []byte, [][]byte, optimistic_sync.Criteria) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, blockID, script, arguments, criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier, []byte, [][]byte, optimistic_sync.Criteria) error); ok {
		r2 = rf(ctx, blockID, script, arguments, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecuteScriptAtLatestBlock provides a mock function with given fields: ctx, script, arguments, criteria
func (_m *ScriptsAPI) ExecuteScriptAtLatestBlock(ctx context.Context, script []byte, arguments [][]byte, criteria optimistic_sync.Criteria) ([]byte, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, script, arguments, criteria)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtLatestBlock")
	}

	var r0 []byte
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, optimistic_sync.Criteria) ([]byte, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, script, arguments, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, optimistic_sync.Criteria) []byte); ok {
		r0 = rf(ctx, script, arguments, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, [][]byte, optimistic_sync.Criteria) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, script, arguments, criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, [][]byte, optimistic_sync.Criteria) error); ok {
		r2 = rf(ctx, script, arguments, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewScriptsAPI creates a new instance of ScriptsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScriptsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScriptsAPI {
	mock := &ScriptsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
