// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"

	mock "github.com/stretchr/testify/mock"

	subscription "github.com/onflow/flow-go/engine/access/subscription"
)

// TransactionStreamAPI is an autogenerated mock type for the TransactionStreamAPI type
type TransactionStreamAPI struct {
	mock.Mock
}

// SendAndSubscribeTransactionStatuses provides a mock function with given fields: ctx, tx, requiredEventEncodingVersion
func (_m *TransactionStreamAPI) SendAndSubscribeTransactionStatuses(ctx context.Context, tx *flow.TransactionBody, requiredEventEncodingVersion entities.EventEncodingVersion) subscription.Subscription {
	ret := _m.Called(ctx, tx, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for SendAndSubscribeTransactionStatuses")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *flow.TransactionBody, entities.EventEncodingVersion) subscription.Subscription); ok {
		r0 = rf(ctx, tx, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// SubscribeTransactionStatuses provides a mock function with given fields: ctx, txID, requiredEventEncodingVersion
func (_m *TransactionStreamAPI) SubscribeTransactionStatuses(ctx context.Context, txID flow.Identifier, requiredEventEncodingVersion entities.EventEncodingVersion) subscription.Subscription {
	ret := _m.Called(ctx, txID, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeTransactionStatuses")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, entities.EventEncodingVersion) subscription.Subscription); ok {
		r0 = rf(ctx, txID, requiredEventEncodingVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// NewTransactionStreamAPI creates a new instance of TransactionStreamAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionStreamAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionStreamAPI {
	mock := &TransactionStreamAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
