name: CI

on:
  push:
    branches:
      - 'auto-cadence-upgrade/**'
      - staging
      - trying
      - 'feature/**'
      - 'v[0-9]+.[0-9]+'
  pull_request:
    branches:
      - master
      - 'auto-cadence-upgrade/**'
      - 'feature/**'
      - 'v[0-9]+.[0-9]+'

env:
  GO_VERSION: 1.18

concurrency: 
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  golangci:
    strategy:
      fail-fast: false
      matrix:
        dir: [./, ./integration/, ./crypto/]
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Build relic
      run: make crypto_setup_gopath
    - name: Run go generate
      run: go generate
      working-directory: ${{ matrix.dir }}
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
        version: v1.47
        args: -v --build-tags relic
        working-directory: ${{ matrix.dir }}
        # https://github.com/golangci/golangci-lint-action/issues/244
        skip-cache: true

  shell-check:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@203a3fd018dfe73f8ae7e3aa8da2c149a5f41c33
      with:
        scandir: './crypto'
        ignore: 'relic'

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Run tests
      if: github.actor != 'bors[bot]'
      run: make ci
      env:
        RACE_DETECTOR: 1
    - name: Run tests (Bors)
      if: github.actor == 'bors[bot]'
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 25
        max_attempts: 3
        command: make ci
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  integration-test:
    name: Integration Tests
    strategy:
      fail-fast: false
      matrix:
        test-category:
          - integration-bft
          - integration-mvp
          - integration-ghost
          - integration-network
          - integration-epochs
          - integration-access
          - integration-collection
          - integration-consensus
          - integration-execution
          - integration-verification
    env:
      TEST_CATEGORY: ${{ matrix.test-category }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Build relic
      run: make crypto_setup_gopath
    - name: Docker build
      run: make docker-build-flow
    - name: Run tests
      if: github.actor != 'bors[bot]'
      run: ./tools/test_monitor/run-tests.sh
      env:
        RACE_DETECTOR: 1
    - name: Run tests (Bors)
      if: github.actor == 'bors[bot]'
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 15
        max_attempts: 2
        command: ./tools/test_monitor/run-tests.sh

  localnet-test:
    name: Localnet Compatibility Tests With Flow-CLI Client and Observer
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Build relic and other tools
      run: make install-tools
    - name: Install Flow Client In Docker
      # This proved to be more reliable than installing it locally.
      run: cd integration/localnet && sh client/client.sh
    - name: Set up Localnet
      run: bash -c 'cd integration/localnet/ && make -e OBSERVER=2 init && make start'
    - name: Ensure Observer is started
      run: docker ps -f name=localnet_observer_1_1 | grep localnet_observer
    - name: Get Client Version ensuring the client is provisioned
      run: docker run --network host localnet-client /go/flow -f /go/flow-localnet.json -n observer version
    - name: Wait for a default waiting period until a clean state
      # This will not cause flakiness.
      # The waiting time is a reasonable time to expect an observer to be responsive
      run: sleep 10
    - name: Get Status ensuring the access endpoint is online
      run: docker run --network host localnet-client /go/flow -f /go/flow-localnet.json -n access status
    - name: Wait for finalized blocks and check them
      run: docker run --network host localnet-client /go/flow -f /go/flow-localnet.json -n observer blocks get latest
    - name: Wait for finalized blocks and check them with Observer
      run: sleep 5 && docker run --network host localnet-client /go/flow -f /go/flow-localnet.json -n access blocks get latest && docker run --network host localnet-client /go/flow -f /go/flow-localnet.json -n observer blocks get latest
    - name: Stop localnet
      run: bash -c 'cd integration/localnet/ && make stop'
