---
description: 
globs: *.go
alwaysApply: false
---
# Go Documentation Rule

## General Guidance

- Add godocs comments for all types, variables, constants, functions, and interfaces.
- Begin with the name of the entity.
- Use complete sentences.
- **ALL** methods that return an error **MUST** document expected error conditions!
- When updating existing code, if godocs exist, keep the existing content and improve formating/expand with additional details to conform with these rules.
- If any details are unclear, **DO NOT make something up**. Add a TODO to fill in the missing details or ask the user for clarification.

## Method Rules
```go
// MethodName performs a specific action or returns specific information.
// 
// Parameters:
//   - param1: description of param1
//   - param2: description of param2
//
// Returns:
//   - return1: description of return1
//   - return2: description of return2
//
// Expected Errors:
//   - ErrType1: when and why this error occurs
//   - ErrType2: when and why this error occurs
//   - All other errors are unexpected and potential indicators of bugs or corrupted internal state
//
// Concurrency safety:
//   - Safe for concurrent access
//   - Not safe for concurrent access
```

1. **Method Description**
   - First line must be a complete sentence describing what the method does
   - Use present tense
   - Start with the method name
   - End with a period
   - Example: `// AddReceipt adds the given execution receipt to the container.`

2. **Parameters**
   - List all parameters with their types
   - Describe the purpose and any constraints
   - Use bullet points for clarity
   - Example:
     ```go
     // Parameters:
     //   - receipt: the execution receipt to add
     //   - block: the block header associated with the receipt
     ```

3. **Returns**
   - List all return values
   - Describe the meaning of each return value
   - Use bullet points for clarity
   - Example:
     ```go
     // Returns:
     //   - bool: true if the receipt was added, false if it already existed
     //   - error: any error that occurred during the operation
     ```

4. **Error Returns**
   - List all expected errors (sentinel errors)
   - **DO NOT make up sentinel errors**. Only document errors that are returned by the method. If you don't know, add a TODO for the user to complete.
   - Describe when and why each error occurs
   - Always include a catch-all for unexpected errors
   - Example:
     ```go
     // Expected Errors:
     //   - ErrInvalidReceipt: when the receipt is malformed
     //   - ErrDuplicateReceipt: when the receipt already exists
     //   - All other errors are unexpected and potential indicators of bugs or corrupted internal state
     ```
   - If there are no expected errors, use:
     ```go
     // No errors are expected during normal operation.
     ```

5. **Concurrency Safety**
   - Explicitly state whether the method is safe for concurrent access
   - If not thread-safe, explain why
   - If all methods are thread-safe, only document this in the struct godocs and mention that all methods are thread-safe. Do not include the line in each 
   - Example:
     ```go
     // Concurrency safety:
     //   - Safe for concurrent access
     ```

8. **Special Cases**
   - For getters/setters, use simplified format:
     ```go
     // GetterName returns the value of the field.
     // Returns:
     //   - value: description of the returned value
     ```
   - For constructors, use:
     ```go
     // NewTypeName creates a new instance of TypeName.
     // Parameters:
     //   - param1: description of param1
     // Returns:
     //   - *TypeName: the newly created instance
     //   - error: any error that occurred during creation
     ```

10. **Private Methods**
    - Private methods should still be documented
    - Can use more technical language
    - Focus on implementation details
    - Must include error documention for any method that returns an error

## Examples

### Standard Method
```go
// AddReceipt adds the given execution receipt to the container.
//
// Parameters:
//   - receipt: the execution receipt to add
//   - block: the block header associated with the receipt
//
// Returns:
//   - bool: true if the receipt was added, false if it already existed
//   - error: any error that occurred during the operation
//
// Error returns:
//   - ErrInvalidReceipt: when the receipt is malformed
//   - ErrDuplicateReceipt: when the receipt already exists
//   - All other errors are unexpected and potential indicators of corrupted internal state
//
// Concurrency safety:
//   - Safe for concurrent access
```

### Getter Method
```go
// Pipeline returns the pipeline associated with this execution result container.
//
// Returns:
//   - *Pipeline: the associated pipeline, or nil if no pipeline is set
//
// Concurrency safety:
//   - Safe for concurrent access
```

### Constructor
```go
// NewExecutionResultContainer creates a new instance of ExecutionResultContainer.
//
// Parameters:
//   - result: the execution result to store
//   - block: the block header associated with the result
//   - pipeline: the pipeline to process the result
//
// Returns:
//   - *ExecutionResultContainer: the newly created container
//   - error: any error that occurred during creation
//
// Expected Errors:
//   - ErrInvalidBlock: when the block ID doesn't match the result's block ID
//   - All other errors are unexpected and potential indicators of corrupted internal state
```

## Interface Documentation
1. **Interface Description**
   - Start with the interface name
   - Describe the purpose and behavior of the interface
   - Explain any invariants or guarantees the interface provides
   - Example:
     ```go
     // Executor defines the interface for executing transactions.
     // Implementations must guarantee thread-safety and handle all error cases.
     type Executor interface {
         // ... methods ...
     }
     ```

2. **Interface Methods**
   - Document each method in the interface
   - Focus on the contract/behavior rather than implementation details
   - Include error documentation for methods that return errors
   - Example:
     ```go
     // Execute processes the given transaction and returns the result.
     // The method must be idempotent and handle all error cases gracefully.
     //
     // Parameters:
     //   - tx: the transaction to execute
     //
     // Returns:
     //   - *Result: the execution result
     //   - error: any error that occurred during execution
     //
     // Expected Errors:
     //   - ErrInvalidTransaction: when the transaction is malformed
     //   - ErrExecutionFailed: when the transaction execution fails
     Execute(tx *Transaction) (*Result, error)
     ```

## Constants and Variables
1. **Constants**
   - Document the purpose and usage of each constant
   - Include any constraints or invariants
   - Example:
     ```go
     // MaxBlockSize defines the maximum size of a block in bytes.
     // This value must be a power of 2 and cannot be changed after initialization.
     const MaxBlockSize = 1024 * 1024
     ```

2. **Variables**
   - Document the purpose and lifecycle of each variable
   - Include any thread-safety considerations
   - Example:
     ```go
     // defaultConfig holds the default configuration for the system.
     // This variable is read-only after initialization and safe for concurrent access.
     var defaultConfig = &Config{
         // ... fields ...
     }
     ```

## Type Documentation
1. **Type Description**
   - Start with the type name
   - Describe the purpose and behavior of the type
   - Include any invariants or guarantees
   - Example:
     ```go
     // Block represents a block in the Flow blockchain.
     // Blocks are immutable once created and contain a list of transactions.
     // All exported methods are safe for concurrent access.
     type Block struct {
         // ... fields ...
     }
     ```

2. **Type Fields**
   - Document each field with its purpose and constraints
   - Include any thread-safety considerations
   - Example:
     ```go
     type Block struct {
         // Header contains the block's metadata and cryptographic commitments.
         // This field is immutable after block creation.
         Header *BlockHeader

         // Payload contains the block's transactions and execution results.
         // This field is immutable after block creation.
         Payload *BlockPayload

         // Signature is the cryptographic signature of the block proposer.
         // This field must be set before the block is considered valid.
         Signature []byte
     }
     ```

3. **Type Methods**
   - Document each method following the method documentation rules
   - Include error documentation for methods that return errors

This rule ensures consistent, comprehensive documentation across all Go methods in the codebase, making it easier for developers to understand and use the code correctly.