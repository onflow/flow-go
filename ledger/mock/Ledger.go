// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	ledger "github.com/onflow/flow-go/ledger"
	mock "github.com/stretchr/testify/mock"
)

// MockLedger is an autogenerated mock type for the Ledger type
type MockLedger struct {
	mock.Mock
}

type MockLedger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLedger) EXPECT() *MockLedger_Expecter {
	return &MockLedger_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockLedger) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockLedger_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockLedger_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockLedger_Expecter) Done() *MockLedger_Done_Call {
	return &MockLedger_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockLedger_Done_Call) Run(run func()) *MockLedger_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLedger_Done_Call) Return(_a0 <-chan struct{}) *MockLedger_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLedger_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockLedger_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: query
func (_m *MockLedger) Get(query *ledger.Query) ([]ledger.Value, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []ledger.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(*ledger.Query) ([]ledger.Value, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*ledger.Query) []ledger.Value); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ledger.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(*ledger.Query) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLedger_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLedger_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - query *ledger.Query
func (_e *MockLedger_Expecter) Get(query interface{}) *MockLedger_Get_Call {
	return &MockLedger_Get_Call{Call: _e.mock.On("Get", query)}
}

func (_c *MockLedger_Get_Call) Run(run func(query *ledger.Query)) *MockLedger_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ledger.Query))
	})
	return _c
}

func (_c *MockLedger_Get_Call) Return(values []ledger.Value, err error) *MockLedger_Get_Call {
	_c.Call.Return(values, err)
	return _c
}

func (_c *MockLedger_Get_Call) RunAndReturn(run func(*ledger.Query) ([]ledger.Value, error)) *MockLedger_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetSingleValue provides a mock function with given fields: query
func (_m *MockLedger) GetSingleValue(query *ledger.QuerySingleValue) (ledger.Value, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetSingleValue")
	}

	var r0 ledger.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(*ledger.QuerySingleValue) (ledger.Value, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*ledger.QuerySingleValue) ledger.Value); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(*ledger.QuerySingleValue) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLedger_GetSingleValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSingleValue'
type MockLedger_GetSingleValue_Call struct {
	*mock.Call
}

// GetSingleValue is a helper method to define mock.On call
//   - query *ledger.QuerySingleValue
func (_e *MockLedger_Expecter) GetSingleValue(query interface{}) *MockLedger_GetSingleValue_Call {
	return &MockLedger_GetSingleValue_Call{Call: _e.mock.On("GetSingleValue", query)}
}

func (_c *MockLedger_GetSingleValue_Call) Run(run func(query *ledger.QuerySingleValue)) *MockLedger_GetSingleValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ledger.QuerySingleValue))
	})
	return _c
}

func (_c *MockLedger_GetSingleValue_Call) Return(value ledger.Value, err error) *MockLedger_GetSingleValue_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockLedger_GetSingleValue_Call) RunAndReturn(run func(*ledger.QuerySingleValue) (ledger.Value, error)) *MockLedger_GetSingleValue_Call {
	_c.Call.Return(run)
	return _c
}

// HasState provides a mock function with given fields: state
func (_m *MockLedger) HasState(state ledger.State) bool {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for HasState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(ledger.State) bool); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockLedger_HasState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasState'
type MockLedger_HasState_Call struct {
	*mock.Call
}

// HasState is a helper method to define mock.On call
//   - state ledger.State
func (_e *MockLedger_Expecter) HasState(state interface{}) *MockLedger_HasState_Call {
	return &MockLedger_HasState_Call{Call: _e.mock.On("HasState", state)}
}

func (_c *MockLedger_HasState_Call) Run(run func(state ledger.State)) *MockLedger_HasState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ledger.State))
	})
	return _c
}

func (_c *MockLedger_HasState_Call) Return(_a0 bool) *MockLedger_HasState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLedger_HasState_Call) RunAndReturn(run func(ledger.State) bool) *MockLedger_HasState_Call {
	_c.Call.Return(run)
	return _c
}

// InitialState provides a mock function with no fields
func (_m *MockLedger) InitialState() ledger.State {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitialState")
	}

	var r0 ledger.State
	if rf, ok := ret.Get(0).(func() ledger.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.State)
		}
	}

	return r0
}

// MockLedger_InitialState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitialState'
type MockLedger_InitialState_Call struct {
	*mock.Call
}

// InitialState is a helper method to define mock.On call
func (_e *MockLedger_Expecter) InitialState() *MockLedger_InitialState_Call {
	return &MockLedger_InitialState_Call{Call: _e.mock.On("InitialState")}
}

func (_c *MockLedger_InitialState_Call) Run(run func()) *MockLedger_InitialState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLedger_InitialState_Call) Return(_a0 ledger.State) *MockLedger_InitialState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLedger_InitialState_Call) RunAndReturn(run func() ledger.State) *MockLedger_InitialState_Call {
	_c.Call.Return(run)
	return _c
}

// Prove provides a mock function with given fields: query
func (_m *MockLedger) Prove(query *ledger.Query) (ledger.Proof, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Prove")
	}

	var r0 ledger.Proof
	var r1 error
	if rf, ok := ret.Get(0).(func(*ledger.Query) (ledger.Proof, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*ledger.Query) ledger.Proof); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.Proof)
		}
	}

	if rf, ok := ret.Get(1).(func(*ledger.Query) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLedger_Prove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prove'
type MockLedger_Prove_Call struct {
	*mock.Call
}

// Prove is a helper method to define mock.On call
//   - query *ledger.Query
func (_e *MockLedger_Expecter) Prove(query interface{}) *MockLedger_Prove_Call {
	return &MockLedger_Prove_Call{Call: _e.mock.On("Prove", query)}
}

func (_c *MockLedger_Prove_Call) Run(run func(query *ledger.Query)) *MockLedger_Prove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ledger.Query))
	})
	return _c
}

func (_c *MockLedger_Prove_Call) Return(proof ledger.Proof, err error) *MockLedger_Prove_Call {
	_c.Call.Return(proof, err)
	return _c
}

func (_c *MockLedger_Prove_Call) RunAndReturn(run func(*ledger.Query) (ledger.Proof, error)) *MockLedger_Prove_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockLedger) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockLedger_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockLedger_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockLedger_Expecter) Ready() *MockLedger_Ready_Call {
	return &MockLedger_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockLedger_Ready_Call) Run(run func()) *MockLedger_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLedger_Ready_Call) Return(_a0 <-chan struct{}) *MockLedger_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLedger_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockLedger_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: update
func (_m *MockLedger) Set(update *ledger.Update) (ledger.State, *ledger.TrieUpdate, error) {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 ledger.State
	var r1 *ledger.TrieUpdate
	var r2 error
	if rf, ok := ret.Get(0).(func(*ledger.Update) (ledger.State, *ledger.TrieUpdate, error)); ok {
		return rf(update)
	}
	if rf, ok := ret.Get(0).(func(*ledger.Update) ledger.State); ok {
		r0 = rf(update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.State)
		}
	}

	if rf, ok := ret.Get(1).(func(*ledger.Update) *ledger.TrieUpdate); ok {
		r1 = rf(update)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ledger.TrieUpdate)
		}
	}

	if rf, ok := ret.Get(2).(func(*ledger.Update) error); ok {
		r2 = rf(update)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLedger_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockLedger_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - update *ledger.Update
func (_e *MockLedger_Expecter) Set(update interface{}) *MockLedger_Set_Call {
	return &MockLedger_Set_Call{Call: _e.mock.On("Set", update)}
}

func (_c *MockLedger_Set_Call) Run(run func(update *ledger.Update)) *MockLedger_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ledger.Update))
	})
	return _c
}

func (_c *MockLedger_Set_Call) Return(newState ledger.State, trieUpdate *ledger.TrieUpdate, err error) *MockLedger_Set_Call {
	_c.Call.Return(newState, trieUpdate, err)
	return _c
}

func (_c *MockLedger_Set_Call) RunAndReturn(run func(*ledger.Update) (ledger.State, *ledger.TrieUpdate, error)) *MockLedger_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLedger creates a new instance of MockLedger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLedger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLedger {
	mock := &MockLedger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
