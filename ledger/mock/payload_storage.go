// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	ledger "github.com/onflow/flow-go/ledger"
	hash "github.com/onflow/flow-go/ledger/common/hash"

	mock "github.com/stretchr/testify/mock"
)

// PayloadStorage is an autogenerated mock type for the PayloadStorage type
type PayloadStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *PayloadStorage) Add(_a0 []ledger.LeafNode) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]ledger.LeafNode) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *PayloadStorage) Get(_a0 hash.Hash) (ledger.Path, *ledger.Payload, error) {
	ret := _m.Called(_a0)

	var r0 ledger.Path
	if rf, ok := ret.Get(0).(func(hash.Hash) ledger.Path); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ledger.Path)
		}
	}

	var r1 *ledger.Payload
	if rf, ok := ret.Get(1).(func(hash.Hash) *ledger.Payload); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ledger.Payload)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(hash.Hash) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewPayloadStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewPayloadStorage creates a new instance of PayloadStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPayloadStorage(t mockConstructorTestingTNewPayloadStorage) *PayloadStorage {
	mock := &PayloadStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
