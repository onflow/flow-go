// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	ledger "github.com/onflow/flow-go/ledger"
	mock "github.com/stretchr/testify/mock"
)

// MockReporter is an autogenerated mock type for the Reporter type
type MockReporter struct {
	mock.Mock
}

type MockReporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReporter) EXPECT() *MockReporter_Expecter {
	return &MockReporter_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with no fields
func (_m *MockReporter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockReporter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockReporter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockReporter_Expecter) Name() *MockReporter_Name_Call {
	return &MockReporter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockReporter_Name_Call) Run(run func()) *MockReporter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReporter_Name_Call) Return(_a0 string) *MockReporter_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReporter_Name_Call) RunAndReturn(run func() string) *MockReporter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function with given fields: payloads, statecommitment
func (_m *MockReporter) Report(payloads []ledger.Payload, statecommitment ledger.State) error {
	ret := _m.Called(payloads, statecommitment)

	if len(ret) == 0 {
		panic("no return value specified for Report")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]ledger.Payload, ledger.State) error); ok {
		r0 = rf(payloads, statecommitment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReporter_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type MockReporter_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
//   - payloads []ledger.Payload
//   - statecommitment ledger.State
func (_e *MockReporter_Expecter) Report(payloads interface{}, statecommitment interface{}) *MockReporter_Report_Call {
	return &MockReporter_Report_Call{Call: _e.mock.On("Report", payloads, statecommitment)}
}

func (_c *MockReporter_Report_Call) Run(run func(payloads []ledger.Payload, statecommitment ledger.State)) *MockReporter_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]ledger.Payload), args[1].(ledger.State))
	})
	return _c
}

func (_c *MockReporter_Report_Call) Return(_a0 error) *MockReporter_Report_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReporter_Report_Call) RunAndReturn(run func([]ledger.Payload, ledger.State) error) *MockReporter_Report_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReporter creates a new instance of MockReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReporter {
	mock := &MockReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
