// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	ledger "github.com/onflow/flow-go/ledger"
	mock "github.com/stretchr/testify/mock"
)

// MockMigration is an autogenerated mock type for the Migration type
type MockMigration struct {
	mock.Mock
}

type MockMigration_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMigration) EXPECT() *MockMigration_Expecter {
	return &MockMigration_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: payloads
func (_m *MockMigration) Execute(payloads []*ledger.Payload) ([]*ledger.Payload, error) {
	ret := _m.Called(payloads)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []*ledger.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func([]*ledger.Payload) ([]*ledger.Payload, error)); ok {
		return rf(payloads)
	}
	if rf, ok := ret.Get(0).(func([]*ledger.Payload) []*ledger.Payload); ok {
		r0 = rf(payloads)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ledger.Payload)
		}
	}

	if rf, ok := ret.Get(1).(func([]*ledger.Payload) error); ok {
		r1 = rf(payloads)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMigration_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockMigration_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - payloads []*ledger.Payload
func (_e *MockMigration_Expecter) Execute(payloads interface{}) *MockMigration_Execute_Call {
	return &MockMigration_Execute_Call{Call: _e.mock.On("Execute", payloads)}
}

func (_c *MockMigration_Execute_Call) Run(run func(payloads []*ledger.Payload)) *MockMigration_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*ledger.Payload))
	})
	return _c
}

func (_c *MockMigration_Execute_Call) Return(_a0 []*ledger.Payload, _a1 error) *MockMigration_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMigration_Execute_Call) RunAndReturn(run func([]*ledger.Payload) ([]*ledger.Payload, error)) *MockMigration_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMigration creates a new instance of MockMigration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMigration(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMigration {
	mock := &MockMigration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
