// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockFingerprinter is an autogenerated mock type for the Fingerprinter type
type MockFingerprinter struct {
	mock.Mock
}

type MockFingerprinter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFingerprinter) EXPECT() *MockFingerprinter_Expecter {
	return &MockFingerprinter_Expecter{mock: &_m.Mock}
}

// Fingerprint provides a mock function with no fields
func (_m *MockFingerprinter) Fingerprint() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fingerprint")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockFingerprinter_Fingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fingerprint'
type MockFingerprinter_Fingerprint_Call struct {
	*mock.Call
}

// Fingerprint is a helper method to define mock.On call
func (_e *MockFingerprinter_Expecter) Fingerprint() *MockFingerprinter_Fingerprint_Call {
	return &MockFingerprinter_Fingerprint_Call{Call: _e.mock.On("Fingerprint")}
}

func (_c *MockFingerprinter_Fingerprint_Call) Run(run func()) *MockFingerprinter_Fingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFingerprinter_Fingerprint_Call) Return(_a0 []byte) *MockFingerprinter_Fingerprint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFingerprinter_Fingerprint_Call) RunAndReturn(run func() []byte) *MockFingerprinter_Fingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFingerprinter creates a new instance of MockFingerprinter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFingerprinter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFingerprinter {
	mock := &MockFingerprinter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
