// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockGetStateCommitmentFunc is an autogenerated mock type for the GetStateCommitmentFunc type
type MockGetStateCommitmentFunc struct {
	mock.Mock
}

type MockGetStateCommitmentFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetStateCommitmentFunc) EXPECT() *MockGetStateCommitmentFunc_Expecter {
	return &MockGetStateCommitmentFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *MockGetStateCommitmentFunc) Execute() flow.StateCommitment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 flow.StateCommitment
	if rf, ok := ret.Get(0).(func() flow.StateCommitment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	return r0
}

// MockGetStateCommitmentFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockGetStateCommitmentFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockGetStateCommitmentFunc_Expecter) Execute() *MockGetStateCommitmentFunc_Execute_Call {
	return &MockGetStateCommitmentFunc_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockGetStateCommitmentFunc_Execute_Call) Run(run func()) *MockGetStateCommitmentFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetStateCommitmentFunc_Execute_Call) Return(_a0 flow.StateCommitment) *MockGetStateCommitmentFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetStateCommitmentFunc_Execute_Call) RunAndReturn(run func() flow.StateCommitment) *MockGetStateCommitmentFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetStateCommitmentFunc creates a new instance of MockGetStateCommitmentFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetStateCommitmentFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetStateCommitmentFunc {
	mock := &MockGetStateCommitmentFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
