// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "github.com/onflow/flow-go/consensus/hotstuff/model"
	mock "github.com/stretchr/testify/mock"
)

// MockVoteConsumer is an autogenerated mock type for the VoteConsumer type
type MockVoteConsumer struct {
	mock.Mock
}

type MockVoteConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteConsumer) EXPECT() *MockVoteConsumer_Expecter {
	return &MockVoteConsumer_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: vote
func (_m *MockVoteConsumer) Execute(vote *model.Vote) {
	_m.Called(vote)
}

// MockVoteConsumer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockVoteConsumer_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockVoteConsumer_Expecter) Execute(vote interface{}) *MockVoteConsumer_Execute_Call {
	return &MockVoteConsumer_Execute_Call{Call: _e.mock.On("Execute", vote)}
}

func (_c *MockVoteConsumer_Execute_Call) Run(run func(vote *model.Vote)) *MockVoteConsumer_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockVoteConsumer_Execute_Call) Return() *MockVoteConsumer_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteConsumer_Execute_Call) RunAndReturn(run func(*model.Vote)) *MockVoteConsumer_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockVoteConsumer creates a new instance of MockVoteConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteConsumer {
	mock := &MockVoteConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
