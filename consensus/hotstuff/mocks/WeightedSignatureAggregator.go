// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockWeightedSignatureAggregator is an autogenerated mock type for the WeightedSignatureAggregator type
type MockWeightedSignatureAggregator struct {
	mock.Mock
}

type MockWeightedSignatureAggregator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeightedSignatureAggregator) EXPECT() *MockWeightedSignatureAggregator_Expecter {
	return &MockWeightedSignatureAggregator_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with no fields
func (_m *MockWeightedSignatureAggregator) Aggregate() (flow.IdentifierList, []byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 flow.IdentifierList
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() (flow.IdentifierList, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.IdentifierList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWeightedSignatureAggregator_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockWeightedSignatureAggregator_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
func (_e *MockWeightedSignatureAggregator_Expecter) Aggregate() *MockWeightedSignatureAggregator_Aggregate_Call {
	return &MockWeightedSignatureAggregator_Aggregate_Call{Call: _e.mock.On("Aggregate")}
}

func (_c *MockWeightedSignatureAggregator_Aggregate_Call) Run(run func()) *MockWeightedSignatureAggregator_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWeightedSignatureAggregator_Aggregate_Call) Return(_a0 flow.IdentifierList, _a1 []byte, _a2 error) *MockWeightedSignatureAggregator_Aggregate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockWeightedSignatureAggregator_Aggregate_Call) RunAndReturn(run func() (flow.IdentifierList, []byte, error)) *MockWeightedSignatureAggregator_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// TotalWeight provides a mock function with no fields
func (_m *MockWeightedSignatureAggregator) TotalWeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalWeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockWeightedSignatureAggregator_TotalWeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalWeight'
type MockWeightedSignatureAggregator_TotalWeight_Call struct {
	*mock.Call
}

// TotalWeight is a helper method to define mock.On call
func (_e *MockWeightedSignatureAggregator_Expecter) TotalWeight() *MockWeightedSignatureAggregator_TotalWeight_Call {
	return &MockWeightedSignatureAggregator_TotalWeight_Call{Call: _e.mock.On("TotalWeight")}
}

func (_c *MockWeightedSignatureAggregator_TotalWeight_Call) Run(run func()) *MockWeightedSignatureAggregator_TotalWeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWeightedSignatureAggregator_TotalWeight_Call) Return(_a0 uint64) *MockWeightedSignatureAggregator_TotalWeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWeightedSignatureAggregator_TotalWeight_Call) RunAndReturn(run func() uint64) *MockWeightedSignatureAggregator_TotalWeight_Call {
	_c.Call.Return(run)
	return _c
}

// TrustedAdd provides a mock function with given fields: signerID, sig
func (_m *MockWeightedSignatureAggregator) TrustedAdd(signerID flow.Identifier, sig crypto.Signature) (uint64, error) {
	ret := _m.Called(signerID, sig)

	if len(ret) == 0 {
		panic("no return value specified for TrustedAdd")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature) (uint64, error)); ok {
		return rf(signerID, sig)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature) uint64); ok {
		r0 = rf(signerID, sig)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, crypto.Signature) error); ok {
		r1 = rf(signerID, sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeightedSignatureAggregator_TrustedAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrustedAdd'
type MockWeightedSignatureAggregator_TrustedAdd_Call struct {
	*mock.Call
}

// TrustedAdd is a helper method to define mock.On call
//   - signerID flow.Identifier
//   - sig crypto.Signature
func (_e *MockWeightedSignatureAggregator_Expecter) TrustedAdd(signerID interface{}, sig interface{}) *MockWeightedSignatureAggregator_TrustedAdd_Call {
	return &MockWeightedSignatureAggregator_TrustedAdd_Call{Call: _e.mock.On("TrustedAdd", signerID, sig)}
}

func (_c *MockWeightedSignatureAggregator_TrustedAdd_Call) Run(run func(signerID flow.Identifier, sig crypto.Signature)) *MockWeightedSignatureAggregator_TrustedAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(crypto.Signature))
	})
	return _c
}

func (_c *MockWeightedSignatureAggregator_TrustedAdd_Call) Return(totalWeight uint64, exception error) *MockWeightedSignatureAggregator_TrustedAdd_Call {
	_c.Call.Return(totalWeight, exception)
	return _c
}

func (_c *MockWeightedSignatureAggregator_TrustedAdd_Call) RunAndReturn(run func(flow.Identifier, crypto.Signature) (uint64, error)) *MockWeightedSignatureAggregator_TrustedAdd_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: signerID, sig
func (_m *MockWeightedSignatureAggregator) Verify(signerID flow.Identifier, sig crypto.Signature) error {
	ret := _m.Called(signerID, sig)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature) error); ok {
		r0 = rf(signerID, sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWeightedSignatureAggregator_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockWeightedSignatureAggregator_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - signerID flow.Identifier
//   - sig crypto.Signature
func (_e *MockWeightedSignatureAggregator_Expecter) Verify(signerID interface{}, sig interface{}) *MockWeightedSignatureAggregator_Verify_Call {
	return &MockWeightedSignatureAggregator_Verify_Call{Call: _e.mock.On("Verify", signerID, sig)}
}

func (_c *MockWeightedSignatureAggregator_Verify_Call) Run(run func(signerID flow.Identifier, sig crypto.Signature)) *MockWeightedSignatureAggregator_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(crypto.Signature))
	})
	return _c
}

func (_c *MockWeightedSignatureAggregator_Verify_Call) Return(_a0 error) *MockWeightedSignatureAggregator_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWeightedSignatureAggregator_Verify_Call) RunAndReturn(run func(flow.Identifier, crypto.Signature) error) *MockWeightedSignatureAggregator_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeightedSignatureAggregator creates a new instance of MockWeightedSignatureAggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeightedSignatureAggregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeightedSignatureAggregator {
	mock := &MockWeightedSignatureAggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
