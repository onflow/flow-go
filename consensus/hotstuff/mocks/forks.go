// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// Forks is an autogenerated mock type for the Forks type
type Forks struct {
	mock.Mock
}

// AddCertifiedBlock provides a mock function with given fields: certifiedBlock
func (_m *Forks) AddCertifiedBlock(certifiedBlock *model.CertifiedBlock) error {
	ret := _m.Called(certifiedBlock)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.CertifiedBlock) error); ok {
		r0 = rf(certifiedBlock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddValidatedBlock provides a mock function with given fields: proposal
func (_m *Forks) AddValidatedBlock(proposal *model.Block) error {
	ret := _m.Called(proposal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Block) error); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinalityProof provides a mock function with given fields:
func (_m *Forks) FinalityProof() (*hotstuff.FinalityProof, bool) {
	ret := _m.Called()

	var r0 *hotstuff.FinalityProof
	var r1 bool
	if rf, ok := ret.Get(0).(func() (*hotstuff.FinalityProof, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.FinalityProof); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.FinalityProof)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// FinalizedBlock provides a mock function with given fields:
func (_m *Forks) FinalizedBlock() *model.Block {
	ret := _m.Called()

	var r0 *model.Block
	if rf, ok := ret.Get(0).(func() *model.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Block)
		}
	}

	return r0
}

// FinalizedView provides a mock function with given fields:
func (_m *Forks) FinalizedView() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetBlock provides a mock function with given fields: blockID
func (_m *Forks) GetBlock(blockID flow.Identifier) (*model.Block, bool) {
	ret := _m.Called(blockID)

	var r0 *model.Block
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*model.Block, bool)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *model.Block); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetBlocksForView provides a mock function with given fields: view
func (_m *Forks) GetBlocksForView(view uint64) []*model.Block {
	ret := _m.Called(view)

	var r0 []*model.Block
	if rf, ok := ret.Get(0).(func(uint64) []*model.Block); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Block)
		}
	}

	return r0
}

type mockConstructorTestingTNewForks interface {
	mock.TestingT
	Cleanup(func())
}

// NewForks creates a new instance of Forks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewForks(t mockConstructorTestingTNewForks) *Forks {
	mock := &Forks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
