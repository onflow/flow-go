// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	crypto "github.com/onflow/crypto"

	mock "github.com/stretchr/testify/mock"
)

// RandomBeaconInspector is an autogenerated mock type for the RandomBeaconInspector type
type RandomBeaconInspector struct {
	mock.Mock
}

// EnoughShares provides a mock function with given fields:
func (_m *RandomBeaconInspector) EnoughShares() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnoughShares")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Reconstruct provides a mock function with given fields:
func (_m *RandomBeaconInspector) Reconstruct() (crypto.Signature, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reconstruct")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func() (crypto.Signature, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() crypto.Signature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrustedAdd provides a mock function with given fields: signerIndex, share
func (_m *RandomBeaconInspector) TrustedAdd(signerIndex int, share crypto.Signature) (bool, error) {
	ret := _m.Called(signerIndex, share)

	if len(ret) == 0 {
		panic("no return value specified for TrustedAdd")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) (bool, error)); ok {
		return rf(signerIndex, share)
	}
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) bool); ok {
		r0 = rf(signerIndex, share)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, crypto.Signature) error); ok {
		r1 = rf(signerIndex, share)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: signerIndex, share
func (_m *RandomBeaconInspector) Verify(signerIndex int, share crypto.Signature) error {
	ret := _m.Called(signerIndex, share)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) error); ok {
		r0 = rf(signerIndex, share)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRandomBeaconInspector creates a new instance of RandomBeaconInspector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRandomBeaconInspector(t interface {
	mock.TestingT
	Cleanup(func())
}) *RandomBeaconInspector {
	mock := &RandomBeaconInspector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
