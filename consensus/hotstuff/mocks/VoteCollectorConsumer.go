// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockVoteCollectorConsumer is an autogenerated mock type for the VoteCollectorConsumer type
type MockVoteCollectorConsumer struct {
	mock.Mock
}

type MockVoteCollectorConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteCollectorConsumer) EXPECT() *MockVoteCollectorConsumer_Expecter {
	return &MockVoteCollectorConsumer_Expecter{mock: &_m.Mock}
}

// OnQcConstructedFromVotes provides a mock function with given fields: _a0
func (_m *MockVoteCollectorConsumer) OnQcConstructedFromVotes(_a0 *flow.QuorumCertificate) {
	_m.Called(_a0)
}

// MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnQcConstructedFromVotes'
type MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call struct {
	*mock.Call
}

// OnQcConstructedFromVotes is a helper method to define mock.On call
//   - _a0 *flow.QuorumCertificate
func (_e *MockVoteCollectorConsumer_Expecter) OnQcConstructedFromVotes(_a0 interface{}) *MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call {
	return &MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call{Call: _e.mock.On("OnQcConstructedFromVotes", _a0)}
}

func (_c *MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call) Run(run func(_a0 *flow.QuorumCertificate)) *MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call) Return() *MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call) RunAndReturn(run func(*flow.QuorumCertificate)) *MockVoteCollectorConsumer_OnQcConstructedFromVotes_Call {
	_c.Run(run)
	return _c
}

// OnVoteProcessed provides a mock function with given fields: vote
func (_m *MockVoteCollectorConsumer) OnVoteProcessed(vote *model.Vote) {
	_m.Called(vote)
}

// MockVoteCollectorConsumer_OnVoteProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnVoteProcessed'
type MockVoteCollectorConsumer_OnVoteProcessed_Call struct {
	*mock.Call
}

// OnVoteProcessed is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockVoteCollectorConsumer_Expecter) OnVoteProcessed(vote interface{}) *MockVoteCollectorConsumer_OnVoteProcessed_Call {
	return &MockVoteCollectorConsumer_OnVoteProcessed_Call{Call: _e.mock.On("OnVoteProcessed", vote)}
}

func (_c *MockVoteCollectorConsumer_OnVoteProcessed_Call) Run(run func(vote *model.Vote)) *MockVoteCollectorConsumer_OnVoteProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockVoteCollectorConsumer_OnVoteProcessed_Call) Return() *MockVoteCollectorConsumer_OnVoteProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteCollectorConsumer_OnVoteProcessed_Call) RunAndReturn(run func(*model.Vote)) *MockVoteCollectorConsumer_OnVoteProcessed_Call {
	_c.Run(run)
	return _c
}

// NewMockVoteCollectorConsumer creates a new instance of MockVoteCollectorConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteCollectorConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteCollectorConsumer {
	mock := &MockVoteCollectorConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
