// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockWorkerpool is an autogenerated mock type for the Workerpool type
type MockWorkerpool struct {
	mock.Mock
}

type MockWorkerpool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkerpool) EXPECT() *MockWorkerpool_Expecter {
	return &MockWorkerpool_Expecter{mock: &_m.Mock}
}

// StopWait provides a mock function with no fields
func (_m *MockWorkerpool) StopWait() {
	_m.Called()
}

// MockWorkerpool_StopWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopWait'
type MockWorkerpool_StopWait_Call struct {
	*mock.Call
}

// StopWait is a helper method to define mock.On call
func (_e *MockWorkerpool_Expecter) StopWait() *MockWorkerpool_StopWait_Call {
	return &MockWorkerpool_StopWait_Call{Call: _e.mock.On("StopWait")}
}

func (_c *MockWorkerpool_StopWait_Call) Run(run func()) *MockWorkerpool_StopWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkerpool_StopWait_Call) Return() *MockWorkerpool_StopWait_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWorkerpool_StopWait_Call) RunAndReturn(run func()) *MockWorkerpool_StopWait_Call {
	_c.Run(run)
	return _c
}

// Submit provides a mock function with given fields: task
func (_m *MockWorkerpool) Submit(task func()) {
	_m.Called(task)
}

// MockWorkerpool_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type MockWorkerpool_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - task func()
func (_e *MockWorkerpool_Expecter) Submit(task interface{}) *MockWorkerpool_Submit_Call {
	return &MockWorkerpool_Submit_Call{Call: _e.mock.On("Submit", task)}
}

func (_c *MockWorkerpool_Submit_Call) Run(run func(task func())) *MockWorkerpool_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockWorkerpool_Submit_Call) Return() *MockWorkerpool_Submit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWorkerpool_Submit_Call) RunAndReturn(run func(func())) *MockWorkerpool_Submit_Call {
	_c.Run(run)
	return _c
}

// NewMockWorkerpool creates a new instance of MockWorkerpool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkerpool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkerpool {
	mock := &MockWorkerpool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
