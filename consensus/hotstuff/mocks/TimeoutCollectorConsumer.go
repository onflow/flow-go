// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockTimeoutCollectorConsumer is an autogenerated mock type for the TimeoutCollectorConsumer type
type MockTimeoutCollectorConsumer struct {
	mock.Mock
}

type MockTimeoutCollectorConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeoutCollectorConsumer) EXPECT() *MockTimeoutCollectorConsumer_Expecter {
	return &MockTimeoutCollectorConsumer_Expecter{mock: &_m.Mock}
}

// OnNewQcDiscovered provides a mock function with given fields: certificate
func (_m *MockTimeoutCollectorConsumer) OnNewQcDiscovered(certificate *flow.QuorumCertificate) {
	_m.Called(certificate)
}

// MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNewQcDiscovered'
type MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call struct {
	*mock.Call
}

// OnNewQcDiscovered is a helper method to define mock.On call
//   - certificate *flow.QuorumCertificate
func (_e *MockTimeoutCollectorConsumer_Expecter) OnNewQcDiscovered(certificate interface{}) *MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call {
	return &MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call{Call: _e.mock.On("OnNewQcDiscovered", certificate)}
}

func (_c *MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call) Run(run func(certificate *flow.QuorumCertificate)) *MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call) Return() *MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call) RunAndReturn(run func(*flow.QuorumCertificate)) *MockTimeoutCollectorConsumer_OnNewQcDiscovered_Call {
	_c.Run(run)
	return _c
}

// OnNewTcDiscovered provides a mock function with given fields: certificate
func (_m *MockTimeoutCollectorConsumer) OnNewTcDiscovered(certificate *flow.TimeoutCertificate) {
	_m.Called(certificate)
}

// MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNewTcDiscovered'
type MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call struct {
	*mock.Call
}

// OnNewTcDiscovered is a helper method to define mock.On call
//   - certificate *flow.TimeoutCertificate
func (_e *MockTimeoutCollectorConsumer_Expecter) OnNewTcDiscovered(certificate interface{}) *MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call {
	return &MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call{Call: _e.mock.On("OnNewTcDiscovered", certificate)}
}

func (_c *MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call) Run(run func(certificate *flow.TimeoutCertificate)) *MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call) Return() *MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call) RunAndReturn(run func(*flow.TimeoutCertificate)) *MockTimeoutCollectorConsumer_OnNewTcDiscovered_Call {
	_c.Run(run)
	return _c
}

// OnPartialTcCreated provides a mock function with given fields: view, newestQC, lastViewTC
func (_m *MockTimeoutCollectorConsumer) OnPartialTcCreated(view uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate) {
	_m.Called(view, newestQC, lastViewTC)
}

// MockTimeoutCollectorConsumer_OnPartialTcCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPartialTcCreated'
type MockTimeoutCollectorConsumer_OnPartialTcCreated_Call struct {
	*mock.Call
}

// OnPartialTcCreated is a helper method to define mock.On call
//   - view uint64
//   - newestQC *flow.QuorumCertificate
//   - lastViewTC *flow.TimeoutCertificate
func (_e *MockTimeoutCollectorConsumer_Expecter) OnPartialTcCreated(view interface{}, newestQC interface{}, lastViewTC interface{}) *MockTimeoutCollectorConsumer_OnPartialTcCreated_Call {
	return &MockTimeoutCollectorConsumer_OnPartialTcCreated_Call{Call: _e.mock.On("OnPartialTcCreated", view, newestQC, lastViewTC)}
}

func (_c *MockTimeoutCollectorConsumer_OnPartialTcCreated_Call) Run(run func(view uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate)) *MockTimeoutCollectorConsumer_OnPartialTcCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.QuorumCertificate), args[2].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnPartialTcCreated_Call) Return() *MockTimeoutCollectorConsumer_OnPartialTcCreated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnPartialTcCreated_Call) RunAndReturn(run func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate)) *MockTimeoutCollectorConsumer_OnPartialTcCreated_Call {
	_c.Run(run)
	return _c
}

// OnTcConstructedFromTimeouts provides a mock function with given fields: certificate
func (_m *MockTimeoutCollectorConsumer) OnTcConstructedFromTimeouts(certificate *flow.TimeoutCertificate) {
	_m.Called(certificate)
}

// MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTcConstructedFromTimeouts'
type MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call struct {
	*mock.Call
}

// OnTcConstructedFromTimeouts is a helper method to define mock.On call
//   - certificate *flow.TimeoutCertificate
func (_e *MockTimeoutCollectorConsumer_Expecter) OnTcConstructedFromTimeouts(certificate interface{}) *MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call {
	return &MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call{Call: _e.mock.On("OnTcConstructedFromTimeouts", certificate)}
}

func (_c *MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call) Run(run func(certificate *flow.TimeoutCertificate)) *MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call) Return() *MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call) RunAndReturn(run func(*flow.TimeoutCertificate)) *MockTimeoutCollectorConsumer_OnTcConstructedFromTimeouts_Call {
	_c.Run(run)
	return _c
}

// OnTimeoutProcessed provides a mock function with given fields: timeout
func (_m *MockTimeoutCollectorConsumer) OnTimeoutProcessed(timeout *model.TimeoutObject) {
	_m.Called(timeout)
}

// MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTimeoutProcessed'
type MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call struct {
	*mock.Call
}

// OnTimeoutProcessed is a helper method to define mock.On call
//   - timeout *model.TimeoutObject
func (_e *MockTimeoutCollectorConsumer_Expecter) OnTimeoutProcessed(timeout interface{}) *MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call {
	return &MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call{Call: _e.mock.On("OnTimeoutProcessed", timeout)}
}

func (_c *MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call) Run(run func(timeout *model.TimeoutObject)) *MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call) Return() *MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call) RunAndReturn(run func(*model.TimeoutObject)) *MockTimeoutCollectorConsumer_OnTimeoutProcessed_Call {
	_c.Run(run)
	return _c
}

// NewMockTimeoutCollectorConsumer creates a new instance of MockTimeoutCollectorConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeoutCollectorConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeoutCollectorConsumer {
	mock := &MockTimeoutCollectorConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
