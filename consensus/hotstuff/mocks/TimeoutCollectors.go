// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	mock "github.com/stretchr/testify/mock"
)

// MockTimeoutCollectors is an autogenerated mock type for the TimeoutCollectors type
type MockTimeoutCollectors struct {
	mock.Mock
}

type MockTimeoutCollectors_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeoutCollectors) EXPECT() *MockTimeoutCollectors_Expecter {
	return &MockTimeoutCollectors_Expecter{mock: &_m.Mock}
}

// GetOrCreateCollector provides a mock function with given fields: view
func (_m *MockTimeoutCollectors) GetOrCreateCollector(view uint64) (hotstuff.TimeoutCollector, bool, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateCollector")
	}

	var r0 hotstuff.TimeoutCollector
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (hotstuff.TimeoutCollector, bool, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) hotstuff.TimeoutCollector); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hotstuff.TimeoutCollector)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(view)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTimeoutCollectors_GetOrCreateCollector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateCollector'
type MockTimeoutCollectors_GetOrCreateCollector_Call struct {
	*mock.Call
}

// GetOrCreateCollector is a helper method to define mock.On call
//   - view uint64
func (_e *MockTimeoutCollectors_Expecter) GetOrCreateCollector(view interface{}) *MockTimeoutCollectors_GetOrCreateCollector_Call {
	return &MockTimeoutCollectors_GetOrCreateCollector_Call{Call: _e.mock.On("GetOrCreateCollector", view)}
}

func (_c *MockTimeoutCollectors_GetOrCreateCollector_Call) Run(run func(view uint64)) *MockTimeoutCollectors_GetOrCreateCollector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockTimeoutCollectors_GetOrCreateCollector_Call) Return(collector hotstuff.TimeoutCollector, created bool, err error) *MockTimeoutCollectors_GetOrCreateCollector_Call {
	_c.Call.Return(collector, created, err)
	return _c
}

func (_c *MockTimeoutCollectors_GetOrCreateCollector_Call) RunAndReturn(run func(uint64) (hotstuff.TimeoutCollector, bool, error)) *MockTimeoutCollectors_GetOrCreateCollector_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToView provides a mock function with given fields: lowestRetainedView
func (_m *MockTimeoutCollectors) PruneUpToView(lowestRetainedView uint64) {
	_m.Called(lowestRetainedView)
}

// MockTimeoutCollectors_PruneUpToView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToView'
type MockTimeoutCollectors_PruneUpToView_Call struct {
	*mock.Call
}

// PruneUpToView is a helper method to define mock.On call
//   - lowestRetainedView uint64
func (_e *MockTimeoutCollectors_Expecter) PruneUpToView(lowestRetainedView interface{}) *MockTimeoutCollectors_PruneUpToView_Call {
	return &MockTimeoutCollectors_PruneUpToView_Call{Call: _e.mock.On("PruneUpToView", lowestRetainedView)}
}

func (_c *MockTimeoutCollectors_PruneUpToView_Call) Run(run func(lowestRetainedView uint64)) *MockTimeoutCollectors_PruneUpToView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockTimeoutCollectors_PruneUpToView_Call) Return() *MockTimeoutCollectors_PruneUpToView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutCollectors_PruneUpToView_Call) RunAndReturn(run func(uint64)) *MockTimeoutCollectors_PruneUpToView_Call {
	_c.Run(run)
	return _c
}

// NewMockTimeoutCollectors creates a new instance of MockTimeoutCollectors. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeoutCollectors(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeoutCollectors {
	mock := &MockTimeoutCollectors{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
