// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockSigner is an autogenerated mock type for the Signer type
type MockSigner struct {
	mock.Mock
}

type MockSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSigner) EXPECT() *MockSigner_Expecter {
	return &MockSigner_Expecter{mock: &_m.Mock}
}

// CreateTimeout provides a mock function with given fields: curView, newestQC, lastViewTC
func (_m *MockSigner) CreateTimeout(curView uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate) (*model.TimeoutObject, error) {
	ret := _m.Called(curView, newestQC, lastViewTC)

	if len(ret) == 0 {
		panic("no return value specified for CreateTimeout")
	}

	var r0 *model.TimeoutObject
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) (*model.TimeoutObject, error)); ok {
		return rf(curView, newestQC, lastViewTC)
	}
	if rf, ok := ret.Get(0).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) *model.TimeoutObject); ok {
		r0 = rf(curView, newestQC, lastViewTC)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TimeoutObject)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) error); ok {
		r1 = rf(curView, newestQC, lastViewTC)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSigner_CreateTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTimeout'
type MockSigner_CreateTimeout_Call struct {
	*mock.Call
}

// CreateTimeout is a helper method to define mock.On call
//   - curView uint64
//   - newestQC *flow.QuorumCertificate
//   - lastViewTC *flow.TimeoutCertificate
func (_e *MockSigner_Expecter) CreateTimeout(curView interface{}, newestQC interface{}, lastViewTC interface{}) *MockSigner_CreateTimeout_Call {
	return &MockSigner_CreateTimeout_Call{Call: _e.mock.On("CreateTimeout", curView, newestQC, lastViewTC)}
}

func (_c *MockSigner_CreateTimeout_Call) Run(run func(curView uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate)) *MockSigner_CreateTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.QuorumCertificate), args[2].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockSigner_CreateTimeout_Call) Return(_a0 *model.TimeoutObject, _a1 error) *MockSigner_CreateTimeout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSigner_CreateTimeout_Call) RunAndReturn(run func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) (*model.TimeoutObject, error)) *MockSigner_CreateTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVote provides a mock function with given fields: block
func (_m *MockSigner) CreateVote(block *model.Block) (*model.Vote, error) {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for CreateVote")
	}

	var r0 *model.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Block) (*model.Vote, error)); ok {
		return rf(block)
	}
	if rf, ok := ret.Get(0).(func(*model.Block) *model.Vote); ok {
		r0 = rf(block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vote)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Block) error); ok {
		r1 = rf(block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSigner_CreateVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVote'
type MockSigner_CreateVote_Call struct {
	*mock.Call
}

// CreateVote is a helper method to define mock.On call
//   - block *model.Block
func (_e *MockSigner_Expecter) CreateVote(block interface{}) *MockSigner_CreateVote_Call {
	return &MockSigner_CreateVote_Call{Call: _e.mock.On("CreateVote", block)}
}

func (_c *MockSigner_CreateVote_Call) Run(run func(block *model.Block)) *MockSigner_CreateVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block))
	})
	return _c
}

func (_c *MockSigner_CreateVote_Call) Return(_a0 *model.Vote, _a1 error) *MockSigner_CreateVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSigner_CreateVote_Call) RunAndReturn(run func(*model.Block) (*model.Vote, error)) *MockSigner_CreateVote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSigner creates a new instance of MockSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigner {
	mock := &MockSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
