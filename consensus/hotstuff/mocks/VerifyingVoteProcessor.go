// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockVerifyingVoteProcessor is an autogenerated mock type for the VerifyingVoteProcessor type
type MockVerifyingVoteProcessor struct {
	mock.Mock
}

type MockVerifyingVoteProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifyingVoteProcessor) EXPECT() *MockVerifyingVoteProcessor_Expecter {
	return &MockVerifyingVoteProcessor_Expecter{mock: &_m.Mock}
}

// Block provides a mock function with no fields
func (_m *MockVerifyingVoteProcessor) Block() *model.Block {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 *model.Block
	if rf, ok := ret.Get(0).(func() *model.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Block)
		}
	}

	return r0
}

// MockVerifyingVoteProcessor_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type MockVerifyingVoteProcessor_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
func (_e *MockVerifyingVoteProcessor_Expecter) Block() *MockVerifyingVoteProcessor_Block_Call {
	return &MockVerifyingVoteProcessor_Block_Call{Call: _e.mock.On("Block")}
}

func (_c *MockVerifyingVoteProcessor_Block_Call) Run(run func()) *MockVerifyingVoteProcessor_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVerifyingVoteProcessor_Block_Call) Return(_a0 *model.Block) *MockVerifyingVoteProcessor_Block_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerifyingVoteProcessor_Block_Call) RunAndReturn(run func() *model.Block) *MockVerifyingVoteProcessor_Block_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: vote
func (_m *MockVerifyingVoteProcessor) Process(vote *model.Vote) error {
	ret := _m.Called(vote)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Vote) error); ok {
		r0 = rf(vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerifyingVoteProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockVerifyingVoteProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockVerifyingVoteProcessor_Expecter) Process(vote interface{}) *MockVerifyingVoteProcessor_Process_Call {
	return &MockVerifyingVoteProcessor_Process_Call{Call: _e.mock.On("Process", vote)}
}

func (_c *MockVerifyingVoteProcessor_Process_Call) Run(run func(vote *model.Vote)) *MockVerifyingVoteProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockVerifyingVoteProcessor_Process_Call) Return(_a0 error) *MockVerifyingVoteProcessor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerifyingVoteProcessor_Process_Call) RunAndReturn(run func(*model.Vote) error) *MockVerifyingVoteProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *MockVerifyingVoteProcessor) Status() hotstuff.VoteCollectorStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 hotstuff.VoteCollectorStatus
	if rf, ok := ret.Get(0).(func() hotstuff.VoteCollectorStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hotstuff.VoteCollectorStatus)
	}

	return r0
}

// MockVerifyingVoteProcessor_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockVerifyingVoteProcessor_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockVerifyingVoteProcessor_Expecter) Status() *MockVerifyingVoteProcessor_Status_Call {
	return &MockVerifyingVoteProcessor_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockVerifyingVoteProcessor_Status_Call) Run(run func()) *MockVerifyingVoteProcessor_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVerifyingVoteProcessor_Status_Call) Return(_a0 hotstuff.VoteCollectorStatus) *MockVerifyingVoteProcessor_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerifyingVoteProcessor_Status_Call) RunAndReturn(run func() hotstuff.VoteCollectorStatus) *MockVerifyingVoteProcessor_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerifyingVoteProcessor creates a new instance of MockVerifyingVoteProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifyingVoteProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifyingVoteProcessor {
	mock := &MockVerifyingVoteProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
