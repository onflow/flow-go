// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "github.com/onflow/flow-go/consensus/hotstuff/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTimeoutAggregationViolationConsumer is an autogenerated mock type for the TimeoutAggregationViolationConsumer type
type MockTimeoutAggregationViolationConsumer struct {
	mock.Mock
}

type MockTimeoutAggregationViolationConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeoutAggregationViolationConsumer) EXPECT() *MockTimeoutAggregationViolationConsumer_Expecter {
	return &MockTimeoutAggregationViolationConsumer_Expecter{mock: &_m.Mock}
}

// OnDoubleTimeoutDetected provides a mock function with given fields: _a0, _a1
func (_m *MockTimeoutAggregationViolationConsumer) OnDoubleTimeoutDetected(_a0 *model.TimeoutObject, _a1 *model.TimeoutObject) {
	_m.Called(_a0, _a1)
}

// MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDoubleTimeoutDetected'
type MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call struct {
	*mock.Call
}

// OnDoubleTimeoutDetected is a helper method to define mock.On call
//   - _a0 *model.TimeoutObject
//   - _a1 *model.TimeoutObject
func (_e *MockTimeoutAggregationViolationConsumer_Expecter) OnDoubleTimeoutDetected(_a0 interface{}, _a1 interface{}) *MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call {
	return &MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call{Call: _e.mock.On("OnDoubleTimeoutDetected", _a0, _a1)}
}

func (_c *MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call) Run(run func(_a0 *model.TimeoutObject, _a1 *model.TimeoutObject)) *MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject), args[1].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call) Return() *MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call) RunAndReturn(run func(*model.TimeoutObject, *model.TimeoutObject)) *MockTimeoutAggregationViolationConsumer_OnDoubleTimeoutDetected_Call {
	_c.Run(run)
	return _c
}

// OnInvalidTimeoutDetected provides a mock function with given fields: err
func (_m *MockTimeoutAggregationViolationConsumer) OnInvalidTimeoutDetected(err model.InvalidTimeoutError) {
	_m.Called(err)
}

// MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnInvalidTimeoutDetected'
type MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call struct {
	*mock.Call
}

// OnInvalidTimeoutDetected is a helper method to define mock.On call
//   - err model.InvalidTimeoutError
func (_e *MockTimeoutAggregationViolationConsumer_Expecter) OnInvalidTimeoutDetected(err interface{}) *MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call {
	return &MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call{Call: _e.mock.On("OnInvalidTimeoutDetected", err)}
}

func (_c *MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call) Run(run func(err model.InvalidTimeoutError)) *MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.InvalidTimeoutError))
	})
	return _c
}

func (_c *MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call) Return() *MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call) RunAndReturn(run func(model.InvalidTimeoutError)) *MockTimeoutAggregationViolationConsumer_OnInvalidTimeoutDetected_Call {
	_c.Run(run)
	return _c
}

// NewMockTimeoutAggregationViolationConsumer creates a new instance of MockTimeoutAggregationViolationConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeoutAggregationViolationConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeoutAggregationViolationConsumer {
	mock := &MockTimeoutAggregationViolationConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
