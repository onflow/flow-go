// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	crypto "github.com/onflow/flow-go/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// TimeoutSignatureAggregator is an autogenerated mock type for the TimeoutSignatureAggregator type
type TimeoutSignatureAggregator struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields:
func (_m *TimeoutSignatureAggregator) Aggregate() ([]flow.Identifier, []uint64, crypto.Signature, error) {
	ret := _m.Called()

	var r0 []flow.Identifier
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	var r1 []uint64
	if rf, ok := ret.Get(1).(func() []uint64); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uint64)
		}
	}

	var r2 crypto.Signature
	if rf, ok := ret.Get(2).(func() crypto.Signature); ok {
		r2 = rf()
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(crypto.Signature)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// TotalWeight provides a mock function with given fields:
func (_m *TimeoutSignatureAggregator) TotalWeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// VerifyAndAdd provides a mock function with given fields: signerID, sig, highestQCView
func (_m *TimeoutSignatureAggregator) VerifyAndAdd(signerID flow.Identifier, sig crypto.Signature, highestQCView uint64) (uint64, error) {
	ret := _m.Called(signerID, sig, highestQCView)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature, uint64) uint64); ok {
		r0 = rf(signerID, sig, highestQCView)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier, crypto.Signature, uint64) error); ok {
		r1 = rf(signerID, sig, highestQCView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
