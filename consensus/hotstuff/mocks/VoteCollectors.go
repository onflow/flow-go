// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"
)

// MockVoteCollectors is an autogenerated mock type for the VoteCollectors type
type MockVoteCollectors struct {
	mock.Mock
}

type MockVoteCollectors_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteCollectors) EXPECT() *MockVoteCollectors_Expecter {
	return &MockVoteCollectors_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockVoteCollectors) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockVoteCollectors_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockVoteCollectors_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockVoteCollectors_Expecter) Done() *MockVoteCollectors_Done_Call {
	return &MockVoteCollectors_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockVoteCollectors_Done_Call) Run(run func()) *MockVoteCollectors_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVoteCollectors_Done_Call) Return(_a0 <-chan struct{}) *MockVoteCollectors_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteCollectors_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockVoteCollectors_Done_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateCollector provides a mock function with given fields: view
func (_m *MockVoteCollectors) GetOrCreateCollector(view uint64) (hotstuff.VoteCollector, bool, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateCollector")
	}

	var r0 hotstuff.VoteCollector
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (hotstuff.VoteCollector, bool, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) hotstuff.VoteCollector); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hotstuff.VoteCollector)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(view)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVoteCollectors_GetOrCreateCollector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateCollector'
type MockVoteCollectors_GetOrCreateCollector_Call struct {
	*mock.Call
}

// GetOrCreateCollector is a helper method to define mock.On call
//   - view uint64
func (_e *MockVoteCollectors_Expecter) GetOrCreateCollector(view interface{}) *MockVoteCollectors_GetOrCreateCollector_Call {
	return &MockVoteCollectors_GetOrCreateCollector_Call{Call: _e.mock.On("GetOrCreateCollector", view)}
}

func (_c *MockVoteCollectors_GetOrCreateCollector_Call) Run(run func(view uint64)) *MockVoteCollectors_GetOrCreateCollector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockVoteCollectors_GetOrCreateCollector_Call) Return(collector hotstuff.VoteCollector, created bool, err error) *MockVoteCollectors_GetOrCreateCollector_Call {
	_c.Call.Return(collector, created, err)
	return _c
}

func (_c *MockVoteCollectors_GetOrCreateCollector_Call) RunAndReturn(run func(uint64) (hotstuff.VoteCollector, bool, error)) *MockVoteCollectors_GetOrCreateCollector_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToView provides a mock function with given fields: lowestRetainedView
func (_m *MockVoteCollectors) PruneUpToView(lowestRetainedView uint64) {
	_m.Called(lowestRetainedView)
}

// MockVoteCollectors_PruneUpToView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToView'
type MockVoteCollectors_PruneUpToView_Call struct {
	*mock.Call
}

// PruneUpToView is a helper method to define mock.On call
//   - lowestRetainedView uint64
func (_e *MockVoteCollectors_Expecter) PruneUpToView(lowestRetainedView interface{}) *MockVoteCollectors_PruneUpToView_Call {
	return &MockVoteCollectors_PruneUpToView_Call{Call: _e.mock.On("PruneUpToView", lowestRetainedView)}
}

func (_c *MockVoteCollectors_PruneUpToView_Call) Run(run func(lowestRetainedView uint64)) *MockVoteCollectors_PruneUpToView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockVoteCollectors_PruneUpToView_Call) Return() *MockVoteCollectors_PruneUpToView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteCollectors_PruneUpToView_Call) RunAndReturn(run func(uint64)) *MockVoteCollectors_PruneUpToView_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockVoteCollectors) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockVoteCollectors_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockVoteCollectors_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockVoteCollectors_Expecter) Ready() *MockVoteCollectors_Ready_Call {
	return &MockVoteCollectors_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockVoteCollectors_Ready_Call) Run(run func()) *MockVoteCollectors_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVoteCollectors_Ready_Call) Return(_a0 <-chan struct{}) *MockVoteCollectors_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteCollectors_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockVoteCollectors_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockVoteCollectors) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockVoteCollectors_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockVoteCollectors_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockVoteCollectors_Expecter) Start(_a0 interface{}) *MockVoteCollectors_Start_Call {
	return &MockVoteCollectors_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockVoteCollectors_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockVoteCollectors_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockVoteCollectors_Start_Call) Return() *MockVoteCollectors_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteCollectors_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockVoteCollectors_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockVoteCollectors creates a new instance of MockVoteCollectors. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteCollectors(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteCollectors {
	mock := &MockVoteCollectors{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
