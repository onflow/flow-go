// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// Persister is an autogenerated mock type for the Persister type
type Persister struct {
	mock.Mock
}

// GetStarted provides a mock function with given fields:
func (_m *Persister) GetStarted() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoted provides a mock function with given fields:
func (_m *Persister) GetVoted() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStarted provides a mock function with given fields: view
func (_m *Persister) PutStarted(view uint64) error {
	ret := _m.Called(view)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutVoted provides a mock function with given fields: view
func (_m *Persister) PutVoted(view uint64) error {
	ret := _m.Called(view)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPersister creates a new instance of Persister. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersister(t testing.TB) *Persister {
	mock := &Persister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
