// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

// VerifyQC provides a mock function with given fields: voterIDs, sigData, block
func (_m *Verifier) VerifyQC(voterIDs []flow.Identifier, sigData []byte, block *model.Block) (bool, error) {
	ret := _m.Called(voterIDs, sigData, block)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]flow.Identifier, []byte, *model.Block) bool); ok {
		r0 = rf(voterIDs, sigData, block)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]flow.Identifier, []byte, *model.Block) error); ok {
		r1 = rf(voterIDs, sigData, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyVote provides a mock function with given fields: voterID, sigData, block
func (_m *Verifier) VerifyVote(voterID flow.Identifier, sigData []byte, block *model.Block) (bool, error) {
	ret := _m.Called(voterID, sigData, block)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, []byte, *model.Block) bool); ok {
		r0 = rf(voterID, sigData, block)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier, []byte, *model.Block) error); ok {
		r1 = rf(voterID, sigData, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
