// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockVoteAggregator is an autogenerated mock type for the VoteAggregator type
type MockVoteAggregator struct {
	mock.Mock
}

type MockVoteAggregator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteAggregator) EXPECT() *MockVoteAggregator_Expecter {
	return &MockVoteAggregator_Expecter{mock: &_m.Mock}
}

// AddBlock provides a mock function with given fields: block
func (_m *MockVoteAggregator) AddBlock(block *model.SignedProposal) {
	_m.Called(block)
}

// MockVoteAggregator_AddBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlock'
type MockVoteAggregator_AddBlock_Call struct {
	*mock.Call
}

// AddBlock is a helper method to define mock.On call
//   - block *model.SignedProposal
func (_e *MockVoteAggregator_Expecter) AddBlock(block interface{}) *MockVoteAggregator_AddBlock_Call {
	return &MockVoteAggregator_AddBlock_Call{Call: _e.mock.On("AddBlock", block)}
}

func (_c *MockVoteAggregator_AddBlock_Call) Run(run func(block *model.SignedProposal)) *MockVoteAggregator_AddBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockVoteAggregator_AddBlock_Call) Return() *MockVoteAggregator_AddBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregator_AddBlock_Call) RunAndReturn(run func(*model.SignedProposal)) *MockVoteAggregator_AddBlock_Call {
	_c.Run(run)
	return _c
}

// AddVote provides a mock function with given fields: vote
func (_m *MockVoteAggregator) AddVote(vote *model.Vote) {
	_m.Called(vote)
}

// MockVoteAggregator_AddVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVote'
type MockVoteAggregator_AddVote_Call struct {
	*mock.Call
}

// AddVote is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockVoteAggregator_Expecter) AddVote(vote interface{}) *MockVoteAggregator_AddVote_Call {
	return &MockVoteAggregator_AddVote_Call{Call: _e.mock.On("AddVote", vote)}
}

func (_c *MockVoteAggregator_AddVote_Call) Run(run func(vote *model.Vote)) *MockVoteAggregator_AddVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockVoteAggregator_AddVote_Call) Return() *MockVoteAggregator_AddVote_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregator_AddVote_Call) RunAndReturn(run func(*model.Vote)) *MockVoteAggregator_AddVote_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockVoteAggregator) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockVoteAggregator_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockVoteAggregator_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockVoteAggregator_Expecter) Done() *MockVoteAggregator_Done_Call {
	return &MockVoteAggregator_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockVoteAggregator_Done_Call) Run(run func()) *MockVoteAggregator_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVoteAggregator_Done_Call) Return(_a0 <-chan struct{}) *MockVoteAggregator_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteAggregator_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockVoteAggregator_Done_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidBlock provides a mock function with given fields: block
func (_m *MockVoteAggregator) InvalidBlock(block *model.SignedProposal) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for InvalidBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.SignedProposal) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVoteAggregator_InvalidBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidBlock'
type MockVoteAggregator_InvalidBlock_Call struct {
	*mock.Call
}

// InvalidBlock is a helper method to define mock.On call
//   - block *model.SignedProposal
func (_e *MockVoteAggregator_Expecter) InvalidBlock(block interface{}) *MockVoteAggregator_InvalidBlock_Call {
	return &MockVoteAggregator_InvalidBlock_Call{Call: _e.mock.On("InvalidBlock", block)}
}

func (_c *MockVoteAggregator_InvalidBlock_Call) Run(run func(block *model.SignedProposal)) *MockVoteAggregator_InvalidBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockVoteAggregator_InvalidBlock_Call) Return(_a0 error) *MockVoteAggregator_InvalidBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteAggregator_InvalidBlock_Call) RunAndReturn(run func(*model.SignedProposal) error) *MockVoteAggregator_InvalidBlock_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToView provides a mock function with given fields: view
func (_m *MockVoteAggregator) PruneUpToView(view uint64) {
	_m.Called(view)
}

// MockVoteAggregator_PruneUpToView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToView'
type MockVoteAggregator_PruneUpToView_Call struct {
	*mock.Call
}

// PruneUpToView is a helper method to define mock.On call
//   - view uint64
func (_e *MockVoteAggregator_Expecter) PruneUpToView(view interface{}) *MockVoteAggregator_PruneUpToView_Call {
	return &MockVoteAggregator_PruneUpToView_Call{Call: _e.mock.On("PruneUpToView", view)}
}

func (_c *MockVoteAggregator_PruneUpToView_Call) Run(run func(view uint64)) *MockVoteAggregator_PruneUpToView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockVoteAggregator_PruneUpToView_Call) Return() *MockVoteAggregator_PruneUpToView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregator_PruneUpToView_Call) RunAndReturn(run func(uint64)) *MockVoteAggregator_PruneUpToView_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockVoteAggregator) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockVoteAggregator_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockVoteAggregator_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockVoteAggregator_Expecter) Ready() *MockVoteAggregator_Ready_Call {
	return &MockVoteAggregator_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockVoteAggregator_Ready_Call) Run(run func()) *MockVoteAggregator_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVoteAggregator_Ready_Call) Return(_a0 <-chan struct{}) *MockVoteAggregator_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteAggregator_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockVoteAggregator_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockVoteAggregator) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockVoteAggregator_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockVoteAggregator_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockVoteAggregator_Expecter) Start(_a0 interface{}) *MockVoteAggregator_Start_Call {
	return &MockVoteAggregator_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockVoteAggregator_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockVoteAggregator_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockVoteAggregator_Start_Call) Return() *MockVoteAggregator_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregator_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockVoteAggregator_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockVoteAggregator creates a new instance of MockVoteAggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteAggregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteAggregator {
	mock := &MockVoteAggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
