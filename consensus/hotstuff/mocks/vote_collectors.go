// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"
)

// VoteCollectors is an autogenerated mock type for the VoteCollectors type
type VoteCollectors struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *VoteCollectors) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// GetOrCreateCollector provides a mock function with given fields: view
func (_m *VoteCollectors) GetOrCreateCollector(view uint64) (hotstuff.VoteCollector, bool, error) {
	ret := _m.Called(view)

	var r0 hotstuff.VoteCollector
	if rf, ok := ret.Get(0).(func(uint64) hotstuff.VoteCollector); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hotstuff.VoteCollector)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(view)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PruneUpToView provides a mock function with given fields: lowestRetainedView
func (_m *VoteCollectors) PruneUpToView(lowestRetainedView uint64) {
	_m.Called(lowestRetainedView)
}

// Ready provides a mock function with given fields:
func (_m *VoteCollectors) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *VoteCollectors) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}
