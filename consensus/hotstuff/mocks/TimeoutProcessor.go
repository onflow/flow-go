// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "github.com/onflow/flow-go/consensus/hotstuff/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTimeoutProcessor is an autogenerated mock type for the TimeoutProcessor type
type MockTimeoutProcessor struct {
	mock.Mock
}

type MockTimeoutProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeoutProcessor) EXPECT() *MockTimeoutProcessor_Expecter {
	return &MockTimeoutProcessor_Expecter{mock: &_m.Mock}
}

// Process provides a mock function with given fields: timeout
func (_m *MockTimeoutProcessor) Process(timeout *model.TimeoutObject) error {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TimeoutObject) error); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTimeoutProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockTimeoutProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - timeout *model.TimeoutObject
func (_e *MockTimeoutProcessor_Expecter) Process(timeout interface{}) *MockTimeoutProcessor_Process_Call {
	return &MockTimeoutProcessor_Process_Call{Call: _e.mock.On("Process", timeout)}
}

func (_c *MockTimeoutProcessor_Process_Call) Run(run func(timeout *model.TimeoutObject)) *MockTimeoutProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockTimeoutProcessor_Process_Call) Return(_a0 error) *MockTimeoutProcessor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeoutProcessor_Process_Call) RunAndReturn(run func(*model.TimeoutObject) error) *MockTimeoutProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimeoutProcessor creates a new instance of MockTimeoutProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeoutProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeoutProcessor {
	mock := &MockTimeoutProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
