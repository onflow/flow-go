// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	model "github.com/onflow/flow-go/consensus/hotstuff/model"
	mock "github.com/stretchr/testify/mock"
)

// TimeoutCollector is an autogenerated mock type for the TimeoutCollector type
type TimeoutCollector struct {
	mock.Mock
}

// AddTimeout provides a mock function with given fields: timeoutObject
func (_m *TimeoutCollector) AddTimeout(timeoutObject *model.TimeoutObject) error {
	ret := _m.Called(timeoutObject)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TimeoutObject) error); ok {
		r0 = rf(timeoutObject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// View provides a mock function with given fields:
func (_m *TimeoutCollector) View() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

type mockConstructorTestingTNewTimeoutCollector interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimeoutCollector creates a new instance of TimeoutCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimeoutCollector(t mockConstructorTestingTNewTimeoutCollector) *TimeoutCollector {
	mock := &TimeoutCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
