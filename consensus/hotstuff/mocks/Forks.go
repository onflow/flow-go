// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockForks is an autogenerated mock type for the Forks type
type MockForks struct {
	mock.Mock
}

type MockForks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockForks) EXPECT() *MockForks_Expecter {
	return &MockForks_Expecter{mock: &_m.Mock}
}

// AddCertifiedBlock provides a mock function with given fields: certifiedBlock
func (_m *MockForks) AddCertifiedBlock(certifiedBlock *model.CertifiedBlock) error {
	ret := _m.Called(certifiedBlock)

	if len(ret) == 0 {
		panic("no return value specified for AddCertifiedBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.CertifiedBlock) error); ok {
		r0 = rf(certifiedBlock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockForks_AddCertifiedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCertifiedBlock'
type MockForks_AddCertifiedBlock_Call struct {
	*mock.Call
}

// AddCertifiedBlock is a helper method to define mock.On call
//   - certifiedBlock *model.CertifiedBlock
func (_e *MockForks_Expecter) AddCertifiedBlock(certifiedBlock interface{}) *MockForks_AddCertifiedBlock_Call {
	return &MockForks_AddCertifiedBlock_Call{Call: _e.mock.On("AddCertifiedBlock", certifiedBlock)}
}

func (_c *MockForks_AddCertifiedBlock_Call) Run(run func(certifiedBlock *model.CertifiedBlock)) *MockForks_AddCertifiedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.CertifiedBlock))
	})
	return _c
}

func (_c *MockForks_AddCertifiedBlock_Call) Return(_a0 error) *MockForks_AddCertifiedBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForks_AddCertifiedBlock_Call) RunAndReturn(run func(*model.CertifiedBlock) error) *MockForks_AddCertifiedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// AddValidatedBlock provides a mock function with given fields: proposal
func (_m *MockForks) AddValidatedBlock(proposal *model.Block) error {
	ret := _m.Called(proposal)

	if len(ret) == 0 {
		panic("no return value specified for AddValidatedBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Block) error); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockForks_AddValidatedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddValidatedBlock'
type MockForks_AddValidatedBlock_Call struct {
	*mock.Call
}

// AddValidatedBlock is a helper method to define mock.On call
//   - proposal *model.Block
func (_e *MockForks_Expecter) AddValidatedBlock(proposal interface{}) *MockForks_AddValidatedBlock_Call {
	return &MockForks_AddValidatedBlock_Call{Call: _e.mock.On("AddValidatedBlock", proposal)}
}

func (_c *MockForks_AddValidatedBlock_Call) Run(run func(proposal *model.Block)) *MockForks_AddValidatedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block))
	})
	return _c
}

func (_c *MockForks_AddValidatedBlock_Call) Return(_a0 error) *MockForks_AddValidatedBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForks_AddValidatedBlock_Call) RunAndReturn(run func(*model.Block) error) *MockForks_AddValidatedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// FinalityProof provides a mock function with no fields
func (_m *MockForks) FinalityProof() (*hotstuff.FinalityProof, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalityProof")
	}

	var r0 *hotstuff.FinalityProof
	var r1 bool
	if rf, ok := ret.Get(0).(func() (*hotstuff.FinalityProof, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.FinalityProof); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.FinalityProof)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockForks_FinalityProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalityProof'
type MockForks_FinalityProof_Call struct {
	*mock.Call
}

// FinalityProof is a helper method to define mock.On call
func (_e *MockForks_Expecter) FinalityProof() *MockForks_FinalityProof_Call {
	return &MockForks_FinalityProof_Call{Call: _e.mock.On("FinalityProof")}
}

func (_c *MockForks_FinalityProof_Call) Run(run func()) *MockForks_FinalityProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockForks_FinalityProof_Call) Return(_a0 *hotstuff.FinalityProof, _a1 bool) *MockForks_FinalityProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForks_FinalityProof_Call) RunAndReturn(run func() (*hotstuff.FinalityProof, bool)) *MockForks_FinalityProof_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizedBlock provides a mock function with no fields
func (_m *MockForks) FinalizedBlock() *model.Block {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizedBlock")
	}

	var r0 *model.Block
	if rf, ok := ret.Get(0).(func() *model.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Block)
		}
	}

	return r0
}

// MockForks_FinalizedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizedBlock'
type MockForks_FinalizedBlock_Call struct {
	*mock.Call
}

// FinalizedBlock is a helper method to define mock.On call
func (_e *MockForks_Expecter) FinalizedBlock() *MockForks_FinalizedBlock_Call {
	return &MockForks_FinalizedBlock_Call{Call: _e.mock.On("FinalizedBlock")}
}

func (_c *MockForks_FinalizedBlock_Call) Run(run func()) *MockForks_FinalizedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockForks_FinalizedBlock_Call) Return(_a0 *model.Block) *MockForks_FinalizedBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForks_FinalizedBlock_Call) RunAndReturn(run func() *model.Block) *MockForks_FinalizedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizedView provides a mock function with no fields
func (_m *MockForks) FinalizedView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizedView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockForks_FinalizedView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizedView'
type MockForks_FinalizedView_Call struct {
	*mock.Call
}

// FinalizedView is a helper method to define mock.On call
func (_e *MockForks_Expecter) FinalizedView() *MockForks_FinalizedView_Call {
	return &MockForks_FinalizedView_Call{Call: _e.mock.On("FinalizedView")}
}

func (_c *MockForks_FinalizedView_Call) Run(run func()) *MockForks_FinalizedView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockForks_FinalizedView_Call) Return(_a0 uint64) *MockForks_FinalizedView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForks_FinalizedView_Call) RunAndReturn(run func() uint64) *MockForks_FinalizedView_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlock provides a mock function with given fields: blockID
func (_m *MockForks) GetBlock(blockID flow.Identifier) (*model.Block, bool) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 *model.Block
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*model.Block, bool)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *model.Block); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockForks_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type MockForks_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockForks_Expecter) GetBlock(blockID interface{}) *MockForks_GetBlock_Call {
	return &MockForks_GetBlock_Call{Call: _e.mock.On("GetBlock", blockID)}
}

func (_c *MockForks_GetBlock_Call) Run(run func(blockID flow.Identifier)) *MockForks_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockForks_GetBlock_Call) Return(_a0 *model.Block, _a1 bool) *MockForks_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForks_GetBlock_Call) RunAndReturn(run func(flow.Identifier) (*model.Block, bool)) *MockForks_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocksForView provides a mock function with given fields: view
func (_m *MockForks) GetBlocksForView(view uint64) []*model.Block {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocksForView")
	}

	var r0 []*model.Block
	if rf, ok := ret.Get(0).(func(uint64) []*model.Block); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Block)
		}
	}

	return r0
}

// MockForks_GetBlocksForView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocksForView'
type MockForks_GetBlocksForView_Call struct {
	*mock.Call
}

// GetBlocksForView is a helper method to define mock.On call
//   - view uint64
func (_e *MockForks_Expecter) GetBlocksForView(view interface{}) *MockForks_GetBlocksForView_Call {
	return &MockForks_GetBlocksForView_Call{Call: _e.mock.On("GetBlocksForView", view)}
}

func (_c *MockForks_GetBlocksForView_Call) Run(run func(view uint64)) *MockForks_GetBlocksForView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockForks_GetBlocksForView_Call) Return(_a0 []*model.Block) *MockForks_GetBlocksForView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForks_GetBlocksForView_Call) RunAndReturn(run func(uint64) []*model.Block) *MockForks_GetBlocksForView_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockForks creates a new instance of MockForks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockForks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockForks {
	mock := &MockForks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
