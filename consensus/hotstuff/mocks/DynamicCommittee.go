// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockDynamicCommittee is an autogenerated mock type for the DynamicCommittee type
type MockDynamicCommittee struct {
	mock.Mock
}

type MockDynamicCommittee_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamicCommittee) EXPECT() *MockDynamicCommittee_Expecter {
	return &MockDynamicCommittee_Expecter{mock: &_m.Mock}
}

// DKG provides a mock function with given fields: view
func (_m *MockDynamicCommittee) DKG(view uint64) (hotstuff.DKG, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for DKG")
	}

	var r0 hotstuff.DKG
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (hotstuff.DKG, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) hotstuff.DKG); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hotstuff.DKG)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_DKG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DKG'
type MockDynamicCommittee_DKG_Call struct {
	*mock.Call
}

// DKG is a helper method to define mock.On call
//   - view uint64
func (_e *MockDynamicCommittee_Expecter) DKG(view interface{}) *MockDynamicCommittee_DKG_Call {
	return &MockDynamicCommittee_DKG_Call{Call: _e.mock.On("DKG", view)}
}

func (_c *MockDynamicCommittee_DKG_Call) Run(run func(view uint64)) *MockDynamicCommittee_DKG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDynamicCommittee_DKG_Call) Return(_a0 hotstuff.DKG, _a1 error) *MockDynamicCommittee_DKG_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_DKG_Call) RunAndReturn(run func(uint64) (hotstuff.DKG, error)) *MockDynamicCommittee_DKG_Call {
	_c.Call.Return(run)
	return _c
}

// IdentitiesByBlock provides a mock function with given fields: blockID
func (_m *MockDynamicCommittee) IdentitiesByBlock(blockID flow.Identifier) (flow.GenericIdentityList[flow.Identity], error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for IdentitiesByBlock")
	}

	var r0 flow.GenericIdentityList[flow.Identity]
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.GenericIdentityList[flow.Identity], error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.GenericIdentityList[flow.Identity]); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.Identity])
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_IdentitiesByBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentitiesByBlock'
type MockDynamicCommittee_IdentitiesByBlock_Call struct {
	*mock.Call
}

// IdentitiesByBlock is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockDynamicCommittee_Expecter) IdentitiesByBlock(blockID interface{}) *MockDynamicCommittee_IdentitiesByBlock_Call {
	return &MockDynamicCommittee_IdentitiesByBlock_Call{Call: _e.mock.On("IdentitiesByBlock", blockID)}
}

func (_c *MockDynamicCommittee_IdentitiesByBlock_Call) Run(run func(blockID flow.Identifier)) *MockDynamicCommittee_IdentitiesByBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockDynamicCommittee_IdentitiesByBlock_Call) Return(_a0 flow.GenericIdentityList[flow.Identity], _a1 error) *MockDynamicCommittee_IdentitiesByBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_IdentitiesByBlock_Call) RunAndReturn(run func(flow.Identifier) (flow.GenericIdentityList[flow.Identity], error)) *MockDynamicCommittee_IdentitiesByBlock_Call {
	_c.Call.Return(run)
	return _c
}

// IdentitiesByEpoch provides a mock function with given fields: view
func (_m *MockDynamicCommittee) IdentitiesByEpoch(view uint64) (flow.GenericIdentityList[flow.IdentitySkeleton], error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for IdentitiesByEpoch")
	}

	var r0 flow.GenericIdentityList[flow.IdentitySkeleton]
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (flow.GenericIdentityList[flow.IdentitySkeleton], error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) flow.GenericIdentityList[flow.IdentitySkeleton]); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.IdentitySkeleton])
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_IdentitiesByEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentitiesByEpoch'
type MockDynamicCommittee_IdentitiesByEpoch_Call struct {
	*mock.Call
}

// IdentitiesByEpoch is a helper method to define mock.On call
//   - view uint64
func (_e *MockDynamicCommittee_Expecter) IdentitiesByEpoch(view interface{}) *MockDynamicCommittee_IdentitiesByEpoch_Call {
	return &MockDynamicCommittee_IdentitiesByEpoch_Call{Call: _e.mock.On("IdentitiesByEpoch", view)}
}

func (_c *MockDynamicCommittee_IdentitiesByEpoch_Call) Run(run func(view uint64)) *MockDynamicCommittee_IdentitiesByEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDynamicCommittee_IdentitiesByEpoch_Call) Return(_a0 flow.GenericIdentityList[flow.IdentitySkeleton], _a1 error) *MockDynamicCommittee_IdentitiesByEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_IdentitiesByEpoch_Call) RunAndReturn(run func(uint64) (flow.GenericIdentityList[flow.IdentitySkeleton], error)) *MockDynamicCommittee_IdentitiesByEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// IdentityByBlock provides a mock function with given fields: blockID, participantID
func (_m *MockDynamicCommittee) IdentityByBlock(blockID flow.Identifier, participantID flow.Identifier) (*flow.Identity, error) {
	ret := _m.Called(blockID, participantID)

	if len(ret) == 0 {
		panic("no return value specified for IdentityByBlock")
	}

	var r0 *flow.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) (*flow.Identity, error)); ok {
		return rf(blockID, participantID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) *flow.Identity); ok {
		r0 = rf(blockID, participantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, flow.Identifier) error); ok {
		r1 = rf(blockID, participantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_IdentityByBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentityByBlock'
type MockDynamicCommittee_IdentityByBlock_Call struct {
	*mock.Call
}

// IdentityByBlock is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - participantID flow.Identifier
func (_e *MockDynamicCommittee_Expecter) IdentityByBlock(blockID interface{}, participantID interface{}) *MockDynamicCommittee_IdentityByBlock_Call {
	return &MockDynamicCommittee_IdentityByBlock_Call{Call: _e.mock.On("IdentityByBlock", blockID, participantID)}
}

func (_c *MockDynamicCommittee_IdentityByBlock_Call) Run(run func(blockID flow.Identifier, participantID flow.Identifier)) *MockDynamicCommittee_IdentityByBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockDynamicCommittee_IdentityByBlock_Call) Return(_a0 *flow.Identity, _a1 error) *MockDynamicCommittee_IdentityByBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_IdentityByBlock_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) (*flow.Identity, error)) *MockDynamicCommittee_IdentityByBlock_Call {
	_c.Call.Return(run)
	return _c
}

// IdentityByEpoch provides a mock function with given fields: view, participantID
func (_m *MockDynamicCommittee) IdentityByEpoch(view uint64, participantID flow.Identifier) (*flow.IdentitySkeleton, error) {
	ret := _m.Called(view, participantID)

	if len(ret) == 0 {
		panic("no return value specified for IdentityByEpoch")
	}

	var r0 *flow.IdentitySkeleton
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) (*flow.IdentitySkeleton, error)); ok {
		return rf(view, participantID)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) *flow.IdentitySkeleton); ok {
		r0 = rf(view, participantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.IdentitySkeleton)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier) error); ok {
		r1 = rf(view, participantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_IdentityByEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentityByEpoch'
type MockDynamicCommittee_IdentityByEpoch_Call struct {
	*mock.Call
}

// IdentityByEpoch is a helper method to define mock.On call
//   - view uint64
//   - participantID flow.Identifier
func (_e *MockDynamicCommittee_Expecter) IdentityByEpoch(view interface{}, participantID interface{}) *MockDynamicCommittee_IdentityByEpoch_Call {
	return &MockDynamicCommittee_IdentityByEpoch_Call{Call: _e.mock.On("IdentityByEpoch", view, participantID)}
}

func (_c *MockDynamicCommittee_IdentityByEpoch_Call) Run(run func(view uint64, participantID flow.Identifier)) *MockDynamicCommittee_IdentityByEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockDynamicCommittee_IdentityByEpoch_Call) Return(_a0 *flow.IdentitySkeleton, _a1 error) *MockDynamicCommittee_IdentityByEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_IdentityByEpoch_Call) RunAndReturn(run func(uint64, flow.Identifier) (*flow.IdentitySkeleton, error)) *MockDynamicCommittee_IdentityByEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// LeaderForView provides a mock function with given fields: view
func (_m *MockDynamicCommittee) LeaderForView(view uint64) (flow.Identifier, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for LeaderForView")
	}

	var r0 flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (flow.Identifier, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) flow.Identifier); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_LeaderForView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaderForView'
type MockDynamicCommittee_LeaderForView_Call struct {
	*mock.Call
}

// LeaderForView is a helper method to define mock.On call
//   - view uint64
func (_e *MockDynamicCommittee_Expecter) LeaderForView(view interface{}) *MockDynamicCommittee_LeaderForView_Call {
	return &MockDynamicCommittee_LeaderForView_Call{Call: _e.mock.On("LeaderForView", view)}
}

func (_c *MockDynamicCommittee_LeaderForView_Call) Run(run func(view uint64)) *MockDynamicCommittee_LeaderForView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDynamicCommittee_LeaderForView_Call) Return(_a0 flow.Identifier, _a1 error) *MockDynamicCommittee_LeaderForView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_LeaderForView_Call) RunAndReturn(run func(uint64) (flow.Identifier, error)) *MockDynamicCommittee_LeaderForView_Call {
	_c.Call.Return(run)
	return _c
}

// QuorumThresholdForView provides a mock function with given fields: view
func (_m *MockDynamicCommittee) QuorumThresholdForView(view uint64) (uint64, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for QuorumThresholdForView")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_QuorumThresholdForView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuorumThresholdForView'
type MockDynamicCommittee_QuorumThresholdForView_Call struct {
	*mock.Call
}

// QuorumThresholdForView is a helper method to define mock.On call
//   - view uint64
func (_e *MockDynamicCommittee_Expecter) QuorumThresholdForView(view interface{}) *MockDynamicCommittee_QuorumThresholdForView_Call {
	return &MockDynamicCommittee_QuorumThresholdForView_Call{Call: _e.mock.On("QuorumThresholdForView", view)}
}

func (_c *MockDynamicCommittee_QuorumThresholdForView_Call) Run(run func(view uint64)) *MockDynamicCommittee_QuorumThresholdForView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDynamicCommittee_QuorumThresholdForView_Call) Return(_a0 uint64, _a1 error) *MockDynamicCommittee_QuorumThresholdForView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_QuorumThresholdForView_Call) RunAndReturn(run func(uint64) (uint64, error)) *MockDynamicCommittee_QuorumThresholdForView_Call {
	_c.Call.Return(run)
	return _c
}

// Self provides a mock function with no fields
func (_m *MockDynamicCommittee) Self() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Self")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockDynamicCommittee_Self_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Self'
type MockDynamicCommittee_Self_Call struct {
	*mock.Call
}

// Self is a helper method to define mock.On call
func (_e *MockDynamicCommittee_Expecter) Self() *MockDynamicCommittee_Self_Call {
	return &MockDynamicCommittee_Self_Call{Call: _e.mock.On("Self")}
}

func (_c *MockDynamicCommittee_Self_Call) Run(run func()) *MockDynamicCommittee_Self_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDynamicCommittee_Self_Call) Return(_a0 flow.Identifier) *MockDynamicCommittee_Self_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamicCommittee_Self_Call) RunAndReturn(run func() flow.Identifier) *MockDynamicCommittee_Self_Call {
	_c.Call.Return(run)
	return _c
}

// TimeoutThresholdForView provides a mock function with given fields: view
func (_m *MockDynamicCommittee) TimeoutThresholdForView(view uint64) (uint64, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for TimeoutThresholdForView")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicCommittee_TimeoutThresholdForView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeoutThresholdForView'
type MockDynamicCommittee_TimeoutThresholdForView_Call struct {
	*mock.Call
}

// TimeoutThresholdForView is a helper method to define mock.On call
//   - view uint64
func (_e *MockDynamicCommittee_Expecter) TimeoutThresholdForView(view interface{}) *MockDynamicCommittee_TimeoutThresholdForView_Call {
	return &MockDynamicCommittee_TimeoutThresholdForView_Call{Call: _e.mock.On("TimeoutThresholdForView", view)}
}

func (_c *MockDynamicCommittee_TimeoutThresholdForView_Call) Run(run func(view uint64)) *MockDynamicCommittee_TimeoutThresholdForView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDynamicCommittee_TimeoutThresholdForView_Call) Return(_a0 uint64, _a1 error) *MockDynamicCommittee_TimeoutThresholdForView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamicCommittee_TimeoutThresholdForView_Call) RunAndReturn(run func(uint64) (uint64, error)) *MockDynamicCommittee_TimeoutThresholdForView_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamicCommittee creates a new instance of MockDynamicCommittee. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamicCommittee(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamicCommittee {
	mock := &MockDynamicCommittee{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
