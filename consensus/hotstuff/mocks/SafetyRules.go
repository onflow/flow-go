// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockSafetyRules is an autogenerated mock type for the SafetyRules type
type MockSafetyRules struct {
	mock.Mock
}

type MockSafetyRules_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSafetyRules) EXPECT() *MockSafetyRules_Expecter {
	return &MockSafetyRules_Expecter{mock: &_m.Mock}
}

// ProduceTimeout provides a mock function with given fields: curView, newestQC, lastViewTC
func (_m *MockSafetyRules) ProduceTimeout(curView uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate) (*model.TimeoutObject, error) {
	ret := _m.Called(curView, newestQC, lastViewTC)

	if len(ret) == 0 {
		panic("no return value specified for ProduceTimeout")
	}

	var r0 *model.TimeoutObject
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) (*model.TimeoutObject, error)); ok {
		return rf(curView, newestQC, lastViewTC)
	}
	if rf, ok := ret.Get(0).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) *model.TimeoutObject); ok {
		r0 = rf(curView, newestQC, lastViewTC)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TimeoutObject)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) error); ok {
		r1 = rf(curView, newestQC, lastViewTC)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSafetyRules_ProduceTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceTimeout'
type MockSafetyRules_ProduceTimeout_Call struct {
	*mock.Call
}

// ProduceTimeout is a helper method to define mock.On call
//   - curView uint64
//   - newestQC *flow.QuorumCertificate
//   - lastViewTC *flow.TimeoutCertificate
func (_e *MockSafetyRules_Expecter) ProduceTimeout(curView interface{}, newestQC interface{}, lastViewTC interface{}) *MockSafetyRules_ProduceTimeout_Call {
	return &MockSafetyRules_ProduceTimeout_Call{Call: _e.mock.On("ProduceTimeout", curView, newestQC, lastViewTC)}
}

func (_c *MockSafetyRules_ProduceTimeout_Call) Run(run func(curView uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate)) *MockSafetyRules_ProduceTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.QuorumCertificate), args[2].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockSafetyRules_ProduceTimeout_Call) Return(_a0 *model.TimeoutObject, _a1 error) *MockSafetyRules_ProduceTimeout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSafetyRules_ProduceTimeout_Call) RunAndReturn(run func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) (*model.TimeoutObject, error)) *MockSafetyRules_ProduceTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// ProduceVote provides a mock function with given fields: proposal, curView
func (_m *MockSafetyRules) ProduceVote(proposal *model.SignedProposal, curView uint64) (*model.Vote, error) {
	ret := _m.Called(proposal, curView)

	if len(ret) == 0 {
		panic("no return value specified for ProduceVote")
	}

	var r0 *model.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.SignedProposal, uint64) (*model.Vote, error)); ok {
		return rf(proposal, curView)
	}
	if rf, ok := ret.Get(0).(func(*model.SignedProposal, uint64) *model.Vote); ok {
		r0 = rf(proposal, curView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vote)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.SignedProposal, uint64) error); ok {
		r1 = rf(proposal, curView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSafetyRules_ProduceVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceVote'
type MockSafetyRules_ProduceVote_Call struct {
	*mock.Call
}

// ProduceVote is a helper method to define mock.On call
//   - proposal *model.SignedProposal
//   - curView uint64
func (_e *MockSafetyRules_Expecter) ProduceVote(proposal interface{}, curView interface{}) *MockSafetyRules_ProduceVote_Call {
	return &MockSafetyRules_ProduceVote_Call{Call: _e.mock.On("ProduceVote", proposal, curView)}
}

func (_c *MockSafetyRules_ProduceVote_Call) Run(run func(proposal *model.SignedProposal, curView uint64)) *MockSafetyRules_ProduceVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SignedProposal), args[1].(uint64))
	})
	return _c
}

func (_c *MockSafetyRules_ProduceVote_Call) Return(_a0 *model.Vote, _a1 error) *MockSafetyRules_ProduceVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSafetyRules_ProduceVote_Call) RunAndReturn(run func(*model.SignedProposal, uint64) (*model.Vote, error)) *MockSafetyRules_ProduceVote_Call {
	_c.Call.Return(run)
	return _c
}

// SignOwnProposal provides a mock function with given fields: unsignedProposal
func (_m *MockSafetyRules) SignOwnProposal(unsignedProposal *model.Proposal) (*model.Vote, error) {
	ret := _m.Called(unsignedProposal)

	if len(ret) == 0 {
		panic("no return value specified for SignOwnProposal")
	}

	var r0 *model.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Proposal) (*model.Vote, error)); ok {
		return rf(unsignedProposal)
	}
	if rf, ok := ret.Get(0).(func(*model.Proposal) *model.Vote); ok {
		r0 = rf(unsignedProposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vote)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Proposal) error); ok {
		r1 = rf(unsignedProposal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSafetyRules_SignOwnProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignOwnProposal'
type MockSafetyRules_SignOwnProposal_Call struct {
	*mock.Call
}

// SignOwnProposal is a helper method to define mock.On call
//   - unsignedProposal *model.Proposal
func (_e *MockSafetyRules_Expecter) SignOwnProposal(unsignedProposal interface{}) *MockSafetyRules_SignOwnProposal_Call {
	return &MockSafetyRules_SignOwnProposal_Call{Call: _e.mock.On("SignOwnProposal", unsignedProposal)}
}

func (_c *MockSafetyRules_SignOwnProposal_Call) Run(run func(unsignedProposal *model.Proposal)) *MockSafetyRules_SignOwnProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Proposal))
	})
	return _c
}

func (_c *MockSafetyRules_SignOwnProposal_Call) Return(_a0 *model.Vote, _a1 error) *MockSafetyRules_SignOwnProposal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSafetyRules_SignOwnProposal_Call) RunAndReturn(run func(*model.Proposal) (*model.Vote, error)) *MockSafetyRules_SignOwnProposal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSafetyRules creates a new instance of MockSafetyRules. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSafetyRules(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSafetyRules {
	mock := &MockSafetyRules{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
