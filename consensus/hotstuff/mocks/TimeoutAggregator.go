// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockTimeoutAggregator is an autogenerated mock type for the TimeoutAggregator type
type MockTimeoutAggregator struct {
	mock.Mock
}

type MockTimeoutAggregator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeoutAggregator) EXPECT() *MockTimeoutAggregator_Expecter {
	return &MockTimeoutAggregator_Expecter{mock: &_m.Mock}
}

// AddTimeout provides a mock function with given fields: timeoutObject
func (_m *MockTimeoutAggregator) AddTimeout(timeoutObject *model.TimeoutObject) {
	_m.Called(timeoutObject)
}

// MockTimeoutAggregator_AddTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTimeout'
type MockTimeoutAggregator_AddTimeout_Call struct {
	*mock.Call
}

// AddTimeout is a helper method to define mock.On call
//   - timeoutObject *model.TimeoutObject
func (_e *MockTimeoutAggregator_Expecter) AddTimeout(timeoutObject interface{}) *MockTimeoutAggregator_AddTimeout_Call {
	return &MockTimeoutAggregator_AddTimeout_Call{Call: _e.mock.On("AddTimeout", timeoutObject)}
}

func (_c *MockTimeoutAggregator_AddTimeout_Call) Run(run func(timeoutObject *model.TimeoutObject)) *MockTimeoutAggregator_AddTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockTimeoutAggregator_AddTimeout_Call) Return() *MockTimeoutAggregator_AddTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutAggregator_AddTimeout_Call) RunAndReturn(run func(*model.TimeoutObject)) *MockTimeoutAggregator_AddTimeout_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockTimeoutAggregator) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockTimeoutAggregator_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockTimeoutAggregator_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockTimeoutAggregator_Expecter) Done() *MockTimeoutAggregator_Done_Call {
	return &MockTimeoutAggregator_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockTimeoutAggregator_Done_Call) Run(run func()) *MockTimeoutAggregator_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeoutAggregator_Done_Call) Return(_a0 <-chan struct{}) *MockTimeoutAggregator_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeoutAggregator_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockTimeoutAggregator_Done_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToView provides a mock function with given fields: lowestRetainedView
func (_m *MockTimeoutAggregator) PruneUpToView(lowestRetainedView uint64) {
	_m.Called(lowestRetainedView)
}

// MockTimeoutAggregator_PruneUpToView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToView'
type MockTimeoutAggregator_PruneUpToView_Call struct {
	*mock.Call
}

// PruneUpToView is a helper method to define mock.On call
//   - lowestRetainedView uint64
func (_e *MockTimeoutAggregator_Expecter) PruneUpToView(lowestRetainedView interface{}) *MockTimeoutAggregator_PruneUpToView_Call {
	return &MockTimeoutAggregator_PruneUpToView_Call{Call: _e.mock.On("PruneUpToView", lowestRetainedView)}
}

func (_c *MockTimeoutAggregator_PruneUpToView_Call) Run(run func(lowestRetainedView uint64)) *MockTimeoutAggregator_PruneUpToView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockTimeoutAggregator_PruneUpToView_Call) Return() *MockTimeoutAggregator_PruneUpToView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutAggregator_PruneUpToView_Call) RunAndReturn(run func(uint64)) *MockTimeoutAggregator_PruneUpToView_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockTimeoutAggregator) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockTimeoutAggregator_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockTimeoutAggregator_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockTimeoutAggregator_Expecter) Ready() *MockTimeoutAggregator_Ready_Call {
	return &MockTimeoutAggregator_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockTimeoutAggregator_Ready_Call) Run(run func()) *MockTimeoutAggregator_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeoutAggregator_Ready_Call) Return(_a0 <-chan struct{}) *MockTimeoutAggregator_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeoutAggregator_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockTimeoutAggregator_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockTimeoutAggregator) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockTimeoutAggregator_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTimeoutAggregator_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockTimeoutAggregator_Expecter) Start(_a0 interface{}) *MockTimeoutAggregator_Start_Call {
	return &MockTimeoutAggregator_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockTimeoutAggregator_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockTimeoutAggregator_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockTimeoutAggregator_Start_Call) Return() *MockTimeoutAggregator_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeoutAggregator_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockTimeoutAggregator_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockTimeoutAggregator creates a new instance of MockTimeoutAggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeoutAggregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeoutAggregator {
	mock := &MockTimeoutAggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
