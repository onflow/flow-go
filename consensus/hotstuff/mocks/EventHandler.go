// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"

	time "time"
)

// MockEventHandler is an autogenerated mock type for the EventHandler type
type MockEventHandler struct {
	mock.Mock
}

type MockEventHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventHandler) EXPECT() *MockEventHandler_Expecter {
	return &MockEventHandler_Expecter{mock: &_m.Mock}
}

// OnLocalTimeout provides a mock function with no fields
func (_m *MockEventHandler) OnLocalTimeout() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnLocalTimeout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventHandler_OnLocalTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnLocalTimeout'
type MockEventHandler_OnLocalTimeout_Call struct {
	*mock.Call
}

// OnLocalTimeout is a helper method to define mock.On call
func (_e *MockEventHandler_Expecter) OnLocalTimeout() *MockEventHandler_OnLocalTimeout_Call {
	return &MockEventHandler_OnLocalTimeout_Call{Call: _e.mock.On("OnLocalTimeout")}
}

func (_c *MockEventHandler_OnLocalTimeout_Call) Run(run func()) *MockEventHandler_OnLocalTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventHandler_OnLocalTimeout_Call) Return(_a0 error) *MockEventHandler_OnLocalTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_OnLocalTimeout_Call) RunAndReturn(run func() error) *MockEventHandler_OnLocalTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// OnPartialTcCreated provides a mock function with given fields: partialTC
func (_m *MockEventHandler) OnPartialTcCreated(partialTC *hotstuff.PartialTcCreated) error {
	ret := _m.Called(partialTC)

	if len(ret) == 0 {
		panic("no return value specified for OnPartialTcCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*hotstuff.PartialTcCreated) error); ok {
		r0 = rf(partialTC)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventHandler_OnPartialTcCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPartialTcCreated'
type MockEventHandler_OnPartialTcCreated_Call struct {
	*mock.Call
}

// OnPartialTcCreated is a helper method to define mock.On call
//   - partialTC *hotstuff.PartialTcCreated
func (_e *MockEventHandler_Expecter) OnPartialTcCreated(partialTC interface{}) *MockEventHandler_OnPartialTcCreated_Call {
	return &MockEventHandler_OnPartialTcCreated_Call{Call: _e.mock.On("OnPartialTcCreated", partialTC)}
}

func (_c *MockEventHandler_OnPartialTcCreated_Call) Run(run func(partialTC *hotstuff.PartialTcCreated)) *MockEventHandler_OnPartialTcCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*hotstuff.PartialTcCreated))
	})
	return _c
}

func (_c *MockEventHandler_OnPartialTcCreated_Call) Return(_a0 error) *MockEventHandler_OnPartialTcCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_OnPartialTcCreated_Call) RunAndReturn(run func(*hotstuff.PartialTcCreated) error) *MockEventHandler_OnPartialTcCreated_Call {
	_c.Call.Return(run)
	return _c
}

// OnReceiveProposal provides a mock function with given fields: proposal
func (_m *MockEventHandler) OnReceiveProposal(proposal *model.SignedProposal) error {
	ret := _m.Called(proposal)

	if len(ret) == 0 {
		panic("no return value specified for OnReceiveProposal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.SignedProposal) error); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventHandler_OnReceiveProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveProposal'
type MockEventHandler_OnReceiveProposal_Call struct {
	*mock.Call
}

// OnReceiveProposal is a helper method to define mock.On call
//   - proposal *model.SignedProposal
func (_e *MockEventHandler_Expecter) OnReceiveProposal(proposal interface{}) *MockEventHandler_OnReceiveProposal_Call {
	return &MockEventHandler_OnReceiveProposal_Call{Call: _e.mock.On("OnReceiveProposal", proposal)}
}

func (_c *MockEventHandler_OnReceiveProposal_Call) Run(run func(proposal *model.SignedProposal)) *MockEventHandler_OnReceiveProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockEventHandler_OnReceiveProposal_Call) Return(_a0 error) *MockEventHandler_OnReceiveProposal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_OnReceiveProposal_Call) RunAndReturn(run func(*model.SignedProposal) error) *MockEventHandler_OnReceiveProposal_Call {
	_c.Call.Return(run)
	return _c
}

// OnReceiveQc provides a mock function with given fields: qc
func (_m *MockEventHandler) OnReceiveQc(qc *flow.QuorumCertificate) error {
	ret := _m.Called(qc)

	if len(ret) == 0 {
		panic("no return value specified for OnReceiveQc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.QuorumCertificate) error); ok {
		r0 = rf(qc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventHandler_OnReceiveQc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveQc'
type MockEventHandler_OnReceiveQc_Call struct {
	*mock.Call
}

// OnReceiveQc is a helper method to define mock.On call
//   - qc *flow.QuorumCertificate
func (_e *MockEventHandler_Expecter) OnReceiveQc(qc interface{}) *MockEventHandler_OnReceiveQc_Call {
	return &MockEventHandler_OnReceiveQc_Call{Call: _e.mock.On("OnReceiveQc", qc)}
}

func (_c *MockEventHandler_OnReceiveQc_Call) Run(run func(qc *flow.QuorumCertificate)) *MockEventHandler_OnReceiveQc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockEventHandler_OnReceiveQc_Call) Return(_a0 error) *MockEventHandler_OnReceiveQc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_OnReceiveQc_Call) RunAndReturn(run func(*flow.QuorumCertificate) error) *MockEventHandler_OnReceiveQc_Call {
	_c.Call.Return(run)
	return _c
}

// OnReceiveTc provides a mock function with given fields: tc
func (_m *MockEventHandler) OnReceiveTc(tc *flow.TimeoutCertificate) error {
	ret := _m.Called(tc)

	if len(ret) == 0 {
		panic("no return value specified for OnReceiveTc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.TimeoutCertificate) error); ok {
		r0 = rf(tc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventHandler_OnReceiveTc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveTc'
type MockEventHandler_OnReceiveTc_Call struct {
	*mock.Call
}

// OnReceiveTc is a helper method to define mock.On call
//   - tc *flow.TimeoutCertificate
func (_e *MockEventHandler_Expecter) OnReceiveTc(tc interface{}) *MockEventHandler_OnReceiveTc_Call {
	return &MockEventHandler_OnReceiveTc_Call{Call: _e.mock.On("OnReceiveTc", tc)}
}

func (_c *MockEventHandler_OnReceiveTc_Call) Run(run func(tc *flow.TimeoutCertificate)) *MockEventHandler_OnReceiveTc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockEventHandler_OnReceiveTc_Call) Return(_a0 error) *MockEventHandler_OnReceiveTc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_OnReceiveTc_Call) RunAndReturn(run func(*flow.TimeoutCertificate) error) *MockEventHandler_OnReceiveTc_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockEventHandler) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventHandler_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEventHandler_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventHandler_Expecter) Start(ctx interface{}) *MockEventHandler_Start_Call {
	return &MockEventHandler_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEventHandler_Start_Call) Run(run func(ctx context.Context)) *MockEventHandler_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventHandler_Start_Call) Return(_a0 error) *MockEventHandler_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_Start_Call) RunAndReturn(run func(context.Context) error) *MockEventHandler_Start_Call {
	_c.Call.Return(run)
	return _c
}

// TimeoutChannel provides a mock function with no fields
func (_m *MockEventHandler) TimeoutChannel() <-chan time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TimeoutChannel")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func() <-chan time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// MockEventHandler_TimeoutChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeoutChannel'
type MockEventHandler_TimeoutChannel_Call struct {
	*mock.Call
}

// TimeoutChannel is a helper method to define mock.On call
func (_e *MockEventHandler_Expecter) TimeoutChannel() *MockEventHandler_TimeoutChannel_Call {
	return &MockEventHandler_TimeoutChannel_Call{Call: _e.mock.On("TimeoutChannel")}
}

func (_c *MockEventHandler_TimeoutChannel_Call) Run(run func()) *MockEventHandler_TimeoutChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventHandler_TimeoutChannel_Call) Return(_a0 <-chan time.Time) *MockEventHandler_TimeoutChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_TimeoutChannel_Call) RunAndReturn(run func() <-chan time.Time) *MockEventHandler_TimeoutChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventHandler creates a new instance of MockEventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventHandler {
	mock := &MockEventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
