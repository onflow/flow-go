// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator struct {
	mock.Mock
}

type MockValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidator) EXPECT() *MockValidator_Expecter {
	return &MockValidator_Expecter{mock: &_m.Mock}
}

// ValidateProposal provides a mock function with given fields: proposal
func (_m *MockValidator) ValidateProposal(proposal *model.SignedProposal) error {
	ret := _m.Called(proposal)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProposal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.SignedProposal) error); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidator_ValidateProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProposal'
type MockValidator_ValidateProposal_Call struct {
	*mock.Call
}

// ValidateProposal is a helper method to define mock.On call
//   - proposal *model.SignedProposal
func (_e *MockValidator_Expecter) ValidateProposal(proposal interface{}) *MockValidator_ValidateProposal_Call {
	return &MockValidator_ValidateProposal_Call{Call: _e.mock.On("ValidateProposal", proposal)}
}

func (_c *MockValidator_ValidateProposal_Call) Run(run func(proposal *model.SignedProposal)) *MockValidator_ValidateProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockValidator_ValidateProposal_Call) Return(_a0 error) *MockValidator_ValidateProposal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidator_ValidateProposal_Call) RunAndReturn(run func(*model.SignedProposal) error) *MockValidator_ValidateProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateQC provides a mock function with given fields: qc
func (_m *MockValidator) ValidateQC(qc *flow.QuorumCertificate) error {
	ret := _m.Called(qc)

	if len(ret) == 0 {
		panic("no return value specified for ValidateQC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.QuorumCertificate) error); ok {
		r0 = rf(qc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidator_ValidateQC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateQC'
type MockValidator_ValidateQC_Call struct {
	*mock.Call
}

// ValidateQC is a helper method to define mock.On call
//   - qc *flow.QuorumCertificate
func (_e *MockValidator_Expecter) ValidateQC(qc interface{}) *MockValidator_ValidateQC_Call {
	return &MockValidator_ValidateQC_Call{Call: _e.mock.On("ValidateQC", qc)}
}

func (_c *MockValidator_ValidateQC_Call) Run(run func(qc *flow.QuorumCertificate)) *MockValidator_ValidateQC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockValidator_ValidateQC_Call) Return(_a0 error) *MockValidator_ValidateQC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidator_ValidateQC_Call) RunAndReturn(run func(*flow.QuorumCertificate) error) *MockValidator_ValidateQC_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTC provides a mock function with given fields: tc
func (_m *MockValidator) ValidateTC(tc *flow.TimeoutCertificate) error {
	ret := _m.Called(tc)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.TimeoutCertificate) error); ok {
		r0 = rf(tc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValidator_ValidateTC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTC'
type MockValidator_ValidateTC_Call struct {
	*mock.Call
}

// ValidateTC is a helper method to define mock.On call
//   - tc *flow.TimeoutCertificate
func (_e *MockValidator_Expecter) ValidateTC(tc interface{}) *MockValidator_ValidateTC_Call {
	return &MockValidator_ValidateTC_Call{Call: _e.mock.On("ValidateTC", tc)}
}

func (_c *MockValidator_ValidateTC_Call) Run(run func(tc *flow.TimeoutCertificate)) *MockValidator_ValidateTC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockValidator_ValidateTC_Call) Return(_a0 error) *MockValidator_ValidateTC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValidator_ValidateTC_Call) RunAndReturn(run func(*flow.TimeoutCertificate) error) *MockValidator_ValidateTC_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateVote provides a mock function with given fields: vote
func (_m *MockValidator) ValidateVote(vote *model.Vote) (*flow.IdentitySkeleton, error) {
	ret := _m.Called(vote)

	if len(ret) == 0 {
		panic("no return value specified for ValidateVote")
	}

	var r0 *flow.IdentitySkeleton
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Vote) (*flow.IdentitySkeleton, error)); ok {
		return rf(vote)
	}
	if rf, ok := ret.Get(0).(func(*model.Vote) *flow.IdentitySkeleton); ok {
		r0 = rf(vote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.IdentitySkeleton)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Vote) error); ok {
		r1 = rf(vote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_ValidateVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateVote'
type MockValidator_ValidateVote_Call struct {
	*mock.Call
}

// ValidateVote is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockValidator_Expecter) ValidateVote(vote interface{}) *MockValidator_ValidateVote_Call {
	return &MockValidator_ValidateVote_Call{Call: _e.mock.On("ValidateVote", vote)}
}

func (_c *MockValidator_ValidateVote_Call) Run(run func(vote *model.Vote)) *MockValidator_ValidateVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockValidator_ValidateVote_Call) Return(_a0 *flow.IdentitySkeleton, _a1 error) *MockValidator_ValidateVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_ValidateVote_Call) RunAndReturn(run func(*model.Vote) (*flow.IdentitySkeleton, error)) *MockValidator_ValidateVote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
