// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	mock "github.com/stretchr/testify/mock"
)

// MockPersisterReader is an autogenerated mock type for the PersisterReader type
type MockPersisterReader struct {
	mock.Mock
}

type MockPersisterReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersisterReader) EXPECT() *MockPersisterReader_Expecter {
	return &MockPersisterReader_Expecter{mock: &_m.Mock}
}

// GetLivenessData provides a mock function with no fields
func (_m *MockPersisterReader) GetLivenessData() (*hotstuff.LivenessData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLivenessData")
	}

	var r0 *hotstuff.LivenessData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*hotstuff.LivenessData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.LivenessData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.LivenessData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersisterReader_GetLivenessData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLivenessData'
type MockPersisterReader_GetLivenessData_Call struct {
	*mock.Call
}

// GetLivenessData is a helper method to define mock.On call
func (_e *MockPersisterReader_Expecter) GetLivenessData() *MockPersisterReader_GetLivenessData_Call {
	return &MockPersisterReader_GetLivenessData_Call{Call: _e.mock.On("GetLivenessData")}
}

func (_c *MockPersisterReader_GetLivenessData_Call) Run(run func()) *MockPersisterReader_GetLivenessData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersisterReader_GetLivenessData_Call) Return(_a0 *hotstuff.LivenessData, _a1 error) *MockPersisterReader_GetLivenessData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersisterReader_GetLivenessData_Call) RunAndReturn(run func() (*hotstuff.LivenessData, error)) *MockPersisterReader_GetLivenessData_Call {
	_c.Call.Return(run)
	return _c
}

// GetSafetyData provides a mock function with no fields
func (_m *MockPersisterReader) GetSafetyData() (*hotstuff.SafetyData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSafetyData")
	}

	var r0 *hotstuff.SafetyData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*hotstuff.SafetyData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.SafetyData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.SafetyData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersisterReader_GetSafetyData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSafetyData'
type MockPersisterReader_GetSafetyData_Call struct {
	*mock.Call
}

// GetSafetyData is a helper method to define mock.On call
func (_e *MockPersisterReader_Expecter) GetSafetyData() *MockPersisterReader_GetSafetyData_Call {
	return &MockPersisterReader_GetSafetyData_Call{Call: _e.mock.On("GetSafetyData")}
}

func (_c *MockPersisterReader_GetSafetyData_Call) Run(run func()) *MockPersisterReader_GetSafetyData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersisterReader_GetSafetyData_Call) Return(_a0 *hotstuff.SafetyData, _a1 error) *MockPersisterReader_GetSafetyData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersisterReader_GetSafetyData_Call) RunAndReturn(run func() (*hotstuff.SafetyData, error)) *MockPersisterReader_GetSafetyData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersisterReader creates a new instance of MockPersisterReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersisterReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersisterReader {
	mock := &MockPersisterReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
