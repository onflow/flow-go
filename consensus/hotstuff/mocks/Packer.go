// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockPacker is an autogenerated mock type for the Packer type
type MockPacker struct {
	mock.Mock
}

type MockPacker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPacker) EXPECT() *MockPacker_Expecter {
	return &MockPacker_Expecter{mock: &_m.Mock}
}

// Pack provides a mock function with given fields: view, sig
func (_m *MockPacker) Pack(view uint64, sig *hotstuff.BlockSignatureData) ([]byte, []byte, error) {
	ret := _m.Called(view, sig)

	if len(ret) == 0 {
		panic("no return value specified for Pack")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, *hotstuff.BlockSignatureData) ([]byte, []byte, error)); ok {
		return rf(view, sig)
	}
	if rf, ok := ret.Get(0).(func(uint64, *hotstuff.BlockSignatureData) []byte); ok {
		r0 = rf(view, sig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *hotstuff.BlockSignatureData) []byte); ok {
		r1 = rf(view, sig)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(uint64, *hotstuff.BlockSignatureData) error); ok {
		r2 = rf(view, sig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPacker_Pack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pack'
type MockPacker_Pack_Call struct {
	*mock.Call
}

// Pack is a helper method to define mock.On call
//   - view uint64
//   - sig *hotstuff.BlockSignatureData
func (_e *MockPacker_Expecter) Pack(view interface{}, sig interface{}) *MockPacker_Pack_Call {
	return &MockPacker_Pack_Call{Call: _e.mock.On("Pack", view, sig)}
}

func (_c *MockPacker_Pack_Call) Run(run func(view uint64, sig *hotstuff.BlockSignatureData)) *MockPacker_Pack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*hotstuff.BlockSignatureData))
	})
	return _c
}

func (_c *MockPacker_Pack_Call) Return(signerIndices []byte, sigData []byte, err error) *MockPacker_Pack_Call {
	_c.Call.Return(signerIndices, sigData, err)
	return _c
}

func (_c *MockPacker_Pack_Call) RunAndReturn(run func(uint64, *hotstuff.BlockSignatureData) ([]byte, []byte, error)) *MockPacker_Pack_Call {
	_c.Call.Return(run)
	return _c
}

// Unpack provides a mock function with given fields: signerIdentities, sigData
func (_m *MockPacker) Unpack(signerIdentities flow.GenericIdentityList[flow.IdentitySkeleton], sigData []byte) (*hotstuff.BlockSignatureData, error) {
	ret := _m.Called(signerIdentities, sigData)

	if len(ret) == 0 {
		panic("no return value specified for Unpack")
	}

	var r0 *hotstuff.BlockSignatureData
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte) (*hotstuff.BlockSignatureData, error)); ok {
		return rf(signerIdentities, sigData)
	}
	if rf, ok := ret.Get(0).(func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte) *hotstuff.BlockSignatureData); ok {
		r0 = rf(signerIdentities, sigData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.BlockSignatureData)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte) error); ok {
		r1 = rf(signerIdentities, sigData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPacker_Unpack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unpack'
type MockPacker_Unpack_Call struct {
	*mock.Call
}

// Unpack is a helper method to define mock.On call
//   - signerIdentities flow.GenericIdentityList[flow.IdentitySkeleton]
//   - sigData []byte
func (_e *MockPacker_Expecter) Unpack(signerIdentities interface{}, sigData interface{}) *MockPacker_Unpack_Call {
	return &MockPacker_Unpack_Call{Call: _e.mock.On("Unpack", signerIdentities, sigData)}
}

func (_c *MockPacker_Unpack_Call) Run(run func(signerIdentities flow.GenericIdentityList[flow.IdentitySkeleton], sigData []byte)) *MockPacker_Unpack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.GenericIdentityList[flow.IdentitySkeleton]), args[1].([]byte))
	})
	return _c
}

func (_c *MockPacker_Unpack_Call) Return(_a0 *hotstuff.BlockSignatureData, _a1 error) *MockPacker_Unpack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPacker_Unpack_Call) RunAndReturn(run func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte) (*hotstuff.BlockSignatureData, error)) *MockPacker_Unpack_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPacker creates a new instance of MockPacker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPacker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPacker {
	mock := &MockPacker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
