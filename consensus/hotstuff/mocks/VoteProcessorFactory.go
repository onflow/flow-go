// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"

	zerolog "github.com/rs/zerolog"
)

// MockVoteProcessorFactory is an autogenerated mock type for the VoteProcessorFactory type
type MockVoteProcessorFactory struct {
	mock.Mock
}

type MockVoteProcessorFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteProcessorFactory) EXPECT() *MockVoteProcessorFactory_Expecter {
	return &MockVoteProcessorFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: log, proposal
func (_m *MockVoteProcessorFactory) Create(log zerolog.Logger, proposal *model.SignedProposal) (hotstuff.VerifyingVoteProcessor, error) {
	ret := _m.Called(log, proposal)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 hotstuff.VerifyingVoteProcessor
	var r1 error
	if rf, ok := ret.Get(0).(func(zerolog.Logger, *model.SignedProposal) (hotstuff.VerifyingVoteProcessor, error)); ok {
		return rf(log, proposal)
	}
	if rf, ok := ret.Get(0).(func(zerolog.Logger, *model.SignedProposal) hotstuff.VerifyingVoteProcessor); ok {
		r0 = rf(log, proposal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hotstuff.VerifyingVoteProcessor)
		}
	}

	if rf, ok := ret.Get(1).(func(zerolog.Logger, *model.SignedProposal) error); ok {
		r1 = rf(log, proposal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVoteProcessorFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVoteProcessorFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - log zerolog.Logger
//   - proposal *model.SignedProposal
func (_e *MockVoteProcessorFactory_Expecter) Create(log interface{}, proposal interface{}) *MockVoteProcessorFactory_Create_Call {
	return &MockVoteProcessorFactory_Create_Call{Call: _e.mock.On("Create", log, proposal)}
}

func (_c *MockVoteProcessorFactory_Create_Call) Run(run func(log zerolog.Logger, proposal *model.SignedProposal)) *MockVoteProcessorFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(zerolog.Logger), args[1].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockVoteProcessorFactory_Create_Call) Return(_a0 hotstuff.VerifyingVoteProcessor, _a1 error) *MockVoteProcessorFactory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVoteProcessorFactory_Create_Call) RunAndReturn(run func(zerolog.Logger, *model.SignedProposal) (hotstuff.VerifyingVoteProcessor, error)) *MockVoteProcessorFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVoteProcessorFactory creates a new instance of MockVoteProcessorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteProcessorFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteProcessorFactory {
	mock := &MockVoteProcessorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
