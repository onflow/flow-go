// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

// ValidateProposal provides a mock function with given fields: proposal
func (_m *Validator) ValidateProposal(proposal *model.Proposal) error {
	ret := _m.Called(proposal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Proposal) error); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateQC provides a mock function with given fields: qc, block
func (_m *Validator) ValidateQC(qc *flow.QuorumCertificate, block *model.Block) error {
	ret := _m.Called(qc, block)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.QuorumCertificate, *model.Block) error); ok {
		r0 = rf(qc, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateVote provides a mock function with given fields: vote, block
func (_m *Validator) ValidateVote(vote *model.Vote, block *model.Block) (*flow.Identity, error) {
	ret := _m.Called(vote, block)

	var r0 *flow.Identity
	if rf, ok := ret.Get(0).(func(*model.Vote, *model.Block) *flow.Identity); ok {
		r0 = rf(vote, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Vote, *model.Block) error); ok {
		r1 = rf(vote, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
