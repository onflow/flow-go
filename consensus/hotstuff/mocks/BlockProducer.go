// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockBlockProducer is an autogenerated mock type for the BlockProducer type
type MockBlockProducer struct {
	mock.Mock
}

type MockBlockProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockProducer) EXPECT() *MockBlockProducer_Expecter {
	return &MockBlockProducer_Expecter{mock: &_m.Mock}
}

// MakeBlockProposal provides a mock function with given fields: view, qc, lastViewTC
func (_m *MockBlockProducer) MakeBlockProposal(view uint64, qc *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate) (*flow.Header, error) {
	ret := _m.Called(view, qc, lastViewTC)

	if len(ret) == 0 {
		panic("no return value specified for MakeBlockProposal")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) (*flow.Header, error)); ok {
		return rf(view, qc, lastViewTC)
	}
	if rf, ok := ret.Get(0).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) *flow.Header); ok {
		r0 = rf(view, qc, lastViewTC)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) error); ok {
		r1 = rf(view, qc, lastViewTC)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockProducer_MakeBlockProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeBlockProposal'
type MockBlockProducer_MakeBlockProposal_Call struct {
	*mock.Call
}

// MakeBlockProposal is a helper method to define mock.On call
//   - view uint64
//   - qc *flow.QuorumCertificate
//   - lastViewTC *flow.TimeoutCertificate
func (_e *MockBlockProducer_Expecter) MakeBlockProposal(view interface{}, qc interface{}, lastViewTC interface{}) *MockBlockProducer_MakeBlockProposal_Call {
	return &MockBlockProducer_MakeBlockProposal_Call{Call: _e.mock.On("MakeBlockProposal", view, qc, lastViewTC)}
}

func (_c *MockBlockProducer_MakeBlockProposal_Call) Run(run func(view uint64, qc *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate)) *MockBlockProducer_MakeBlockProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.QuorumCertificate), args[2].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockBlockProducer_MakeBlockProposal_Call) Return(_a0 *flow.Header, _a1 error) *MockBlockProducer_MakeBlockProposal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockProducer_MakeBlockProposal_Call) RunAndReturn(run func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate) (*flow.Header, error)) *MockBlockProducer_MakeBlockProposal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockProducer creates a new instance of MockBlockProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockProducer {
	mock := &MockBlockProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
