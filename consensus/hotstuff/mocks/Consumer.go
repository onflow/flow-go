// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"

	time "time"
)

// MockConsumer is an autogenerated mock type for the Consumer type
type MockConsumer struct {
	mock.Mock
}

type MockConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumer) EXPECT() *MockConsumer_Expecter {
	return &MockConsumer_Expecter{mock: &_m.Mock}
}

// OnBlockIncorporated provides a mock function with given fields: _a0
func (_m *MockConsumer) OnBlockIncorporated(_a0 *model.Block) {
	_m.Called(_a0)
}

// MockConsumer_OnBlockIncorporated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBlockIncorporated'
type MockConsumer_OnBlockIncorporated_Call struct {
	*mock.Call
}

// OnBlockIncorporated is a helper method to define mock.On call
//   - _a0 *model.Block
func (_e *MockConsumer_Expecter) OnBlockIncorporated(_a0 interface{}) *MockConsumer_OnBlockIncorporated_Call {
	return &MockConsumer_OnBlockIncorporated_Call{Call: _e.mock.On("OnBlockIncorporated", _a0)}
}

func (_c *MockConsumer_OnBlockIncorporated_Call) Run(run func(_a0 *model.Block)) *MockConsumer_OnBlockIncorporated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block))
	})
	return _c
}

func (_c *MockConsumer_OnBlockIncorporated_Call) Return() *MockConsumer_OnBlockIncorporated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnBlockIncorporated_Call) RunAndReturn(run func(*model.Block)) *MockConsumer_OnBlockIncorporated_Call {
	_c.Run(run)
	return _c
}

// OnCurrentViewDetails provides a mock function with given fields: currentView, finalizedView, currentLeader
func (_m *MockConsumer) OnCurrentViewDetails(currentView uint64, finalizedView uint64, currentLeader flow.Identifier) {
	_m.Called(currentView, finalizedView, currentLeader)
}

// MockConsumer_OnCurrentViewDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCurrentViewDetails'
type MockConsumer_OnCurrentViewDetails_Call struct {
	*mock.Call
}

// OnCurrentViewDetails is a helper method to define mock.On call
//   - currentView uint64
//   - finalizedView uint64
//   - currentLeader flow.Identifier
func (_e *MockConsumer_Expecter) OnCurrentViewDetails(currentView interface{}, finalizedView interface{}, currentLeader interface{}) *MockConsumer_OnCurrentViewDetails_Call {
	return &MockConsumer_OnCurrentViewDetails_Call{Call: _e.mock.On("OnCurrentViewDetails", currentView, finalizedView, currentLeader)}
}

func (_c *MockConsumer_OnCurrentViewDetails_Call) Run(run func(currentView uint64, finalizedView uint64, currentLeader flow.Identifier)) *MockConsumer_OnCurrentViewDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(flow.Identifier))
	})
	return _c
}

func (_c *MockConsumer_OnCurrentViewDetails_Call) Return() *MockConsumer_OnCurrentViewDetails_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnCurrentViewDetails_Call) RunAndReturn(run func(uint64, uint64, flow.Identifier)) *MockConsumer_OnCurrentViewDetails_Call {
	_c.Run(run)
	return _c
}

// OnDoubleProposeDetected provides a mock function with given fields: _a0, _a1
func (_m *MockConsumer) OnDoubleProposeDetected(_a0 *model.Block, _a1 *model.Block) {
	_m.Called(_a0, _a1)
}

// MockConsumer_OnDoubleProposeDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDoubleProposeDetected'
type MockConsumer_OnDoubleProposeDetected_Call struct {
	*mock.Call
}

// OnDoubleProposeDetected is a helper method to define mock.On call
//   - _a0 *model.Block
//   - _a1 *model.Block
func (_e *MockConsumer_Expecter) OnDoubleProposeDetected(_a0 interface{}, _a1 interface{}) *MockConsumer_OnDoubleProposeDetected_Call {
	return &MockConsumer_OnDoubleProposeDetected_Call{Call: _e.mock.On("OnDoubleProposeDetected", _a0, _a1)}
}

func (_c *MockConsumer_OnDoubleProposeDetected_Call) Run(run func(_a0 *model.Block, _a1 *model.Block)) *MockConsumer_OnDoubleProposeDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block), args[1].(*model.Block))
	})
	return _c
}

func (_c *MockConsumer_OnDoubleProposeDetected_Call) Return() *MockConsumer_OnDoubleProposeDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnDoubleProposeDetected_Call) RunAndReturn(run func(*model.Block, *model.Block)) *MockConsumer_OnDoubleProposeDetected_Call {
	_c.Run(run)
	return _c
}

// OnEventProcessed provides a mock function with no fields
func (_m *MockConsumer) OnEventProcessed() {
	_m.Called()
}

// MockConsumer_OnEventProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnEventProcessed'
type MockConsumer_OnEventProcessed_Call struct {
	*mock.Call
}

// OnEventProcessed is a helper method to define mock.On call
func (_e *MockConsumer_Expecter) OnEventProcessed() *MockConsumer_OnEventProcessed_Call {
	return &MockConsumer_OnEventProcessed_Call{Call: _e.mock.On("OnEventProcessed")}
}

func (_c *MockConsumer_OnEventProcessed_Call) Run(run func()) *MockConsumer_OnEventProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumer_OnEventProcessed_Call) Return() *MockConsumer_OnEventProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnEventProcessed_Call) RunAndReturn(run func()) *MockConsumer_OnEventProcessed_Call {
	_c.Run(run)
	return _c
}

// OnFinalizedBlock provides a mock function with given fields: _a0
func (_m *MockConsumer) OnFinalizedBlock(_a0 *model.Block) {
	_m.Called(_a0)
}

// MockConsumer_OnFinalizedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnFinalizedBlock'
type MockConsumer_OnFinalizedBlock_Call struct {
	*mock.Call
}

// OnFinalizedBlock is a helper method to define mock.On call
//   - _a0 *model.Block
func (_e *MockConsumer_Expecter) OnFinalizedBlock(_a0 interface{}) *MockConsumer_OnFinalizedBlock_Call {
	return &MockConsumer_OnFinalizedBlock_Call{Call: _e.mock.On("OnFinalizedBlock", _a0)}
}

func (_c *MockConsumer_OnFinalizedBlock_Call) Run(run func(_a0 *model.Block)) *MockConsumer_OnFinalizedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block))
	})
	return _c
}

func (_c *MockConsumer_OnFinalizedBlock_Call) Return() *MockConsumer_OnFinalizedBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnFinalizedBlock_Call) RunAndReturn(run func(*model.Block)) *MockConsumer_OnFinalizedBlock_Call {
	_c.Run(run)
	return _c
}

// OnInvalidBlockDetected provides a mock function with given fields: err
func (_m *MockConsumer) OnInvalidBlockDetected(err flow.Slashable[model.InvalidProposalError]) {
	_m.Called(err)
}

// MockConsumer_OnInvalidBlockDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnInvalidBlockDetected'
type MockConsumer_OnInvalidBlockDetected_Call struct {
	*mock.Call
}

// OnInvalidBlockDetected is a helper method to define mock.On call
//   - err flow.Slashable[model.InvalidProposalError]
func (_e *MockConsumer_Expecter) OnInvalidBlockDetected(err interface{}) *MockConsumer_OnInvalidBlockDetected_Call {
	return &MockConsumer_OnInvalidBlockDetected_Call{Call: _e.mock.On("OnInvalidBlockDetected", err)}
}

func (_c *MockConsumer_OnInvalidBlockDetected_Call) Run(run func(err flow.Slashable[model.InvalidProposalError])) *MockConsumer_OnInvalidBlockDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Slashable[model.InvalidProposalError]))
	})
	return _c
}

func (_c *MockConsumer_OnInvalidBlockDetected_Call) Return() *MockConsumer_OnInvalidBlockDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnInvalidBlockDetected_Call) RunAndReturn(run func(flow.Slashable[model.InvalidProposalError])) *MockConsumer_OnInvalidBlockDetected_Call {
	_c.Run(run)
	return _c
}

// OnLocalTimeout provides a mock function with given fields: currentView
func (_m *MockConsumer) OnLocalTimeout(currentView uint64) {
	_m.Called(currentView)
}

// MockConsumer_OnLocalTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnLocalTimeout'
type MockConsumer_OnLocalTimeout_Call struct {
	*mock.Call
}

// OnLocalTimeout is a helper method to define mock.On call
//   - currentView uint64
func (_e *MockConsumer_Expecter) OnLocalTimeout(currentView interface{}) *MockConsumer_OnLocalTimeout_Call {
	return &MockConsumer_OnLocalTimeout_Call{Call: _e.mock.On("OnLocalTimeout", currentView)}
}

func (_c *MockConsumer_OnLocalTimeout_Call) Run(run func(currentView uint64)) *MockConsumer_OnLocalTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockConsumer_OnLocalTimeout_Call) Return() *MockConsumer_OnLocalTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnLocalTimeout_Call) RunAndReturn(run func(uint64)) *MockConsumer_OnLocalTimeout_Call {
	_c.Run(run)
	return _c
}

// OnOwnProposal provides a mock function with given fields: proposal, targetPublicationTime
func (_m *MockConsumer) OnOwnProposal(proposal *flow.Header, targetPublicationTime time.Time) {
	_m.Called(proposal, targetPublicationTime)
}

// MockConsumer_OnOwnProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOwnProposal'
type MockConsumer_OnOwnProposal_Call struct {
	*mock.Call
}

// OnOwnProposal is a helper method to define mock.On call
//   - proposal *flow.Header
//   - targetPublicationTime time.Time
func (_e *MockConsumer_Expecter) OnOwnProposal(proposal interface{}, targetPublicationTime interface{}) *MockConsumer_OnOwnProposal_Call {
	return &MockConsumer_OnOwnProposal_Call{Call: _e.mock.On("OnOwnProposal", proposal, targetPublicationTime)}
}

func (_c *MockConsumer_OnOwnProposal_Call) Run(run func(proposal *flow.Header, targetPublicationTime time.Time)) *MockConsumer_OnOwnProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header), args[1].(time.Time))
	})
	return _c
}

func (_c *MockConsumer_OnOwnProposal_Call) Return() *MockConsumer_OnOwnProposal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnOwnProposal_Call) RunAndReturn(run func(*flow.Header, time.Time)) *MockConsumer_OnOwnProposal_Call {
	_c.Run(run)
	return _c
}

// OnOwnTimeout provides a mock function with given fields: timeout
func (_m *MockConsumer) OnOwnTimeout(timeout *model.TimeoutObject) {
	_m.Called(timeout)
}

// MockConsumer_OnOwnTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOwnTimeout'
type MockConsumer_OnOwnTimeout_Call struct {
	*mock.Call
}

// OnOwnTimeout is a helper method to define mock.On call
//   - timeout *model.TimeoutObject
func (_e *MockConsumer_Expecter) OnOwnTimeout(timeout interface{}) *MockConsumer_OnOwnTimeout_Call {
	return &MockConsumer_OnOwnTimeout_Call{Call: _e.mock.On("OnOwnTimeout", timeout)}
}

func (_c *MockConsumer_OnOwnTimeout_Call) Run(run func(timeout *model.TimeoutObject)) *MockConsumer_OnOwnTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockConsumer_OnOwnTimeout_Call) Return() *MockConsumer_OnOwnTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnOwnTimeout_Call) RunAndReturn(run func(*model.TimeoutObject)) *MockConsumer_OnOwnTimeout_Call {
	_c.Run(run)
	return _c
}

// OnOwnVote provides a mock function with given fields: vote, recipientID
func (_m *MockConsumer) OnOwnVote(vote *model.Vote, recipientID flow.Identifier) {
	_m.Called(vote, recipientID)
}

// MockConsumer_OnOwnVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOwnVote'
type MockConsumer_OnOwnVote_Call struct {
	*mock.Call
}

// OnOwnVote is a helper method to define mock.On call
//   - vote *model.Vote
//   - recipientID flow.Identifier
func (_e *MockConsumer_Expecter) OnOwnVote(vote interface{}, recipientID interface{}) *MockConsumer_OnOwnVote_Call {
	return &MockConsumer_OnOwnVote_Call{Call: _e.mock.On("OnOwnVote", vote, recipientID)}
}

func (_c *MockConsumer_OnOwnVote_Call) Run(run func(vote *model.Vote, recipientID flow.Identifier)) *MockConsumer_OnOwnVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockConsumer_OnOwnVote_Call) Return() *MockConsumer_OnOwnVote_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnOwnVote_Call) RunAndReturn(run func(*model.Vote, flow.Identifier)) *MockConsumer_OnOwnVote_Call {
	_c.Run(run)
	return _c
}

// OnPartialTc provides a mock function with given fields: currentView, partialTc
func (_m *MockConsumer) OnPartialTc(currentView uint64, partialTc *hotstuff.PartialTcCreated) {
	_m.Called(currentView, partialTc)
}

// MockConsumer_OnPartialTc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPartialTc'
type MockConsumer_OnPartialTc_Call struct {
	*mock.Call
}

// OnPartialTc is a helper method to define mock.On call
//   - currentView uint64
//   - partialTc *hotstuff.PartialTcCreated
func (_e *MockConsumer_Expecter) OnPartialTc(currentView interface{}, partialTc interface{}) *MockConsumer_OnPartialTc_Call {
	return &MockConsumer_OnPartialTc_Call{Call: _e.mock.On("OnPartialTc", currentView, partialTc)}
}

func (_c *MockConsumer_OnPartialTc_Call) Run(run func(currentView uint64, partialTc *hotstuff.PartialTcCreated)) *MockConsumer_OnPartialTc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*hotstuff.PartialTcCreated))
	})
	return _c
}

func (_c *MockConsumer_OnPartialTc_Call) Return() *MockConsumer_OnPartialTc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnPartialTc_Call) RunAndReturn(run func(uint64, *hotstuff.PartialTcCreated)) *MockConsumer_OnPartialTc_Call {
	_c.Run(run)
	return _c
}

// OnQcTriggeredViewChange provides a mock function with given fields: oldView, newView, qc
func (_m *MockConsumer) OnQcTriggeredViewChange(oldView uint64, newView uint64, qc *flow.QuorumCertificate) {
	_m.Called(oldView, newView, qc)
}

// MockConsumer_OnQcTriggeredViewChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnQcTriggeredViewChange'
type MockConsumer_OnQcTriggeredViewChange_Call struct {
	*mock.Call
}

// OnQcTriggeredViewChange is a helper method to define mock.On call
//   - oldView uint64
//   - newView uint64
//   - qc *flow.QuorumCertificate
func (_e *MockConsumer_Expecter) OnQcTriggeredViewChange(oldView interface{}, newView interface{}, qc interface{}) *MockConsumer_OnQcTriggeredViewChange_Call {
	return &MockConsumer_OnQcTriggeredViewChange_Call{Call: _e.mock.On("OnQcTriggeredViewChange", oldView, newView, qc)}
}

func (_c *MockConsumer_OnQcTriggeredViewChange_Call) Run(run func(oldView uint64, newView uint64, qc *flow.QuorumCertificate)) *MockConsumer_OnQcTriggeredViewChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockConsumer_OnQcTriggeredViewChange_Call) Return() *MockConsumer_OnQcTriggeredViewChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnQcTriggeredViewChange_Call) RunAndReturn(run func(uint64, uint64, *flow.QuorumCertificate)) *MockConsumer_OnQcTriggeredViewChange_Call {
	_c.Run(run)
	return _c
}

// OnReceiveProposal provides a mock function with given fields: currentView, proposal
func (_m *MockConsumer) OnReceiveProposal(currentView uint64, proposal *model.SignedProposal) {
	_m.Called(currentView, proposal)
}

// MockConsumer_OnReceiveProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveProposal'
type MockConsumer_OnReceiveProposal_Call struct {
	*mock.Call
}

// OnReceiveProposal is a helper method to define mock.On call
//   - currentView uint64
//   - proposal *model.SignedProposal
func (_e *MockConsumer_Expecter) OnReceiveProposal(currentView interface{}, proposal interface{}) *MockConsumer_OnReceiveProposal_Call {
	return &MockConsumer_OnReceiveProposal_Call{Call: _e.mock.On("OnReceiveProposal", currentView, proposal)}
}

func (_c *MockConsumer_OnReceiveProposal_Call) Run(run func(currentView uint64, proposal *model.SignedProposal)) *MockConsumer_OnReceiveProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockConsumer_OnReceiveProposal_Call) Return() *MockConsumer_OnReceiveProposal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnReceiveProposal_Call) RunAndReturn(run func(uint64, *model.SignedProposal)) *MockConsumer_OnReceiveProposal_Call {
	_c.Run(run)
	return _c
}

// OnReceiveQc provides a mock function with given fields: currentView, qc
func (_m *MockConsumer) OnReceiveQc(currentView uint64, qc *flow.QuorumCertificate) {
	_m.Called(currentView, qc)
}

// MockConsumer_OnReceiveQc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveQc'
type MockConsumer_OnReceiveQc_Call struct {
	*mock.Call
}

// OnReceiveQc is a helper method to define mock.On call
//   - currentView uint64
//   - qc *flow.QuorumCertificate
func (_e *MockConsumer_Expecter) OnReceiveQc(currentView interface{}, qc interface{}) *MockConsumer_OnReceiveQc_Call {
	return &MockConsumer_OnReceiveQc_Call{Call: _e.mock.On("OnReceiveQc", currentView, qc)}
}

func (_c *MockConsumer_OnReceiveQc_Call) Run(run func(currentView uint64, qc *flow.QuorumCertificate)) *MockConsumer_OnReceiveQc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockConsumer_OnReceiveQc_Call) Return() *MockConsumer_OnReceiveQc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnReceiveQc_Call) RunAndReturn(run func(uint64, *flow.QuorumCertificate)) *MockConsumer_OnReceiveQc_Call {
	_c.Run(run)
	return _c
}

// OnReceiveTc provides a mock function with given fields: currentView, tc
func (_m *MockConsumer) OnReceiveTc(currentView uint64, tc *flow.TimeoutCertificate) {
	_m.Called(currentView, tc)
}

// MockConsumer_OnReceiveTc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveTc'
type MockConsumer_OnReceiveTc_Call struct {
	*mock.Call
}

// OnReceiveTc is a helper method to define mock.On call
//   - currentView uint64
//   - tc *flow.TimeoutCertificate
func (_e *MockConsumer_Expecter) OnReceiveTc(currentView interface{}, tc interface{}) *MockConsumer_OnReceiveTc_Call {
	return &MockConsumer_OnReceiveTc_Call{Call: _e.mock.On("OnReceiveTc", currentView, tc)}
}

func (_c *MockConsumer_OnReceiveTc_Call) Run(run func(currentView uint64, tc *flow.TimeoutCertificate)) *MockConsumer_OnReceiveTc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockConsumer_OnReceiveTc_Call) Return() *MockConsumer_OnReceiveTc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnReceiveTc_Call) RunAndReturn(run func(uint64, *flow.TimeoutCertificate)) *MockConsumer_OnReceiveTc_Call {
	_c.Run(run)
	return _c
}

// OnStart provides a mock function with given fields: currentView
func (_m *MockConsumer) OnStart(currentView uint64) {
	_m.Called(currentView)
}

// MockConsumer_OnStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStart'
type MockConsumer_OnStart_Call struct {
	*mock.Call
}

// OnStart is a helper method to define mock.On call
//   - currentView uint64
func (_e *MockConsumer_Expecter) OnStart(currentView interface{}) *MockConsumer_OnStart_Call {
	return &MockConsumer_OnStart_Call{Call: _e.mock.On("OnStart", currentView)}
}

func (_c *MockConsumer_OnStart_Call) Run(run func(currentView uint64)) *MockConsumer_OnStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockConsumer_OnStart_Call) Return() *MockConsumer_OnStart_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnStart_Call) RunAndReturn(run func(uint64)) *MockConsumer_OnStart_Call {
	_c.Run(run)
	return _c
}

// OnStartingTimeout provides a mock function with given fields: _a0
func (_m *MockConsumer) OnStartingTimeout(_a0 model.TimerInfo) {
	_m.Called(_a0)
}

// MockConsumer_OnStartingTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStartingTimeout'
type MockConsumer_OnStartingTimeout_Call struct {
	*mock.Call
}

// OnStartingTimeout is a helper method to define mock.On call
//   - _a0 model.TimerInfo
func (_e *MockConsumer_Expecter) OnStartingTimeout(_a0 interface{}) *MockConsumer_OnStartingTimeout_Call {
	return &MockConsumer_OnStartingTimeout_Call{Call: _e.mock.On("OnStartingTimeout", _a0)}
}

func (_c *MockConsumer_OnStartingTimeout_Call) Run(run func(_a0 model.TimerInfo)) *MockConsumer_OnStartingTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TimerInfo))
	})
	return _c
}

func (_c *MockConsumer_OnStartingTimeout_Call) Return() *MockConsumer_OnStartingTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnStartingTimeout_Call) RunAndReturn(run func(model.TimerInfo)) *MockConsumer_OnStartingTimeout_Call {
	_c.Run(run)
	return _c
}

// OnTcTriggeredViewChange provides a mock function with given fields: oldView, newView, tc
func (_m *MockConsumer) OnTcTriggeredViewChange(oldView uint64, newView uint64, tc *flow.TimeoutCertificate) {
	_m.Called(oldView, newView, tc)
}

// MockConsumer_OnTcTriggeredViewChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTcTriggeredViewChange'
type MockConsumer_OnTcTriggeredViewChange_Call struct {
	*mock.Call
}

// OnTcTriggeredViewChange is a helper method to define mock.On call
//   - oldView uint64
//   - newView uint64
//   - tc *flow.TimeoutCertificate
func (_e *MockConsumer_Expecter) OnTcTriggeredViewChange(oldView interface{}, newView interface{}, tc interface{}) *MockConsumer_OnTcTriggeredViewChange_Call {
	return &MockConsumer_OnTcTriggeredViewChange_Call{Call: _e.mock.On("OnTcTriggeredViewChange", oldView, newView, tc)}
}

func (_c *MockConsumer_OnTcTriggeredViewChange_Call) Run(run func(oldView uint64, newView uint64, tc *flow.TimeoutCertificate)) *MockConsumer_OnTcTriggeredViewChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockConsumer_OnTcTriggeredViewChange_Call) Return() *MockConsumer_OnTcTriggeredViewChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnTcTriggeredViewChange_Call) RunAndReturn(run func(uint64, uint64, *flow.TimeoutCertificate)) *MockConsumer_OnTcTriggeredViewChange_Call {
	_c.Run(run)
	return _c
}

// OnViewChange provides a mock function with given fields: oldView, newView
func (_m *MockConsumer) OnViewChange(oldView uint64, newView uint64) {
	_m.Called(oldView, newView)
}

// MockConsumer_OnViewChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnViewChange'
type MockConsumer_OnViewChange_Call struct {
	*mock.Call
}

// OnViewChange is a helper method to define mock.On call
//   - oldView uint64
//   - newView uint64
func (_e *MockConsumer_Expecter) OnViewChange(oldView interface{}, newView interface{}) *MockConsumer_OnViewChange_Call {
	return &MockConsumer_OnViewChange_Call{Call: _e.mock.On("OnViewChange", oldView, newView)}
}

func (_c *MockConsumer_OnViewChange_Call) Run(run func(oldView uint64, newView uint64)) *MockConsumer_OnViewChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *MockConsumer_OnViewChange_Call) Return() *MockConsumer_OnViewChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_OnViewChange_Call) RunAndReturn(run func(uint64, uint64)) *MockConsumer_OnViewChange_Call {
	_c.Run(run)
	return _c
}

// NewMockConsumer creates a new instance of MockConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumer {
	mock := &MockConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
