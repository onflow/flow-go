// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"

	time "time"
)

// MockPaceMaker is an autogenerated mock type for the PaceMaker type
type MockPaceMaker struct {
	mock.Mock
}

type MockPaceMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaceMaker) EXPECT() *MockPaceMaker_Expecter {
	return &MockPaceMaker_Expecter{mock: &_m.Mock}
}

// CurView provides a mock function with no fields
func (_m *MockPaceMaker) CurView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockPaceMaker_CurView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurView'
type MockPaceMaker_CurView_Call struct {
	*mock.Call
}

// CurView is a helper method to define mock.On call
func (_e *MockPaceMaker_Expecter) CurView() *MockPaceMaker_CurView_Call {
	return &MockPaceMaker_CurView_Call{Call: _e.mock.On("CurView")}
}

func (_c *MockPaceMaker_CurView_Call) Run(run func()) *MockPaceMaker_CurView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPaceMaker_CurView_Call) Return(_a0 uint64) *MockPaceMaker_CurView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaceMaker_CurView_Call) RunAndReturn(run func() uint64) *MockPaceMaker_CurView_Call {
	_c.Call.Return(run)
	return _c
}

// LastViewTC provides a mock function with no fields
func (_m *MockPaceMaker) LastViewTC() *flow.TimeoutCertificate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastViewTC")
	}

	var r0 *flow.TimeoutCertificate
	if rf, ok := ret.Get(0).(func() *flow.TimeoutCertificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TimeoutCertificate)
		}
	}

	return r0
}

// MockPaceMaker_LastViewTC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastViewTC'
type MockPaceMaker_LastViewTC_Call struct {
	*mock.Call
}

// LastViewTC is a helper method to define mock.On call
func (_e *MockPaceMaker_Expecter) LastViewTC() *MockPaceMaker_LastViewTC_Call {
	return &MockPaceMaker_LastViewTC_Call{Call: _e.mock.On("LastViewTC")}
}

func (_c *MockPaceMaker_LastViewTC_Call) Run(run func()) *MockPaceMaker_LastViewTC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPaceMaker_LastViewTC_Call) Return(_a0 *flow.TimeoutCertificate) *MockPaceMaker_LastViewTC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaceMaker_LastViewTC_Call) RunAndReturn(run func() *flow.TimeoutCertificate) *MockPaceMaker_LastViewTC_Call {
	_c.Call.Return(run)
	return _c
}

// NewestQC provides a mock function with no fields
func (_m *MockPaceMaker) NewestQC() *flow.QuorumCertificate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewestQC")
	}

	var r0 *flow.QuorumCertificate
	if rf, ok := ret.Get(0).(func() *flow.QuorumCertificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.QuorumCertificate)
		}
	}

	return r0
}

// MockPaceMaker_NewestQC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewestQC'
type MockPaceMaker_NewestQC_Call struct {
	*mock.Call
}

// NewestQC is a helper method to define mock.On call
func (_e *MockPaceMaker_Expecter) NewestQC() *MockPaceMaker_NewestQC_Call {
	return &MockPaceMaker_NewestQC_Call{Call: _e.mock.On("NewestQC")}
}

func (_c *MockPaceMaker_NewestQC_Call) Run(run func()) *MockPaceMaker_NewestQC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPaceMaker_NewestQC_Call) Return(_a0 *flow.QuorumCertificate) *MockPaceMaker_NewestQC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaceMaker_NewestQC_Call) RunAndReturn(run func() *flow.QuorumCertificate) *MockPaceMaker_NewestQC_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessQC provides a mock function with given fields: qc
func (_m *MockPaceMaker) ProcessQC(qc *flow.QuorumCertificate) (*model.NewViewEvent, error) {
	ret := _m.Called(qc)

	if len(ret) == 0 {
		panic("no return value specified for ProcessQC")
	}

	var r0 *model.NewViewEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.QuorumCertificate) (*model.NewViewEvent, error)); ok {
		return rf(qc)
	}
	if rf, ok := ret.Get(0).(func(*flow.QuorumCertificate) *model.NewViewEvent); ok {
		r0 = rf(qc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NewViewEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.QuorumCertificate) error); ok {
		r1 = rf(qc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaceMaker_ProcessQC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessQC'
type MockPaceMaker_ProcessQC_Call struct {
	*mock.Call
}

// ProcessQC is a helper method to define mock.On call
//   - qc *flow.QuorumCertificate
func (_e *MockPaceMaker_Expecter) ProcessQC(qc interface{}) *MockPaceMaker_ProcessQC_Call {
	return &MockPaceMaker_ProcessQC_Call{Call: _e.mock.On("ProcessQC", qc)}
}

func (_c *MockPaceMaker_ProcessQC_Call) Run(run func(qc *flow.QuorumCertificate)) *MockPaceMaker_ProcessQC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockPaceMaker_ProcessQC_Call) Return(_a0 *model.NewViewEvent, _a1 error) *MockPaceMaker_ProcessQC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaceMaker_ProcessQC_Call) RunAndReturn(run func(*flow.QuorumCertificate) (*model.NewViewEvent, error)) *MockPaceMaker_ProcessQC_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTC provides a mock function with given fields: tc
func (_m *MockPaceMaker) ProcessTC(tc *flow.TimeoutCertificate) (*model.NewViewEvent, error) {
	ret := _m.Called(tc)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTC")
	}

	var r0 *model.NewViewEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.TimeoutCertificate) (*model.NewViewEvent, error)); ok {
		return rf(tc)
	}
	if rf, ok := ret.Get(0).(func(*flow.TimeoutCertificate) *model.NewViewEvent); ok {
		r0 = rf(tc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NewViewEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.TimeoutCertificate) error); ok {
		r1 = rf(tc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaceMaker_ProcessTC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTC'
type MockPaceMaker_ProcessTC_Call struct {
	*mock.Call
}

// ProcessTC is a helper method to define mock.On call
//   - tc *flow.TimeoutCertificate
func (_e *MockPaceMaker_Expecter) ProcessTC(tc interface{}) *MockPaceMaker_ProcessTC_Call {
	return &MockPaceMaker_ProcessTC_Call{Call: _e.mock.On("ProcessTC", tc)}
}

func (_c *MockPaceMaker_ProcessTC_Call) Run(run func(tc *flow.TimeoutCertificate)) *MockPaceMaker_ProcessTC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockPaceMaker_ProcessTC_Call) Return(_a0 *model.NewViewEvent, _a1 error) *MockPaceMaker_ProcessTC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaceMaker_ProcessTC_Call) RunAndReturn(run func(*flow.TimeoutCertificate) (*model.NewViewEvent, error)) *MockPaceMaker_ProcessTC_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockPaceMaker) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockPaceMaker_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPaceMaker_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPaceMaker_Expecter) Start(ctx interface{}) *MockPaceMaker_Start_Call {
	return &MockPaceMaker_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockPaceMaker_Start_Call) Run(run func(ctx context.Context)) *MockPaceMaker_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPaceMaker_Start_Call) Return() *MockPaceMaker_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPaceMaker_Start_Call) RunAndReturn(run func(context.Context)) *MockPaceMaker_Start_Call {
	_c.Run(run)
	return _c
}

// TargetPublicationTime provides a mock function with given fields: proposalView, timeViewEntered, parentBlockId
func (_m *MockPaceMaker) TargetPublicationTime(proposalView uint64, timeViewEntered time.Time, parentBlockId flow.Identifier) time.Time {
	ret := _m.Called(proposalView, timeViewEntered, parentBlockId)

	if len(ret) == 0 {
		panic("no return value specified for TargetPublicationTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(uint64, time.Time, flow.Identifier) time.Time); ok {
		r0 = rf(proposalView, timeViewEntered, parentBlockId)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockPaceMaker_TargetPublicationTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TargetPublicationTime'
type MockPaceMaker_TargetPublicationTime_Call struct {
	*mock.Call
}

// TargetPublicationTime is a helper method to define mock.On call
//   - proposalView uint64
//   - timeViewEntered time.Time
//   - parentBlockId flow.Identifier
func (_e *MockPaceMaker_Expecter) TargetPublicationTime(proposalView interface{}, timeViewEntered interface{}, parentBlockId interface{}) *MockPaceMaker_TargetPublicationTime_Call {
	return &MockPaceMaker_TargetPublicationTime_Call{Call: _e.mock.On("TargetPublicationTime", proposalView, timeViewEntered, parentBlockId)}
}

func (_c *MockPaceMaker_TargetPublicationTime_Call) Run(run func(proposalView uint64, timeViewEntered time.Time, parentBlockId flow.Identifier)) *MockPaceMaker_TargetPublicationTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(time.Time), args[2].(flow.Identifier))
	})
	return _c
}

func (_c *MockPaceMaker_TargetPublicationTime_Call) Return(_a0 time.Time) *MockPaceMaker_TargetPublicationTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaceMaker_TargetPublicationTime_Call) RunAndReturn(run func(uint64, time.Time, flow.Identifier) time.Time) *MockPaceMaker_TargetPublicationTime_Call {
	_c.Call.Return(run)
	return _c
}

// TimeoutChannel provides a mock function with no fields
func (_m *MockPaceMaker) TimeoutChannel() <-chan time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TimeoutChannel")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func() <-chan time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// MockPaceMaker_TimeoutChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeoutChannel'
type MockPaceMaker_TimeoutChannel_Call struct {
	*mock.Call
}

// TimeoutChannel is a helper method to define mock.On call
func (_e *MockPaceMaker_Expecter) TimeoutChannel() *MockPaceMaker_TimeoutChannel_Call {
	return &MockPaceMaker_TimeoutChannel_Call{Call: _e.mock.On("TimeoutChannel")}
}

func (_c *MockPaceMaker_TimeoutChannel_Call) Run(run func()) *MockPaceMaker_TimeoutChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPaceMaker_TimeoutChannel_Call) Return(_a0 <-chan time.Time) *MockPaceMaker_TimeoutChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaceMaker_TimeoutChannel_Call) RunAndReturn(run func() <-chan time.Time) *MockPaceMaker_TimeoutChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaceMaker creates a new instance of MockPaceMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaceMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaceMaker {
	mock := &MockPaceMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
