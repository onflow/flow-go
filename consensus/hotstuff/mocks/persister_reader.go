// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	mock "github.com/stretchr/testify/mock"
)

// PersisterReader is an autogenerated mock type for the PersisterReader type
type PersisterReader struct {
	mock.Mock
}

// GetLivenessData provides a mock function with given fields:
func (_m *PersisterReader) GetLivenessData() (*hotstuff.LivenessData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLivenessData")
	}

	var r0 *hotstuff.LivenessData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*hotstuff.LivenessData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.LivenessData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.LivenessData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSafetyData provides a mock function with given fields:
func (_m *PersisterReader) GetSafetyData() (*hotstuff.SafetyData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSafetyData")
	}

	var r0 *hotstuff.SafetyData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*hotstuff.SafetyData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.SafetyData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.SafetyData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersisterReader creates a new instance of PersisterReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersisterReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersisterReader {
	mock := &PersisterReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
