// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockParticipantConsumer is an autogenerated mock type for the ParticipantConsumer type
type MockParticipantConsumer struct {
	mock.Mock
}

type MockParticipantConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParticipantConsumer) EXPECT() *MockParticipantConsumer_Expecter {
	return &MockParticipantConsumer_Expecter{mock: &_m.Mock}
}

// OnCurrentViewDetails provides a mock function with given fields: currentView, finalizedView, currentLeader
func (_m *MockParticipantConsumer) OnCurrentViewDetails(currentView uint64, finalizedView uint64, currentLeader flow.Identifier) {
	_m.Called(currentView, finalizedView, currentLeader)
}

// MockParticipantConsumer_OnCurrentViewDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCurrentViewDetails'
type MockParticipantConsumer_OnCurrentViewDetails_Call struct {
	*mock.Call
}

// OnCurrentViewDetails is a helper method to define mock.On call
//   - currentView uint64
//   - finalizedView uint64
//   - currentLeader flow.Identifier
func (_e *MockParticipantConsumer_Expecter) OnCurrentViewDetails(currentView interface{}, finalizedView interface{}, currentLeader interface{}) *MockParticipantConsumer_OnCurrentViewDetails_Call {
	return &MockParticipantConsumer_OnCurrentViewDetails_Call{Call: _e.mock.On("OnCurrentViewDetails", currentView, finalizedView, currentLeader)}
}

func (_c *MockParticipantConsumer_OnCurrentViewDetails_Call) Run(run func(currentView uint64, finalizedView uint64, currentLeader flow.Identifier)) *MockParticipantConsumer_OnCurrentViewDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(flow.Identifier))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnCurrentViewDetails_Call) Return() *MockParticipantConsumer_OnCurrentViewDetails_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnCurrentViewDetails_Call) RunAndReturn(run func(uint64, uint64, flow.Identifier)) *MockParticipantConsumer_OnCurrentViewDetails_Call {
	_c.Run(run)
	return _c
}

// OnEventProcessed provides a mock function with no fields
func (_m *MockParticipantConsumer) OnEventProcessed() {
	_m.Called()
}

// MockParticipantConsumer_OnEventProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnEventProcessed'
type MockParticipantConsumer_OnEventProcessed_Call struct {
	*mock.Call
}

// OnEventProcessed is a helper method to define mock.On call
func (_e *MockParticipantConsumer_Expecter) OnEventProcessed() *MockParticipantConsumer_OnEventProcessed_Call {
	return &MockParticipantConsumer_OnEventProcessed_Call{Call: _e.mock.On("OnEventProcessed")}
}

func (_c *MockParticipantConsumer_OnEventProcessed_Call) Run(run func()) *MockParticipantConsumer_OnEventProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParticipantConsumer_OnEventProcessed_Call) Return() *MockParticipantConsumer_OnEventProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnEventProcessed_Call) RunAndReturn(run func()) *MockParticipantConsumer_OnEventProcessed_Call {
	_c.Run(run)
	return _c
}

// OnLocalTimeout provides a mock function with given fields: currentView
func (_m *MockParticipantConsumer) OnLocalTimeout(currentView uint64) {
	_m.Called(currentView)
}

// MockParticipantConsumer_OnLocalTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnLocalTimeout'
type MockParticipantConsumer_OnLocalTimeout_Call struct {
	*mock.Call
}

// OnLocalTimeout is a helper method to define mock.On call
//   - currentView uint64
func (_e *MockParticipantConsumer_Expecter) OnLocalTimeout(currentView interface{}) *MockParticipantConsumer_OnLocalTimeout_Call {
	return &MockParticipantConsumer_OnLocalTimeout_Call{Call: _e.mock.On("OnLocalTimeout", currentView)}
}

func (_c *MockParticipantConsumer_OnLocalTimeout_Call) Run(run func(currentView uint64)) *MockParticipantConsumer_OnLocalTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnLocalTimeout_Call) Return() *MockParticipantConsumer_OnLocalTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnLocalTimeout_Call) RunAndReturn(run func(uint64)) *MockParticipantConsumer_OnLocalTimeout_Call {
	_c.Run(run)
	return _c
}

// OnPartialTc provides a mock function with given fields: currentView, partialTc
func (_m *MockParticipantConsumer) OnPartialTc(currentView uint64, partialTc *hotstuff.PartialTcCreated) {
	_m.Called(currentView, partialTc)
}

// MockParticipantConsumer_OnPartialTc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPartialTc'
type MockParticipantConsumer_OnPartialTc_Call struct {
	*mock.Call
}

// OnPartialTc is a helper method to define mock.On call
//   - currentView uint64
//   - partialTc *hotstuff.PartialTcCreated
func (_e *MockParticipantConsumer_Expecter) OnPartialTc(currentView interface{}, partialTc interface{}) *MockParticipantConsumer_OnPartialTc_Call {
	return &MockParticipantConsumer_OnPartialTc_Call{Call: _e.mock.On("OnPartialTc", currentView, partialTc)}
}

func (_c *MockParticipantConsumer_OnPartialTc_Call) Run(run func(currentView uint64, partialTc *hotstuff.PartialTcCreated)) *MockParticipantConsumer_OnPartialTc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*hotstuff.PartialTcCreated))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnPartialTc_Call) Return() *MockParticipantConsumer_OnPartialTc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnPartialTc_Call) RunAndReturn(run func(uint64, *hotstuff.PartialTcCreated)) *MockParticipantConsumer_OnPartialTc_Call {
	_c.Run(run)
	return _c
}

// OnQcTriggeredViewChange provides a mock function with given fields: oldView, newView, qc
func (_m *MockParticipantConsumer) OnQcTriggeredViewChange(oldView uint64, newView uint64, qc *flow.QuorumCertificate) {
	_m.Called(oldView, newView, qc)
}

// MockParticipantConsumer_OnQcTriggeredViewChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnQcTriggeredViewChange'
type MockParticipantConsumer_OnQcTriggeredViewChange_Call struct {
	*mock.Call
}

// OnQcTriggeredViewChange is a helper method to define mock.On call
//   - oldView uint64
//   - newView uint64
//   - qc *flow.QuorumCertificate
func (_e *MockParticipantConsumer_Expecter) OnQcTriggeredViewChange(oldView interface{}, newView interface{}, qc interface{}) *MockParticipantConsumer_OnQcTriggeredViewChange_Call {
	return &MockParticipantConsumer_OnQcTriggeredViewChange_Call{Call: _e.mock.On("OnQcTriggeredViewChange", oldView, newView, qc)}
}

func (_c *MockParticipantConsumer_OnQcTriggeredViewChange_Call) Run(run func(oldView uint64, newView uint64, qc *flow.QuorumCertificate)) *MockParticipantConsumer_OnQcTriggeredViewChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnQcTriggeredViewChange_Call) Return() *MockParticipantConsumer_OnQcTriggeredViewChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnQcTriggeredViewChange_Call) RunAndReturn(run func(uint64, uint64, *flow.QuorumCertificate)) *MockParticipantConsumer_OnQcTriggeredViewChange_Call {
	_c.Run(run)
	return _c
}

// OnReceiveProposal provides a mock function with given fields: currentView, proposal
func (_m *MockParticipantConsumer) OnReceiveProposal(currentView uint64, proposal *model.SignedProposal) {
	_m.Called(currentView, proposal)
}

// MockParticipantConsumer_OnReceiveProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveProposal'
type MockParticipantConsumer_OnReceiveProposal_Call struct {
	*mock.Call
}

// OnReceiveProposal is a helper method to define mock.On call
//   - currentView uint64
//   - proposal *model.SignedProposal
func (_e *MockParticipantConsumer_Expecter) OnReceiveProposal(currentView interface{}, proposal interface{}) *MockParticipantConsumer_OnReceiveProposal_Call {
	return &MockParticipantConsumer_OnReceiveProposal_Call{Call: _e.mock.On("OnReceiveProposal", currentView, proposal)}
}

func (_c *MockParticipantConsumer_OnReceiveProposal_Call) Run(run func(currentView uint64, proposal *model.SignedProposal)) *MockParticipantConsumer_OnReceiveProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnReceiveProposal_Call) Return() *MockParticipantConsumer_OnReceiveProposal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnReceiveProposal_Call) RunAndReturn(run func(uint64, *model.SignedProposal)) *MockParticipantConsumer_OnReceiveProposal_Call {
	_c.Run(run)
	return _c
}

// OnReceiveQc provides a mock function with given fields: currentView, qc
func (_m *MockParticipantConsumer) OnReceiveQc(currentView uint64, qc *flow.QuorumCertificate) {
	_m.Called(currentView, qc)
}

// MockParticipantConsumer_OnReceiveQc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveQc'
type MockParticipantConsumer_OnReceiveQc_Call struct {
	*mock.Call
}

// OnReceiveQc is a helper method to define mock.On call
//   - currentView uint64
//   - qc *flow.QuorumCertificate
func (_e *MockParticipantConsumer_Expecter) OnReceiveQc(currentView interface{}, qc interface{}) *MockParticipantConsumer_OnReceiveQc_Call {
	return &MockParticipantConsumer_OnReceiveQc_Call{Call: _e.mock.On("OnReceiveQc", currentView, qc)}
}

func (_c *MockParticipantConsumer_OnReceiveQc_Call) Run(run func(currentView uint64, qc *flow.QuorumCertificate)) *MockParticipantConsumer_OnReceiveQc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnReceiveQc_Call) Return() *MockParticipantConsumer_OnReceiveQc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnReceiveQc_Call) RunAndReturn(run func(uint64, *flow.QuorumCertificate)) *MockParticipantConsumer_OnReceiveQc_Call {
	_c.Run(run)
	return _c
}

// OnReceiveTc provides a mock function with given fields: currentView, tc
func (_m *MockParticipantConsumer) OnReceiveTc(currentView uint64, tc *flow.TimeoutCertificate) {
	_m.Called(currentView, tc)
}

// MockParticipantConsumer_OnReceiveTc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReceiveTc'
type MockParticipantConsumer_OnReceiveTc_Call struct {
	*mock.Call
}

// OnReceiveTc is a helper method to define mock.On call
//   - currentView uint64
//   - tc *flow.TimeoutCertificate
func (_e *MockParticipantConsumer_Expecter) OnReceiveTc(currentView interface{}, tc interface{}) *MockParticipantConsumer_OnReceiveTc_Call {
	return &MockParticipantConsumer_OnReceiveTc_Call{Call: _e.mock.On("OnReceiveTc", currentView, tc)}
}

func (_c *MockParticipantConsumer_OnReceiveTc_Call) Run(run func(currentView uint64, tc *flow.TimeoutCertificate)) *MockParticipantConsumer_OnReceiveTc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnReceiveTc_Call) Return() *MockParticipantConsumer_OnReceiveTc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnReceiveTc_Call) RunAndReturn(run func(uint64, *flow.TimeoutCertificate)) *MockParticipantConsumer_OnReceiveTc_Call {
	_c.Run(run)
	return _c
}

// OnStart provides a mock function with given fields: currentView
func (_m *MockParticipantConsumer) OnStart(currentView uint64) {
	_m.Called(currentView)
}

// MockParticipantConsumer_OnStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStart'
type MockParticipantConsumer_OnStart_Call struct {
	*mock.Call
}

// OnStart is a helper method to define mock.On call
//   - currentView uint64
func (_e *MockParticipantConsumer_Expecter) OnStart(currentView interface{}) *MockParticipantConsumer_OnStart_Call {
	return &MockParticipantConsumer_OnStart_Call{Call: _e.mock.On("OnStart", currentView)}
}

func (_c *MockParticipantConsumer_OnStart_Call) Run(run func(currentView uint64)) *MockParticipantConsumer_OnStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnStart_Call) Return() *MockParticipantConsumer_OnStart_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnStart_Call) RunAndReturn(run func(uint64)) *MockParticipantConsumer_OnStart_Call {
	_c.Run(run)
	return _c
}

// OnStartingTimeout provides a mock function with given fields: _a0
func (_m *MockParticipantConsumer) OnStartingTimeout(_a0 model.TimerInfo) {
	_m.Called(_a0)
}

// MockParticipantConsumer_OnStartingTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStartingTimeout'
type MockParticipantConsumer_OnStartingTimeout_Call struct {
	*mock.Call
}

// OnStartingTimeout is a helper method to define mock.On call
//   - _a0 model.TimerInfo
func (_e *MockParticipantConsumer_Expecter) OnStartingTimeout(_a0 interface{}) *MockParticipantConsumer_OnStartingTimeout_Call {
	return &MockParticipantConsumer_OnStartingTimeout_Call{Call: _e.mock.On("OnStartingTimeout", _a0)}
}

func (_c *MockParticipantConsumer_OnStartingTimeout_Call) Run(run func(_a0 model.TimerInfo)) *MockParticipantConsumer_OnStartingTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TimerInfo))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnStartingTimeout_Call) Return() *MockParticipantConsumer_OnStartingTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnStartingTimeout_Call) RunAndReturn(run func(model.TimerInfo)) *MockParticipantConsumer_OnStartingTimeout_Call {
	_c.Run(run)
	return _c
}

// OnTcTriggeredViewChange provides a mock function with given fields: oldView, newView, tc
func (_m *MockParticipantConsumer) OnTcTriggeredViewChange(oldView uint64, newView uint64, tc *flow.TimeoutCertificate) {
	_m.Called(oldView, newView, tc)
}

// MockParticipantConsumer_OnTcTriggeredViewChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTcTriggeredViewChange'
type MockParticipantConsumer_OnTcTriggeredViewChange_Call struct {
	*mock.Call
}

// OnTcTriggeredViewChange is a helper method to define mock.On call
//   - oldView uint64
//   - newView uint64
//   - tc *flow.TimeoutCertificate
func (_e *MockParticipantConsumer_Expecter) OnTcTriggeredViewChange(oldView interface{}, newView interface{}, tc interface{}) *MockParticipantConsumer_OnTcTriggeredViewChange_Call {
	return &MockParticipantConsumer_OnTcTriggeredViewChange_Call{Call: _e.mock.On("OnTcTriggeredViewChange", oldView, newView, tc)}
}

func (_c *MockParticipantConsumer_OnTcTriggeredViewChange_Call) Run(run func(oldView uint64, newView uint64, tc *flow.TimeoutCertificate)) *MockParticipantConsumer_OnTcTriggeredViewChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnTcTriggeredViewChange_Call) Return() *MockParticipantConsumer_OnTcTriggeredViewChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnTcTriggeredViewChange_Call) RunAndReturn(run func(uint64, uint64, *flow.TimeoutCertificate)) *MockParticipantConsumer_OnTcTriggeredViewChange_Call {
	_c.Run(run)
	return _c
}

// OnViewChange provides a mock function with given fields: oldView, newView
func (_m *MockParticipantConsumer) OnViewChange(oldView uint64, newView uint64) {
	_m.Called(oldView, newView)
}

// MockParticipantConsumer_OnViewChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnViewChange'
type MockParticipantConsumer_OnViewChange_Call struct {
	*mock.Call
}

// OnViewChange is a helper method to define mock.On call
//   - oldView uint64
//   - newView uint64
func (_e *MockParticipantConsumer_Expecter) OnViewChange(oldView interface{}, newView interface{}) *MockParticipantConsumer_OnViewChange_Call {
	return &MockParticipantConsumer_OnViewChange_Call{Call: _e.mock.On("OnViewChange", oldView, newView)}
}

func (_c *MockParticipantConsumer_OnViewChange_Call) Run(run func(oldView uint64, newView uint64)) *MockParticipantConsumer_OnViewChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *MockParticipantConsumer_OnViewChange_Call) Return() *MockParticipantConsumer_OnViewChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParticipantConsumer_OnViewChange_Call) RunAndReturn(run func(uint64, uint64)) *MockParticipantConsumer_OnViewChange_Call {
	_c.Run(run)
	return _c
}

// NewMockParticipantConsumer creates a new instance of MockParticipantConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParticipantConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParticipantConsumer {
	mock := &MockParticipantConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
