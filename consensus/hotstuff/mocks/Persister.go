// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	mock "github.com/stretchr/testify/mock"
)

// MockPersister is an autogenerated mock type for the Persister type
type MockPersister struct {
	mock.Mock
}

type MockPersister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersister) EXPECT() *MockPersister_Expecter {
	return &MockPersister_Expecter{mock: &_m.Mock}
}

// GetLivenessData provides a mock function with no fields
func (_m *MockPersister) GetLivenessData() (*hotstuff.LivenessData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLivenessData")
	}

	var r0 *hotstuff.LivenessData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*hotstuff.LivenessData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.LivenessData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.LivenessData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersister_GetLivenessData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLivenessData'
type MockPersister_GetLivenessData_Call struct {
	*mock.Call
}

// GetLivenessData is a helper method to define mock.On call
func (_e *MockPersister_Expecter) GetLivenessData() *MockPersister_GetLivenessData_Call {
	return &MockPersister_GetLivenessData_Call{Call: _e.mock.On("GetLivenessData")}
}

func (_c *MockPersister_GetLivenessData_Call) Run(run func()) *MockPersister_GetLivenessData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersister_GetLivenessData_Call) Return(_a0 *hotstuff.LivenessData, _a1 error) *MockPersister_GetLivenessData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersister_GetLivenessData_Call) RunAndReturn(run func() (*hotstuff.LivenessData, error)) *MockPersister_GetLivenessData_Call {
	_c.Call.Return(run)
	return _c
}

// GetSafetyData provides a mock function with no fields
func (_m *MockPersister) GetSafetyData() (*hotstuff.SafetyData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSafetyData")
	}

	var r0 *hotstuff.SafetyData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*hotstuff.SafetyData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *hotstuff.SafetyData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hotstuff.SafetyData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersister_GetSafetyData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSafetyData'
type MockPersister_GetSafetyData_Call struct {
	*mock.Call
}

// GetSafetyData is a helper method to define mock.On call
func (_e *MockPersister_Expecter) GetSafetyData() *MockPersister_GetSafetyData_Call {
	return &MockPersister_GetSafetyData_Call{Call: _e.mock.On("GetSafetyData")}
}

func (_c *MockPersister_GetSafetyData_Call) Run(run func()) *MockPersister_GetSafetyData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersister_GetSafetyData_Call) Return(_a0 *hotstuff.SafetyData, _a1 error) *MockPersister_GetSafetyData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersister_GetSafetyData_Call) RunAndReturn(run func() (*hotstuff.SafetyData, error)) *MockPersister_GetSafetyData_Call {
	_c.Call.Return(run)
	return _c
}

// PutLivenessData provides a mock function with given fields: livenessData
func (_m *MockPersister) PutLivenessData(livenessData *hotstuff.LivenessData) error {
	ret := _m.Called(livenessData)

	if len(ret) == 0 {
		panic("no return value specified for PutLivenessData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*hotstuff.LivenessData) error); ok {
		r0 = rf(livenessData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersister_PutLivenessData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutLivenessData'
type MockPersister_PutLivenessData_Call struct {
	*mock.Call
}

// PutLivenessData is a helper method to define mock.On call
//   - livenessData *hotstuff.LivenessData
func (_e *MockPersister_Expecter) PutLivenessData(livenessData interface{}) *MockPersister_PutLivenessData_Call {
	return &MockPersister_PutLivenessData_Call{Call: _e.mock.On("PutLivenessData", livenessData)}
}

func (_c *MockPersister_PutLivenessData_Call) Run(run func(livenessData *hotstuff.LivenessData)) *MockPersister_PutLivenessData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*hotstuff.LivenessData))
	})
	return _c
}

func (_c *MockPersister_PutLivenessData_Call) Return(_a0 error) *MockPersister_PutLivenessData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersister_PutLivenessData_Call) RunAndReturn(run func(*hotstuff.LivenessData) error) *MockPersister_PutLivenessData_Call {
	_c.Call.Return(run)
	return _c
}

// PutSafetyData provides a mock function with given fields: safetyData
func (_m *MockPersister) PutSafetyData(safetyData *hotstuff.SafetyData) error {
	ret := _m.Called(safetyData)

	if len(ret) == 0 {
		panic("no return value specified for PutSafetyData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*hotstuff.SafetyData) error); ok {
		r0 = rf(safetyData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersister_PutSafetyData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSafetyData'
type MockPersister_PutSafetyData_Call struct {
	*mock.Call
}

// PutSafetyData is a helper method to define mock.On call
//   - safetyData *hotstuff.SafetyData
func (_e *MockPersister_Expecter) PutSafetyData(safetyData interface{}) *MockPersister_PutSafetyData_Call {
	return &MockPersister_PutSafetyData_Call{Call: _e.mock.On("PutSafetyData", safetyData)}
}

func (_c *MockPersister_PutSafetyData_Call) Run(run func(safetyData *hotstuff.SafetyData)) *MockPersister_PutSafetyData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*hotstuff.SafetyData))
	})
	return _c
}

func (_c *MockPersister_PutSafetyData_Call) Return(_a0 error) *MockPersister_PutSafetyData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersister_PutSafetyData_Call) RunAndReturn(run func(*hotstuff.SafetyData) error) *MockPersister_PutSafetyData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersister creates a new instance of MockPersister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersister {
	mock := &MockPersister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
