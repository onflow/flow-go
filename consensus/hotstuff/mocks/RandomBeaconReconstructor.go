// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockRandomBeaconReconstructor is an autogenerated mock type for the RandomBeaconReconstructor type
type MockRandomBeaconReconstructor struct {
	mock.Mock
}

type MockRandomBeaconReconstructor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRandomBeaconReconstructor) EXPECT() *MockRandomBeaconReconstructor_Expecter {
	return &MockRandomBeaconReconstructor_Expecter{mock: &_m.Mock}
}

// EnoughShares provides a mock function with no fields
func (_m *MockRandomBeaconReconstructor) EnoughShares() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnoughShares")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRandomBeaconReconstructor_EnoughShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnoughShares'
type MockRandomBeaconReconstructor_EnoughShares_Call struct {
	*mock.Call
}

// EnoughShares is a helper method to define mock.On call
func (_e *MockRandomBeaconReconstructor_Expecter) EnoughShares() *MockRandomBeaconReconstructor_EnoughShares_Call {
	return &MockRandomBeaconReconstructor_EnoughShares_Call{Call: _e.mock.On("EnoughShares")}
}

func (_c *MockRandomBeaconReconstructor_EnoughShares_Call) Run(run func()) *MockRandomBeaconReconstructor_EnoughShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRandomBeaconReconstructor_EnoughShares_Call) Return(_a0 bool) *MockRandomBeaconReconstructor_EnoughShares_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRandomBeaconReconstructor_EnoughShares_Call) RunAndReturn(run func() bool) *MockRandomBeaconReconstructor_EnoughShares_Call {
	_c.Call.Return(run)
	return _c
}

// Reconstruct provides a mock function with no fields
func (_m *MockRandomBeaconReconstructor) Reconstruct() (crypto.Signature, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reconstruct")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func() (crypto.Signature, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() crypto.Signature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRandomBeaconReconstructor_Reconstruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconstruct'
type MockRandomBeaconReconstructor_Reconstruct_Call struct {
	*mock.Call
}

// Reconstruct is a helper method to define mock.On call
func (_e *MockRandomBeaconReconstructor_Expecter) Reconstruct() *MockRandomBeaconReconstructor_Reconstruct_Call {
	return &MockRandomBeaconReconstructor_Reconstruct_Call{Call: _e.mock.On("Reconstruct")}
}

func (_c *MockRandomBeaconReconstructor_Reconstruct_Call) Run(run func()) *MockRandomBeaconReconstructor_Reconstruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRandomBeaconReconstructor_Reconstruct_Call) Return(_a0 crypto.Signature, _a1 error) *MockRandomBeaconReconstructor_Reconstruct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRandomBeaconReconstructor_Reconstruct_Call) RunAndReturn(run func() (crypto.Signature, error)) *MockRandomBeaconReconstructor_Reconstruct_Call {
	_c.Call.Return(run)
	return _c
}

// TrustedAdd provides a mock function with given fields: signerID, sig
func (_m *MockRandomBeaconReconstructor) TrustedAdd(signerID flow.Identifier, sig crypto.Signature) (bool, error) {
	ret := _m.Called(signerID, sig)

	if len(ret) == 0 {
		panic("no return value specified for TrustedAdd")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature) (bool, error)); ok {
		return rf(signerID, sig)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature) bool); ok {
		r0 = rf(signerID, sig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, crypto.Signature) error); ok {
		r1 = rf(signerID, sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRandomBeaconReconstructor_TrustedAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrustedAdd'
type MockRandomBeaconReconstructor_TrustedAdd_Call struct {
	*mock.Call
}

// TrustedAdd is a helper method to define mock.On call
//   - signerID flow.Identifier
//   - sig crypto.Signature
func (_e *MockRandomBeaconReconstructor_Expecter) TrustedAdd(signerID interface{}, sig interface{}) *MockRandomBeaconReconstructor_TrustedAdd_Call {
	return &MockRandomBeaconReconstructor_TrustedAdd_Call{Call: _e.mock.On("TrustedAdd", signerID, sig)}
}

func (_c *MockRandomBeaconReconstructor_TrustedAdd_Call) Run(run func(signerID flow.Identifier, sig crypto.Signature)) *MockRandomBeaconReconstructor_TrustedAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(crypto.Signature))
	})
	return _c
}

func (_c *MockRandomBeaconReconstructor_TrustedAdd_Call) Return(EnoughShares bool, err error) *MockRandomBeaconReconstructor_TrustedAdd_Call {
	_c.Call.Return(EnoughShares, err)
	return _c
}

func (_c *MockRandomBeaconReconstructor_TrustedAdd_Call) RunAndReturn(run func(flow.Identifier, crypto.Signature) (bool, error)) *MockRandomBeaconReconstructor_TrustedAdd_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: signerID, sig
func (_m *MockRandomBeaconReconstructor) Verify(signerID flow.Identifier, sig crypto.Signature) error {
	ret := _m.Called(signerID, sig)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature) error); ok {
		r0 = rf(signerID, sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRandomBeaconReconstructor_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockRandomBeaconReconstructor_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - signerID flow.Identifier
//   - sig crypto.Signature
func (_e *MockRandomBeaconReconstructor_Expecter) Verify(signerID interface{}, sig interface{}) *MockRandomBeaconReconstructor_Verify_Call {
	return &MockRandomBeaconReconstructor_Verify_Call{Call: _e.mock.On("Verify", signerID, sig)}
}

func (_c *MockRandomBeaconReconstructor_Verify_Call) Run(run func(signerID flow.Identifier, sig crypto.Signature)) *MockRandomBeaconReconstructor_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(crypto.Signature))
	})
	return _c
}

func (_c *MockRandomBeaconReconstructor_Verify_Call) Return(_a0 error) *MockRandomBeaconReconstructor_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRandomBeaconReconstructor_Verify_Call) RunAndReturn(run func(flow.Identifier, crypto.Signature) error) *MockRandomBeaconReconstructor_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRandomBeaconReconstructor creates a new instance of MockRandomBeaconReconstructor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRandomBeaconReconstructor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRandomBeaconReconstructor {
	mock := &MockRandomBeaconReconstructor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
