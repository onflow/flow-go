// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockVoteAggregationConsumer is an autogenerated mock type for the VoteAggregationConsumer type
type MockVoteAggregationConsumer struct {
	mock.Mock
}

type MockVoteAggregationConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteAggregationConsumer) EXPECT() *MockVoteAggregationConsumer_Expecter {
	return &MockVoteAggregationConsumer_Expecter{mock: &_m.Mock}
}

// OnDoubleVotingDetected provides a mock function with given fields: _a0, _a1
func (_m *MockVoteAggregationConsumer) OnDoubleVotingDetected(_a0 *model.Vote, _a1 *model.Vote) {
	_m.Called(_a0, _a1)
}

// MockVoteAggregationConsumer_OnDoubleVotingDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDoubleVotingDetected'
type MockVoteAggregationConsumer_OnDoubleVotingDetected_Call struct {
	*mock.Call
}

// OnDoubleVotingDetected is a helper method to define mock.On call
//   - _a0 *model.Vote
//   - _a1 *model.Vote
func (_e *MockVoteAggregationConsumer_Expecter) OnDoubleVotingDetected(_a0 interface{}, _a1 interface{}) *MockVoteAggregationConsumer_OnDoubleVotingDetected_Call {
	return &MockVoteAggregationConsumer_OnDoubleVotingDetected_Call{Call: _e.mock.On("OnDoubleVotingDetected", _a0, _a1)}
}

func (_c *MockVoteAggregationConsumer_OnDoubleVotingDetected_Call) Run(run func(_a0 *model.Vote, _a1 *model.Vote)) *MockVoteAggregationConsumer_OnDoubleVotingDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote), args[1].(*model.Vote))
	})
	return _c
}

func (_c *MockVoteAggregationConsumer_OnDoubleVotingDetected_Call) Return() *MockVoteAggregationConsumer_OnDoubleVotingDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregationConsumer_OnDoubleVotingDetected_Call) RunAndReturn(run func(*model.Vote, *model.Vote)) *MockVoteAggregationConsumer_OnDoubleVotingDetected_Call {
	_c.Run(run)
	return _c
}

// OnInvalidVoteDetected provides a mock function with given fields: err
func (_m *MockVoteAggregationConsumer) OnInvalidVoteDetected(err model.InvalidVoteError) {
	_m.Called(err)
}

// MockVoteAggregationConsumer_OnInvalidVoteDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnInvalidVoteDetected'
type MockVoteAggregationConsumer_OnInvalidVoteDetected_Call struct {
	*mock.Call
}

// OnInvalidVoteDetected is a helper method to define mock.On call
//   - err model.InvalidVoteError
func (_e *MockVoteAggregationConsumer_Expecter) OnInvalidVoteDetected(err interface{}) *MockVoteAggregationConsumer_OnInvalidVoteDetected_Call {
	return &MockVoteAggregationConsumer_OnInvalidVoteDetected_Call{Call: _e.mock.On("OnInvalidVoteDetected", err)}
}

func (_c *MockVoteAggregationConsumer_OnInvalidVoteDetected_Call) Run(run func(err model.InvalidVoteError)) *MockVoteAggregationConsumer_OnInvalidVoteDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.InvalidVoteError))
	})
	return _c
}

func (_c *MockVoteAggregationConsumer_OnInvalidVoteDetected_Call) Return() *MockVoteAggregationConsumer_OnInvalidVoteDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregationConsumer_OnInvalidVoteDetected_Call) RunAndReturn(run func(model.InvalidVoteError)) *MockVoteAggregationConsumer_OnInvalidVoteDetected_Call {
	_c.Run(run)
	return _c
}

// OnQcConstructedFromVotes provides a mock function with given fields: _a0
func (_m *MockVoteAggregationConsumer) OnQcConstructedFromVotes(_a0 *flow.QuorumCertificate) {
	_m.Called(_a0)
}

// MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnQcConstructedFromVotes'
type MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call struct {
	*mock.Call
}

// OnQcConstructedFromVotes is a helper method to define mock.On call
//   - _a0 *flow.QuorumCertificate
func (_e *MockVoteAggregationConsumer_Expecter) OnQcConstructedFromVotes(_a0 interface{}) *MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call {
	return &MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call{Call: _e.mock.On("OnQcConstructedFromVotes", _a0)}
}

func (_c *MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call) Run(run func(_a0 *flow.QuorumCertificate)) *MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call) Return() *MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call) RunAndReturn(run func(*flow.QuorumCertificate)) *MockVoteAggregationConsumer_OnQcConstructedFromVotes_Call {
	_c.Run(run)
	return _c
}

// OnVoteForInvalidBlockDetected provides a mock function with given fields: vote, invalidProposal
func (_m *MockVoteAggregationConsumer) OnVoteForInvalidBlockDetected(vote *model.Vote, invalidProposal *model.SignedProposal) {
	_m.Called(vote, invalidProposal)
}

// MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnVoteForInvalidBlockDetected'
type MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call struct {
	*mock.Call
}

// OnVoteForInvalidBlockDetected is a helper method to define mock.On call
//   - vote *model.Vote
//   - invalidProposal *model.SignedProposal
func (_e *MockVoteAggregationConsumer_Expecter) OnVoteForInvalidBlockDetected(vote interface{}, invalidProposal interface{}) *MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call {
	return &MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call{Call: _e.mock.On("OnVoteForInvalidBlockDetected", vote, invalidProposal)}
}

func (_c *MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call) Run(run func(vote *model.Vote, invalidProposal *model.SignedProposal)) *MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote), args[1].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call) Return() *MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call) RunAndReturn(run func(*model.Vote, *model.SignedProposal)) *MockVoteAggregationConsumer_OnVoteForInvalidBlockDetected_Call {
	_c.Run(run)
	return _c
}

// OnVoteProcessed provides a mock function with given fields: vote
func (_m *MockVoteAggregationConsumer) OnVoteProcessed(vote *model.Vote) {
	_m.Called(vote)
}

// MockVoteAggregationConsumer_OnVoteProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnVoteProcessed'
type MockVoteAggregationConsumer_OnVoteProcessed_Call struct {
	*mock.Call
}

// OnVoteProcessed is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockVoteAggregationConsumer_Expecter) OnVoteProcessed(vote interface{}) *MockVoteAggregationConsumer_OnVoteProcessed_Call {
	return &MockVoteAggregationConsumer_OnVoteProcessed_Call{Call: _e.mock.On("OnVoteProcessed", vote)}
}

func (_c *MockVoteAggregationConsumer_OnVoteProcessed_Call) Run(run func(vote *model.Vote)) *MockVoteAggregationConsumer_OnVoteProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockVoteAggregationConsumer_OnVoteProcessed_Call) Return() *MockVoteAggregationConsumer_OnVoteProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteAggregationConsumer_OnVoteProcessed_Call) RunAndReturn(run func(*model.Vote)) *MockVoteAggregationConsumer_OnVoteProcessed_Call {
	_c.Run(run)
	return _c
}

// NewMockVoteAggregationConsumer creates a new instance of MockVoteAggregationConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteAggregationConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteAggregationConsumer {
	mock := &MockVoteAggregationConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
