// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockProposalViolationConsumer is an autogenerated mock type for the ProposalViolationConsumer type
type MockProposalViolationConsumer struct {
	mock.Mock
}

type MockProposalViolationConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProposalViolationConsumer) EXPECT() *MockProposalViolationConsumer_Expecter {
	return &MockProposalViolationConsumer_Expecter{mock: &_m.Mock}
}

// OnDoubleProposeDetected provides a mock function with given fields: _a0, _a1
func (_m *MockProposalViolationConsumer) OnDoubleProposeDetected(_a0 *model.Block, _a1 *model.Block) {
	_m.Called(_a0, _a1)
}

// MockProposalViolationConsumer_OnDoubleProposeDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDoubleProposeDetected'
type MockProposalViolationConsumer_OnDoubleProposeDetected_Call struct {
	*mock.Call
}

// OnDoubleProposeDetected is a helper method to define mock.On call
//   - _a0 *model.Block
//   - _a1 *model.Block
func (_e *MockProposalViolationConsumer_Expecter) OnDoubleProposeDetected(_a0 interface{}, _a1 interface{}) *MockProposalViolationConsumer_OnDoubleProposeDetected_Call {
	return &MockProposalViolationConsumer_OnDoubleProposeDetected_Call{Call: _e.mock.On("OnDoubleProposeDetected", _a0, _a1)}
}

func (_c *MockProposalViolationConsumer_OnDoubleProposeDetected_Call) Run(run func(_a0 *model.Block, _a1 *model.Block)) *MockProposalViolationConsumer_OnDoubleProposeDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block), args[1].(*model.Block))
	})
	return _c
}

func (_c *MockProposalViolationConsumer_OnDoubleProposeDetected_Call) Return() *MockProposalViolationConsumer_OnDoubleProposeDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProposalViolationConsumer_OnDoubleProposeDetected_Call) RunAndReturn(run func(*model.Block, *model.Block)) *MockProposalViolationConsumer_OnDoubleProposeDetected_Call {
	_c.Run(run)
	return _c
}

// OnInvalidBlockDetected provides a mock function with given fields: err
func (_m *MockProposalViolationConsumer) OnInvalidBlockDetected(err flow.Slashable[model.InvalidProposalError]) {
	_m.Called(err)
}

// MockProposalViolationConsumer_OnInvalidBlockDetected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnInvalidBlockDetected'
type MockProposalViolationConsumer_OnInvalidBlockDetected_Call struct {
	*mock.Call
}

// OnInvalidBlockDetected is a helper method to define mock.On call
//   - err flow.Slashable[model.InvalidProposalError]
func (_e *MockProposalViolationConsumer_Expecter) OnInvalidBlockDetected(err interface{}) *MockProposalViolationConsumer_OnInvalidBlockDetected_Call {
	return &MockProposalViolationConsumer_OnInvalidBlockDetected_Call{Call: _e.mock.On("OnInvalidBlockDetected", err)}
}

func (_c *MockProposalViolationConsumer_OnInvalidBlockDetected_Call) Run(run func(err flow.Slashable[model.InvalidProposalError])) *MockProposalViolationConsumer_OnInvalidBlockDetected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Slashable[model.InvalidProposalError]))
	})
	return _c
}

func (_c *MockProposalViolationConsumer_OnInvalidBlockDetected_Call) Return() *MockProposalViolationConsumer_OnInvalidBlockDetected_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProposalViolationConsumer_OnInvalidBlockDetected_Call) RunAndReturn(run func(flow.Slashable[model.InvalidProposalError])) *MockProposalViolationConsumer_OnInvalidBlockDetected_Call {
	_c.Run(run)
	return _c
}

// NewMockProposalViolationConsumer creates a new instance of MockProposalViolationConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProposalViolationConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProposalViolationConsumer {
	mock := &MockProposalViolationConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
