// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "github.com/onflow/flow-go/consensus/hotstuff/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTimeoutCollector is an autogenerated mock type for the TimeoutCollector type
type MockTimeoutCollector struct {
	mock.Mock
}

type MockTimeoutCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeoutCollector) EXPECT() *MockTimeoutCollector_Expecter {
	return &MockTimeoutCollector_Expecter{mock: &_m.Mock}
}

// AddTimeout provides a mock function with given fields: timeoutObject
func (_m *MockTimeoutCollector) AddTimeout(timeoutObject *model.TimeoutObject) error {
	ret := _m.Called(timeoutObject)

	if len(ret) == 0 {
		panic("no return value specified for AddTimeout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TimeoutObject) error); ok {
		r0 = rf(timeoutObject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTimeoutCollector_AddTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTimeout'
type MockTimeoutCollector_AddTimeout_Call struct {
	*mock.Call
}

// AddTimeout is a helper method to define mock.On call
//   - timeoutObject *model.TimeoutObject
func (_e *MockTimeoutCollector_Expecter) AddTimeout(timeoutObject interface{}) *MockTimeoutCollector_AddTimeout_Call {
	return &MockTimeoutCollector_AddTimeout_Call{Call: _e.mock.On("AddTimeout", timeoutObject)}
}

func (_c *MockTimeoutCollector_AddTimeout_Call) Run(run func(timeoutObject *model.TimeoutObject)) *MockTimeoutCollector_AddTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockTimeoutCollector_AddTimeout_Call) Return(_a0 error) *MockTimeoutCollector_AddTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeoutCollector_AddTimeout_Call) RunAndReturn(run func(*model.TimeoutObject) error) *MockTimeoutCollector_AddTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with no fields
func (_m *MockTimeoutCollector) View() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockTimeoutCollector_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockTimeoutCollector_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
func (_e *MockTimeoutCollector_Expecter) View() *MockTimeoutCollector_View_Call {
	return &MockTimeoutCollector_View_Call{Call: _e.mock.On("View")}
}

func (_c *MockTimeoutCollector_View_Call) Run(run func()) *MockTimeoutCollector_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeoutCollector_View_Call) Return(_a0 uint64) *MockTimeoutCollector_View_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeoutCollector_View_Call) RunAndReturn(run func() uint64) *MockTimeoutCollector_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimeoutCollector creates a new instance of MockTimeoutCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeoutCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeoutCollector {
	mock := &MockTimeoutCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
