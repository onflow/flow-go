// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"

	mock "github.com/stretchr/testify/mock"
)

// MockTimeoutSignatureAggregator is an autogenerated mock type for the TimeoutSignatureAggregator type
type MockTimeoutSignatureAggregator struct {
	mock.Mock
}

type MockTimeoutSignatureAggregator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeoutSignatureAggregator) EXPECT() *MockTimeoutSignatureAggregator_Expecter {
	return &MockTimeoutSignatureAggregator_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with no fields
func (_m *MockTimeoutSignatureAggregator) Aggregate() ([]hotstuff.TimeoutSignerInfo, crypto.Signature, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 []hotstuff.TimeoutSignerInfo
	var r1 crypto.Signature
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]hotstuff.TimeoutSignerInfo, crypto.Signature, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []hotstuff.TimeoutSignerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hotstuff.TimeoutSignerInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() crypto.Signature); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTimeoutSignatureAggregator_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockTimeoutSignatureAggregator_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
func (_e *MockTimeoutSignatureAggregator_Expecter) Aggregate() *MockTimeoutSignatureAggregator_Aggregate_Call {
	return &MockTimeoutSignatureAggregator_Aggregate_Call{Call: _e.mock.On("Aggregate")}
}

func (_c *MockTimeoutSignatureAggregator_Aggregate_Call) Run(run func()) *MockTimeoutSignatureAggregator_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeoutSignatureAggregator_Aggregate_Call) Return(signersInfo []hotstuff.TimeoutSignerInfo, aggregatedSig crypto.Signature, exception error) *MockTimeoutSignatureAggregator_Aggregate_Call {
	_c.Call.Return(signersInfo, aggregatedSig, exception)
	return _c
}

func (_c *MockTimeoutSignatureAggregator_Aggregate_Call) RunAndReturn(run func() ([]hotstuff.TimeoutSignerInfo, crypto.Signature, error)) *MockTimeoutSignatureAggregator_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// TotalWeight provides a mock function with no fields
func (_m *MockTimeoutSignatureAggregator) TotalWeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalWeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockTimeoutSignatureAggregator_TotalWeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalWeight'
type MockTimeoutSignatureAggregator_TotalWeight_Call struct {
	*mock.Call
}

// TotalWeight is a helper method to define mock.On call
func (_e *MockTimeoutSignatureAggregator_Expecter) TotalWeight() *MockTimeoutSignatureAggregator_TotalWeight_Call {
	return &MockTimeoutSignatureAggregator_TotalWeight_Call{Call: _e.mock.On("TotalWeight")}
}

func (_c *MockTimeoutSignatureAggregator_TotalWeight_Call) Run(run func()) *MockTimeoutSignatureAggregator_TotalWeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeoutSignatureAggregator_TotalWeight_Call) Return(_a0 uint64) *MockTimeoutSignatureAggregator_TotalWeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeoutSignatureAggregator_TotalWeight_Call) RunAndReturn(run func() uint64) *MockTimeoutSignatureAggregator_TotalWeight_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAndAdd provides a mock function with given fields: signerID, sig, newestQCView
func (_m *MockTimeoutSignatureAggregator) VerifyAndAdd(signerID flow.Identifier, sig crypto.Signature, newestQCView uint64) (uint64, error) {
	ret := _m.Called(signerID, sig, newestQCView)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAndAdd")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature, uint64) (uint64, error)); ok {
		return rf(signerID, sig, newestQCView)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, crypto.Signature, uint64) uint64); ok {
		r0 = rf(signerID, sig, newestQCView)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, crypto.Signature, uint64) error); ok {
		r1 = rf(signerID, sig, newestQCView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTimeoutSignatureAggregator_VerifyAndAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAndAdd'
type MockTimeoutSignatureAggregator_VerifyAndAdd_Call struct {
	*mock.Call
}

// VerifyAndAdd is a helper method to define mock.On call
//   - signerID flow.Identifier
//   - sig crypto.Signature
//   - newestQCView uint64
func (_e *MockTimeoutSignatureAggregator_Expecter) VerifyAndAdd(signerID interface{}, sig interface{}, newestQCView interface{}) *MockTimeoutSignatureAggregator_VerifyAndAdd_Call {
	return &MockTimeoutSignatureAggregator_VerifyAndAdd_Call{Call: _e.mock.On("VerifyAndAdd", signerID, sig, newestQCView)}
}

func (_c *MockTimeoutSignatureAggregator_VerifyAndAdd_Call) Run(run func(signerID flow.Identifier, sig crypto.Signature, newestQCView uint64)) *MockTimeoutSignatureAggregator_VerifyAndAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(crypto.Signature), args[2].(uint64))
	})
	return _c
}

func (_c *MockTimeoutSignatureAggregator_VerifyAndAdd_Call) Return(totalWeight uint64, exception error) *MockTimeoutSignatureAggregator_VerifyAndAdd_Call {
	_c.Call.Return(totalWeight, exception)
	return _c
}

func (_c *MockTimeoutSignatureAggregator_VerifyAndAdd_Call) RunAndReturn(run func(flow.Identifier, crypto.Signature, uint64) (uint64, error)) *MockTimeoutSignatureAggregator_VerifyAndAdd_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with no fields
func (_m *MockTimeoutSignatureAggregator) View() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockTimeoutSignatureAggregator_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockTimeoutSignatureAggregator_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
func (_e *MockTimeoutSignatureAggregator_Expecter) View() *MockTimeoutSignatureAggregator_View_Call {
	return &MockTimeoutSignatureAggregator_View_Call{Call: _e.mock.On("View")}
}

func (_c *MockTimeoutSignatureAggregator_View_Call) Run(run func()) *MockTimeoutSignatureAggregator_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeoutSignatureAggregator_View_Call) Return(_a0 uint64) *MockTimeoutSignatureAggregator_View_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimeoutSignatureAggregator_View_Call) RunAndReturn(run func() uint64) *MockTimeoutSignatureAggregator_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimeoutSignatureAggregator creates a new instance of MockTimeoutSignatureAggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeoutSignatureAggregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeoutSignatureAggregator {
	mock := &MockTimeoutSignatureAggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
