// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "github.com/onflow/flow-go/consensus/hotstuff/model"
	mock "github.com/stretchr/testify/mock"
)

// MockFinalizationConsumer is an autogenerated mock type for the FinalizationConsumer type
type MockFinalizationConsumer struct {
	mock.Mock
}

type MockFinalizationConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFinalizationConsumer) EXPECT() *MockFinalizationConsumer_Expecter {
	return &MockFinalizationConsumer_Expecter{mock: &_m.Mock}
}

// OnBlockIncorporated provides a mock function with given fields: _a0
func (_m *MockFinalizationConsumer) OnBlockIncorporated(_a0 *model.Block) {
	_m.Called(_a0)
}

// MockFinalizationConsumer_OnBlockIncorporated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBlockIncorporated'
type MockFinalizationConsumer_OnBlockIncorporated_Call struct {
	*mock.Call
}

// OnBlockIncorporated is a helper method to define mock.On call
//   - _a0 *model.Block
func (_e *MockFinalizationConsumer_Expecter) OnBlockIncorporated(_a0 interface{}) *MockFinalizationConsumer_OnBlockIncorporated_Call {
	return &MockFinalizationConsumer_OnBlockIncorporated_Call{Call: _e.mock.On("OnBlockIncorporated", _a0)}
}

func (_c *MockFinalizationConsumer_OnBlockIncorporated_Call) Run(run func(_a0 *model.Block)) *MockFinalizationConsumer_OnBlockIncorporated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block))
	})
	return _c
}

func (_c *MockFinalizationConsumer_OnBlockIncorporated_Call) Return() *MockFinalizationConsumer_OnBlockIncorporated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFinalizationConsumer_OnBlockIncorporated_Call) RunAndReturn(run func(*model.Block)) *MockFinalizationConsumer_OnBlockIncorporated_Call {
	_c.Run(run)
	return _c
}

// OnFinalizedBlock provides a mock function with given fields: _a0
func (_m *MockFinalizationConsumer) OnFinalizedBlock(_a0 *model.Block) {
	_m.Called(_a0)
}

// MockFinalizationConsumer_OnFinalizedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnFinalizedBlock'
type MockFinalizationConsumer_OnFinalizedBlock_Call struct {
	*mock.Call
}

// OnFinalizedBlock is a helper method to define mock.On call
//   - _a0 *model.Block
func (_e *MockFinalizationConsumer_Expecter) OnFinalizedBlock(_a0 interface{}) *MockFinalizationConsumer_OnFinalizedBlock_Call {
	return &MockFinalizationConsumer_OnFinalizedBlock_Call{Call: _e.mock.On("OnFinalizedBlock", _a0)}
}

func (_c *MockFinalizationConsumer_OnFinalizedBlock_Call) Run(run func(_a0 *model.Block)) *MockFinalizationConsumer_OnFinalizedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Block))
	})
	return _c
}

func (_c *MockFinalizationConsumer_OnFinalizedBlock_Call) Return() *MockFinalizationConsumer_OnFinalizedBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFinalizationConsumer_OnFinalizedBlock_Call) RunAndReturn(run func(*model.Block)) *MockFinalizationConsumer_OnFinalizedBlock_Call {
	_c.Run(run)
	return _c
}

// NewMockFinalizationConsumer creates a new instance of MockFinalizationConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinalizationConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinalizationConsumer {
	mock := &MockFinalizationConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
