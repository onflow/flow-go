// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"

	time "time"
)

// MockCommunicatorConsumer is an autogenerated mock type for the CommunicatorConsumer type
type MockCommunicatorConsumer struct {
	mock.Mock
}

type MockCommunicatorConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommunicatorConsumer) EXPECT() *MockCommunicatorConsumer_Expecter {
	return &MockCommunicatorConsumer_Expecter{mock: &_m.Mock}
}

// OnOwnProposal provides a mock function with given fields: proposal, targetPublicationTime
func (_m *MockCommunicatorConsumer) OnOwnProposal(proposal *flow.Header, targetPublicationTime time.Time) {
	_m.Called(proposal, targetPublicationTime)
}

// MockCommunicatorConsumer_OnOwnProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOwnProposal'
type MockCommunicatorConsumer_OnOwnProposal_Call struct {
	*mock.Call
}

// OnOwnProposal is a helper method to define mock.On call
//   - proposal *flow.Header
//   - targetPublicationTime time.Time
func (_e *MockCommunicatorConsumer_Expecter) OnOwnProposal(proposal interface{}, targetPublicationTime interface{}) *MockCommunicatorConsumer_OnOwnProposal_Call {
	return &MockCommunicatorConsumer_OnOwnProposal_Call{Call: _e.mock.On("OnOwnProposal", proposal, targetPublicationTime)}
}

func (_c *MockCommunicatorConsumer_OnOwnProposal_Call) Run(run func(proposal *flow.Header, targetPublicationTime time.Time)) *MockCommunicatorConsumer_OnOwnProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header), args[1].(time.Time))
	})
	return _c
}

func (_c *MockCommunicatorConsumer_OnOwnProposal_Call) Return() *MockCommunicatorConsumer_OnOwnProposal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommunicatorConsumer_OnOwnProposal_Call) RunAndReturn(run func(*flow.Header, time.Time)) *MockCommunicatorConsumer_OnOwnProposal_Call {
	_c.Run(run)
	return _c
}

// OnOwnTimeout provides a mock function with given fields: timeout
func (_m *MockCommunicatorConsumer) OnOwnTimeout(timeout *model.TimeoutObject) {
	_m.Called(timeout)
}

// MockCommunicatorConsumer_OnOwnTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOwnTimeout'
type MockCommunicatorConsumer_OnOwnTimeout_Call struct {
	*mock.Call
}

// OnOwnTimeout is a helper method to define mock.On call
//   - timeout *model.TimeoutObject
func (_e *MockCommunicatorConsumer_Expecter) OnOwnTimeout(timeout interface{}) *MockCommunicatorConsumer_OnOwnTimeout_Call {
	return &MockCommunicatorConsumer_OnOwnTimeout_Call{Call: _e.mock.On("OnOwnTimeout", timeout)}
}

func (_c *MockCommunicatorConsumer_OnOwnTimeout_Call) Run(run func(timeout *model.TimeoutObject)) *MockCommunicatorConsumer_OnOwnTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockCommunicatorConsumer_OnOwnTimeout_Call) Return() *MockCommunicatorConsumer_OnOwnTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommunicatorConsumer_OnOwnTimeout_Call) RunAndReturn(run func(*model.TimeoutObject)) *MockCommunicatorConsumer_OnOwnTimeout_Call {
	_c.Run(run)
	return _c
}

// OnOwnVote provides a mock function with given fields: vote, recipientID
func (_m *MockCommunicatorConsumer) OnOwnVote(vote *model.Vote, recipientID flow.Identifier) {
	_m.Called(vote, recipientID)
}

// MockCommunicatorConsumer_OnOwnVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnOwnVote'
type MockCommunicatorConsumer_OnOwnVote_Call struct {
	*mock.Call
}

// OnOwnVote is a helper method to define mock.On call
//   - vote *model.Vote
//   - recipientID flow.Identifier
func (_e *MockCommunicatorConsumer_Expecter) OnOwnVote(vote interface{}, recipientID interface{}) *MockCommunicatorConsumer_OnOwnVote_Call {
	return &MockCommunicatorConsumer_OnOwnVote_Call{Call: _e.mock.On("OnOwnVote", vote, recipientID)}
}

func (_c *MockCommunicatorConsumer_OnOwnVote_Call) Run(run func(vote *model.Vote, recipientID flow.Identifier)) *MockCommunicatorConsumer_OnOwnVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockCommunicatorConsumer_OnOwnVote_Call) Return() *MockCommunicatorConsumer_OnOwnVote_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommunicatorConsumer_OnOwnVote_Call) RunAndReturn(run func(*model.Vote, flow.Identifier)) *MockCommunicatorConsumer_OnOwnVote_Call {
	_c.Run(run)
	return _c
}

// NewMockCommunicatorConsumer creates a new instance of MockCommunicatorConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommunicatorConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommunicatorConsumer {
	mock := &MockCommunicatorConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
