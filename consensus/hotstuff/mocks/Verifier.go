// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockVerifier is an autogenerated mock type for the Verifier type
type MockVerifier struct {
	mock.Mock
}

type MockVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifier) EXPECT() *MockVerifier_Expecter {
	return &MockVerifier_Expecter{mock: &_m.Mock}
}

// VerifyQC provides a mock function with given fields: signers, sigData, view, blockID
func (_m *MockVerifier) VerifyQC(signers flow.GenericIdentityList[flow.IdentitySkeleton], sigData []byte, view uint64, blockID flow.Identifier) error {
	ret := _m.Called(signers, sigData, view, blockID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyQC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte, uint64, flow.Identifier) error); ok {
		r0 = rf(signers, sigData, view, blockID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerifier_VerifyQC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyQC'
type MockVerifier_VerifyQC_Call struct {
	*mock.Call
}

// VerifyQC is a helper method to define mock.On call
//   - signers flow.GenericIdentityList[flow.IdentitySkeleton]
//   - sigData []byte
//   - view uint64
//   - blockID flow.Identifier
func (_e *MockVerifier_Expecter) VerifyQC(signers interface{}, sigData interface{}, view interface{}, blockID interface{}) *MockVerifier_VerifyQC_Call {
	return &MockVerifier_VerifyQC_Call{Call: _e.mock.On("VerifyQC", signers, sigData, view, blockID)}
}

func (_c *MockVerifier_VerifyQC_Call) Run(run func(signers flow.GenericIdentityList[flow.IdentitySkeleton], sigData []byte, view uint64, blockID flow.Identifier)) *MockVerifier_VerifyQC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.GenericIdentityList[flow.IdentitySkeleton]), args[1].([]byte), args[2].(uint64), args[3].(flow.Identifier))
	})
	return _c
}

func (_c *MockVerifier_VerifyQC_Call) Return(_a0 error) *MockVerifier_VerifyQC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerifier_VerifyQC_Call) RunAndReturn(run func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte, uint64, flow.Identifier) error) *MockVerifier_VerifyQC_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyTC provides a mock function with given fields: signers, sigData, view, highQCViews
func (_m *MockVerifier) VerifyTC(signers flow.GenericIdentityList[flow.IdentitySkeleton], sigData []byte, view uint64, highQCViews []uint64) error {
	ret := _m.Called(signers, sigData, view, highQCViews)

	if len(ret) == 0 {
		panic("no return value specified for VerifyTC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte, uint64, []uint64) error); ok {
		r0 = rf(signers, sigData, view, highQCViews)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerifier_VerifyTC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyTC'
type MockVerifier_VerifyTC_Call struct {
	*mock.Call
}

// VerifyTC is a helper method to define mock.On call
//   - signers flow.GenericIdentityList[flow.IdentitySkeleton]
//   - sigData []byte
//   - view uint64
//   - highQCViews []uint64
func (_e *MockVerifier_Expecter) VerifyTC(signers interface{}, sigData interface{}, view interface{}, highQCViews interface{}) *MockVerifier_VerifyTC_Call {
	return &MockVerifier_VerifyTC_Call{Call: _e.mock.On("VerifyTC", signers, sigData, view, highQCViews)}
}

func (_c *MockVerifier_VerifyTC_Call) Run(run func(signers flow.GenericIdentityList[flow.IdentitySkeleton], sigData []byte, view uint64, highQCViews []uint64)) *MockVerifier_VerifyTC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.GenericIdentityList[flow.IdentitySkeleton]), args[1].([]byte), args[2].(uint64), args[3].([]uint64))
	})
	return _c
}

func (_c *MockVerifier_VerifyTC_Call) Return(_a0 error) *MockVerifier_VerifyTC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerifier_VerifyTC_Call) RunAndReturn(run func(flow.GenericIdentityList[flow.IdentitySkeleton], []byte, uint64, []uint64) error) *MockVerifier_VerifyTC_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyVote provides a mock function with given fields: voter, sigData, view, blockID
func (_m *MockVerifier) VerifyVote(voter *flow.IdentitySkeleton, sigData []byte, view uint64, blockID flow.Identifier) error {
	ret := _m.Called(voter, sigData, view, blockID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.IdentitySkeleton, []byte, uint64, flow.Identifier) error); ok {
		r0 = rf(voter, sigData, view, blockID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerifier_VerifyVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyVote'
type MockVerifier_VerifyVote_Call struct {
	*mock.Call
}

// VerifyVote is a helper method to define mock.On call
//   - voter *flow.IdentitySkeleton
//   - sigData []byte
//   - view uint64
//   - blockID flow.Identifier
func (_e *MockVerifier_Expecter) VerifyVote(voter interface{}, sigData interface{}, view interface{}, blockID interface{}) *MockVerifier_VerifyVote_Call {
	return &MockVerifier_VerifyVote_Call{Call: _e.mock.On("VerifyVote", voter, sigData, view, blockID)}
}

func (_c *MockVerifier_VerifyVote_Call) Run(run func(voter *flow.IdentitySkeleton, sigData []byte, view uint64, blockID flow.Identifier)) *MockVerifier_VerifyVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.IdentitySkeleton), args[1].([]byte), args[2].(uint64), args[3].(flow.Identifier))
	})
	return _c
}

func (_c *MockVerifier_VerifyVote_Call) Return(_a0 error) *MockVerifier_VerifyVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerifier_VerifyVote_Call) RunAndReturn(run func(*flow.IdentitySkeleton, []byte, uint64, flow.Identifier) error) *MockVerifier_VerifyVote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerifier creates a new instance of MockVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifier {
	mock := &MockVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
