// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockVoteCollector is an autogenerated mock type for the VoteCollector type
type MockVoteCollector struct {
	mock.Mock
}

type MockVoteCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVoteCollector) EXPECT() *MockVoteCollector_Expecter {
	return &MockVoteCollector_Expecter{mock: &_m.Mock}
}

// AddVote provides a mock function with given fields: vote
func (_m *MockVoteCollector) AddVote(vote *model.Vote) error {
	ret := _m.Called(vote)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Vote) error); ok {
		r0 = rf(vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVoteCollector_AddVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVote'
type MockVoteCollector_AddVote_Call struct {
	*mock.Call
}

// AddVote is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockVoteCollector_Expecter) AddVote(vote interface{}) *MockVoteCollector_AddVote_Call {
	return &MockVoteCollector_AddVote_Call{Call: _e.mock.On("AddVote", vote)}
}

func (_c *MockVoteCollector_AddVote_Call) Run(run func(vote *model.Vote)) *MockVoteCollector_AddVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockVoteCollector_AddVote_Call) Return(_a0 error) *MockVoteCollector_AddVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteCollector_AddVote_Call) RunAndReturn(run func(*model.Vote) error) *MockVoteCollector_AddVote_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessBlock provides a mock function with given fields: block
func (_m *MockVoteCollector) ProcessBlock(block *model.SignedProposal) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.SignedProposal) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVoteCollector_ProcessBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBlock'
type MockVoteCollector_ProcessBlock_Call struct {
	*mock.Call
}

// ProcessBlock is a helper method to define mock.On call
//   - block *model.SignedProposal
func (_e *MockVoteCollector_Expecter) ProcessBlock(block interface{}) *MockVoteCollector_ProcessBlock_Call {
	return &MockVoteCollector_ProcessBlock_Call{Call: _e.mock.On("ProcessBlock", block)}
}

func (_c *MockVoteCollector_ProcessBlock_Call) Run(run func(block *model.SignedProposal)) *MockVoteCollector_ProcessBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockVoteCollector_ProcessBlock_Call) Return(_a0 error) *MockVoteCollector_ProcessBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteCollector_ProcessBlock_Call) RunAndReturn(run func(*model.SignedProposal) error) *MockVoteCollector_ProcessBlock_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterVoteConsumer provides a mock function with given fields: consumer
func (_m *MockVoteCollector) RegisterVoteConsumer(consumer hotstuff.VoteConsumer) {
	_m.Called(consumer)
}

// MockVoteCollector_RegisterVoteConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterVoteConsumer'
type MockVoteCollector_RegisterVoteConsumer_Call struct {
	*mock.Call
}

// RegisterVoteConsumer is a helper method to define mock.On call
//   - consumer hotstuff.VoteConsumer
func (_e *MockVoteCollector_Expecter) RegisterVoteConsumer(consumer interface{}) *MockVoteCollector_RegisterVoteConsumer_Call {
	return &MockVoteCollector_RegisterVoteConsumer_Call{Call: _e.mock.On("RegisterVoteConsumer", consumer)}
}

func (_c *MockVoteCollector_RegisterVoteConsumer_Call) Run(run func(consumer hotstuff.VoteConsumer)) *MockVoteCollector_RegisterVoteConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(hotstuff.VoteConsumer))
	})
	return _c
}

func (_c *MockVoteCollector_RegisterVoteConsumer_Call) Return() *MockVoteCollector_RegisterVoteConsumer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVoteCollector_RegisterVoteConsumer_Call) RunAndReturn(run func(hotstuff.VoteConsumer)) *MockVoteCollector_RegisterVoteConsumer_Call {
	_c.Run(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *MockVoteCollector) Status() hotstuff.VoteCollectorStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 hotstuff.VoteCollectorStatus
	if rf, ok := ret.Get(0).(func() hotstuff.VoteCollectorStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hotstuff.VoteCollectorStatus)
	}

	return r0
}

// MockVoteCollector_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockVoteCollector_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockVoteCollector_Expecter) Status() *MockVoteCollector_Status_Call {
	return &MockVoteCollector_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockVoteCollector_Status_Call) Run(run func()) *MockVoteCollector_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVoteCollector_Status_Call) Return(_a0 hotstuff.VoteCollectorStatus) *MockVoteCollector_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteCollector_Status_Call) RunAndReturn(run func() hotstuff.VoteCollectorStatus) *MockVoteCollector_Status_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with no fields
func (_m *MockVoteCollector) View() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockVoteCollector_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockVoteCollector_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
func (_e *MockVoteCollector_Expecter) View() *MockVoteCollector_View_Call {
	return &MockVoteCollector_View_Call{Call: _e.mock.On("View")}
}

func (_c *MockVoteCollector_View_Call) Run(run func()) *MockVoteCollector_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVoteCollector_View_Call) Return(_a0 uint64) *MockVoteCollector_View_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVoteCollector_View_Call) RunAndReturn(run func() uint64) *MockVoteCollector_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVoteCollector creates a new instance of MockVoteCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVoteCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVoteCollector {
	mock := &MockVoteCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
