// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockEventLoop is an autogenerated mock type for the EventLoop type
type MockEventLoop struct {
	mock.Mock
}

type MockEventLoop_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventLoop) EXPECT() *MockEventLoop_Expecter {
	return &MockEventLoop_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockEventLoop) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockEventLoop_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockEventLoop_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockEventLoop_Expecter) Done() *MockEventLoop_Done_Call {
	return &MockEventLoop_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockEventLoop_Done_Call) Run(run func()) *MockEventLoop_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventLoop_Done_Call) Return(_a0 <-chan struct{}) *MockEventLoop_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventLoop_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockEventLoop_Done_Call {
	_c.Call.Return(run)
	return _c
}

// OnNewQcDiscovered provides a mock function with given fields: certificate
func (_m *MockEventLoop) OnNewQcDiscovered(certificate *flow.QuorumCertificate) {
	_m.Called(certificate)
}

// MockEventLoop_OnNewQcDiscovered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNewQcDiscovered'
type MockEventLoop_OnNewQcDiscovered_Call struct {
	*mock.Call
}

// OnNewQcDiscovered is a helper method to define mock.On call
//   - certificate *flow.QuorumCertificate
func (_e *MockEventLoop_Expecter) OnNewQcDiscovered(certificate interface{}) *MockEventLoop_OnNewQcDiscovered_Call {
	return &MockEventLoop_OnNewQcDiscovered_Call{Call: _e.mock.On("OnNewQcDiscovered", certificate)}
}

func (_c *MockEventLoop_OnNewQcDiscovered_Call) Run(run func(certificate *flow.QuorumCertificate)) *MockEventLoop_OnNewQcDiscovered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockEventLoop_OnNewQcDiscovered_Call) Return() *MockEventLoop_OnNewQcDiscovered_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_OnNewQcDiscovered_Call) RunAndReturn(run func(*flow.QuorumCertificate)) *MockEventLoop_OnNewQcDiscovered_Call {
	_c.Run(run)
	return _c
}

// OnNewTcDiscovered provides a mock function with given fields: certificate
func (_m *MockEventLoop) OnNewTcDiscovered(certificate *flow.TimeoutCertificate) {
	_m.Called(certificate)
}

// MockEventLoop_OnNewTcDiscovered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNewTcDiscovered'
type MockEventLoop_OnNewTcDiscovered_Call struct {
	*mock.Call
}

// OnNewTcDiscovered is a helper method to define mock.On call
//   - certificate *flow.TimeoutCertificate
func (_e *MockEventLoop_Expecter) OnNewTcDiscovered(certificate interface{}) *MockEventLoop_OnNewTcDiscovered_Call {
	return &MockEventLoop_OnNewTcDiscovered_Call{Call: _e.mock.On("OnNewTcDiscovered", certificate)}
}

func (_c *MockEventLoop_OnNewTcDiscovered_Call) Run(run func(certificate *flow.TimeoutCertificate)) *MockEventLoop_OnNewTcDiscovered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockEventLoop_OnNewTcDiscovered_Call) Return() *MockEventLoop_OnNewTcDiscovered_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_OnNewTcDiscovered_Call) RunAndReturn(run func(*flow.TimeoutCertificate)) *MockEventLoop_OnNewTcDiscovered_Call {
	_c.Run(run)
	return _c
}

// OnPartialTcCreated provides a mock function with given fields: view, newestQC, lastViewTC
func (_m *MockEventLoop) OnPartialTcCreated(view uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate) {
	_m.Called(view, newestQC, lastViewTC)
}

// MockEventLoop_OnPartialTcCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPartialTcCreated'
type MockEventLoop_OnPartialTcCreated_Call struct {
	*mock.Call
}

// OnPartialTcCreated is a helper method to define mock.On call
//   - view uint64
//   - newestQC *flow.QuorumCertificate
//   - lastViewTC *flow.TimeoutCertificate
func (_e *MockEventLoop_Expecter) OnPartialTcCreated(view interface{}, newestQC interface{}, lastViewTC interface{}) *MockEventLoop_OnPartialTcCreated_Call {
	return &MockEventLoop_OnPartialTcCreated_Call{Call: _e.mock.On("OnPartialTcCreated", view, newestQC, lastViewTC)}
}

func (_c *MockEventLoop_OnPartialTcCreated_Call) Run(run func(view uint64, newestQC *flow.QuorumCertificate, lastViewTC *flow.TimeoutCertificate)) *MockEventLoop_OnPartialTcCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.QuorumCertificate), args[2].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockEventLoop_OnPartialTcCreated_Call) Return() *MockEventLoop_OnPartialTcCreated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_OnPartialTcCreated_Call) RunAndReturn(run func(uint64, *flow.QuorumCertificate, *flow.TimeoutCertificate)) *MockEventLoop_OnPartialTcCreated_Call {
	_c.Run(run)
	return _c
}

// OnQcConstructedFromVotes provides a mock function with given fields: _a0
func (_m *MockEventLoop) OnQcConstructedFromVotes(_a0 *flow.QuorumCertificate) {
	_m.Called(_a0)
}

// MockEventLoop_OnQcConstructedFromVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnQcConstructedFromVotes'
type MockEventLoop_OnQcConstructedFromVotes_Call struct {
	*mock.Call
}

// OnQcConstructedFromVotes is a helper method to define mock.On call
//   - _a0 *flow.QuorumCertificate
func (_e *MockEventLoop_Expecter) OnQcConstructedFromVotes(_a0 interface{}) *MockEventLoop_OnQcConstructedFromVotes_Call {
	return &MockEventLoop_OnQcConstructedFromVotes_Call{Call: _e.mock.On("OnQcConstructedFromVotes", _a0)}
}

func (_c *MockEventLoop_OnQcConstructedFromVotes_Call) Run(run func(_a0 *flow.QuorumCertificate)) *MockEventLoop_OnQcConstructedFromVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockEventLoop_OnQcConstructedFromVotes_Call) Return() *MockEventLoop_OnQcConstructedFromVotes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_OnQcConstructedFromVotes_Call) RunAndReturn(run func(*flow.QuorumCertificate)) *MockEventLoop_OnQcConstructedFromVotes_Call {
	_c.Run(run)
	return _c
}

// OnTcConstructedFromTimeouts provides a mock function with given fields: certificate
func (_m *MockEventLoop) OnTcConstructedFromTimeouts(certificate *flow.TimeoutCertificate) {
	_m.Called(certificate)
}

// MockEventLoop_OnTcConstructedFromTimeouts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTcConstructedFromTimeouts'
type MockEventLoop_OnTcConstructedFromTimeouts_Call struct {
	*mock.Call
}

// OnTcConstructedFromTimeouts is a helper method to define mock.On call
//   - certificate *flow.TimeoutCertificate
func (_e *MockEventLoop_Expecter) OnTcConstructedFromTimeouts(certificate interface{}) *MockEventLoop_OnTcConstructedFromTimeouts_Call {
	return &MockEventLoop_OnTcConstructedFromTimeouts_Call{Call: _e.mock.On("OnTcConstructedFromTimeouts", certificate)}
}

func (_c *MockEventLoop_OnTcConstructedFromTimeouts_Call) Run(run func(certificate *flow.TimeoutCertificate)) *MockEventLoop_OnTcConstructedFromTimeouts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TimeoutCertificate))
	})
	return _c
}

func (_c *MockEventLoop_OnTcConstructedFromTimeouts_Call) Return() *MockEventLoop_OnTcConstructedFromTimeouts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_OnTcConstructedFromTimeouts_Call) RunAndReturn(run func(*flow.TimeoutCertificate)) *MockEventLoop_OnTcConstructedFromTimeouts_Call {
	_c.Run(run)
	return _c
}

// OnTimeoutProcessed provides a mock function with given fields: timeout
func (_m *MockEventLoop) OnTimeoutProcessed(timeout *model.TimeoutObject) {
	_m.Called(timeout)
}

// MockEventLoop_OnTimeoutProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTimeoutProcessed'
type MockEventLoop_OnTimeoutProcessed_Call struct {
	*mock.Call
}

// OnTimeoutProcessed is a helper method to define mock.On call
//   - timeout *model.TimeoutObject
func (_e *MockEventLoop_Expecter) OnTimeoutProcessed(timeout interface{}) *MockEventLoop_OnTimeoutProcessed_Call {
	return &MockEventLoop_OnTimeoutProcessed_Call{Call: _e.mock.On("OnTimeoutProcessed", timeout)}
}

func (_c *MockEventLoop_OnTimeoutProcessed_Call) Run(run func(timeout *model.TimeoutObject)) *MockEventLoop_OnTimeoutProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TimeoutObject))
	})
	return _c
}

func (_c *MockEventLoop_OnTimeoutProcessed_Call) Return() *MockEventLoop_OnTimeoutProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_OnTimeoutProcessed_Call) RunAndReturn(run func(*model.TimeoutObject)) *MockEventLoop_OnTimeoutProcessed_Call {
	_c.Run(run)
	return _c
}

// OnVoteProcessed provides a mock function with given fields: vote
func (_m *MockEventLoop) OnVoteProcessed(vote *model.Vote) {
	_m.Called(vote)
}

// MockEventLoop_OnVoteProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnVoteProcessed'
type MockEventLoop_OnVoteProcessed_Call struct {
	*mock.Call
}

// OnVoteProcessed is a helper method to define mock.On call
//   - vote *model.Vote
func (_e *MockEventLoop_Expecter) OnVoteProcessed(vote interface{}) *MockEventLoop_OnVoteProcessed_Call {
	return &MockEventLoop_OnVoteProcessed_Call{Call: _e.mock.On("OnVoteProcessed", vote)}
}

func (_c *MockEventLoop_OnVoteProcessed_Call) Run(run func(vote *model.Vote)) *MockEventLoop_OnVoteProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Vote))
	})
	return _c
}

func (_c *MockEventLoop_OnVoteProcessed_Call) Return() *MockEventLoop_OnVoteProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_OnVoteProcessed_Call) RunAndReturn(run func(*model.Vote)) *MockEventLoop_OnVoteProcessed_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockEventLoop) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockEventLoop_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockEventLoop_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockEventLoop_Expecter) Ready() *MockEventLoop_Ready_Call {
	return &MockEventLoop_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockEventLoop_Ready_Call) Run(run func()) *MockEventLoop_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventLoop_Ready_Call) Return(_a0 <-chan struct{}) *MockEventLoop_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventLoop_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockEventLoop_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockEventLoop) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockEventLoop_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEventLoop_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockEventLoop_Expecter) Start(_a0 interface{}) *MockEventLoop_Start_Call {
	return &MockEventLoop_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockEventLoop_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockEventLoop_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockEventLoop_Start_Call) Return() *MockEventLoop_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockEventLoop_Start_Call {
	_c.Run(run)
	return _c
}

// SubmitProposal provides a mock function with given fields: proposal
func (_m *MockEventLoop) SubmitProposal(proposal *model.SignedProposal) {
	_m.Called(proposal)
}

// MockEventLoop_SubmitProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitProposal'
type MockEventLoop_SubmitProposal_Call struct {
	*mock.Call
}

// SubmitProposal is a helper method to define mock.On call
//   - proposal *model.SignedProposal
func (_e *MockEventLoop_Expecter) SubmitProposal(proposal interface{}) *MockEventLoop_SubmitProposal_Call {
	return &MockEventLoop_SubmitProposal_Call{Call: _e.mock.On("SubmitProposal", proposal)}
}

func (_c *MockEventLoop_SubmitProposal_Call) Run(run func(proposal *model.SignedProposal)) *MockEventLoop_SubmitProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SignedProposal))
	})
	return _c
}

func (_c *MockEventLoop_SubmitProposal_Call) Return() *MockEventLoop_SubmitProposal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_SubmitProposal_Call) RunAndReturn(run func(*model.SignedProposal)) *MockEventLoop_SubmitProposal_Call {
	_c.Run(run)
	return _c
}

// NewMockEventLoop creates a new instance of MockEventLoop. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventLoop(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventLoop {
	mock := &MockEventLoop{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
