// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// BlockSignerDecoder is an autogenerated mock type for the BlockSignerDecoder type
type BlockSignerDecoder struct {
	mock.Mock
}

// DecodeSignerIDs provides a mock function with given fields: header
func (_m *BlockSignerDecoder) DecodeSignerIDs(header *flow.Header) (flow.IdentifierList, error) {
	ret := _m.Called(header)

	if len(ret) == 0 {
		panic("no return value specified for DecodeSignerIDs")
	}

	var r0 flow.IdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.Header) (flow.IdentifierList, error)); ok {
		return rf(header)
	}
	if rf, ok := ret.Get(0).(func(*flow.Header) flow.IdentifierList); ok {
		r0 = rf(header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.Header) error); ok {
		r1 = rf(header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlockSignerDecoder creates a new instance of BlockSignerDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockSignerDecoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockSignerDecoder {
	mock := &BlockSignerDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
