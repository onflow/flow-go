apiVersion: apps/v1
kind: StatefulSet
metadata:
  # This is the full name of your deployment. It must be unique
  name: flow-consensus-node-v1
  namespace: flow

  # Best practice labels:
  #   app: <app-name> (the non-unique version of metadata.name)
  #   kind: [web|worker]
  #   env: [staging|production|test|dev]
  #   owner: who to ask about this service
  #   version: the major version of this service (v1/v2/v1beta1)
  labels:
    app: flow-test-net
    node: consensus
    env: local
    owner: Kan
    version: v1

spec:
  replicas: 1
  serviceName: flow-test-network-v1
  selector:
    matchLabels:
      app: flow-test-net
      node: consensus
      env: local
      version: v1
  podManagementPolicy: Parallel
  template:
    metadata:
      annotations:
        # Set to "false" to opt out of prometheus scrapes
        # Prometheus still needs a port called "metrics" (below) to scrape properly
        prometheus.io/scrape: 'true'

        # Set the path to the API endpoint that exposes prometheus metrics, or leave blank for `/metrics`
        # prometheus.io/path: "/metrics"

      labels:
        app: flow-test-net
        node: consensus
        env: local
        owner: Kan
        version: v1
        kind: web

    spec:
      imagePullSecrets:
        - name: gcr
      containers:
        - name: flow-test-net
          # No tag, will be attached by teamcity
          image: gcr.io/dl-flow/consensus
          args: 
            - '--nodename'
            - '$(POD_NAME)'
            - '--entries'
            - '$(NODE_ENTRIES)'
            - '--datadir'
            - '/flowdb'

          # Ports exposed can be named so other resources can reference
          # them by name and not have to hard code numbers
          ports:
            - name: grpc
              containerPort: 3569
            - name: http
              containerPort: 8080
            # Prometheus is looking specifically for a port named 'metrics'
            # This may be the same as the above port, or different
            - name: metrics
              containerPort: 8080

          # Environment variables
          env:
            - name: ENV
              value: STAGING
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_ENTRIES
              valueFrom:
                configMapKeyRef:
                  name: flow-node-config-map
                  key: entries

          # Resource requests and constraints
          resources:
            requests:
              cpu: '250m'
              memory: '512Mi'
            limits:
              cpu: '500m'
              memory: '2Gi'
          volumeMounts:
            - name: badger-volume
              mountPath: /flowdb

          # The current liveness and readiness probes use the /metrics endpoint, which is non-ideal and MVP only
          # These probes should eventually make use of the gRPC server's Ping function, or should at least
          # be moved over to a /live endpoint that has some introspection into the gRPC's liveness/readiness

          # Readiness Probe
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 5
            successThreshold: 1
          
          # Liveness Probe
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1

  volumeClaimTemplates:
    - metadata:
        name: badger-volume
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: standard