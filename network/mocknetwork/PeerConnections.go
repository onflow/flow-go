// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockPeerConnections is an autogenerated mock type for the PeerConnections type
type MockPeerConnections struct {
	mock.Mock
}

type MockPeerConnections_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeerConnections) EXPECT() *MockPeerConnections_Expecter {
	return &MockPeerConnections_Expecter{mock: &_m.Mock}
}

// IsConnected provides a mock function with given fields: peerID
func (_m *MockPeerConnections) IsConnected(peerID peer.ID) (bool, error) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID) (bool, error)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) bool); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPeerConnections_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type MockPeerConnections_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerConnections_Expecter) IsConnected(peerID interface{}) *MockPeerConnections_IsConnected_Call {
	return &MockPeerConnections_IsConnected_Call{Call: _e.mock.On("IsConnected", peerID)}
}

func (_c *MockPeerConnections_IsConnected_Call) Run(run func(peerID peer.ID)) *MockPeerConnections_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerConnections_IsConnected_Call) Return(_a0 bool, _a1 error) *MockPeerConnections_IsConnected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerConnections_IsConnected_Call) RunAndReturn(run func(peer.ID) (bool, error)) *MockPeerConnections_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPeerConnections creates a new instance of MockPeerConnections. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeerConnections(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeerConnections {
	mock := &MockPeerConnections{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
