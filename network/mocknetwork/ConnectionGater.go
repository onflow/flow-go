// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	control "github.com/libp2p/go-libp2p/core/control"
	mock "github.com/stretchr/testify/mock"

	multiaddr "github.com/multiformats/go-multiaddr"

	network "github.com/libp2p/go-libp2p/core/network"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockConnectionGater is an autogenerated mock type for the ConnectionGater type
type MockConnectionGater struct {
	mock.Mock
}

type MockConnectionGater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionGater) EXPECT() *MockConnectionGater_Expecter {
	return &MockConnectionGater_Expecter{mock: &_m.Mock}
}

// InterceptAccept provides a mock function with given fields: _a0
func (_m *MockConnectionGater) InterceptAccept(_a0 network.ConnMultiaddrs) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InterceptAccept")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(network.ConnMultiaddrs) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConnectionGater_InterceptAccept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterceptAccept'
type MockConnectionGater_InterceptAccept_Call struct {
	*mock.Call
}

// InterceptAccept is a helper method to define mock.On call
//   - _a0 network.ConnMultiaddrs
func (_e *MockConnectionGater_Expecter) InterceptAccept(_a0 interface{}) *MockConnectionGater_InterceptAccept_Call {
	return &MockConnectionGater_InterceptAccept_Call{Call: _e.mock.On("InterceptAccept", _a0)}
}

func (_c *MockConnectionGater_InterceptAccept_Call) Run(run func(_a0 network.ConnMultiaddrs)) *MockConnectionGater_InterceptAccept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.ConnMultiaddrs))
	})
	return _c
}

func (_c *MockConnectionGater_InterceptAccept_Call) Return(allow bool) *MockConnectionGater_InterceptAccept_Call {
	_c.Call.Return(allow)
	return _c
}

func (_c *MockConnectionGater_InterceptAccept_Call) RunAndReturn(run func(network.ConnMultiaddrs) bool) *MockConnectionGater_InterceptAccept_Call {
	_c.Call.Return(run)
	return _c
}

// InterceptAddrDial provides a mock function with given fields: _a0, _a1
func (_m *MockConnectionGater) InterceptAddrDial(_a0 peer.ID, _a1 multiaddr.Multiaddr) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InterceptAddrDial")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(peer.ID, multiaddr.Multiaddr) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConnectionGater_InterceptAddrDial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterceptAddrDial'
type MockConnectionGater_InterceptAddrDial_Call struct {
	*mock.Call
}

// InterceptAddrDial is a helper method to define mock.On call
//   - _a0 peer.ID
//   - _a1 multiaddr.Multiaddr
func (_e *MockConnectionGater_Expecter) InterceptAddrDial(_a0 interface{}, _a1 interface{}) *MockConnectionGater_InterceptAddrDial_Call {
	return &MockConnectionGater_InterceptAddrDial_Call{Call: _e.mock.On("InterceptAddrDial", _a0, _a1)}
}

func (_c *MockConnectionGater_InterceptAddrDial_Call) Run(run func(_a0 peer.ID, _a1 multiaddr.Multiaddr)) *MockConnectionGater_InterceptAddrDial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(multiaddr.Multiaddr))
	})
	return _c
}

func (_c *MockConnectionGater_InterceptAddrDial_Call) Return(allow bool) *MockConnectionGater_InterceptAddrDial_Call {
	_c.Call.Return(allow)
	return _c
}

func (_c *MockConnectionGater_InterceptAddrDial_Call) RunAndReturn(run func(peer.ID, multiaddr.Multiaddr) bool) *MockConnectionGater_InterceptAddrDial_Call {
	_c.Call.Return(run)
	return _c
}

// InterceptPeerDial provides a mock function with given fields: p
func (_m *MockConnectionGater) InterceptPeerDial(p peer.ID) bool {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for InterceptPeerDial")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(peer.ID) bool); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConnectionGater_InterceptPeerDial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterceptPeerDial'
type MockConnectionGater_InterceptPeerDial_Call struct {
	*mock.Call
}

// InterceptPeerDial is a helper method to define mock.On call
//   - p peer.ID
func (_e *MockConnectionGater_Expecter) InterceptPeerDial(p interface{}) *MockConnectionGater_InterceptPeerDial_Call {
	return &MockConnectionGater_InterceptPeerDial_Call{Call: _e.mock.On("InterceptPeerDial", p)}
}

func (_c *MockConnectionGater_InterceptPeerDial_Call) Run(run func(p peer.ID)) *MockConnectionGater_InterceptPeerDial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockConnectionGater_InterceptPeerDial_Call) Return(allow bool) *MockConnectionGater_InterceptPeerDial_Call {
	_c.Call.Return(allow)
	return _c
}

func (_c *MockConnectionGater_InterceptPeerDial_Call) RunAndReturn(run func(peer.ID) bool) *MockConnectionGater_InterceptPeerDial_Call {
	_c.Call.Return(run)
	return _c
}

// InterceptSecured provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockConnectionGater) InterceptSecured(_a0 network.Direction, _a1 peer.ID, _a2 network.ConnMultiaddrs) bool {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for InterceptSecured")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(network.Direction, peer.ID, network.ConnMultiaddrs) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConnectionGater_InterceptSecured_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterceptSecured'
type MockConnectionGater_InterceptSecured_Call struct {
	*mock.Call
}

// InterceptSecured is a helper method to define mock.On call
//   - _a0 network.Direction
//   - _a1 peer.ID
//   - _a2 network.ConnMultiaddrs
func (_e *MockConnectionGater_Expecter) InterceptSecured(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockConnectionGater_InterceptSecured_Call {
	return &MockConnectionGater_InterceptSecured_Call{Call: _e.mock.On("InterceptSecured", _a0, _a1, _a2)}
}

func (_c *MockConnectionGater_InterceptSecured_Call) Run(run func(_a0 network.Direction, _a1 peer.ID, _a2 network.ConnMultiaddrs)) *MockConnectionGater_InterceptSecured_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.Direction), args[1].(peer.ID), args[2].(network.ConnMultiaddrs))
	})
	return _c
}

func (_c *MockConnectionGater_InterceptSecured_Call) Return(allow bool) *MockConnectionGater_InterceptSecured_Call {
	_c.Call.Return(allow)
	return _c
}

func (_c *MockConnectionGater_InterceptSecured_Call) RunAndReturn(run func(network.Direction, peer.ID, network.ConnMultiaddrs) bool) *MockConnectionGater_InterceptSecured_Call {
	_c.Call.Return(run)
	return _c
}

// InterceptUpgraded provides a mock function with given fields: _a0
func (_m *MockConnectionGater) InterceptUpgraded(_a0 network.Conn) (bool, control.DisconnectReason) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InterceptUpgraded")
	}

	var r0 bool
	var r1 control.DisconnectReason
	if rf, ok := ret.Get(0).(func(network.Conn) (bool, control.DisconnectReason)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(network.Conn) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(network.Conn) control.DisconnectReason); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(control.DisconnectReason)
	}

	return r0, r1
}

// MockConnectionGater_InterceptUpgraded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterceptUpgraded'
type MockConnectionGater_InterceptUpgraded_Call struct {
	*mock.Call
}

// InterceptUpgraded is a helper method to define mock.On call
//   - _a0 network.Conn
func (_e *MockConnectionGater_Expecter) InterceptUpgraded(_a0 interface{}) *MockConnectionGater_InterceptUpgraded_Call {
	return &MockConnectionGater_InterceptUpgraded_Call{Call: _e.mock.On("InterceptUpgraded", _a0)}
}

func (_c *MockConnectionGater_InterceptUpgraded_Call) Run(run func(_a0 network.Conn)) *MockConnectionGater_InterceptUpgraded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.Conn))
	})
	return _c
}

func (_c *MockConnectionGater_InterceptUpgraded_Call) Return(allow bool, reason control.DisconnectReason) *MockConnectionGater_InterceptUpgraded_Call {
	_c.Call.Return(allow, reason)
	return _c
}

func (_c *MockConnectionGater_InterceptUpgraded_Call) RunAndReturn(run func(network.Conn) (bool, control.DisconnectReason)) *MockConnectionGater_InterceptUpgraded_Call {
	_c.Call.Return(run)
	return _c
}

// SetDisallowListOracle provides a mock function with given fields: oracle
func (_m *MockConnectionGater) SetDisallowListOracle(oracle p2p.DisallowListOracle) {
	_m.Called(oracle)
}

// MockConnectionGater_SetDisallowListOracle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDisallowListOracle'
type MockConnectionGater_SetDisallowListOracle_Call struct {
	*mock.Call
}

// SetDisallowListOracle is a helper method to define mock.On call
//   - oracle p2p.DisallowListOracle
func (_e *MockConnectionGater_Expecter) SetDisallowListOracle(oracle interface{}) *MockConnectionGater_SetDisallowListOracle_Call {
	return &MockConnectionGater_SetDisallowListOracle_Call{Call: _e.mock.On("SetDisallowListOracle", oracle)}
}

func (_c *MockConnectionGater_SetDisallowListOracle_Call) Run(run func(oracle p2p.DisallowListOracle)) *MockConnectionGater_SetDisallowListOracle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.DisallowListOracle))
	})
	return _c
}

func (_c *MockConnectionGater_SetDisallowListOracle_Call) Return() *MockConnectionGater_SetDisallowListOracle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnectionGater_SetDisallowListOracle_Call) RunAndReturn(run func(p2p.DisallowListOracle)) *MockConnectionGater_SetDisallowListOracle_Call {
	_c.Run(run)
	return _c
}

// NewMockConnectionGater creates a new instance of MockConnectionGater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionGater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionGater {
	mock := &MockConnectionGater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
