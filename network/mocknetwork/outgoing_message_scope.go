// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	message "github.com/onflow/flow-go/network/message"

	mock "github.com/stretchr/testify/mock"
)

// OutgoingMessageScope is an autogenerated mock type for the OutgoingMessageScope type
type OutgoingMessageScope struct {
	mock.Mock
}

// PayloadType provides a mock function with given fields:
func (_m *OutgoingMessageScope) PayloadType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PayloadType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Proto provides a mock function with given fields:
func (_m *OutgoingMessageScope) Proto() *message.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Proto")
	}

	var r0 *message.Message
	if rf, ok := ret.Get(0).(func() *message.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Message)
		}
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *OutgoingMessageScope) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TargetIds provides a mock function with given fields:
func (_m *OutgoingMessageScope) TargetIds() flow.IdentifierList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetIds")
	}

	var r0 flow.IdentifierList
	if rf, ok := ret.Get(0).(func() flow.IdentifierList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentifierList)
		}
	}

	return r0
}

// Topic provides a mock function with given fields:
func (_m *OutgoingMessageScope) Topic() channels.Topic {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 channels.Topic
	if rf, ok := ret.Get(0).(func() channels.Topic); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(channels.Topic)
	}

	return r0
}

// NewOutgoingMessageScope creates a new instance of OutgoingMessageScope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutgoingMessageScope(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutgoingMessageScope {
	mock := &OutgoingMessageScope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
