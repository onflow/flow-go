// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockPubSubAdapter is an autogenerated mock type for the PubSubAdapter type
type MockPubSubAdapter struct {
	mock.Mock
}

type MockPubSubAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSubAdapter) EXPECT() *MockPubSubAdapter_Expecter {
	return &MockPubSubAdapter_Expecter{mock: &_m.Mock}
}

// ActiveClustersChanged provides a mock function with given fields: _a0
func (_m *MockPubSubAdapter) ActiveClustersChanged(_a0 flow.ChainIDList) {
	_m.Called(_a0)
}

// MockPubSubAdapter_ActiveClustersChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActiveClustersChanged'
type MockPubSubAdapter_ActiveClustersChanged_Call struct {
	*mock.Call
}

// ActiveClustersChanged is a helper method to define mock.On call
//   - _a0 flow.ChainIDList
func (_e *MockPubSubAdapter_Expecter) ActiveClustersChanged(_a0 interface{}) *MockPubSubAdapter_ActiveClustersChanged_Call {
	return &MockPubSubAdapter_ActiveClustersChanged_Call{Call: _e.mock.On("ActiveClustersChanged", _a0)}
}

func (_c *MockPubSubAdapter_ActiveClustersChanged_Call) Run(run func(_a0 flow.ChainIDList)) *MockPubSubAdapter_ActiveClustersChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ChainIDList))
	})
	return _c
}

func (_c *MockPubSubAdapter_ActiveClustersChanged_Call) Return() *MockPubSubAdapter_ActiveClustersChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapter_ActiveClustersChanged_Call) RunAndReturn(run func(flow.ChainIDList)) *MockPubSubAdapter_ActiveClustersChanged_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockPubSubAdapter) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPubSubAdapter_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockPubSubAdapter_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockPubSubAdapter_Expecter) Done() *MockPubSubAdapter_Done_Call {
	return &MockPubSubAdapter_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockPubSubAdapter_Done_Call) Run(run func()) *MockPubSubAdapter_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubAdapter_Done_Call) Return(_a0 <-chan struct{}) *MockPubSubAdapter_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockPubSubAdapter_Done_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalMeshPeers provides a mock function with given fields: topic
func (_m *MockPubSubAdapter) GetLocalMeshPeers(topic channels.Topic) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalMeshPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(channels.Topic) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockPubSubAdapter_GetLocalMeshPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalMeshPeers'
type MockPubSubAdapter_GetLocalMeshPeers_Call struct {
	*mock.Call
}

// GetLocalMeshPeers is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockPubSubAdapter_Expecter) GetLocalMeshPeers(topic interface{}) *MockPubSubAdapter_GetLocalMeshPeers_Call {
	return &MockPubSubAdapter_GetLocalMeshPeers_Call{Call: _e.mock.On("GetLocalMeshPeers", topic)}
}

func (_c *MockPubSubAdapter_GetLocalMeshPeers_Call) Run(run func(topic channels.Topic)) *MockPubSubAdapter_GetLocalMeshPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockPubSubAdapter_GetLocalMeshPeers_Call) Return(_a0 []peer.ID) *MockPubSubAdapter_GetLocalMeshPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_GetLocalMeshPeers_Call) RunAndReturn(run func(channels.Topic) []peer.ID) *MockPubSubAdapter_GetLocalMeshPeers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopics provides a mock function with no fields
func (_m *MockPubSubAdapter) GetTopics() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopics")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockPubSubAdapter_GetTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopics'
type MockPubSubAdapter_GetTopics_Call struct {
	*mock.Call
}

// GetTopics is a helper method to define mock.On call
func (_e *MockPubSubAdapter_Expecter) GetTopics() *MockPubSubAdapter_GetTopics_Call {
	return &MockPubSubAdapter_GetTopics_Call{Call: _e.mock.On("GetTopics")}
}

func (_c *MockPubSubAdapter_GetTopics_Call) Run(run func()) *MockPubSubAdapter_GetTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubAdapter_GetTopics_Call) Return(_a0 []string) *MockPubSubAdapter_GetTopics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_GetTopics_Call) RunAndReturn(run func() []string) *MockPubSubAdapter_GetTopics_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: topic
func (_m *MockPubSubAdapter) Join(topic string) (p2p.Topic, error) {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 p2p.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (p2p.Topic, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(string) p2p.Topic); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPubSubAdapter_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockPubSubAdapter_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - topic string
func (_e *MockPubSubAdapter_Expecter) Join(topic interface{}) *MockPubSubAdapter_Join_Call {
	return &MockPubSubAdapter_Join_Call{Call: _e.mock.On("Join", topic)}
}

func (_c *MockPubSubAdapter_Join_Call) Run(run func(topic string)) *MockPubSubAdapter_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPubSubAdapter_Join_Call) Return(_a0 p2p.Topic, _a1 error) *MockPubSubAdapter_Join_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPubSubAdapter_Join_Call) RunAndReturn(run func(string) (p2p.Topic, error)) *MockPubSubAdapter_Join_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeers provides a mock function with given fields: topic
func (_m *MockPubSubAdapter) ListPeers(topic string) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for ListPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(string) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockPubSubAdapter_ListPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeers'
type MockPubSubAdapter_ListPeers_Call struct {
	*mock.Call
}

// ListPeers is a helper method to define mock.On call
//   - topic string
func (_e *MockPubSubAdapter_Expecter) ListPeers(topic interface{}) *MockPubSubAdapter_ListPeers_Call {
	return &MockPubSubAdapter_ListPeers_Call{Call: _e.mock.On("ListPeers", topic)}
}

func (_c *MockPubSubAdapter_ListPeers_Call) Run(run func(topic string)) *MockPubSubAdapter_ListPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPubSubAdapter_ListPeers_Call) Return(_a0 []peer.ID) *MockPubSubAdapter_ListPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_ListPeers_Call) RunAndReturn(run func(string) []peer.ID) *MockPubSubAdapter_ListPeers_Call {
	_c.Call.Return(run)
	return _c
}

// PeerScoreExposer provides a mock function with no fields
func (_m *MockPubSubAdapter) PeerScoreExposer() p2p.PeerScoreExposer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PeerScoreExposer")
	}

	var r0 p2p.PeerScoreExposer
	if rf, ok := ret.Get(0).(func() p2p.PeerScoreExposer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.PeerScoreExposer)
		}
	}

	return r0
}

// MockPubSubAdapter_PeerScoreExposer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerScoreExposer'
type MockPubSubAdapter_PeerScoreExposer_Call struct {
	*mock.Call
}

// PeerScoreExposer is a helper method to define mock.On call
func (_e *MockPubSubAdapter_Expecter) PeerScoreExposer() *MockPubSubAdapter_PeerScoreExposer_Call {
	return &MockPubSubAdapter_PeerScoreExposer_Call{Call: _e.mock.On("PeerScoreExposer")}
}

func (_c *MockPubSubAdapter_PeerScoreExposer_Call) Run(run func()) *MockPubSubAdapter_PeerScoreExposer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubAdapter_PeerScoreExposer_Call) Return(_a0 p2p.PeerScoreExposer) *MockPubSubAdapter_PeerScoreExposer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_PeerScoreExposer_Call) RunAndReturn(run func() p2p.PeerScoreExposer) *MockPubSubAdapter_PeerScoreExposer_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockPubSubAdapter) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPubSubAdapter_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockPubSubAdapter_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockPubSubAdapter_Expecter) Ready() *MockPubSubAdapter_Ready_Call {
	return &MockPubSubAdapter_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockPubSubAdapter_Ready_Call) Run(run func()) *MockPubSubAdapter_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubAdapter_Ready_Call) Return(_a0 <-chan struct{}) *MockPubSubAdapter_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockPubSubAdapter_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterTopicValidator provides a mock function with given fields: topic, topicValidator
func (_m *MockPubSubAdapter) RegisterTopicValidator(topic string, topicValidator p2p.TopicValidatorFunc) error {
	ret := _m.Called(topic, topicValidator)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTopicValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, p2p.TopicValidatorFunc) error); ok {
		r0 = rf(topic, topicValidator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPubSubAdapter_RegisterTopicValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTopicValidator'
type MockPubSubAdapter_RegisterTopicValidator_Call struct {
	*mock.Call
}

// RegisterTopicValidator is a helper method to define mock.On call
//   - topic string
//   - topicValidator p2p.TopicValidatorFunc
func (_e *MockPubSubAdapter_Expecter) RegisterTopicValidator(topic interface{}, topicValidator interface{}) *MockPubSubAdapter_RegisterTopicValidator_Call {
	return &MockPubSubAdapter_RegisterTopicValidator_Call{Call: _e.mock.On("RegisterTopicValidator", topic, topicValidator)}
}

func (_c *MockPubSubAdapter_RegisterTopicValidator_Call) Run(run func(topic string, topicValidator p2p.TopicValidatorFunc)) *MockPubSubAdapter_RegisterTopicValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(p2p.TopicValidatorFunc))
	})
	return _c
}

func (_c *MockPubSubAdapter_RegisterTopicValidator_Call) Return(_a0 error) *MockPubSubAdapter_RegisterTopicValidator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_RegisterTopicValidator_Call) RunAndReturn(run func(string, p2p.TopicValidatorFunc) error) *MockPubSubAdapter_RegisterTopicValidator_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockPubSubAdapter) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockPubSubAdapter_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPubSubAdapter_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockPubSubAdapter_Expecter) Start(_a0 interface{}) *MockPubSubAdapter_Start_Call {
	return &MockPubSubAdapter_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockPubSubAdapter_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockPubSubAdapter_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockPubSubAdapter_Start_Call) Return() *MockPubSubAdapter_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapter_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockPubSubAdapter_Start_Call {
	_c.Run(run)
	return _c
}

// UnregisterTopicValidator provides a mock function with given fields: topic
func (_m *MockPubSubAdapter) UnregisterTopicValidator(topic string) error {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterTopicValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPubSubAdapter_UnregisterTopicValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterTopicValidator'
type MockPubSubAdapter_UnregisterTopicValidator_Call struct {
	*mock.Call
}

// UnregisterTopicValidator is a helper method to define mock.On call
//   - topic string
func (_e *MockPubSubAdapter_Expecter) UnregisterTopicValidator(topic interface{}) *MockPubSubAdapter_UnregisterTopicValidator_Call {
	return &MockPubSubAdapter_UnregisterTopicValidator_Call{Call: _e.mock.On("UnregisterTopicValidator", topic)}
}

func (_c *MockPubSubAdapter_UnregisterTopicValidator_Call) Run(run func(topic string)) *MockPubSubAdapter_UnregisterTopicValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPubSubAdapter_UnregisterTopicValidator_Call) Return(_a0 error) *MockPubSubAdapter_UnregisterTopicValidator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubAdapter_UnregisterTopicValidator_Call) RunAndReturn(run func(string) error) *MockPubSubAdapter_UnregisterTopicValidator_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSubAdapter creates a new instance of MockPubSubAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubAdapter {
	mock := &MockPubSubAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
