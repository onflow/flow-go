// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// MockMisbehaviorReport is an autogenerated mock type for the MisbehaviorReport type
type MockMisbehaviorReport struct {
	mock.Mock
}

type MockMisbehaviorReport_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMisbehaviorReport) EXPECT() *MockMisbehaviorReport_Expecter {
	return &MockMisbehaviorReport_Expecter{mock: &_m.Mock}
}

// OriginId provides a mock function with no fields
func (_m *MockMisbehaviorReport) OriginId() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginId")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockMisbehaviorReport_OriginId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OriginId'
type MockMisbehaviorReport_OriginId_Call struct {
	*mock.Call
}

// OriginId is a helper method to define mock.On call
func (_e *MockMisbehaviorReport_Expecter) OriginId() *MockMisbehaviorReport_OriginId_Call {
	return &MockMisbehaviorReport_OriginId_Call{Call: _e.mock.On("OriginId")}
}

func (_c *MockMisbehaviorReport_OriginId_Call) Run(run func()) *MockMisbehaviorReport_OriginId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMisbehaviorReport_OriginId_Call) Return(_a0 flow.Identifier) *MockMisbehaviorReport_OriginId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMisbehaviorReport_OriginId_Call) RunAndReturn(run func() flow.Identifier) *MockMisbehaviorReport_OriginId_Call {
	_c.Call.Return(run)
	return _c
}

// Penalty provides a mock function with no fields
func (_m *MockMisbehaviorReport) Penalty() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Penalty")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockMisbehaviorReport_Penalty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Penalty'
type MockMisbehaviorReport_Penalty_Call struct {
	*mock.Call
}

// Penalty is a helper method to define mock.On call
func (_e *MockMisbehaviorReport_Expecter) Penalty() *MockMisbehaviorReport_Penalty_Call {
	return &MockMisbehaviorReport_Penalty_Call{Call: _e.mock.On("Penalty")}
}

func (_c *MockMisbehaviorReport_Penalty_Call) Run(run func()) *MockMisbehaviorReport_Penalty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMisbehaviorReport_Penalty_Call) Return(_a0 float64) *MockMisbehaviorReport_Penalty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMisbehaviorReport_Penalty_Call) RunAndReturn(run func() float64) *MockMisbehaviorReport_Penalty_Call {
	_c.Call.Return(run)
	return _c
}

// Reason provides a mock function with no fields
func (_m *MockMisbehaviorReport) Reason() network.Misbehavior {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reason")
	}

	var r0 network.Misbehavior
	if rf, ok := ret.Get(0).(func() network.Misbehavior); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(network.Misbehavior)
	}

	return r0
}

// MockMisbehaviorReport_Reason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reason'
type MockMisbehaviorReport_Reason_Call struct {
	*mock.Call
}

// Reason is a helper method to define mock.On call
func (_e *MockMisbehaviorReport_Expecter) Reason() *MockMisbehaviorReport_Reason_Call {
	return &MockMisbehaviorReport_Reason_Call{Call: _e.mock.On("Reason")}
}

func (_c *MockMisbehaviorReport_Reason_Call) Run(run func()) *MockMisbehaviorReport_Reason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMisbehaviorReport_Reason_Call) Return(_a0 network.Misbehavior) *MockMisbehaviorReport_Reason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMisbehaviorReport_Reason_Call) RunAndReturn(run func() network.Misbehavior) *MockMisbehaviorReport_Reason_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMisbehaviorReport creates a new instance of MockMisbehaviorReport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMisbehaviorReport(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMisbehaviorReport {
	mock := &MockMisbehaviorReport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
