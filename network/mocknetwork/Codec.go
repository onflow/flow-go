// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	io "io"

	network "github.com/onflow/flow-go/network"
	mock "github.com/stretchr/testify/mock"
)

// MockCodec is an autogenerated mock type for the Codec type
type MockCodec struct {
	mock.Mock
}

type MockCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodec) EXPECT() *MockCodec_Expecter {
	return &MockCodec_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: data
func (_m *MockCodec) Decode(data []byte) (interface{}, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (interface{}, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) interface{}); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodec_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockCodec_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - data []byte
func (_e *MockCodec_Expecter) Decode(data interface{}) *MockCodec_Decode_Call {
	return &MockCodec_Decode_Call{Call: _e.mock.On("Decode", data)}
}

func (_c *MockCodec_Decode_Call) Run(run func(data []byte)) *MockCodec_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockCodec_Decode_Call) Return(_a0 interface{}, _a1 error) *MockCodec_Decode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodec_Decode_Call) RunAndReturn(run func([]byte) (interface{}, error)) *MockCodec_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: v
func (_m *MockCodec) Encode(v interface{}) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodec_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockCodec_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - v interface{}
func (_e *MockCodec_Expecter) Encode(v interface{}) *MockCodec_Encode_Call {
	return &MockCodec_Encode_Call{Call: _e.mock.On("Encode", v)}
}

func (_c *MockCodec_Encode_Call) Run(run func(v interface{})) *MockCodec_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockCodec_Encode_Call) Return(_a0 []byte, _a1 error) *MockCodec_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodec_Encode_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *MockCodec_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewDecoder provides a mock function with given fields: r
func (_m *MockCodec) NewDecoder(r io.Reader) network.Decoder {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for NewDecoder")
	}

	var r0 network.Decoder
	if rf, ok := ret.Get(0).(func(io.Reader) network.Decoder); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Decoder)
		}
	}

	return r0
}

// MockCodec_NewDecoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDecoder'
type MockCodec_NewDecoder_Call struct {
	*mock.Call
}

// NewDecoder is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockCodec_Expecter) NewDecoder(r interface{}) *MockCodec_NewDecoder_Call {
	return &MockCodec_NewDecoder_Call{Call: _e.mock.On("NewDecoder", r)}
}

func (_c *MockCodec_NewDecoder_Call) Run(run func(r io.Reader)) *MockCodec_NewDecoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockCodec_NewDecoder_Call) Return(_a0 network.Decoder) *MockCodec_NewDecoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodec_NewDecoder_Call) RunAndReturn(run func(io.Reader) network.Decoder) *MockCodec_NewDecoder_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncoder provides a mock function with given fields: w
func (_m *MockCodec) NewEncoder(w io.Writer) network.Encoder {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for NewEncoder")
	}

	var r0 network.Encoder
	if rf, ok := ret.Get(0).(func(io.Writer) network.Encoder); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Encoder)
		}
	}

	return r0
}

// MockCodec_NewEncoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewEncoder'
type MockCodec_NewEncoder_Call struct {
	*mock.Call
}

// NewEncoder is a helper method to define mock.On call
//   - w io.Writer
func (_e *MockCodec_Expecter) NewEncoder(w interface{}) *MockCodec_NewEncoder_Call {
	return &MockCodec_NewEncoder_Call{Call: _e.mock.On("NewEncoder", w)}
}

func (_c *MockCodec_NewEncoder_Call) Run(run func(w io.Writer)) *MockCodec_NewEncoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockCodec_NewEncoder_Call) Return(_a0 network.Encoder) *MockCodec_NewEncoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodec_NewEncoder_Call) RunAndReturn(run func(io.Writer) network.Encoder) *MockCodec_NewEncoder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCodec creates a new instance of MockCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodec {
	mock := &MockCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
