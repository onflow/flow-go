// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	network "github.com/onflow/flow-go/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockDisallowListOracle is an autogenerated mock type for the DisallowListOracle type
type MockDisallowListOracle struct {
	mock.Mock
}

type MockDisallowListOracle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDisallowListOracle) EXPECT() *MockDisallowListOracle_Expecter {
	return &MockDisallowListOracle_Expecter{mock: &_m.Mock}
}

// IsDisallowListed provides a mock function with given fields: peerId
func (_m *MockDisallowListOracle) IsDisallowListed(peerId peer.ID) ([]network.DisallowListedCause, bool) {
	ret := _m.Called(peerId)

	if len(ret) == 0 {
		panic("no return value specified for IsDisallowListed")
	}

	var r0 []network.DisallowListedCause
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) ([]network.DisallowListedCause, bool)); ok {
		return rf(peerId)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) []network.DisallowListedCause); ok {
		r0 = rf(peerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.DisallowListedCause)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDisallowListOracle_IsDisallowListed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDisallowListed'
type MockDisallowListOracle_IsDisallowListed_Call struct {
	*mock.Call
}

// IsDisallowListed is a helper method to define mock.On call
//   - peerId peer.ID
func (_e *MockDisallowListOracle_Expecter) IsDisallowListed(peerId interface{}) *MockDisallowListOracle_IsDisallowListed_Call {
	return &MockDisallowListOracle_IsDisallowListed_Call{Call: _e.mock.On("IsDisallowListed", peerId)}
}

func (_c *MockDisallowListOracle_IsDisallowListed_Call) Run(run func(peerId peer.ID)) *MockDisallowListOracle_IsDisallowListed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockDisallowListOracle_IsDisallowListed_Call) Return(_a0 []network.DisallowListedCause, _a1 bool) *MockDisallowListOracle_IsDisallowListed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDisallowListOracle_IsDisallowListed_Call) RunAndReturn(run func(peer.ID) ([]network.DisallowListedCause, bool)) *MockDisallowListOracle_IsDisallowListed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDisallowListOracle creates a new instance of MockDisallowListOracle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDisallowListOracle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDisallowListOracle {
	mock := &MockDisallowListOracle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
