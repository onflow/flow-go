// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocknetwork

import (
	channels "github.com/onflow/flow-go/network/channels"
	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// Underlay is an autogenerated mock type for the Underlay type
type Underlay struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *Underlay) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// OnAllowListNotification provides a mock function with given fields: _a0
func (_m *Underlay) OnAllowListNotification(_a0 *network.AllowListingUpdate) {
	_m.Called(_a0)
}

// OnDisallowListNotification provides a mock function with given fields: _a0
func (_m *Underlay) OnDisallowListNotification(_a0 *network.DisallowListingUpdate) {
	_m.Called(_a0)
}

// Ready provides a mock function with given fields:
func (_m *Underlay) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: channel
func (_m *Underlay) Subscribe(channel channels.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: channel
func (_m *Underlay) Unsubscribe(channel channels.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNodeAddresses provides a mock function with given fields:
func (_m *Underlay) UpdateNodeAddresses() {
	_m.Called()
}

// NewUnderlay creates a new instance of Underlay. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnderlay(t interface {
	mock.TestingT
	Cleanup(func())
}) *Underlay {
	mock := &Underlay{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
