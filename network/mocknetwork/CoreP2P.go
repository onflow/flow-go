// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	host "github.com/libp2p/go-libp2p/core/host"
	component "github.com/onflow/flow-go/module/component"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"
)

// MockCoreP2P is an autogenerated mock type for the CoreP2P type
type MockCoreP2P struct {
	mock.Mock
}

type MockCoreP2P_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoreP2P) EXPECT() *MockCoreP2P_Expecter {
	return &MockCoreP2P_Expecter{mock: &_m.Mock}
}

// GetIPPort provides a mock function with no fields
func (_m *MockCoreP2P) GetIPPort() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIPPort")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCoreP2P_GetIPPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPPort'
type MockCoreP2P_GetIPPort_Call struct {
	*mock.Call
}

// GetIPPort is a helper method to define mock.On call
func (_e *MockCoreP2P_Expecter) GetIPPort() *MockCoreP2P_GetIPPort_Call {
	return &MockCoreP2P_GetIPPort_Call{Call: _e.mock.On("GetIPPort")}
}

func (_c *MockCoreP2P_GetIPPort_Call) Run(run func()) *MockCoreP2P_GetIPPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCoreP2P_GetIPPort_Call) Return(_a0 string, _a1 string, _a2 error) *MockCoreP2P_GetIPPort_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCoreP2P_GetIPPort_Call) RunAndReturn(run func() (string, string, error)) *MockCoreP2P_GetIPPort_Call {
	_c.Call.Return(run)
	return _c
}

// Host provides a mock function with no fields
func (_m *MockCoreP2P) Host() host.Host {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 host.Host
	if rf, ok := ret.Get(0).(func() host.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(host.Host)
		}
	}

	return r0
}

// MockCoreP2P_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type MockCoreP2P_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *MockCoreP2P_Expecter) Host() *MockCoreP2P_Host_Call {
	return &MockCoreP2P_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *MockCoreP2P_Host_Call) Run(run func()) *MockCoreP2P_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCoreP2P_Host_Call) Return(_a0 host.Host) *MockCoreP2P_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoreP2P_Host_Call) RunAndReturn(run func() host.Host) *MockCoreP2P_Host_Call {
	_c.Call.Return(run)
	return _c
}

// SetComponentManager provides a mock function with given fields: cm
func (_m *MockCoreP2P) SetComponentManager(cm *component.ComponentManager) {
	_m.Called(cm)
}

// MockCoreP2P_SetComponentManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetComponentManager'
type MockCoreP2P_SetComponentManager_Call struct {
	*mock.Call
}

// SetComponentManager is a helper method to define mock.On call
//   - cm *component.ComponentManager
func (_e *MockCoreP2P_Expecter) SetComponentManager(cm interface{}) *MockCoreP2P_SetComponentManager_Call {
	return &MockCoreP2P_SetComponentManager_Call{Call: _e.mock.On("SetComponentManager", cm)}
}

func (_c *MockCoreP2P_SetComponentManager_Call) Run(run func(cm *component.ComponentManager)) *MockCoreP2P_SetComponentManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*component.ComponentManager))
	})
	return _c
}

func (_c *MockCoreP2P_SetComponentManager_Call) Return() *MockCoreP2P_SetComponentManager_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCoreP2P_SetComponentManager_Call) RunAndReturn(run func(*component.ComponentManager)) *MockCoreP2P_SetComponentManager_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockCoreP2P) Start(ctx irrecoverable.SignalerContext) {
	_m.Called(ctx)
}

// MockCoreP2P_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCoreP2P_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx irrecoverable.SignalerContext
func (_e *MockCoreP2P_Expecter) Start(ctx interface{}) *MockCoreP2P_Start_Call {
	return &MockCoreP2P_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockCoreP2P_Start_Call) Run(run func(ctx irrecoverable.SignalerContext)) *MockCoreP2P_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockCoreP2P_Start_Call) Return() *MockCoreP2P_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCoreP2P_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockCoreP2P_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockCoreP2P) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCoreP2P_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockCoreP2P_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockCoreP2P_Expecter) Stop() *MockCoreP2P_Stop_Call {
	return &MockCoreP2P_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockCoreP2P_Stop_Call) Run(run func()) *MockCoreP2P_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCoreP2P_Stop_Call) Return(_a0 error) *MockCoreP2P_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoreP2P_Stop_Call) RunAndReturn(run func() error) *MockCoreP2P_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoreP2P creates a new instance of MockCoreP2P. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoreP2P(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoreP2P {
	mock := &MockCoreP2P{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
