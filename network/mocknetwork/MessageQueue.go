// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import mock "github.com/stretchr/testify/mock"

// MockMessageQueue is an autogenerated mock type for the MessageQueue type
type MockMessageQueue struct {
	mock.Mock
}

type MockMessageQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageQueue) EXPECT() *MockMessageQueue_Expecter {
	return &MockMessageQueue_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: message
func (_m *MockMessageQueue) Insert(message interface{}) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageQueue_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockMessageQueue_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - message interface{}
func (_e *MockMessageQueue_Expecter) Insert(message interface{}) *MockMessageQueue_Insert_Call {
	return &MockMessageQueue_Insert_Call{Call: _e.mock.On("Insert", message)}
}

func (_c *MockMessageQueue_Insert_Call) Run(run func(message interface{})) *MockMessageQueue_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockMessageQueue_Insert_Call) Return(_a0 error) *MockMessageQueue_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageQueue_Insert_Call) RunAndReturn(run func(interface{}) error) *MockMessageQueue_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with no fields
func (_m *MockMessageQueue) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockMessageQueue_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockMessageQueue_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockMessageQueue_Expecter) Len() *MockMessageQueue_Len_Call {
	return &MockMessageQueue_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockMessageQueue_Len_Call) Run(run func()) *MockMessageQueue_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageQueue_Len_Call) Return(_a0 int) *MockMessageQueue_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageQueue_Len_Call) RunAndReturn(run func() int) *MockMessageQueue_Len_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with no fields
func (_m *MockMessageQueue) Remove() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockMessageQueue_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockMessageQueue_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
func (_e *MockMessageQueue_Expecter) Remove() *MockMessageQueue_Remove_Call {
	return &MockMessageQueue_Remove_Call{Call: _e.mock.On("Remove")}
}

func (_c *MockMessageQueue_Remove_Call) Run(run func()) *MockMessageQueue_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageQueue_Remove_Call) Return(_a0 interface{}) *MockMessageQueue_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageQueue_Remove_Call) RunAndReturn(run func() interface{}) *MockMessageQueue_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageQueue creates a new instance of MockMessageQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageQueue {
	mock := &MockMessageQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
