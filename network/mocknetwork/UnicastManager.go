// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	network "github.com/libp2p/go-libp2p/core/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocols "github.com/onflow/flow-go/network/p2p/unicast/protocols"
)

// MockUnicastManager is an autogenerated mock type for the UnicastManager type
type MockUnicastManager struct {
	mock.Mock
}

type MockUnicastManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnicastManager) EXPECT() *MockUnicastManager_Expecter {
	return &MockUnicastManager_Expecter{mock: &_m.Mock}
}

// CreateStream provides a mock function with given fields: ctx, peerID
func (_m *MockUnicastManager) CreateStream(ctx context.Context, peerID peer.ID) (network.Stream, error) {
	ret := _m.Called(ctx, peerID)

	if len(ret) == 0 {
		panic("no return value specified for CreateStream")
	}

	var r0 network.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) (network.Stream, error)); ok {
		return rf(ctx, peerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) network.Stream); ok {
		r0 = rf(ctx, peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID) error); ok {
		r1 = rf(ctx, peerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUnicastManager_CreateStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStream'
type MockUnicastManager_CreateStream_Call struct {
	*mock.Call
}

// CreateStream is a helper method to define mock.On call
//   - ctx context.Context
//   - peerID peer.ID
func (_e *MockUnicastManager_Expecter) CreateStream(ctx interface{}, peerID interface{}) *MockUnicastManager_CreateStream_Call {
	return &MockUnicastManager_CreateStream_Call{Call: _e.mock.On("CreateStream", ctx, peerID)}
}

func (_c *MockUnicastManager_CreateStream_Call) Run(run func(ctx context.Context, peerID peer.ID)) *MockUnicastManager_CreateStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.ID))
	})
	return _c
}

func (_c *MockUnicastManager_CreateStream_Call) Return(_a0 network.Stream, _a1 error) *MockUnicastManager_CreateStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUnicastManager_CreateStream_Call) RunAndReturn(run func(context.Context, peer.ID) (network.Stream, error)) *MockUnicastManager_CreateStream_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: unicast
func (_m *MockUnicastManager) Register(unicast protocols.ProtocolName) error {
	ret := _m.Called(unicast)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(protocols.ProtocolName) error); ok {
		r0 = rf(unicast)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnicastManager_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUnicastManager_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - unicast protocols.ProtocolName
func (_e *MockUnicastManager_Expecter) Register(unicast interface{}) *MockUnicastManager_Register_Call {
	return &MockUnicastManager_Register_Call{Call: _e.mock.On("Register", unicast)}
}

func (_c *MockUnicastManager_Register_Call) Run(run func(unicast protocols.ProtocolName)) *MockUnicastManager_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocols.ProtocolName))
	})
	return _c
}

func (_c *MockUnicastManager_Register_Call) Return(_a0 error) *MockUnicastManager_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnicastManager_Register_Call) RunAndReturn(run func(protocols.ProtocolName) error) *MockUnicastManager_Register_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultHandler provides a mock function with given fields: defaultHandler
func (_m *MockUnicastManager) SetDefaultHandler(defaultHandler network.StreamHandler) {
	_m.Called(defaultHandler)
}

// MockUnicastManager_SetDefaultHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultHandler'
type MockUnicastManager_SetDefaultHandler_Call struct {
	*mock.Call
}

// SetDefaultHandler is a helper method to define mock.On call
//   - defaultHandler network.StreamHandler
func (_e *MockUnicastManager_Expecter) SetDefaultHandler(defaultHandler interface{}) *MockUnicastManager_SetDefaultHandler_Call {
	return &MockUnicastManager_SetDefaultHandler_Call{Call: _e.mock.On("SetDefaultHandler", defaultHandler)}
}

func (_c *MockUnicastManager_SetDefaultHandler_Call) Run(run func(defaultHandler network.StreamHandler)) *MockUnicastManager_SetDefaultHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.StreamHandler))
	})
	return _c
}

func (_c *MockUnicastManager_SetDefaultHandler_Call) Return() *MockUnicastManager_SetDefaultHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnicastManager_SetDefaultHandler_Call) RunAndReturn(run func(network.StreamHandler)) *MockUnicastManager_SetDefaultHandler_Call {
	_c.Run(run)
	return _c
}

// NewMockUnicastManager creates a new instance of MockUnicastManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnicastManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnicastManager {
	mock := &MockUnicastManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
