// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockPeersProvider is an autogenerated mock type for the PeersProvider type
type MockPeersProvider struct {
	mock.Mock
}

type MockPeersProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeersProvider) EXPECT() *MockPeersProvider_Expecter {
	return &MockPeersProvider_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *MockPeersProvider) Execute() peer.IDSlice {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 peer.IDSlice
	if rf, ok := ret.Get(0).(func() peer.IDSlice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peer.IDSlice)
		}
	}

	return r0
}

// MockPeersProvider_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockPeersProvider_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockPeersProvider_Expecter) Execute() *MockPeersProvider_Execute_Call {
	return &MockPeersProvider_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockPeersProvider_Execute_Call) Run(run func()) *MockPeersProvider_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeersProvider_Execute_Call) Return(_a0 peer.IDSlice) *MockPeersProvider_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeersProvider_Execute_Call) RunAndReturn(run func() peer.IDSlice) *MockPeersProvider_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPeersProvider creates a new instance of MockPeersProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeersProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeersProvider {
	mock := &MockPeersProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
