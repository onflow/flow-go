// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	channels "github.com/onflow/flow-go/network/channels"
	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// MockSubscriptionManager is an autogenerated mock type for the SubscriptionManager type
type MockSubscriptionManager struct {
	mock.Mock
}

type MockSubscriptionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionManager) EXPECT() *MockSubscriptionManager_Expecter {
	return &MockSubscriptionManager_Expecter{mock: &_m.Mock}
}

// Channels provides a mock function with no fields
func (_m *MockSubscriptionManager) Channels() channels.ChannelList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Channels")
	}

	var r0 channels.ChannelList
	if rf, ok := ret.Get(0).(func() channels.ChannelList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(channels.ChannelList)
		}
	}

	return r0
}

// MockSubscriptionManager_Channels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channels'
type MockSubscriptionManager_Channels_Call struct {
	*mock.Call
}

// Channels is a helper method to define mock.On call
func (_e *MockSubscriptionManager_Expecter) Channels() *MockSubscriptionManager_Channels_Call {
	return &MockSubscriptionManager_Channels_Call{Call: _e.mock.On("Channels")}
}

func (_c *MockSubscriptionManager_Channels_Call) Run(run func()) *MockSubscriptionManager_Channels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionManager_Channels_Call) Return(_a0 channels.ChannelList) *MockSubscriptionManager_Channels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionManager_Channels_Call) RunAndReturn(run func() channels.ChannelList) *MockSubscriptionManager_Channels_Call {
	_c.Call.Return(run)
	return _c
}

// GetEngine provides a mock function with given fields: channel
func (_m *MockSubscriptionManager) GetEngine(channel channels.Channel) (network.MessageProcessor, error) {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for GetEngine")
	}

	var r0 network.MessageProcessor
	var r1 error
	if rf, ok := ret.Get(0).(func(channels.Channel) (network.MessageProcessor, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(channels.Channel) network.MessageProcessor); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.MessageProcessor)
		}
	}

	if rf, ok := ret.Get(1).(func(channels.Channel) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionManager_GetEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEngine'
type MockSubscriptionManager_GetEngine_Call struct {
	*mock.Call
}

// GetEngine is a helper method to define mock.On call
//   - channel channels.Channel
func (_e *MockSubscriptionManager_Expecter) GetEngine(channel interface{}) *MockSubscriptionManager_GetEngine_Call {
	return &MockSubscriptionManager_GetEngine_Call{Call: _e.mock.On("GetEngine", channel)}
}

func (_c *MockSubscriptionManager_GetEngine_Call) Run(run func(channel channels.Channel)) *MockSubscriptionManager_GetEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel))
	})
	return _c
}

func (_c *MockSubscriptionManager_GetEngine_Call) Return(_a0 network.MessageProcessor, _a1 error) *MockSubscriptionManager_GetEngine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionManager_GetEngine_Call) RunAndReturn(run func(channels.Channel) (network.MessageProcessor, error)) *MockSubscriptionManager_GetEngine_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: channel, engine
func (_m *MockSubscriptionManager) Register(channel channels.Channel, engine network.MessageProcessor) error {
	ret := _m.Called(channel, engine)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, network.MessageProcessor) error); ok {
		r0 = rf(channel, engine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionManager_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockSubscriptionManager_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - channel channels.Channel
//   - engine network.MessageProcessor
func (_e *MockSubscriptionManager_Expecter) Register(channel interface{}, engine interface{}) *MockSubscriptionManager_Register_Call {
	return &MockSubscriptionManager_Register_Call{Call: _e.mock.On("Register", channel, engine)}
}

func (_c *MockSubscriptionManager_Register_Call) Run(run func(channel channels.Channel, engine network.MessageProcessor)) *MockSubscriptionManager_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel), args[1].(network.MessageProcessor))
	})
	return _c
}

func (_c *MockSubscriptionManager_Register_Call) Return(_a0 error) *MockSubscriptionManager_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionManager_Register_Call) RunAndReturn(run func(channels.Channel, network.MessageProcessor) error) *MockSubscriptionManager_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: channel
func (_m *MockSubscriptionManager) Unregister(channel channels.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Unregister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionManager_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type MockSubscriptionManager_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - channel channels.Channel
func (_e *MockSubscriptionManager_Expecter) Unregister(channel interface{}) *MockSubscriptionManager_Unregister_Call {
	return &MockSubscriptionManager_Unregister_Call{Call: _e.mock.On("Unregister", channel)}
}

func (_c *MockSubscriptionManager_Unregister_Call) Run(run func(channel channels.Channel)) *MockSubscriptionManager_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel))
	})
	return _c
}

func (_c *MockSubscriptionManager_Unregister_Call) Return(_a0 error) *MockSubscriptionManager_Unregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionManager_Unregister_Call) RunAndReturn(run func(channels.Channel) error) *MockSubscriptionManager_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriptionManager creates a new instance of MockSubscriptionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionManager {
	mock := &MockSubscriptionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
