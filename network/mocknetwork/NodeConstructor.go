// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"
)

// MockNodeConstructor is an autogenerated mock type for the NodeConstructor type
type MockNodeConstructor struct {
	mock.Mock
}

type MockNodeConstructor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeConstructor) EXPECT() *MockNodeConstructor_Expecter {
	return &MockNodeConstructor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: config
func (_m *MockNodeConstructor) Execute(config *p2p.NodeConfig) (p2p.LibP2PNode, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 p2p.LibP2PNode
	var r1 error
	if rf, ok := ret.Get(0).(func(*p2p.NodeConfig) (p2p.LibP2PNode, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*p2p.NodeConfig) p2p.LibP2PNode); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNode)
		}
	}

	if rf, ok := ret.Get(1).(func(*p2p.NodeConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodeConstructor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockNodeConstructor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - config *p2p.NodeConfig
func (_e *MockNodeConstructor_Expecter) Execute(config interface{}) *MockNodeConstructor_Execute_Call {
	return &MockNodeConstructor_Execute_Call{Call: _e.mock.On("Execute", config)}
}

func (_c *MockNodeConstructor_Execute_Call) Run(run func(config *p2p.NodeConfig)) *MockNodeConstructor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*p2p.NodeConfig))
	})
	return _c
}

func (_c *MockNodeConstructor_Execute_Call) Return(_a0 p2p.LibP2PNode, _a1 error) *MockNodeConstructor_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeConstructor_Execute_Call) RunAndReturn(run func(*p2p.NodeConfig) (p2p.LibP2PNode, error)) *MockNodeConstructor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeConstructor creates a new instance of MockNodeConstructor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeConstructor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeConstructor {
	mock := &MockNodeConstructor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
