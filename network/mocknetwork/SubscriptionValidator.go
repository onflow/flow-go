// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockSubscriptionValidator is an autogenerated mock type for the SubscriptionValidator type
type MockSubscriptionValidator struct {
	mock.Mock
}

type MockSubscriptionValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionValidator) EXPECT() *MockSubscriptionValidator_Expecter {
	return &MockSubscriptionValidator_Expecter{mock: &_m.Mock}
}

// CheckSubscribedToAllowedTopics provides a mock function with given fields: pid, role
func (_m *MockSubscriptionValidator) CheckSubscribedToAllowedTopics(pid peer.ID, role flow.Role) error {
	ret := _m.Called(pid, role)

	if len(ret) == 0 {
		panic("no return value specified for CheckSubscribedToAllowedTopics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID, flow.Role) error); ok {
		r0 = rf(pid, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSubscribedToAllowedTopics'
type MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call struct {
	*mock.Call
}

// CheckSubscribedToAllowedTopics is a helper method to define mock.On call
//   - pid peer.ID
//   - role flow.Role
func (_e *MockSubscriptionValidator_Expecter) CheckSubscribedToAllowedTopics(pid interface{}, role interface{}) *MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call {
	return &MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call{Call: _e.mock.On("CheckSubscribedToAllowedTopics", pid, role)}
}

func (_c *MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call) Run(run func(pid peer.ID, role flow.Role)) *MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(flow.Role))
	})
	return _c
}

func (_c *MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call) Return(_a0 error) *MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call) RunAndReturn(run func(peer.ID, flow.Role) error) *MockSubscriptionValidator_CheckSubscribedToAllowedTopics_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockSubscriptionValidator) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockSubscriptionValidator_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockSubscriptionValidator_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockSubscriptionValidator_Expecter) Done() *MockSubscriptionValidator_Done_Call {
	return &MockSubscriptionValidator_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockSubscriptionValidator_Done_Call) Run(run func()) *MockSubscriptionValidator_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionValidator_Done_Call) Return(_a0 <-chan struct{}) *MockSubscriptionValidator_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionValidator_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockSubscriptionValidator_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockSubscriptionValidator) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockSubscriptionValidator_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockSubscriptionValidator_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockSubscriptionValidator_Expecter) Ready() *MockSubscriptionValidator_Ready_Call {
	return &MockSubscriptionValidator_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockSubscriptionValidator_Ready_Call) Run(run func()) *MockSubscriptionValidator_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionValidator_Ready_Call) Return(_a0 <-chan struct{}) *MockSubscriptionValidator_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionValidator_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockSubscriptionValidator_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockSubscriptionValidator) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockSubscriptionValidator_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockSubscriptionValidator_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockSubscriptionValidator_Expecter) Start(_a0 interface{}) *MockSubscriptionValidator_Start_Call {
	return &MockSubscriptionValidator_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockSubscriptionValidator_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockSubscriptionValidator_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockSubscriptionValidator_Start_Call) Return() *MockSubscriptionValidator_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriptionValidator_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockSubscriptionValidator_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockSubscriptionValidator creates a new instance of MockSubscriptionValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionValidator {
	mock := &MockSubscriptionValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
