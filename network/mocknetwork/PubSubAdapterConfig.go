// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"

	routing "github.com/libp2p/go-libp2p/core/routing"

	time "time"
)

// MockPubSubAdapterConfig is an autogenerated mock type for the PubSubAdapterConfig type
type MockPubSubAdapterConfig struct {
	mock.Mock
}

type MockPubSubAdapterConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSubAdapterConfig) EXPECT() *MockPubSubAdapterConfig_Expecter {
	return &MockPubSubAdapterConfig_Expecter{mock: &_m.Mock}
}

// WithMessageIdFunction provides a mock function with given fields: f
func (_m *MockPubSubAdapterConfig) WithMessageIdFunction(f func([]byte) string) {
	_m.Called(f)
}

// MockPubSubAdapterConfig_WithMessageIdFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithMessageIdFunction'
type MockPubSubAdapterConfig_WithMessageIdFunction_Call struct {
	*mock.Call
}

// WithMessageIdFunction is a helper method to define mock.On call
//   - f func([]byte) string
func (_e *MockPubSubAdapterConfig_Expecter) WithMessageIdFunction(f interface{}) *MockPubSubAdapterConfig_WithMessageIdFunction_Call {
	return &MockPubSubAdapterConfig_WithMessageIdFunction_Call{Call: _e.mock.On("WithMessageIdFunction", f)}
}

func (_c *MockPubSubAdapterConfig_WithMessageIdFunction_Call) Run(run func(f func([]byte) string)) *MockPubSubAdapterConfig_WithMessageIdFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func([]byte) string))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithMessageIdFunction_Call) Return() *MockPubSubAdapterConfig_WithMessageIdFunction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithMessageIdFunction_Call) RunAndReturn(run func(func([]byte) string)) *MockPubSubAdapterConfig_WithMessageIdFunction_Call {
	_c.Run(run)
	return _c
}

// WithPeerGater provides a mock function with given fields: topicDeliveryWeights, sourceDecay
func (_m *MockPubSubAdapterConfig) WithPeerGater(topicDeliveryWeights map[string]float64, sourceDecay time.Duration) {
	_m.Called(topicDeliveryWeights, sourceDecay)
}

// MockPubSubAdapterConfig_WithPeerGater_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPeerGater'
type MockPubSubAdapterConfig_WithPeerGater_Call struct {
	*mock.Call
}

// WithPeerGater is a helper method to define mock.On call
//   - topicDeliveryWeights map[string]float64
//   - sourceDecay time.Duration
func (_e *MockPubSubAdapterConfig_Expecter) WithPeerGater(topicDeliveryWeights interface{}, sourceDecay interface{}) *MockPubSubAdapterConfig_WithPeerGater_Call {
	return &MockPubSubAdapterConfig_WithPeerGater_Call{Call: _e.mock.On("WithPeerGater", topicDeliveryWeights, sourceDecay)}
}

func (_c *MockPubSubAdapterConfig_WithPeerGater_Call) Run(run func(topicDeliveryWeights map[string]float64, sourceDecay time.Duration)) *MockPubSubAdapterConfig_WithPeerGater_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]float64), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithPeerGater_Call) Return() *MockPubSubAdapterConfig_WithPeerGater_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithPeerGater_Call) RunAndReturn(run func(map[string]float64, time.Duration)) *MockPubSubAdapterConfig_WithPeerGater_Call {
	_c.Run(run)
	return _c
}

// WithRoutingDiscovery provides a mock function with given fields: _a0
func (_m *MockPubSubAdapterConfig) WithRoutingDiscovery(_a0 routing.ContentRouting) {
	_m.Called(_a0)
}

// MockPubSubAdapterConfig_WithRoutingDiscovery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithRoutingDiscovery'
type MockPubSubAdapterConfig_WithRoutingDiscovery_Call struct {
	*mock.Call
}

// WithRoutingDiscovery is a helper method to define mock.On call
//   - _a0 routing.ContentRouting
func (_e *MockPubSubAdapterConfig_Expecter) WithRoutingDiscovery(_a0 interface{}) *MockPubSubAdapterConfig_WithRoutingDiscovery_Call {
	return &MockPubSubAdapterConfig_WithRoutingDiscovery_Call{Call: _e.mock.On("WithRoutingDiscovery", _a0)}
}

func (_c *MockPubSubAdapterConfig_WithRoutingDiscovery_Call) Run(run func(_a0 routing.ContentRouting)) *MockPubSubAdapterConfig_WithRoutingDiscovery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(routing.ContentRouting))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithRoutingDiscovery_Call) Return() *MockPubSubAdapterConfig_WithRoutingDiscovery_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithRoutingDiscovery_Call) RunAndReturn(run func(routing.ContentRouting)) *MockPubSubAdapterConfig_WithRoutingDiscovery_Call {
	_c.Run(run)
	return _c
}

// WithRpcInspector provides a mock function with given fields: _a0
func (_m *MockPubSubAdapterConfig) WithRpcInspector(_a0 p2p.GossipSubRPCInspector) {
	_m.Called(_a0)
}

// MockPubSubAdapterConfig_WithRpcInspector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithRpcInspector'
type MockPubSubAdapterConfig_WithRpcInspector_Call struct {
	*mock.Call
}

// WithRpcInspector is a helper method to define mock.On call
//   - _a0 p2p.GossipSubRPCInspector
func (_e *MockPubSubAdapterConfig_Expecter) WithRpcInspector(_a0 interface{}) *MockPubSubAdapterConfig_WithRpcInspector_Call {
	return &MockPubSubAdapterConfig_WithRpcInspector_Call{Call: _e.mock.On("WithRpcInspector", _a0)}
}

func (_c *MockPubSubAdapterConfig_WithRpcInspector_Call) Run(run func(_a0 p2p.GossipSubRPCInspector)) *MockPubSubAdapterConfig_WithRpcInspector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.GossipSubRPCInspector))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithRpcInspector_Call) Return() *MockPubSubAdapterConfig_WithRpcInspector_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithRpcInspector_Call) RunAndReturn(run func(p2p.GossipSubRPCInspector)) *MockPubSubAdapterConfig_WithRpcInspector_Call {
	_c.Run(run)
	return _c
}

// WithScoreOption provides a mock function with given fields: _a0
func (_m *MockPubSubAdapterConfig) WithScoreOption(_a0 p2p.ScoreOptionBuilder) {
	_m.Called(_a0)
}

// MockPubSubAdapterConfig_WithScoreOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithScoreOption'
type MockPubSubAdapterConfig_WithScoreOption_Call struct {
	*mock.Call
}

// WithScoreOption is a helper method to define mock.On call
//   - _a0 p2p.ScoreOptionBuilder
func (_e *MockPubSubAdapterConfig_Expecter) WithScoreOption(_a0 interface{}) *MockPubSubAdapterConfig_WithScoreOption_Call {
	return &MockPubSubAdapterConfig_WithScoreOption_Call{Call: _e.mock.On("WithScoreOption", _a0)}
}

func (_c *MockPubSubAdapterConfig_WithScoreOption_Call) Run(run func(_a0 p2p.ScoreOptionBuilder)) *MockPubSubAdapterConfig_WithScoreOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.ScoreOptionBuilder))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithScoreOption_Call) Return() *MockPubSubAdapterConfig_WithScoreOption_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithScoreOption_Call) RunAndReturn(run func(p2p.ScoreOptionBuilder)) *MockPubSubAdapterConfig_WithScoreOption_Call {
	_c.Run(run)
	return _c
}

// WithScoreTracer provides a mock function with given fields: tracer
func (_m *MockPubSubAdapterConfig) WithScoreTracer(tracer p2p.PeerScoreTracer) {
	_m.Called(tracer)
}

// MockPubSubAdapterConfig_WithScoreTracer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithScoreTracer'
type MockPubSubAdapterConfig_WithScoreTracer_Call struct {
	*mock.Call
}

// WithScoreTracer is a helper method to define mock.On call
//   - tracer p2p.PeerScoreTracer
func (_e *MockPubSubAdapterConfig_Expecter) WithScoreTracer(tracer interface{}) *MockPubSubAdapterConfig_WithScoreTracer_Call {
	return &MockPubSubAdapterConfig_WithScoreTracer_Call{Call: _e.mock.On("WithScoreTracer", tracer)}
}

func (_c *MockPubSubAdapterConfig_WithScoreTracer_Call) Run(run func(tracer p2p.PeerScoreTracer)) *MockPubSubAdapterConfig_WithScoreTracer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.PeerScoreTracer))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithScoreTracer_Call) Return() *MockPubSubAdapterConfig_WithScoreTracer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithScoreTracer_Call) RunAndReturn(run func(p2p.PeerScoreTracer)) *MockPubSubAdapterConfig_WithScoreTracer_Call {
	_c.Run(run)
	return _c
}

// WithSubscriptionFilter provides a mock function with given fields: _a0
func (_m *MockPubSubAdapterConfig) WithSubscriptionFilter(_a0 p2p.SubscriptionFilter) {
	_m.Called(_a0)
}

// MockPubSubAdapterConfig_WithSubscriptionFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithSubscriptionFilter'
type MockPubSubAdapterConfig_WithSubscriptionFilter_Call struct {
	*mock.Call
}

// WithSubscriptionFilter is a helper method to define mock.On call
//   - _a0 p2p.SubscriptionFilter
func (_e *MockPubSubAdapterConfig_Expecter) WithSubscriptionFilter(_a0 interface{}) *MockPubSubAdapterConfig_WithSubscriptionFilter_Call {
	return &MockPubSubAdapterConfig_WithSubscriptionFilter_Call{Call: _e.mock.On("WithSubscriptionFilter", _a0)}
}

func (_c *MockPubSubAdapterConfig_WithSubscriptionFilter_Call) Run(run func(_a0 p2p.SubscriptionFilter)) *MockPubSubAdapterConfig_WithSubscriptionFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.SubscriptionFilter))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithSubscriptionFilter_Call) Return() *MockPubSubAdapterConfig_WithSubscriptionFilter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithSubscriptionFilter_Call) RunAndReturn(run func(p2p.SubscriptionFilter)) *MockPubSubAdapterConfig_WithSubscriptionFilter_Call {
	_c.Run(run)
	return _c
}

// WithTracer provides a mock function with given fields: t
func (_m *MockPubSubAdapterConfig) WithTracer(t p2p.PubSubTracer) {
	_m.Called(t)
}

// MockPubSubAdapterConfig_WithTracer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTracer'
type MockPubSubAdapterConfig_WithTracer_Call struct {
	*mock.Call
}

// WithTracer is a helper method to define mock.On call
//   - t p2p.PubSubTracer
func (_e *MockPubSubAdapterConfig_Expecter) WithTracer(t interface{}) *MockPubSubAdapterConfig_WithTracer_Call {
	return &MockPubSubAdapterConfig_WithTracer_Call{Call: _e.mock.On("WithTracer", t)}
}

func (_c *MockPubSubAdapterConfig_WithTracer_Call) Run(run func(t p2p.PubSubTracer)) *MockPubSubAdapterConfig_WithTracer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.PubSubTracer))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithTracer_Call) Return() *MockPubSubAdapterConfig_WithTracer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithTracer_Call) RunAndReturn(run func(p2p.PubSubTracer)) *MockPubSubAdapterConfig_WithTracer_Call {
	_c.Run(run)
	return _c
}

// WithValidateQueueSize provides a mock function with given fields: _a0
func (_m *MockPubSubAdapterConfig) WithValidateQueueSize(_a0 int) {
	_m.Called(_a0)
}

// MockPubSubAdapterConfig_WithValidateQueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithValidateQueueSize'
type MockPubSubAdapterConfig_WithValidateQueueSize_Call struct {
	*mock.Call
}

// WithValidateQueueSize is a helper method to define mock.On call
//   - _a0 int
func (_e *MockPubSubAdapterConfig_Expecter) WithValidateQueueSize(_a0 interface{}) *MockPubSubAdapterConfig_WithValidateQueueSize_Call {
	return &MockPubSubAdapterConfig_WithValidateQueueSize_Call{Call: _e.mock.On("WithValidateQueueSize", _a0)}
}

func (_c *MockPubSubAdapterConfig_WithValidateQueueSize_Call) Run(run func(_a0 int)) *MockPubSubAdapterConfig_WithValidateQueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockPubSubAdapterConfig_WithValidateQueueSize_Call) Return() *MockPubSubAdapterConfig_WithValidateQueueSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubAdapterConfig_WithValidateQueueSize_Call) RunAndReturn(run func(int)) *MockPubSubAdapterConfig_WithValidateQueueSize_Call {
	_c.Run(run)
	return _c
}

// NewMockPubSubAdapterConfig creates a new instance of MockPubSubAdapterConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubAdapterConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubAdapterConfig {
	mock := &MockPubSubAdapterConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
