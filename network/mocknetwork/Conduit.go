// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// MockConduit is an autogenerated mock type for the Conduit type
type MockConduit struct {
	mock.Mock
}

type MockConduit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConduit) EXPECT() *MockConduit_Expecter {
	return &MockConduit_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockConduit) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduit_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConduit_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConduit_Expecter) Close() *MockConduit_Close_Call {
	return &MockConduit_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConduit_Close_Call) Run(run func()) *MockConduit_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConduit_Close_Call) Return(_a0 error) *MockConduit_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduit_Close_Call) RunAndReturn(run func() error) *MockConduit_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Multicast provides a mock function with given fields: event, num, targetIDs
func (_m *MockConduit) Multicast(event interface{}, num uint, targetIDs ...flow.Identifier) error {
	_va := make([]interface{}, len(targetIDs))
	for _i := range targetIDs {
		_va[_i] = targetIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event, num)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Multicast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, ...flow.Identifier) error); ok {
		r0 = rf(event, num, targetIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduit_Multicast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Multicast'
type MockConduit_Multicast_Call struct {
	*mock.Call
}

// Multicast is a helper method to define mock.On call
//   - event interface{}
//   - num uint
//   - targetIDs ...flow.Identifier
func (_e *MockConduit_Expecter) Multicast(event interface{}, num interface{}, targetIDs ...interface{}) *MockConduit_Multicast_Call {
	return &MockConduit_Multicast_Call{Call: _e.mock.On("Multicast",
		append([]interface{}{event, num}, targetIDs...)...)}
}

func (_c *MockConduit_Multicast_Call) Run(run func(event interface{}, num uint, targetIDs ...flow.Identifier)) *MockConduit_Multicast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]flow.Identifier, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(flow.Identifier)
			}
		}
		run(args[0].(interface{}), args[1].(uint), variadicArgs...)
	})
	return _c
}

func (_c *MockConduit_Multicast_Call) Return(_a0 error) *MockConduit_Multicast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduit_Multicast_Call) RunAndReturn(run func(interface{}, uint, ...flow.Identifier) error) *MockConduit_Multicast_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: event, targetIDs
func (_m *MockConduit) Publish(event interface{}, targetIDs ...flow.Identifier) error {
	_va := make([]interface{}, len(targetIDs))
	for _i := range targetIDs {
		_va[_i] = targetIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...flow.Identifier) error); ok {
		r0 = rf(event, targetIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduit_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockConduit_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - event interface{}
//   - targetIDs ...flow.Identifier
func (_e *MockConduit_Expecter) Publish(event interface{}, targetIDs ...interface{}) *MockConduit_Publish_Call {
	return &MockConduit_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{event}, targetIDs...)...)}
}

func (_c *MockConduit_Publish_Call) Run(run func(event interface{}, targetIDs ...flow.Identifier)) *MockConduit_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]flow.Identifier, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(flow.Identifier)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockConduit_Publish_Call) Return(_a0 error) *MockConduit_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduit_Publish_Call) RunAndReturn(run func(interface{}, ...flow.Identifier) error) *MockConduit_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// ReportMisbehavior provides a mock function with given fields: _a0
func (_m *MockConduit) ReportMisbehavior(_a0 network.MisbehaviorReport) {
	_m.Called(_a0)
}

// MockConduit_ReportMisbehavior_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportMisbehavior'
type MockConduit_ReportMisbehavior_Call struct {
	*mock.Call
}

// ReportMisbehavior is a helper method to define mock.On call
//   - _a0 network.MisbehaviorReport
func (_e *MockConduit_Expecter) ReportMisbehavior(_a0 interface{}) *MockConduit_ReportMisbehavior_Call {
	return &MockConduit_ReportMisbehavior_Call{Call: _e.mock.On("ReportMisbehavior", _a0)}
}

func (_c *MockConduit_ReportMisbehavior_Call) Run(run func(_a0 network.MisbehaviorReport)) *MockConduit_ReportMisbehavior_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.MisbehaviorReport))
	})
	return _c
}

func (_c *MockConduit_ReportMisbehavior_Call) Return() *MockConduit_ReportMisbehavior_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConduit_ReportMisbehavior_Call) RunAndReturn(run func(network.MisbehaviorReport)) *MockConduit_ReportMisbehavior_Call {
	_c.Run(run)
	return _c
}

// Unicast provides a mock function with given fields: event, targetID
func (_m *MockConduit) Unicast(event interface{}, targetID flow.Identifier) error {
	ret := _m.Called(event, targetID)

	if len(ret) == 0 {
		panic("no return value specified for Unicast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, flow.Identifier) error); ok {
		r0 = rf(event, targetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduit_Unicast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unicast'
type MockConduit_Unicast_Call struct {
	*mock.Call
}

// Unicast is a helper method to define mock.On call
//   - event interface{}
//   - targetID flow.Identifier
func (_e *MockConduit_Expecter) Unicast(event interface{}, targetID interface{}) *MockConduit_Unicast_Call {
	return &MockConduit_Unicast_Call{Call: _e.mock.On("Unicast", event, targetID)}
}

func (_c *MockConduit_Unicast_Call) Run(run func(event interface{}, targetID flow.Identifier)) *MockConduit_Unicast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockConduit_Unicast_Call) Return(_a0 error) *MockConduit_Unicast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduit_Unicast_Call) RunAndReturn(run func(interface{}, flow.Identifier) error) *MockConduit_Unicast_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConduit creates a new instance of MockConduit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConduit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConduit {
	mock := &MockConduit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
