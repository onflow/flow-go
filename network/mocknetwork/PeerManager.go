// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockPeerManager is an autogenerated mock type for the PeerManager type
type MockPeerManager struct {
	mock.Mock
}

type MockPeerManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeerManager) EXPECT() *MockPeerManager_Expecter {
	return &MockPeerManager_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockPeerManager) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPeerManager_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockPeerManager_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockPeerManager_Expecter) Done() *MockPeerManager_Done_Call {
	return &MockPeerManager_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockPeerManager_Done_Call) Run(run func()) *MockPeerManager_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManager_Done_Call) Return(_a0 <-chan struct{}) *MockPeerManager_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManager_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockPeerManager_Done_Call {
	_c.Call.Return(run)
	return _c
}

// ForceUpdatePeers provides a mock function with given fields: _a0
func (_m *MockPeerManager) ForceUpdatePeers(_a0 context.Context) {
	_m.Called(_a0)
}

// MockPeerManager_ForceUpdatePeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceUpdatePeers'
type MockPeerManager_ForceUpdatePeers_Call struct {
	*mock.Call
}

// ForceUpdatePeers is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockPeerManager_Expecter) ForceUpdatePeers(_a0 interface{}) *MockPeerManager_ForceUpdatePeers_Call {
	return &MockPeerManager_ForceUpdatePeers_Call{Call: _e.mock.On("ForceUpdatePeers", _a0)}
}

func (_c *MockPeerManager_ForceUpdatePeers_Call) Run(run func(_a0 context.Context)) *MockPeerManager_ForceUpdatePeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPeerManager_ForceUpdatePeers_Call) Return() *MockPeerManager_ForceUpdatePeers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerManager_ForceUpdatePeers_Call) RunAndReturn(run func(context.Context)) *MockPeerManager_ForceUpdatePeers_Call {
	_c.Run(run)
	return _c
}

// OnRateLimitedPeer provides a mock function with given fields: pid, role, msgType, topic, reason
func (_m *MockPeerManager) OnRateLimitedPeer(pid peer.ID, role string, msgType string, topic string, reason string) {
	_m.Called(pid, role, msgType, topic, reason)
}

// MockPeerManager_OnRateLimitedPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRateLimitedPeer'
type MockPeerManager_OnRateLimitedPeer_Call struct {
	*mock.Call
}

// OnRateLimitedPeer is a helper method to define mock.On call
//   - pid peer.ID
//   - role string
//   - msgType string
//   - topic string
//   - reason string
func (_e *MockPeerManager_Expecter) OnRateLimitedPeer(pid interface{}, role interface{}, msgType interface{}, topic interface{}, reason interface{}) *MockPeerManager_OnRateLimitedPeer_Call {
	return &MockPeerManager_OnRateLimitedPeer_Call{Call: _e.mock.On("OnRateLimitedPeer", pid, role, msgType, topic, reason)}
}

func (_c *MockPeerManager_OnRateLimitedPeer_Call) Run(run func(pid peer.ID, role string, msgType string, topic string, reason string)) *MockPeerManager_OnRateLimitedPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockPeerManager_OnRateLimitedPeer_Call) Return() *MockPeerManager_OnRateLimitedPeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerManager_OnRateLimitedPeer_Call) RunAndReturn(run func(peer.ID, string, string, string, string)) *MockPeerManager_OnRateLimitedPeer_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockPeerManager) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPeerManager_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockPeerManager_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockPeerManager_Expecter) Ready() *MockPeerManager_Ready_Call {
	return &MockPeerManager_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockPeerManager_Ready_Call) Run(run func()) *MockPeerManager_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManager_Ready_Call) Return(_a0 <-chan struct{}) *MockPeerManager_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManager_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockPeerManager_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// RequestPeerUpdate provides a mock function with no fields
func (_m *MockPeerManager) RequestPeerUpdate() {
	_m.Called()
}

// MockPeerManager_RequestPeerUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPeerUpdate'
type MockPeerManager_RequestPeerUpdate_Call struct {
	*mock.Call
}

// RequestPeerUpdate is a helper method to define mock.On call
func (_e *MockPeerManager_Expecter) RequestPeerUpdate() *MockPeerManager_RequestPeerUpdate_Call {
	return &MockPeerManager_RequestPeerUpdate_Call{Call: _e.mock.On("RequestPeerUpdate")}
}

func (_c *MockPeerManager_RequestPeerUpdate_Call) Run(run func()) *MockPeerManager_RequestPeerUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManager_RequestPeerUpdate_Call) Return() *MockPeerManager_RequestPeerUpdate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerManager_RequestPeerUpdate_Call) RunAndReturn(run func()) *MockPeerManager_RequestPeerUpdate_Call {
	_c.Run(run)
	return _c
}

// SetPeersProvider provides a mock function with given fields: _a0
func (_m *MockPeerManager) SetPeersProvider(_a0 p2p.PeersProvider) {
	_m.Called(_a0)
}

// MockPeerManager_SetPeersProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPeersProvider'
type MockPeerManager_SetPeersProvider_Call struct {
	*mock.Call
}

// SetPeersProvider is a helper method to define mock.On call
//   - _a0 p2p.PeersProvider
func (_e *MockPeerManager_Expecter) SetPeersProvider(_a0 interface{}) *MockPeerManager_SetPeersProvider_Call {
	return &MockPeerManager_SetPeersProvider_Call{Call: _e.mock.On("SetPeersProvider", _a0)}
}

func (_c *MockPeerManager_SetPeersProvider_Call) Run(run func(_a0 p2p.PeersProvider)) *MockPeerManager_SetPeersProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.PeersProvider))
	})
	return _c
}

func (_c *MockPeerManager_SetPeersProvider_Call) Return() *MockPeerManager_SetPeersProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerManager_SetPeersProvider_Call) RunAndReturn(run func(p2p.PeersProvider)) *MockPeerManager_SetPeersProvider_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockPeerManager) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockPeerManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPeerManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockPeerManager_Expecter) Start(_a0 interface{}) *MockPeerManager_Start_Call {
	return &MockPeerManager_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockPeerManager_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockPeerManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockPeerManager_Start_Call) Return() *MockPeerManager_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerManager_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockPeerManager_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockPeerManager creates a new instance of MockPeerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeerManager {
	mock := &MockPeerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
