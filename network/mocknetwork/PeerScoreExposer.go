// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockPeerScoreExposer is an autogenerated mock type for the PeerScoreExposer type
type MockPeerScoreExposer struct {
	mock.Mock
}

type MockPeerScoreExposer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeerScoreExposer) EXPECT() *MockPeerScoreExposer_Expecter {
	return &MockPeerScoreExposer_Expecter{mock: &_m.Mock}
}

// GetAppScore provides a mock function with given fields: peerID
func (_m *MockPeerScoreExposer) GetAppScore(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppScore")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreExposer_GetAppScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppScore'
type MockPeerScoreExposer_GetAppScore_Call struct {
	*mock.Call
}

// GetAppScore is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreExposer_Expecter) GetAppScore(peerID interface{}) *MockPeerScoreExposer_GetAppScore_Call {
	return &MockPeerScoreExposer_GetAppScore_Call{Call: _e.mock.On("GetAppScore", peerID)}
}

func (_c *MockPeerScoreExposer_GetAppScore_Call) Run(run func(peerID peer.ID)) *MockPeerScoreExposer_GetAppScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreExposer_GetAppScore_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreExposer_GetAppScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreExposer_GetAppScore_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreExposer_GetAppScore_Call {
	_c.Call.Return(run)
	return _c
}

// GetBehaviourPenalty provides a mock function with given fields: peerID
func (_m *MockPeerScoreExposer) GetBehaviourPenalty(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBehaviourPenalty")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreExposer_GetBehaviourPenalty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBehaviourPenalty'
type MockPeerScoreExposer_GetBehaviourPenalty_Call struct {
	*mock.Call
}

// GetBehaviourPenalty is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreExposer_Expecter) GetBehaviourPenalty(peerID interface{}) *MockPeerScoreExposer_GetBehaviourPenalty_Call {
	return &MockPeerScoreExposer_GetBehaviourPenalty_Call{Call: _e.mock.On("GetBehaviourPenalty", peerID)}
}

func (_c *MockPeerScoreExposer_GetBehaviourPenalty_Call) Run(run func(peerID peer.ID)) *MockPeerScoreExposer_GetBehaviourPenalty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreExposer_GetBehaviourPenalty_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreExposer_GetBehaviourPenalty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreExposer_GetBehaviourPenalty_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreExposer_GetBehaviourPenalty_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPColocationFactor provides a mock function with given fields: peerID
func (_m *MockPeerScoreExposer) GetIPColocationFactor(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetIPColocationFactor")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreExposer_GetIPColocationFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPColocationFactor'
type MockPeerScoreExposer_GetIPColocationFactor_Call struct {
	*mock.Call
}

// GetIPColocationFactor is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreExposer_Expecter) GetIPColocationFactor(peerID interface{}) *MockPeerScoreExposer_GetIPColocationFactor_Call {
	return &MockPeerScoreExposer_GetIPColocationFactor_Call{Call: _e.mock.On("GetIPColocationFactor", peerID)}
}

func (_c *MockPeerScoreExposer_GetIPColocationFactor_Call) Run(run func(peerID peer.ID)) *MockPeerScoreExposer_GetIPColocationFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreExposer_GetIPColocationFactor_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreExposer_GetIPColocationFactor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreExposer_GetIPColocationFactor_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreExposer_GetIPColocationFactor_Call {
	_c.Call.Return(run)
	return _c
}

// GetScore provides a mock function with given fields: peerID
func (_m *MockPeerScoreExposer) GetScore(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetScore")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreExposer_GetScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScore'
type MockPeerScoreExposer_GetScore_Call struct {
	*mock.Call
}

// GetScore is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreExposer_Expecter) GetScore(peerID interface{}) *MockPeerScoreExposer_GetScore_Call {
	return &MockPeerScoreExposer_GetScore_Call{Call: _e.mock.On("GetScore", peerID)}
}

func (_c *MockPeerScoreExposer_GetScore_Call) Run(run func(peerID peer.ID)) *MockPeerScoreExposer_GetScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreExposer_GetScore_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreExposer_GetScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreExposer_GetScore_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreExposer_GetScore_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopicScores provides a mock function with given fields: peerID
func (_m *MockPeerScoreExposer) GetTopicScores(peerID peer.ID) (map[string]p2p.TopicScoreSnapshot, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetTopicScores")
	}

	var r0 map[string]p2p.TopicScoreSnapshot
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (map[string]p2p.TopicScoreSnapshot, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) map[string]p2p.TopicScoreSnapshot); ok {
		r0 = rf(peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]p2p.TopicScoreSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreExposer_GetTopicScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopicScores'
type MockPeerScoreExposer_GetTopicScores_Call struct {
	*mock.Call
}

// GetTopicScores is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreExposer_Expecter) GetTopicScores(peerID interface{}) *MockPeerScoreExposer_GetTopicScores_Call {
	return &MockPeerScoreExposer_GetTopicScores_Call{Call: _e.mock.On("GetTopicScores", peerID)}
}

func (_c *MockPeerScoreExposer_GetTopicScores_Call) Run(run func(peerID peer.ID)) *MockPeerScoreExposer_GetTopicScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreExposer_GetTopicScores_Call) Return(_a0 map[string]p2p.TopicScoreSnapshot, _a1 bool) *MockPeerScoreExposer_GetTopicScores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreExposer_GetTopicScores_Call) RunAndReturn(run func(peer.ID) (map[string]p2p.TopicScoreSnapshot, bool)) *MockPeerScoreExposer_GetTopicScores_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPeerScoreExposer creates a new instance of MockPeerScoreExposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeerScoreExposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeerScoreExposer {
	mock := &MockPeerScoreExposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
