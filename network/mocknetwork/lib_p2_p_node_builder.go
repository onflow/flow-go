// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/libp2p/go-libp2p-pubsub"

	zerolog "github.com/rs/zerolog"
)

// LibP2PNodeBuilder is an autogenerated mock type for the LibP2PNodeBuilder type
type LibP2PNodeBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields: _a0
func (_m *LibP2PNodeBuilder) Build(_a0 context.Context) (*p2p.Node, error) {
	ret := _m.Called(_a0)

	var r0 *p2p.Node
	if rf, ok := ret.Get(0).(func(context.Context) *p2p.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*p2p.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConnectionGater provides a mock function with given fields: _a0
func (_m *LibP2PNodeBuilder) SetConnectionGater(_a0 *p2p.ConnGater) p2p.LibP2PNodeBuilder {
	ret := _m.Called(_a0)

	var r0 p2p.LibP2PNodeBuilder
	if rf, ok := ret.Get(0).(func(*p2p.ConnGater) p2p.LibP2PNodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNodeBuilder)
		}
	}

	return r0
}

// SetConnectionManager provides a mock function with given fields: _a0
func (_m *LibP2PNodeBuilder) SetConnectionManager(_a0 *p2p.ConnManager) p2p.LibP2PNodeBuilder {
	ret := _m.Called(_a0)

	var r0 p2p.LibP2PNodeBuilder
	if rf, ok := ret.Get(0).(func(*p2p.ConnManager) p2p.LibP2PNodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNodeBuilder)
		}
	}

	return r0
}

// SetLogger provides a mock function with given fields: _a0
func (_m *LibP2PNodeBuilder) SetLogger(_a0 zerolog.Logger) p2p.LibP2PNodeBuilder {
	ret := _m.Called(_a0)

	var r0 p2p.LibP2PNodeBuilder
	if rf, ok := ret.Get(0).(func(zerolog.Logger) p2p.LibP2PNodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNodeBuilder)
		}
	}

	return r0
}

// SetPingInfoProvider provides a mock function with given fields: _a0
func (_m *LibP2PNodeBuilder) SetPingInfoProvider(_a0 p2p.PingInfoProvider) p2p.LibP2PNodeBuilder {
	ret := _m.Called(_a0)

	var r0 p2p.LibP2PNodeBuilder
	if rf, ok := ret.Get(0).(func(p2p.PingInfoProvider) p2p.LibP2PNodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNodeBuilder)
		}
	}

	return r0
}

// SetPubsubOptions provides a mock function with given fields: _a0
func (_m *LibP2PNodeBuilder) SetPubsubOptions(_a0 ...pubsub.Option) p2p.LibP2PNodeBuilder {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 p2p.LibP2PNodeBuilder
	if rf, ok := ret.Get(0).(func(...pubsub.Option) p2p.LibP2PNodeBuilder); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNodeBuilder)
		}
	}

	return r0
}

// SetRootBlockID provides a mock function with given fields: _a0
func (_m *LibP2PNodeBuilder) SetRootBlockID(_a0 string) p2p.LibP2PNodeBuilder {
	ret := _m.Called(_a0)

	var r0 p2p.LibP2PNodeBuilder
	if rf, ok := ret.Get(0).(func(string) p2p.LibP2PNodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNodeBuilder)
		}
	}

	return r0
}
