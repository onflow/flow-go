// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	message "github.com/onflow/flow-go/network/message"

	mock "github.com/stretchr/testify/mock"
)

// MockOutgoingMessageScope is an autogenerated mock type for the OutgoingMessageScope type
type MockOutgoingMessageScope struct {
	mock.Mock
}

type MockOutgoingMessageScope_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOutgoingMessageScope) EXPECT() *MockOutgoingMessageScope_Expecter {
	return &MockOutgoingMessageScope_Expecter{mock: &_m.Mock}
}

// PayloadType provides a mock function with no fields
func (_m *MockOutgoingMessageScope) PayloadType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PayloadType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockOutgoingMessageScope_PayloadType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayloadType'
type MockOutgoingMessageScope_PayloadType_Call struct {
	*mock.Call
}

// PayloadType is a helper method to define mock.On call
func (_e *MockOutgoingMessageScope_Expecter) PayloadType() *MockOutgoingMessageScope_PayloadType_Call {
	return &MockOutgoingMessageScope_PayloadType_Call{Call: _e.mock.On("PayloadType")}
}

func (_c *MockOutgoingMessageScope_PayloadType_Call) Run(run func()) *MockOutgoingMessageScope_PayloadType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOutgoingMessageScope_PayloadType_Call) Return(_a0 string) *MockOutgoingMessageScope_PayloadType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutgoingMessageScope_PayloadType_Call) RunAndReturn(run func() string) *MockOutgoingMessageScope_PayloadType_Call {
	_c.Call.Return(run)
	return _c
}

// Proto provides a mock function with no fields
func (_m *MockOutgoingMessageScope) Proto() *message.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Proto")
	}

	var r0 *message.Message
	if rf, ok := ret.Get(0).(func() *message.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Message)
		}
	}

	return r0
}

// MockOutgoingMessageScope_Proto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Proto'
type MockOutgoingMessageScope_Proto_Call struct {
	*mock.Call
}

// Proto is a helper method to define mock.On call
func (_e *MockOutgoingMessageScope_Expecter) Proto() *MockOutgoingMessageScope_Proto_Call {
	return &MockOutgoingMessageScope_Proto_Call{Call: _e.mock.On("Proto")}
}

func (_c *MockOutgoingMessageScope_Proto_Call) Run(run func()) *MockOutgoingMessageScope_Proto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOutgoingMessageScope_Proto_Call) Return(_a0 *message.Message) *MockOutgoingMessageScope_Proto_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutgoingMessageScope_Proto_Call) RunAndReturn(run func() *message.Message) *MockOutgoingMessageScope_Proto_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockOutgoingMessageScope) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockOutgoingMessageScope_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockOutgoingMessageScope_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockOutgoingMessageScope_Expecter) Size() *MockOutgoingMessageScope_Size_Call {
	return &MockOutgoingMessageScope_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockOutgoingMessageScope_Size_Call) Run(run func()) *MockOutgoingMessageScope_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOutgoingMessageScope_Size_Call) Return(_a0 int) *MockOutgoingMessageScope_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutgoingMessageScope_Size_Call) RunAndReturn(run func() int) *MockOutgoingMessageScope_Size_Call {
	_c.Call.Return(run)
	return _c
}

// TargetIds provides a mock function with no fields
func (_m *MockOutgoingMessageScope) TargetIds() flow.IdentifierList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetIds")
	}

	var r0 flow.IdentifierList
	if rf, ok := ret.Get(0).(func() flow.IdentifierList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentifierList)
		}
	}

	return r0
}

// MockOutgoingMessageScope_TargetIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TargetIds'
type MockOutgoingMessageScope_TargetIds_Call struct {
	*mock.Call
}

// TargetIds is a helper method to define mock.On call
func (_e *MockOutgoingMessageScope_Expecter) TargetIds() *MockOutgoingMessageScope_TargetIds_Call {
	return &MockOutgoingMessageScope_TargetIds_Call{Call: _e.mock.On("TargetIds")}
}

func (_c *MockOutgoingMessageScope_TargetIds_Call) Run(run func()) *MockOutgoingMessageScope_TargetIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOutgoingMessageScope_TargetIds_Call) Return(_a0 flow.IdentifierList) *MockOutgoingMessageScope_TargetIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutgoingMessageScope_TargetIds_Call) RunAndReturn(run func() flow.IdentifierList) *MockOutgoingMessageScope_TargetIds_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with no fields
func (_m *MockOutgoingMessageScope) Topic() channels.Topic {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 channels.Topic
	if rf, ok := ret.Get(0).(func() channels.Topic); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(channels.Topic)
	}

	return r0
}

// MockOutgoingMessageScope_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type MockOutgoingMessageScope_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *MockOutgoingMessageScope_Expecter) Topic() *MockOutgoingMessageScope_Topic_Call {
	return &MockOutgoingMessageScope_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *MockOutgoingMessageScope_Topic_Call) Run(run func()) *MockOutgoingMessageScope_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOutgoingMessageScope_Topic_Call) Return(_a0 channels.Topic) *MockOutgoingMessageScope_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutgoingMessageScope_Topic_Call) RunAndReturn(run func() channels.Topic) *MockOutgoingMessageScope_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOutgoingMessageScope creates a new instance of MockOutgoingMessageScope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOutgoingMessageScope(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOutgoingMessageScope {
	mock := &MockOutgoingMessageScope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
