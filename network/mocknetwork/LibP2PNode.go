// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	component "github.com/onflow/flow-go/module/component"
	channels "github.com/onflow/flow-go/network/channels"

	context "context"

	corenetwork "github.com/libp2p/go-libp2p/core/network"

	flow "github.com/onflow/flow-go/model/flow"

	host "github.com/libp2p/go-libp2p/core/host"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	kbucket "github.com/libp2p/go-libp2p-kbucket"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"

	protocols "github.com/onflow/flow-go/network/p2p/unicast/protocols"

	routing "github.com/libp2p/go-libp2p/core/routing"
)

// MockLibP2PNode is an autogenerated mock type for the LibP2PNode type
type MockLibP2PNode struct {
	mock.Mock
}

type MockLibP2PNode_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLibP2PNode) EXPECT() *MockLibP2PNode_Expecter {
	return &MockLibP2PNode_Expecter{mock: &_m.Mock}
}

// ActiveClustersChanged provides a mock function with given fields: _a0
func (_m *MockLibP2PNode) ActiveClustersChanged(_a0 flow.ChainIDList) {
	_m.Called(_a0)
}

// MockLibP2PNode_ActiveClustersChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActiveClustersChanged'
type MockLibP2PNode_ActiveClustersChanged_Call struct {
	*mock.Call
}

// ActiveClustersChanged is a helper method to define mock.On call
//   - _a0 flow.ChainIDList
func (_e *MockLibP2PNode_Expecter) ActiveClustersChanged(_a0 interface{}) *MockLibP2PNode_ActiveClustersChanged_Call {
	return &MockLibP2PNode_ActiveClustersChanged_Call{Call: _e.mock.On("ActiveClustersChanged", _a0)}
}

func (_c *MockLibP2PNode_ActiveClustersChanged_Call) Run(run func(_a0 flow.ChainIDList)) *MockLibP2PNode_ActiveClustersChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ChainIDList))
	})
	return _c
}

func (_c *MockLibP2PNode_ActiveClustersChanged_Call) Return() *MockLibP2PNode_ActiveClustersChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_ActiveClustersChanged_Call) RunAndReturn(run func(flow.ChainIDList)) *MockLibP2PNode_ActiveClustersChanged_Call {
	_c.Run(run)
	return _c
}

// ConnectToPeer provides a mock function with given fields: ctx, peerInfo
func (_m *MockLibP2PNode) ConnectToPeer(ctx context.Context, peerInfo peer.AddrInfo) error {
	ret := _m.Called(ctx, peerInfo)

	if len(ret) == 0 {
		panic("no return value specified for ConnectToPeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.AddrInfo) error); ok {
		r0 = rf(ctx, peerInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_ConnectToPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectToPeer'
type MockLibP2PNode_ConnectToPeer_Call struct {
	*mock.Call
}

// ConnectToPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - peerInfo peer.AddrInfo
func (_e *MockLibP2PNode_Expecter) ConnectToPeer(ctx interface{}, peerInfo interface{}) *MockLibP2PNode_ConnectToPeer_Call {
	return &MockLibP2PNode_ConnectToPeer_Call{Call: _e.mock.On("ConnectToPeer", ctx, peerInfo)}
}

func (_c *MockLibP2PNode_ConnectToPeer_Call) Run(run func(ctx context.Context, peerInfo peer.AddrInfo)) *MockLibP2PNode_ConnectToPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.AddrInfo))
	})
	return _c
}

func (_c *MockLibP2PNode_ConnectToPeer_Call) Return(_a0 error) *MockLibP2PNode_ConnectToPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_ConnectToPeer_Call) RunAndReturn(run func(context.Context, peer.AddrInfo) error) *MockLibP2PNode_ConnectToPeer_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockLibP2PNode) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockLibP2PNode_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockLibP2PNode_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) Done() *MockLibP2PNode_Done_Call {
	return &MockLibP2PNode_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockLibP2PNode_Done_Call) Run(run func()) *MockLibP2PNode_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_Done_Call) Return(_a0 <-chan struct{}) *MockLibP2PNode_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockLibP2PNode_Done_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPPort provides a mock function with no fields
func (_m *MockLibP2PNode) GetIPPort() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIPPort")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLibP2PNode_GetIPPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPPort'
type MockLibP2PNode_GetIPPort_Call struct {
	*mock.Call
}

// GetIPPort is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) GetIPPort() *MockLibP2PNode_GetIPPort_Call {
	return &MockLibP2PNode_GetIPPort_Call{Call: _e.mock.On("GetIPPort")}
}

func (_c *MockLibP2PNode_GetIPPort_Call) Run(run func()) *MockLibP2PNode_GetIPPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_GetIPPort_Call) Return(_a0 string, _a1 string, _a2 error) *MockLibP2PNode_GetIPPort_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLibP2PNode_GetIPPort_Call) RunAndReturn(run func() (string, string, error)) *MockLibP2PNode_GetIPPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalMeshPeers provides a mock function with given fields: topic
func (_m *MockLibP2PNode) GetLocalMeshPeers(topic channels.Topic) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalMeshPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(channels.Topic) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockLibP2PNode_GetLocalMeshPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalMeshPeers'
type MockLibP2PNode_GetLocalMeshPeers_Call struct {
	*mock.Call
}

// GetLocalMeshPeers is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockLibP2PNode_Expecter) GetLocalMeshPeers(topic interface{}) *MockLibP2PNode_GetLocalMeshPeers_Call {
	return &MockLibP2PNode_GetLocalMeshPeers_Call{Call: _e.mock.On("GetLocalMeshPeers", topic)}
}

func (_c *MockLibP2PNode_GetLocalMeshPeers_Call) Run(run func(topic channels.Topic)) *MockLibP2PNode_GetLocalMeshPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockLibP2PNode_GetLocalMeshPeers_Call) Return(_a0 []peer.ID) *MockLibP2PNode_GetLocalMeshPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_GetLocalMeshPeers_Call) RunAndReturn(run func(channels.Topic) []peer.ID) *MockLibP2PNode_GetLocalMeshPeers_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeersForProtocol provides a mock function with given fields: pid
func (_m *MockLibP2PNode) GetPeersForProtocol(pid protocol.ID) peer.IDSlice {
	ret := _m.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for GetPeersForProtocol")
	}

	var r0 peer.IDSlice
	if rf, ok := ret.Get(0).(func(protocol.ID) peer.IDSlice); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peer.IDSlice)
		}
	}

	return r0
}

// MockLibP2PNode_GetPeersForProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeersForProtocol'
type MockLibP2PNode_GetPeersForProtocol_Call struct {
	*mock.Call
}

// GetPeersForProtocol is a helper method to define mock.On call
//   - pid protocol.ID
func (_e *MockLibP2PNode_Expecter) GetPeersForProtocol(pid interface{}) *MockLibP2PNode_GetPeersForProtocol_Call {
	return &MockLibP2PNode_GetPeersForProtocol_Call{Call: _e.mock.On("GetPeersForProtocol", pid)}
}

func (_c *MockLibP2PNode_GetPeersForProtocol_Call) Run(run func(pid protocol.ID)) *MockLibP2PNode_GetPeersForProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID))
	})
	return _c
}

func (_c *MockLibP2PNode_GetPeersForProtocol_Call) Return(_a0 peer.IDSlice) *MockLibP2PNode_GetPeersForProtocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_GetPeersForProtocol_Call) RunAndReturn(run func(protocol.ID) peer.IDSlice) *MockLibP2PNode_GetPeersForProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// HasSubscription provides a mock function with given fields: topic
func (_m *MockLibP2PNode) HasSubscription(topic channels.Topic) bool {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for HasSubscription")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(channels.Topic) bool); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockLibP2PNode_HasSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSubscription'
type MockLibP2PNode_HasSubscription_Call struct {
	*mock.Call
}

// HasSubscription is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockLibP2PNode_Expecter) HasSubscription(topic interface{}) *MockLibP2PNode_HasSubscription_Call {
	return &MockLibP2PNode_HasSubscription_Call{Call: _e.mock.On("HasSubscription", topic)}
}

func (_c *MockLibP2PNode_HasSubscription_Call) Run(run func(topic channels.Topic)) *MockLibP2PNode_HasSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockLibP2PNode_HasSubscription_Call) Return(_a0 bool) *MockLibP2PNode_HasSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_HasSubscription_Call) RunAndReturn(run func(channels.Topic) bool) *MockLibP2PNode_HasSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// Host provides a mock function with no fields
func (_m *MockLibP2PNode) Host() host.Host {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 host.Host
	if rf, ok := ret.Get(0).(func() host.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(host.Host)
		}
	}

	return r0
}

// MockLibP2PNode_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type MockLibP2PNode_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) Host() *MockLibP2PNode_Host_Call {
	return &MockLibP2PNode_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *MockLibP2PNode_Host_Call) Run(run func()) *MockLibP2PNode_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_Host_Call) Return(_a0 host.Host) *MockLibP2PNode_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_Host_Call) RunAndReturn(run func() host.Host) *MockLibP2PNode_Host_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockLibP2PNode) ID() peer.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 peer.ID
	if rf, ok := ret.Get(0).(func() peer.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	return r0
}

// MockLibP2PNode_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockLibP2PNode_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) ID() *MockLibP2PNode_ID_Call {
	return &MockLibP2PNode_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockLibP2PNode_ID_Call) Run(run func()) *MockLibP2PNode_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_ID_Call) Return(_a0 peer.ID) *MockLibP2PNode_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_ID_Call) RunAndReturn(run func() peer.ID) *MockLibP2PNode_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnected provides a mock function with given fields: peerID
func (_m *MockLibP2PNode) IsConnected(peerID peer.ID) (bool, error) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID) (bool, error)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) bool); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLibP2PNode_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type MockLibP2PNode_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockLibP2PNode_Expecter) IsConnected(peerID interface{}) *MockLibP2PNode_IsConnected_Call {
	return &MockLibP2PNode_IsConnected_Call{Call: _e.mock.On("IsConnected", peerID)}
}

func (_c *MockLibP2PNode_IsConnected_Call) Run(run func(peerID peer.ID)) *MockLibP2PNode_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockLibP2PNode_IsConnected_Call) Return(_a0 bool, _a1 error) *MockLibP2PNode_IsConnected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLibP2PNode_IsConnected_Call) RunAndReturn(run func(peer.ID) (bool, error)) *MockLibP2PNode_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// IsDisallowListed provides a mock function with given fields: peerId
func (_m *MockLibP2PNode) IsDisallowListed(peerId peer.ID) ([]network.DisallowListedCause, bool) {
	ret := _m.Called(peerId)

	if len(ret) == 0 {
		panic("no return value specified for IsDisallowListed")
	}

	var r0 []network.DisallowListedCause
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) ([]network.DisallowListedCause, bool)); ok {
		return rf(peerId)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) []network.DisallowListedCause); ok {
		r0 = rf(peerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.DisallowListedCause)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockLibP2PNode_IsDisallowListed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDisallowListed'
type MockLibP2PNode_IsDisallowListed_Call struct {
	*mock.Call
}

// IsDisallowListed is a helper method to define mock.On call
//   - peerId peer.ID
func (_e *MockLibP2PNode_Expecter) IsDisallowListed(peerId interface{}) *MockLibP2PNode_IsDisallowListed_Call {
	return &MockLibP2PNode_IsDisallowListed_Call{Call: _e.mock.On("IsDisallowListed", peerId)}
}

func (_c *MockLibP2PNode_IsDisallowListed_Call) Run(run func(peerId peer.ID)) *MockLibP2PNode_IsDisallowListed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockLibP2PNode_IsDisallowListed_Call) Return(_a0 []network.DisallowListedCause, _a1 bool) *MockLibP2PNode_IsDisallowListed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLibP2PNode_IsDisallowListed_Call) RunAndReturn(run func(peer.ID) ([]network.DisallowListedCause, bool)) *MockLibP2PNode_IsDisallowListed_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeers provides a mock function with given fields: topic
func (_m *MockLibP2PNode) ListPeers(topic string) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for ListPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(string) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockLibP2PNode_ListPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeers'
type MockLibP2PNode_ListPeers_Call struct {
	*mock.Call
}

// ListPeers is a helper method to define mock.On call
//   - topic string
func (_e *MockLibP2PNode_Expecter) ListPeers(topic interface{}) *MockLibP2PNode_ListPeers_Call {
	return &MockLibP2PNode_ListPeers_Call{Call: _e.mock.On("ListPeers", topic)}
}

func (_c *MockLibP2PNode_ListPeers_Call) Run(run func(topic string)) *MockLibP2PNode_ListPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLibP2PNode_ListPeers_Call) Return(_a0 []peer.ID) *MockLibP2PNode_ListPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_ListPeers_Call) RunAndReturn(run func(string) []peer.ID) *MockLibP2PNode_ListPeers_Call {
	_c.Call.Return(run)
	return _c
}

// OnAllowListNotification provides a mock function with given fields: id, cause
func (_m *MockLibP2PNode) OnAllowListNotification(id peer.ID, cause network.DisallowListedCause) {
	_m.Called(id, cause)
}

// MockLibP2PNode_OnAllowListNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAllowListNotification'
type MockLibP2PNode_OnAllowListNotification_Call struct {
	*mock.Call
}

// OnAllowListNotification is a helper method to define mock.On call
//   - id peer.ID
//   - cause network.DisallowListedCause
func (_e *MockLibP2PNode_Expecter) OnAllowListNotification(id interface{}, cause interface{}) *MockLibP2PNode_OnAllowListNotification_Call {
	return &MockLibP2PNode_OnAllowListNotification_Call{Call: _e.mock.On("OnAllowListNotification", id, cause)}
}

func (_c *MockLibP2PNode_OnAllowListNotification_Call) Run(run func(id peer.ID, cause network.DisallowListedCause)) *MockLibP2PNode_OnAllowListNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(network.DisallowListedCause))
	})
	return _c
}

func (_c *MockLibP2PNode_OnAllowListNotification_Call) Return() *MockLibP2PNode_OnAllowListNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_OnAllowListNotification_Call) RunAndReturn(run func(peer.ID, network.DisallowListedCause)) *MockLibP2PNode_OnAllowListNotification_Call {
	_c.Run(run)
	return _c
}

// OnDisallowListNotification provides a mock function with given fields: id, cause
func (_m *MockLibP2PNode) OnDisallowListNotification(id peer.ID, cause network.DisallowListedCause) {
	_m.Called(id, cause)
}

// MockLibP2PNode_OnDisallowListNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDisallowListNotification'
type MockLibP2PNode_OnDisallowListNotification_Call struct {
	*mock.Call
}

// OnDisallowListNotification is a helper method to define mock.On call
//   - id peer.ID
//   - cause network.DisallowListedCause
func (_e *MockLibP2PNode_Expecter) OnDisallowListNotification(id interface{}, cause interface{}) *MockLibP2PNode_OnDisallowListNotification_Call {
	return &MockLibP2PNode_OnDisallowListNotification_Call{Call: _e.mock.On("OnDisallowListNotification", id, cause)}
}

func (_c *MockLibP2PNode_OnDisallowListNotification_Call) Run(run func(id peer.ID, cause network.DisallowListedCause)) *MockLibP2PNode_OnDisallowListNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(network.DisallowListedCause))
	})
	return _c
}

func (_c *MockLibP2PNode_OnDisallowListNotification_Call) Return() *MockLibP2PNode_OnDisallowListNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_OnDisallowListNotification_Call) RunAndReturn(run func(peer.ID, network.DisallowListedCause)) *MockLibP2PNode_OnDisallowListNotification_Call {
	_c.Run(run)
	return _c
}

// OpenAndWriteOnStream provides a mock function with given fields: ctx, peerID, protectionTag, writingLogic
func (_m *MockLibP2PNode) OpenAndWriteOnStream(ctx context.Context, peerID peer.ID, protectionTag string, writingLogic func(corenetwork.Stream) error) error {
	ret := _m.Called(ctx, peerID, protectionTag, writingLogic)

	if len(ret) == 0 {
		panic("no return value specified for OpenAndWriteOnStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, string, func(corenetwork.Stream) error) error); ok {
		r0 = rf(ctx, peerID, protectionTag, writingLogic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_OpenAndWriteOnStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAndWriteOnStream'
type MockLibP2PNode_OpenAndWriteOnStream_Call struct {
	*mock.Call
}

// OpenAndWriteOnStream is a helper method to define mock.On call
//   - ctx context.Context
//   - peerID peer.ID
//   - protectionTag string
//   - writingLogic func(corenetwork.Stream) error
func (_e *MockLibP2PNode_Expecter) OpenAndWriteOnStream(ctx interface{}, peerID interface{}, protectionTag interface{}, writingLogic interface{}) *MockLibP2PNode_OpenAndWriteOnStream_Call {
	return &MockLibP2PNode_OpenAndWriteOnStream_Call{Call: _e.mock.On("OpenAndWriteOnStream", ctx, peerID, protectionTag, writingLogic)}
}

func (_c *MockLibP2PNode_OpenAndWriteOnStream_Call) Run(run func(ctx context.Context, peerID peer.ID, protectionTag string, writingLogic func(corenetwork.Stream) error)) *MockLibP2PNode_OpenAndWriteOnStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.ID), args[2].(string), args[3].(func(corenetwork.Stream) error))
	})
	return _c
}

func (_c *MockLibP2PNode_OpenAndWriteOnStream_Call) Return(_a0 error) *MockLibP2PNode_OpenAndWriteOnStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_OpenAndWriteOnStream_Call) RunAndReturn(run func(context.Context, peer.ID, string, func(corenetwork.Stream) error) error) *MockLibP2PNode_OpenAndWriteOnStream_Call {
	_c.Call.Return(run)
	return _c
}

// PeerManagerComponent provides a mock function with no fields
func (_m *MockLibP2PNode) PeerManagerComponent() component.Component {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PeerManagerComponent")
	}

	var r0 component.Component
	if rf, ok := ret.Get(0).(func() component.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Component)
		}
	}

	return r0
}

// MockLibP2PNode_PeerManagerComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerManagerComponent'
type MockLibP2PNode_PeerManagerComponent_Call struct {
	*mock.Call
}

// PeerManagerComponent is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) PeerManagerComponent() *MockLibP2PNode_PeerManagerComponent_Call {
	return &MockLibP2PNode_PeerManagerComponent_Call{Call: _e.mock.On("PeerManagerComponent")}
}

func (_c *MockLibP2PNode_PeerManagerComponent_Call) Run(run func()) *MockLibP2PNode_PeerManagerComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_PeerManagerComponent_Call) Return(_a0 component.Component) *MockLibP2PNode_PeerManagerComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_PeerManagerComponent_Call) RunAndReturn(run func() component.Component) *MockLibP2PNode_PeerManagerComponent_Call {
	_c.Call.Return(run)
	return _c
}

// PeerScoreExposer provides a mock function with no fields
func (_m *MockLibP2PNode) PeerScoreExposer() p2p.PeerScoreExposer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PeerScoreExposer")
	}

	var r0 p2p.PeerScoreExposer
	if rf, ok := ret.Get(0).(func() p2p.PeerScoreExposer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.PeerScoreExposer)
		}
	}

	return r0
}

// MockLibP2PNode_PeerScoreExposer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerScoreExposer'
type MockLibP2PNode_PeerScoreExposer_Call struct {
	*mock.Call
}

// PeerScoreExposer is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) PeerScoreExposer() *MockLibP2PNode_PeerScoreExposer_Call {
	return &MockLibP2PNode_PeerScoreExposer_Call{Call: _e.mock.On("PeerScoreExposer")}
}

func (_c *MockLibP2PNode_PeerScoreExposer_Call) Run(run func()) *MockLibP2PNode_PeerScoreExposer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_PeerScoreExposer_Call) Return(_a0 p2p.PeerScoreExposer) *MockLibP2PNode_PeerScoreExposer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_PeerScoreExposer_Call) RunAndReturn(run func() p2p.PeerScoreExposer) *MockLibP2PNode_PeerScoreExposer_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, messageScope
func (_m *MockLibP2PNode) Publish(ctx context.Context, messageScope network.OutgoingMessageScope) error {
	ret := _m.Called(ctx, messageScope)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, network.OutgoingMessageScope) error); ok {
		r0 = rf(ctx, messageScope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockLibP2PNode_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - messageScope network.OutgoingMessageScope
func (_e *MockLibP2PNode_Expecter) Publish(ctx interface{}, messageScope interface{}) *MockLibP2PNode_Publish_Call {
	return &MockLibP2PNode_Publish_Call{Call: _e.mock.On("Publish", ctx, messageScope)}
}

func (_c *MockLibP2PNode_Publish_Call) Run(run func(ctx context.Context, messageScope network.OutgoingMessageScope)) *MockLibP2PNode_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(network.OutgoingMessageScope))
	})
	return _c
}

func (_c *MockLibP2PNode_Publish_Call) Return(_a0 error) *MockLibP2PNode_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_Publish_Call) RunAndReturn(run func(context.Context, network.OutgoingMessageScope) error) *MockLibP2PNode_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockLibP2PNode) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockLibP2PNode_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockLibP2PNode_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) Ready() *MockLibP2PNode_Ready_Call {
	return &MockLibP2PNode_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockLibP2PNode_Ready_Call) Run(run func()) *MockLibP2PNode_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_Ready_Call) Return(_a0 <-chan struct{}) *MockLibP2PNode_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockLibP2PNode_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePeer provides a mock function with given fields: peerID
func (_m *MockLibP2PNode) RemovePeer(peerID peer.ID) error {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID) error); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_RemovePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePeer'
type MockLibP2PNode_RemovePeer_Call struct {
	*mock.Call
}

// RemovePeer is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockLibP2PNode_Expecter) RemovePeer(peerID interface{}) *MockLibP2PNode_RemovePeer_Call {
	return &MockLibP2PNode_RemovePeer_Call{Call: _e.mock.On("RemovePeer", peerID)}
}

func (_c *MockLibP2PNode_RemovePeer_Call) Run(run func(peerID peer.ID)) *MockLibP2PNode_RemovePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockLibP2PNode_RemovePeer_Call) Return(_a0 error) *MockLibP2PNode_RemovePeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_RemovePeer_Call) RunAndReturn(run func(peer.ID) error) *MockLibP2PNode_RemovePeer_Call {
	_c.Call.Return(run)
	return _c
}

// RequestPeerUpdate provides a mock function with no fields
func (_m *MockLibP2PNode) RequestPeerUpdate() {
	_m.Called()
}

// MockLibP2PNode_RequestPeerUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPeerUpdate'
type MockLibP2PNode_RequestPeerUpdate_Call struct {
	*mock.Call
}

// RequestPeerUpdate is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) RequestPeerUpdate() *MockLibP2PNode_RequestPeerUpdate_Call {
	return &MockLibP2PNode_RequestPeerUpdate_Call{Call: _e.mock.On("RequestPeerUpdate")}
}

func (_c *MockLibP2PNode_RequestPeerUpdate_Call) Run(run func()) *MockLibP2PNode_RequestPeerUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_RequestPeerUpdate_Call) Return() *MockLibP2PNode_RequestPeerUpdate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_RequestPeerUpdate_Call) RunAndReturn(run func()) *MockLibP2PNode_RequestPeerUpdate_Call {
	_c.Run(run)
	return _c
}

// Routing provides a mock function with no fields
func (_m *MockLibP2PNode) Routing() routing.Routing {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Routing")
	}

	var r0 routing.Routing
	if rf, ok := ret.Get(0).(func() routing.Routing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(routing.Routing)
		}
	}

	return r0
}

// MockLibP2PNode_Routing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routing'
type MockLibP2PNode_Routing_Call struct {
	*mock.Call
}

// Routing is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) Routing() *MockLibP2PNode_Routing_Call {
	return &MockLibP2PNode_Routing_Call{Call: _e.mock.On("Routing")}
}

func (_c *MockLibP2PNode_Routing_Call) Run(run func()) *MockLibP2PNode_Routing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_Routing_Call) Return(_a0 routing.Routing) *MockLibP2PNode_Routing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_Routing_Call) RunAndReturn(run func() routing.Routing) *MockLibP2PNode_Routing_Call {
	_c.Call.Return(run)
	return _c
}

// RoutingTable provides a mock function with no fields
func (_m *MockLibP2PNode) RoutingTable() *kbucket.RoutingTable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RoutingTable")
	}

	var r0 *kbucket.RoutingTable
	if rf, ok := ret.Get(0).(func() *kbucket.RoutingTable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kbucket.RoutingTable)
		}
	}

	return r0
}

// MockLibP2PNode_RoutingTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoutingTable'
type MockLibP2PNode_RoutingTable_Call struct {
	*mock.Call
}

// RoutingTable is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) RoutingTable() *MockLibP2PNode_RoutingTable_Call {
	return &MockLibP2PNode_RoutingTable_Call{Call: _e.mock.On("RoutingTable")}
}

func (_c *MockLibP2PNode_RoutingTable_Call) Run(run func()) *MockLibP2PNode_RoutingTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_RoutingTable_Call) Return(_a0 *kbucket.RoutingTable) *MockLibP2PNode_RoutingTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_RoutingTable_Call) RunAndReturn(run func() *kbucket.RoutingTable) *MockLibP2PNode_RoutingTable_Call {
	_c.Call.Return(run)
	return _c
}

// SetComponentManager provides a mock function with given fields: cm
func (_m *MockLibP2PNode) SetComponentManager(cm *component.ComponentManager) {
	_m.Called(cm)
}

// MockLibP2PNode_SetComponentManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetComponentManager'
type MockLibP2PNode_SetComponentManager_Call struct {
	*mock.Call
}

// SetComponentManager is a helper method to define mock.On call
//   - cm *component.ComponentManager
func (_e *MockLibP2PNode_Expecter) SetComponentManager(cm interface{}) *MockLibP2PNode_SetComponentManager_Call {
	return &MockLibP2PNode_SetComponentManager_Call{Call: _e.mock.On("SetComponentManager", cm)}
}

func (_c *MockLibP2PNode_SetComponentManager_Call) Run(run func(cm *component.ComponentManager)) *MockLibP2PNode_SetComponentManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*component.ComponentManager))
	})
	return _c
}

func (_c *MockLibP2PNode_SetComponentManager_Call) Return() *MockLibP2PNode_SetComponentManager_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_SetComponentManager_Call) RunAndReturn(run func(*component.ComponentManager)) *MockLibP2PNode_SetComponentManager_Call {
	_c.Run(run)
	return _c
}

// SetPubSub provides a mock function with given fields: ps
func (_m *MockLibP2PNode) SetPubSub(ps p2p.PubSubAdapter) {
	_m.Called(ps)
}

// MockLibP2PNode_SetPubSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPubSub'
type MockLibP2PNode_SetPubSub_Call struct {
	*mock.Call
}

// SetPubSub is a helper method to define mock.On call
//   - ps p2p.PubSubAdapter
func (_e *MockLibP2PNode_Expecter) SetPubSub(ps interface{}) *MockLibP2PNode_SetPubSub_Call {
	return &MockLibP2PNode_SetPubSub_Call{Call: _e.mock.On("SetPubSub", ps)}
}

func (_c *MockLibP2PNode_SetPubSub_Call) Run(run func(ps p2p.PubSubAdapter)) *MockLibP2PNode_SetPubSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.PubSubAdapter))
	})
	return _c
}

func (_c *MockLibP2PNode_SetPubSub_Call) Return() *MockLibP2PNode_SetPubSub_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_SetPubSub_Call) RunAndReturn(run func(p2p.PubSubAdapter)) *MockLibP2PNode_SetPubSub_Call {
	_c.Run(run)
	return _c
}

// SetRouting provides a mock function with given fields: r
func (_m *MockLibP2PNode) SetRouting(r routing.Routing) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SetRouting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(routing.Routing) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_SetRouting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRouting'
type MockLibP2PNode_SetRouting_Call struct {
	*mock.Call
}

// SetRouting is a helper method to define mock.On call
//   - r routing.Routing
func (_e *MockLibP2PNode_Expecter) SetRouting(r interface{}) *MockLibP2PNode_SetRouting_Call {
	return &MockLibP2PNode_SetRouting_Call{Call: _e.mock.On("SetRouting", r)}
}

func (_c *MockLibP2PNode_SetRouting_Call) Run(run func(r routing.Routing)) *MockLibP2PNode_SetRouting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(routing.Routing))
	})
	return _c
}

func (_c *MockLibP2PNode_SetRouting_Call) Return(_a0 error) *MockLibP2PNode_SetRouting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_SetRouting_Call) RunAndReturn(run func(routing.Routing) error) *MockLibP2PNode_SetRouting_Call {
	_c.Call.Return(run)
	return _c
}

// SetUnicastManager provides a mock function with given fields: uniMgr
func (_m *MockLibP2PNode) SetUnicastManager(uniMgr p2p.UnicastManager) {
	_m.Called(uniMgr)
}

// MockLibP2PNode_SetUnicastManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUnicastManager'
type MockLibP2PNode_SetUnicastManager_Call struct {
	*mock.Call
}

// SetUnicastManager is a helper method to define mock.On call
//   - uniMgr p2p.UnicastManager
func (_e *MockLibP2PNode_Expecter) SetUnicastManager(uniMgr interface{}) *MockLibP2PNode_SetUnicastManager_Call {
	return &MockLibP2PNode_SetUnicastManager_Call{Call: _e.mock.On("SetUnicastManager", uniMgr)}
}

func (_c *MockLibP2PNode_SetUnicastManager_Call) Run(run func(uniMgr p2p.UnicastManager)) *MockLibP2PNode_SetUnicastManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.UnicastManager))
	})
	return _c
}

func (_c *MockLibP2PNode_SetUnicastManager_Call) Return() *MockLibP2PNode_SetUnicastManager_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_SetUnicastManager_Call) RunAndReturn(run func(p2p.UnicastManager)) *MockLibP2PNode_SetUnicastManager_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockLibP2PNode) Start(ctx irrecoverable.SignalerContext) {
	_m.Called(ctx)
}

// MockLibP2PNode_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockLibP2PNode_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx irrecoverable.SignalerContext
func (_e *MockLibP2PNode_Expecter) Start(ctx interface{}) *MockLibP2PNode_Start_Call {
	return &MockLibP2PNode_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockLibP2PNode_Start_Call) Run(run func(ctx irrecoverable.SignalerContext)) *MockLibP2PNode_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockLibP2PNode_Start_Call) Return() *MockLibP2PNode_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockLibP2PNode_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockLibP2PNode) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockLibP2PNode_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockLibP2PNode_Expecter) Stop() *MockLibP2PNode_Stop_Call {
	return &MockLibP2PNode_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockLibP2PNode_Stop_Call) Run(run func()) *MockLibP2PNode_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibP2PNode_Stop_Call) Return(_a0 error) *MockLibP2PNode_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_Stop_Call) RunAndReturn(run func() error) *MockLibP2PNode_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, topicValidator
func (_m *MockLibP2PNode) Subscribe(topic channels.Topic, topicValidator p2p.TopicValidatorFunc) (p2p.Subscription, error) {
	ret := _m.Called(topic, topicValidator)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 p2p.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(channels.Topic, p2p.TopicValidatorFunc) (p2p.Subscription, error)); ok {
		return rf(topic, topicValidator)
	}
	if rf, ok := ret.Get(0).(func(channels.Topic, p2p.TopicValidatorFunc) p2p.Subscription); ok {
		r0 = rf(topic, topicValidator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(channels.Topic, p2p.TopicValidatorFunc) error); ok {
		r1 = rf(topic, topicValidator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLibP2PNode_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockLibP2PNode_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic channels.Topic
//   - topicValidator p2p.TopicValidatorFunc
func (_e *MockLibP2PNode_Expecter) Subscribe(topic interface{}, topicValidator interface{}) *MockLibP2PNode_Subscribe_Call {
	return &MockLibP2PNode_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, topicValidator)}
}

func (_c *MockLibP2PNode_Subscribe_Call) Run(run func(topic channels.Topic, topicValidator p2p.TopicValidatorFunc)) *MockLibP2PNode_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic), args[1].(p2p.TopicValidatorFunc))
	})
	return _c
}

func (_c *MockLibP2PNode_Subscribe_Call) Return(_a0 p2p.Subscription, _a1 error) *MockLibP2PNode_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLibP2PNode_Subscribe_Call) RunAndReturn(run func(channels.Topic, p2p.TopicValidatorFunc) (p2p.Subscription, error)) *MockLibP2PNode_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: topic
func (_m *MockLibP2PNode) Unsubscribe(topic channels.Topic) error {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockLibP2PNode_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockLibP2PNode_Expecter) Unsubscribe(topic interface{}) *MockLibP2PNode_Unsubscribe_Call {
	return &MockLibP2PNode_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", topic)}
}

func (_c *MockLibP2PNode_Unsubscribe_Call) Run(run func(topic channels.Topic)) *MockLibP2PNode_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockLibP2PNode_Unsubscribe_Call) Return(_a0 error) *MockLibP2PNode_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_Unsubscribe_Call) RunAndReturn(run func(channels.Topic) error) *MockLibP2PNode_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// WithDefaultUnicastProtocol provides a mock function with given fields: defaultHandler, preferred
func (_m *MockLibP2PNode) WithDefaultUnicastProtocol(defaultHandler corenetwork.StreamHandler, preferred []protocols.ProtocolName) error {
	ret := _m.Called(defaultHandler, preferred)

	if len(ret) == 0 {
		panic("no return value specified for WithDefaultUnicastProtocol")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(corenetwork.StreamHandler, []protocols.ProtocolName) error); ok {
		r0 = rf(defaultHandler, preferred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibP2PNode_WithDefaultUnicastProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDefaultUnicastProtocol'
type MockLibP2PNode_WithDefaultUnicastProtocol_Call struct {
	*mock.Call
}

// WithDefaultUnicastProtocol is a helper method to define mock.On call
//   - defaultHandler corenetwork.StreamHandler
//   - preferred []protocols.ProtocolName
func (_e *MockLibP2PNode_Expecter) WithDefaultUnicastProtocol(defaultHandler interface{}, preferred interface{}) *MockLibP2PNode_WithDefaultUnicastProtocol_Call {
	return &MockLibP2PNode_WithDefaultUnicastProtocol_Call{Call: _e.mock.On("WithDefaultUnicastProtocol", defaultHandler, preferred)}
}

func (_c *MockLibP2PNode_WithDefaultUnicastProtocol_Call) Run(run func(defaultHandler corenetwork.StreamHandler, preferred []protocols.ProtocolName)) *MockLibP2PNode_WithDefaultUnicastProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(corenetwork.StreamHandler), args[1].([]protocols.ProtocolName))
	})
	return _c
}

func (_c *MockLibP2PNode_WithDefaultUnicastProtocol_Call) Return(_a0 error) *MockLibP2PNode_WithDefaultUnicastProtocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibP2PNode_WithDefaultUnicastProtocol_Call) RunAndReturn(run func(corenetwork.StreamHandler, []protocols.ProtocolName) error) *MockLibP2PNode_WithDefaultUnicastProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// WithPeersProvider provides a mock function with given fields: peersProvider
func (_m *MockLibP2PNode) WithPeersProvider(peersProvider p2p.PeersProvider) {
	_m.Called(peersProvider)
}

// MockLibP2PNode_WithPeersProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPeersProvider'
type MockLibP2PNode_WithPeersProvider_Call struct {
	*mock.Call
}

// WithPeersProvider is a helper method to define mock.On call
//   - peersProvider p2p.PeersProvider
func (_e *MockLibP2PNode_Expecter) WithPeersProvider(peersProvider interface{}) *MockLibP2PNode_WithPeersProvider_Call {
	return &MockLibP2PNode_WithPeersProvider_Call{Call: _e.mock.On("WithPeersProvider", peersProvider)}
}

func (_c *MockLibP2PNode_WithPeersProvider_Call) Run(run func(peersProvider p2p.PeersProvider)) *MockLibP2PNode_WithPeersProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.PeersProvider))
	})
	return _c
}

func (_c *MockLibP2PNode_WithPeersProvider_Call) Return() *MockLibP2PNode_WithPeersProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLibP2PNode_WithPeersProvider_Call) RunAndReturn(run func(p2p.PeersProvider)) *MockLibP2PNode_WithPeersProvider_Call {
	_c.Run(run)
	return _c
}

// NewMockLibP2PNode creates a new instance of MockLibP2PNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLibP2PNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLibP2PNode {
	mock := &MockLibP2PNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
