// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockGossipSubSpamRecordCache is an autogenerated mock type for the GossipSubSpamRecordCache type
type MockGossipSubSpamRecordCache struct {
	mock.Mock
}

type MockGossipSubSpamRecordCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGossipSubSpamRecordCache) EXPECT() *MockGossipSubSpamRecordCache_Expecter {
	return &MockGossipSubSpamRecordCache_Expecter{mock: &_m.Mock}
}

// Adjust provides a mock function with given fields: peerID, updateFunc
func (_m *MockGossipSubSpamRecordCache) Adjust(peerID peer.ID, updateFunc p2p.UpdateFunction) (*p2p.GossipSubSpamRecord, error) {
	ret := _m.Called(peerID, updateFunc)

	if len(ret) == 0 {
		panic("no return value specified for Adjust")
	}

	var r0 *p2p.GossipSubSpamRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID, p2p.UpdateFunction) (*p2p.GossipSubSpamRecord, error)); ok {
		return rf(peerID, updateFunc)
	}
	if rf, ok := ret.Get(0).(func(peer.ID, p2p.UpdateFunction) *p2p.GossipSubSpamRecord); ok {
		r0 = rf(peerID, updateFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*p2p.GossipSubSpamRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID, p2p.UpdateFunction) error); ok {
		r1 = rf(peerID, updateFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGossipSubSpamRecordCache_Adjust_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Adjust'
type MockGossipSubSpamRecordCache_Adjust_Call struct {
	*mock.Call
}

// Adjust is a helper method to define mock.On call
//   - peerID peer.ID
//   - updateFunc p2p.UpdateFunction
func (_e *MockGossipSubSpamRecordCache_Expecter) Adjust(peerID interface{}, updateFunc interface{}) *MockGossipSubSpamRecordCache_Adjust_Call {
	return &MockGossipSubSpamRecordCache_Adjust_Call{Call: _e.mock.On("Adjust", peerID, updateFunc)}
}

func (_c *MockGossipSubSpamRecordCache_Adjust_Call) Run(run func(peerID peer.ID, updateFunc p2p.UpdateFunction)) *MockGossipSubSpamRecordCache_Adjust_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(p2p.UpdateFunction))
	})
	return _c
}

func (_c *MockGossipSubSpamRecordCache_Adjust_Call) Return(_a0 *p2p.GossipSubSpamRecord, _a1 error) *MockGossipSubSpamRecordCache_Adjust_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGossipSubSpamRecordCache_Adjust_Call) RunAndReturn(run func(peer.ID, p2p.UpdateFunction) (*p2p.GossipSubSpamRecord, error)) *MockGossipSubSpamRecordCache_Adjust_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: peerID
func (_m *MockGossipSubSpamRecordCache) Get(peerID peer.ID) (*p2p.GossipSubSpamRecord, error, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *p2p.GossipSubSpamRecord
	var r1 error
	var r2 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (*p2p.GossipSubSpamRecord, error, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) *p2p.GossipSubSpamRecord); ok {
		r0 = rf(peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*p2p.GossipSubSpamRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(peer.ID) bool); ok {
		r2 = rf(peerID)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// MockGossipSubSpamRecordCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockGossipSubSpamRecordCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockGossipSubSpamRecordCache_Expecter) Get(peerID interface{}) *MockGossipSubSpamRecordCache_Get_Call {
	return &MockGossipSubSpamRecordCache_Get_Call{Call: _e.mock.On("Get", peerID)}
}

func (_c *MockGossipSubSpamRecordCache_Get_Call) Run(run func(peerID peer.ID)) *MockGossipSubSpamRecordCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockGossipSubSpamRecordCache_Get_Call) Return(_a0 *p2p.GossipSubSpamRecord, _a1 error, _a2 bool) *MockGossipSubSpamRecordCache_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGossipSubSpamRecordCache_Get_Call) RunAndReturn(run func(peer.ID) (*p2p.GossipSubSpamRecord, error, bool)) *MockGossipSubSpamRecordCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: peerID
func (_m *MockGossipSubSpamRecordCache) Has(peerID peer.ID) bool {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(peer.ID) bool); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGossipSubSpamRecordCache_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockGossipSubSpamRecordCache_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockGossipSubSpamRecordCache_Expecter) Has(peerID interface{}) *MockGossipSubSpamRecordCache_Has_Call {
	return &MockGossipSubSpamRecordCache_Has_Call{Call: _e.mock.On("Has", peerID)}
}

func (_c *MockGossipSubSpamRecordCache_Has_Call) Run(run func(peerID peer.ID)) *MockGossipSubSpamRecordCache_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockGossipSubSpamRecordCache_Has_Call) Return(_a0 bool) *MockGossipSubSpamRecordCache_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGossipSubSpamRecordCache_Has_Call) RunAndReturn(run func(peer.ID) bool) *MockGossipSubSpamRecordCache_Has_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGossipSubSpamRecordCache creates a new instance of MockGossipSubSpamRecordCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGossipSubSpamRecordCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGossipSubSpamRecordCache {
	mock := &MockGossipSubSpamRecordCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
