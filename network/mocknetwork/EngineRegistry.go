// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	datastore "github.com/ipfs/go-datastore"
	channels "github.com/onflow/flow-go/network/channels"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"

	protocol "github.com/libp2p/go-libp2p/core/protocol"
)

// MockEngineRegistry is an autogenerated mock type for the EngineRegistry type
type MockEngineRegistry struct {
	mock.Mock
}

type MockEngineRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngineRegistry) EXPECT() *MockEngineRegistry_Expecter {
	return &MockEngineRegistry_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockEngineRegistry) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockEngineRegistry_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockEngineRegistry_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockEngineRegistry_Expecter) Done() *MockEngineRegistry_Done_Call {
	return &MockEngineRegistry_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockEngineRegistry_Done_Call) Run(run func()) *MockEngineRegistry_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngineRegistry_Done_Call) Return(_a0 <-chan struct{}) *MockEngineRegistry_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngineRegistry_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockEngineRegistry_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockEngineRegistry) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockEngineRegistry_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockEngineRegistry_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockEngineRegistry_Expecter) Ready() *MockEngineRegistry_Ready_Call {
	return &MockEngineRegistry_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockEngineRegistry_Ready_Call) Run(run func()) *MockEngineRegistry_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngineRegistry_Ready_Call) Return(_a0 <-chan struct{}) *MockEngineRegistry_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngineRegistry_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockEngineRegistry_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: channel, messageProcessor
func (_m *MockEngineRegistry) Register(channel channels.Channel, messageProcessor network.MessageProcessor) (network.Conduit, error) {
	ret := _m.Called(channel, messageProcessor)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 network.Conduit
	var r1 error
	if rf, ok := ret.Get(0).(func(channels.Channel, network.MessageProcessor) (network.Conduit, error)); ok {
		return rf(channel, messageProcessor)
	}
	if rf, ok := ret.Get(0).(func(channels.Channel, network.MessageProcessor) network.Conduit); ok {
		r0 = rf(channel, messageProcessor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Conduit)
		}
	}

	if rf, ok := ret.Get(1).(func(channels.Channel, network.MessageProcessor) error); ok {
		r1 = rf(channel, messageProcessor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngineRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockEngineRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - channel channels.Channel
//   - messageProcessor network.MessageProcessor
func (_e *MockEngineRegistry_Expecter) Register(channel interface{}, messageProcessor interface{}) *MockEngineRegistry_Register_Call {
	return &MockEngineRegistry_Register_Call{Call: _e.mock.On("Register", channel, messageProcessor)}
}

func (_c *MockEngineRegistry_Register_Call) Run(run func(channel channels.Channel, messageProcessor network.MessageProcessor)) *MockEngineRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel), args[1].(network.MessageProcessor))
	})
	return _c
}

func (_c *MockEngineRegistry_Register_Call) Return(_a0 network.Conduit, _a1 error) *MockEngineRegistry_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngineRegistry_Register_Call) RunAndReturn(run func(channels.Channel, network.MessageProcessor) (network.Conduit, error)) *MockEngineRegistry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBlobService provides a mock function with given fields: channel, store, opts
func (_m *MockEngineRegistry) RegisterBlobService(channel channels.Channel, store datastore.Batching, opts ...network.BlobServiceOption) (network.BlobService, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channel, store)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBlobService")
	}

	var r0 network.BlobService
	var r1 error
	if rf, ok := ret.Get(0).(func(channels.Channel, datastore.Batching, ...network.BlobServiceOption) (network.BlobService, error)); ok {
		return rf(channel, store, opts...)
	}
	if rf, ok := ret.Get(0).(func(channels.Channel, datastore.Batching, ...network.BlobServiceOption) network.BlobService); ok {
		r0 = rf(channel, store, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.BlobService)
		}
	}

	if rf, ok := ret.Get(1).(func(channels.Channel, datastore.Batching, ...network.BlobServiceOption) error); ok {
		r1 = rf(channel, store, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngineRegistry_RegisterBlobService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBlobService'
type MockEngineRegistry_RegisterBlobService_Call struct {
	*mock.Call
}

// RegisterBlobService is a helper method to define mock.On call
//   - channel channels.Channel
//   - store datastore.Batching
//   - opts ...network.BlobServiceOption
func (_e *MockEngineRegistry_Expecter) RegisterBlobService(channel interface{}, store interface{}, opts ...interface{}) *MockEngineRegistry_RegisterBlobService_Call {
	return &MockEngineRegistry_RegisterBlobService_Call{Call: _e.mock.On("RegisterBlobService",
		append([]interface{}{channel, store}, opts...)...)}
}

func (_c *MockEngineRegistry_RegisterBlobService_Call) Run(run func(channel channels.Channel, store datastore.Batching, opts ...network.BlobServiceOption)) *MockEngineRegistry_RegisterBlobService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]network.BlobServiceOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(network.BlobServiceOption)
			}
		}
		run(args[0].(channels.Channel), args[1].(datastore.Batching), variadicArgs...)
	})
	return _c
}

func (_c *MockEngineRegistry_RegisterBlobService_Call) Return(_a0 network.BlobService, _a1 error) *MockEngineRegistry_RegisterBlobService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngineRegistry_RegisterBlobService_Call) RunAndReturn(run func(channels.Channel, datastore.Batching, ...network.BlobServiceOption) (network.BlobService, error)) *MockEngineRegistry_RegisterBlobService_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterPingService provides a mock function with given fields: pingProtocolID, pingInfoProvider
func (_m *MockEngineRegistry) RegisterPingService(pingProtocolID protocol.ID, pingInfoProvider network.PingInfoProvider) (network.PingService, error) {
	ret := _m.Called(pingProtocolID, pingInfoProvider)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPingService")
	}

	var r0 network.PingService
	var r1 error
	if rf, ok := ret.Get(0).(func(protocol.ID, network.PingInfoProvider) (network.PingService, error)); ok {
		return rf(pingProtocolID, pingInfoProvider)
	}
	if rf, ok := ret.Get(0).(func(protocol.ID, network.PingInfoProvider) network.PingService); ok {
		r0 = rf(pingProtocolID, pingInfoProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.PingService)
		}
	}

	if rf, ok := ret.Get(1).(func(protocol.ID, network.PingInfoProvider) error); ok {
		r1 = rf(pingProtocolID, pingInfoProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEngineRegistry_RegisterPingService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPingService'
type MockEngineRegistry_RegisterPingService_Call struct {
	*mock.Call
}

// RegisterPingService is a helper method to define mock.On call
//   - pingProtocolID protocol.ID
//   - pingInfoProvider network.PingInfoProvider
func (_e *MockEngineRegistry_Expecter) RegisterPingService(pingProtocolID interface{}, pingInfoProvider interface{}) *MockEngineRegistry_RegisterPingService_Call {
	return &MockEngineRegistry_RegisterPingService_Call{Call: _e.mock.On("RegisterPingService", pingProtocolID, pingInfoProvider)}
}

func (_c *MockEngineRegistry_RegisterPingService_Call) Run(run func(pingProtocolID protocol.ID, pingInfoProvider network.PingInfoProvider)) *MockEngineRegistry_RegisterPingService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID), args[1].(network.PingInfoProvider))
	})
	return _c
}

func (_c *MockEngineRegistry_RegisterPingService_Call) Return(_a0 network.PingService, _a1 error) *MockEngineRegistry_RegisterPingService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEngineRegistry_RegisterPingService_Call) RunAndReturn(run func(protocol.ID, network.PingInfoProvider) (network.PingService, error)) *MockEngineRegistry_RegisterPingService_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockEngineRegistry) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockEngineRegistry_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEngineRegistry_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockEngineRegistry_Expecter) Start(_a0 interface{}) *MockEngineRegistry_Start_Call {
	return &MockEngineRegistry_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockEngineRegistry_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockEngineRegistry_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockEngineRegistry_Start_Call) Return() *MockEngineRegistry_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngineRegistry_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockEngineRegistry_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockEngineRegistry creates a new instance of MockEngineRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngineRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngineRegistry {
	mock := &MockEngineRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
