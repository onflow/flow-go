// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	message "github.com/onflow/flow-go/network/message"

	mock "github.com/stretchr/testify/mock"
)

// MockIncomingMessageScope is an autogenerated mock type for the IncomingMessageScope type
type MockIncomingMessageScope struct {
	mock.Mock
}

type MockIncomingMessageScope_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIncomingMessageScope) EXPECT() *MockIncomingMessageScope_Expecter {
	return &MockIncomingMessageScope_Expecter{mock: &_m.Mock}
}

// Channel provides a mock function with no fields
func (_m *MockIncomingMessageScope) Channel() channels.Channel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 channels.Channel
	if rf, ok := ret.Get(0).(func() channels.Channel); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}

	return r0
}

// MockIncomingMessageScope_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type MockIncomingMessageScope_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) Channel() *MockIncomingMessageScope_Channel_Call {
	return &MockIncomingMessageScope_Channel_Call{Call: _e.mock.On("Channel")}
}

func (_c *MockIncomingMessageScope_Channel_Call) Run(run func()) *MockIncomingMessageScope_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_Channel_Call) Return(_a0 channels.Channel) *MockIncomingMessageScope_Channel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_Channel_Call) RunAndReturn(run func() channels.Channel) *MockIncomingMessageScope_Channel_Call {
	_c.Call.Return(run)
	return _c
}

// DecodedPayload provides a mock function with no fields
func (_m *MockIncomingMessageScope) DecodedPayload() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DecodedPayload")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockIncomingMessageScope_DecodedPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodedPayload'
type MockIncomingMessageScope_DecodedPayload_Call struct {
	*mock.Call
}

// DecodedPayload is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) DecodedPayload() *MockIncomingMessageScope_DecodedPayload_Call {
	return &MockIncomingMessageScope_DecodedPayload_Call{Call: _e.mock.On("DecodedPayload")}
}

func (_c *MockIncomingMessageScope_DecodedPayload_Call) Run(run func()) *MockIncomingMessageScope_DecodedPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_DecodedPayload_Call) Return(_a0 interface{}) *MockIncomingMessageScope_DecodedPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_DecodedPayload_Call) RunAndReturn(run func() interface{}) *MockIncomingMessageScope_DecodedPayload_Call {
	_c.Call.Return(run)
	return _c
}

// EventID provides a mock function with no fields
func (_m *MockIncomingMessageScope) EventID() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventID")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockIncomingMessageScope_EventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventID'
type MockIncomingMessageScope_EventID_Call struct {
	*mock.Call
}

// EventID is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) EventID() *MockIncomingMessageScope_EventID_Call {
	return &MockIncomingMessageScope_EventID_Call{Call: _e.mock.On("EventID")}
}

func (_c *MockIncomingMessageScope_EventID_Call) Run(run func()) *MockIncomingMessageScope_EventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_EventID_Call) Return(_a0 []byte) *MockIncomingMessageScope_EventID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_EventID_Call) RunAndReturn(run func() []byte) *MockIncomingMessageScope_EventID_Call {
	_c.Call.Return(run)
	return _c
}

// OriginId provides a mock function with no fields
func (_m *MockIncomingMessageScope) OriginId() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginId")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockIncomingMessageScope_OriginId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OriginId'
type MockIncomingMessageScope_OriginId_Call struct {
	*mock.Call
}

// OriginId is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) OriginId() *MockIncomingMessageScope_OriginId_Call {
	return &MockIncomingMessageScope_OriginId_Call{Call: _e.mock.On("OriginId")}
}

func (_c *MockIncomingMessageScope_OriginId_Call) Run(run func()) *MockIncomingMessageScope_OriginId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_OriginId_Call) Return(_a0 flow.Identifier) *MockIncomingMessageScope_OriginId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_OriginId_Call) RunAndReturn(run func() flow.Identifier) *MockIncomingMessageScope_OriginId_Call {
	_c.Call.Return(run)
	return _c
}

// PayloadType provides a mock function with no fields
func (_m *MockIncomingMessageScope) PayloadType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PayloadType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIncomingMessageScope_PayloadType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayloadType'
type MockIncomingMessageScope_PayloadType_Call struct {
	*mock.Call
}

// PayloadType is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) PayloadType() *MockIncomingMessageScope_PayloadType_Call {
	return &MockIncomingMessageScope_PayloadType_Call{Call: _e.mock.On("PayloadType")}
}

func (_c *MockIncomingMessageScope_PayloadType_Call) Run(run func()) *MockIncomingMessageScope_PayloadType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_PayloadType_Call) Return(_a0 string) *MockIncomingMessageScope_PayloadType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_PayloadType_Call) RunAndReturn(run func() string) *MockIncomingMessageScope_PayloadType_Call {
	_c.Call.Return(run)
	return _c
}

// Proto provides a mock function with no fields
func (_m *MockIncomingMessageScope) Proto() *message.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Proto")
	}

	var r0 *message.Message
	if rf, ok := ret.Get(0).(func() *message.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Message)
		}
	}

	return r0
}

// MockIncomingMessageScope_Proto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Proto'
type MockIncomingMessageScope_Proto_Call struct {
	*mock.Call
}

// Proto is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) Proto() *MockIncomingMessageScope_Proto_Call {
	return &MockIncomingMessageScope_Proto_Call{Call: _e.mock.On("Proto")}
}

func (_c *MockIncomingMessageScope_Proto_Call) Run(run func()) *MockIncomingMessageScope_Proto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_Proto_Call) Return(_a0 *message.Message) *MockIncomingMessageScope_Proto_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_Proto_Call) RunAndReturn(run func() *message.Message) *MockIncomingMessageScope_Proto_Call {
	_c.Call.Return(run)
	return _c
}

// Protocol provides a mock function with no fields
func (_m *MockIncomingMessageScope) Protocol() message.ProtocolType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Protocol")
	}

	var r0 message.ProtocolType
	if rf, ok := ret.Get(0).(func() message.ProtocolType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(message.ProtocolType)
	}

	return r0
}

// MockIncomingMessageScope_Protocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Protocol'
type MockIncomingMessageScope_Protocol_Call struct {
	*mock.Call
}

// Protocol is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) Protocol() *MockIncomingMessageScope_Protocol_Call {
	return &MockIncomingMessageScope_Protocol_Call{Call: _e.mock.On("Protocol")}
}

func (_c *MockIncomingMessageScope_Protocol_Call) Run(run func()) *MockIncomingMessageScope_Protocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_Protocol_Call) Return(_a0 message.ProtocolType) *MockIncomingMessageScope_Protocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_Protocol_Call) RunAndReturn(run func() message.ProtocolType) *MockIncomingMessageScope_Protocol_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockIncomingMessageScope) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockIncomingMessageScope_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockIncomingMessageScope_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) Size() *MockIncomingMessageScope_Size_Call {
	return &MockIncomingMessageScope_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockIncomingMessageScope_Size_Call) Run(run func()) *MockIncomingMessageScope_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_Size_Call) Return(_a0 int) *MockIncomingMessageScope_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_Size_Call) RunAndReturn(run func() int) *MockIncomingMessageScope_Size_Call {
	_c.Call.Return(run)
	return _c
}

// TargetIDs provides a mock function with no fields
func (_m *MockIncomingMessageScope) TargetIDs() flow.IdentifierList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetIDs")
	}

	var r0 flow.IdentifierList
	if rf, ok := ret.Get(0).(func() flow.IdentifierList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentifierList)
		}
	}

	return r0
}

// MockIncomingMessageScope_TargetIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TargetIDs'
type MockIncomingMessageScope_TargetIDs_Call struct {
	*mock.Call
}

// TargetIDs is a helper method to define mock.On call
func (_e *MockIncomingMessageScope_Expecter) TargetIDs() *MockIncomingMessageScope_TargetIDs_Call {
	return &MockIncomingMessageScope_TargetIDs_Call{Call: _e.mock.On("TargetIDs")}
}

func (_c *MockIncomingMessageScope_TargetIDs_Call) Run(run func()) *MockIncomingMessageScope_TargetIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingMessageScope_TargetIDs_Call) Return(_a0 flow.IdentifierList) *MockIncomingMessageScope_TargetIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomingMessageScope_TargetIDs_Call) RunAndReturn(run func() flow.IdentifierList) *MockIncomingMessageScope_TargetIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIncomingMessageScope creates a new instance of MockIncomingMessageScope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIncomingMessageScope(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIncomingMessageScope {
	mock := &MockIncomingMessageScope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
