// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"

	context "context"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// MockBlobService is an autogenerated mock type for the BlobService type
type MockBlobService struct {
	mock.Mock
}

type MockBlobService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlobService) EXPECT() *MockBlobService_Expecter {
	return &MockBlobService_Expecter{mock: &_m.Mock}
}

// AddBlob provides a mock function with given fields: ctx, b
func (_m *MockBlobService) AddBlob(ctx context.Context, b blocks.Block) error {
	ret := _m.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for AddBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, blocks.Block) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlobService_AddBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlob'
type MockBlobService_AddBlob_Call struct {
	*mock.Call
}

// AddBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - b blocks.Block
func (_e *MockBlobService_Expecter) AddBlob(ctx interface{}, b interface{}) *MockBlobService_AddBlob_Call {
	return &MockBlobService_AddBlob_Call{Call: _e.mock.On("AddBlob", ctx, b)}
}

func (_c *MockBlobService_AddBlob_Call) Run(run func(ctx context.Context, b blocks.Block)) *MockBlobService_AddBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(blocks.Block))
	})
	return _c
}

func (_c *MockBlobService_AddBlob_Call) Return(_a0 error) *MockBlobService_AddBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_AddBlob_Call) RunAndReturn(run func(context.Context, blocks.Block) error) *MockBlobService_AddBlob_Call {
	_c.Call.Return(run)
	return _c
}

// AddBlobs provides a mock function with given fields: ctx, bs
func (_m *MockBlobService) AddBlobs(ctx context.Context, bs []blocks.Block) error {
	ret := _m.Called(ctx, bs)

	if len(ret) == 0 {
		panic("no return value specified for AddBlobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []blocks.Block) error); ok {
		r0 = rf(ctx, bs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlobService_AddBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlobs'
type MockBlobService_AddBlobs_Call struct {
	*mock.Call
}

// AddBlobs is a helper method to define mock.On call
//   - ctx context.Context
//   - bs []blocks.Block
func (_e *MockBlobService_Expecter) AddBlobs(ctx interface{}, bs interface{}) *MockBlobService_AddBlobs_Call {
	return &MockBlobService_AddBlobs_Call{Call: _e.mock.On("AddBlobs", ctx, bs)}
}

func (_c *MockBlobService_AddBlobs_Call) Run(run func(ctx context.Context, bs []blocks.Block)) *MockBlobService_AddBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]blocks.Block))
	})
	return _c
}

func (_c *MockBlobService_AddBlobs_Call) Return(_a0 error) *MockBlobService_AddBlobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_AddBlobs_Call) RunAndReturn(run func(context.Context, []blocks.Block) error) *MockBlobService_AddBlobs_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlob provides a mock function with given fields: ctx, c
func (_m *MockBlobService) DeleteBlob(ctx context.Context, c cid.Cid) error {
	ret := _m.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlobService_DeleteBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlob'
type MockBlobService_DeleteBlob_Call struct {
	*mock.Call
}

// DeleteBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - c cid.Cid
func (_e *MockBlobService_Expecter) DeleteBlob(ctx interface{}, c interface{}) *MockBlobService_DeleteBlob_Call {
	return &MockBlobService_DeleteBlob_Call{Call: _e.mock.On("DeleteBlob", ctx, c)}
}

func (_c *MockBlobService_DeleteBlob_Call) Run(run func(ctx context.Context, c cid.Cid)) *MockBlobService_DeleteBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *MockBlobService_DeleteBlob_Call) Return(_a0 error) *MockBlobService_DeleteBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_DeleteBlob_Call) RunAndReturn(run func(context.Context, cid.Cid) error) *MockBlobService_DeleteBlob_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockBlobService) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockBlobService_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockBlobService_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockBlobService_Expecter) Done() *MockBlobService_Done_Call {
	return &MockBlobService_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockBlobService_Done_Call) Run(run func()) *MockBlobService_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlobService_Done_Call) Return(_a0 <-chan struct{}) *MockBlobService_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockBlobService_Done_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlob provides a mock function with given fields: ctx, c
func (_m *MockBlobService) GetBlob(ctx context.Context, c cid.Cid) (blocks.Block, error) {
	ret := _m.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 blocks.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) (blocks.Block, error)); ok {
		return rf(ctx, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) blocks.Block); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blocks.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobService_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type MockBlobService_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - c cid.Cid
func (_e *MockBlobService_Expecter) GetBlob(ctx interface{}, c interface{}) *MockBlobService_GetBlob_Call {
	return &MockBlobService_GetBlob_Call{Call: _e.mock.On("GetBlob", ctx, c)}
}

func (_c *MockBlobService_GetBlob_Call) Run(run func(ctx context.Context, c cid.Cid)) *MockBlobService_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *MockBlobService_GetBlob_Call) Return(_a0 blocks.Block, _a1 error) *MockBlobService_GetBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobService_GetBlob_Call) RunAndReturn(run func(context.Context, cid.Cid) (blocks.Block, error)) *MockBlobService_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobs provides a mock function with given fields: ctx, ks
func (_m *MockBlobService) GetBlobs(ctx context.Context, ks []cid.Cid) <-chan blocks.Block {
	ret := _m.Called(ctx, ks)

	if len(ret) == 0 {
		panic("no return value specified for GetBlobs")
	}

	var r0 <-chan blocks.Block
	if rf, ok := ret.Get(0).(func(context.Context, []cid.Cid) <-chan blocks.Block); ok {
		r0 = rf(ctx, ks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan blocks.Block)
		}
	}

	return r0
}

// MockBlobService_GetBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobs'
type MockBlobService_GetBlobs_Call struct {
	*mock.Call
}

// GetBlobs is a helper method to define mock.On call
//   - ctx context.Context
//   - ks []cid.Cid
func (_e *MockBlobService_Expecter) GetBlobs(ctx interface{}, ks interface{}) *MockBlobService_GetBlobs_Call {
	return &MockBlobService_GetBlobs_Call{Call: _e.mock.On("GetBlobs", ctx, ks)}
}

func (_c *MockBlobService_GetBlobs_Call) Run(run func(ctx context.Context, ks []cid.Cid)) *MockBlobService_GetBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]cid.Cid))
	})
	return _c
}

func (_c *MockBlobService_GetBlobs_Call) Return(_a0 <-chan blocks.Block) *MockBlobService_GetBlobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_GetBlobs_Call) RunAndReturn(run func(context.Context, []cid.Cid) <-chan blocks.Block) *MockBlobService_GetBlobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: ctx
func (_m *MockBlobService) GetSession(ctx context.Context) network.BlobGetter {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 network.BlobGetter
	if rf, ok := ret.Get(0).(func(context.Context) network.BlobGetter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.BlobGetter)
		}
	}

	return r0
}

// MockBlobService_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockBlobService_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlobService_Expecter) GetSession(ctx interface{}) *MockBlobService_GetSession_Call {
	return &MockBlobService_GetSession_Call{Call: _e.mock.On("GetSession", ctx)}
}

func (_c *MockBlobService_GetSession_Call) Run(run func(ctx context.Context)) *MockBlobService_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlobService_GetSession_Call) Return(_a0 network.BlobGetter) *MockBlobService_GetSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_GetSession_Call) RunAndReturn(run func(context.Context) network.BlobGetter) *MockBlobService_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockBlobService) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockBlobService_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockBlobService_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockBlobService_Expecter) Ready() *MockBlobService_Ready_Call {
	return &MockBlobService_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockBlobService_Ready_Call) Run(run func()) *MockBlobService_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlobService_Ready_Call) Return(_a0 <-chan struct{}) *MockBlobService_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockBlobService_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockBlobService) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockBlobService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockBlobService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockBlobService_Expecter) Start(_a0 interface{}) *MockBlobService_Start_Call {
	return &MockBlobService_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockBlobService_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockBlobService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockBlobService_Start_Call) Return() *MockBlobService_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBlobService_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockBlobService_Start_Call {
	_c.Run(run)
	return _c
}

// TriggerReprovide provides a mock function with given fields: ctx
func (_m *MockBlobService) TriggerReprovide(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TriggerReprovide")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlobService_TriggerReprovide_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerReprovide'
type MockBlobService_TriggerReprovide_Call struct {
	*mock.Call
}

// TriggerReprovide is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBlobService_Expecter) TriggerReprovide(ctx interface{}) *MockBlobService_TriggerReprovide_Call {
	return &MockBlobService_TriggerReprovide_Call{Call: _e.mock.On("TriggerReprovide", ctx)}
}

func (_c *MockBlobService_TriggerReprovide_Call) Run(run func(ctx context.Context)) *MockBlobService_TriggerReprovide_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlobService_TriggerReprovide_Call) Return(_a0 error) *MockBlobService_TriggerReprovide_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobService_TriggerReprovide_Call) RunAndReturn(run func(context.Context) error) *MockBlobService_TriggerReprovide_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlobService creates a new instance of MockBlobService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlobService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlobService {
	mock := &MockBlobService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
