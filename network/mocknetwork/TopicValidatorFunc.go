// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	pubsub "github.com/libp2p/go-libp2p-pubsub"
)

// MockTopicValidatorFunc is an autogenerated mock type for the TopicValidatorFunc type
type MockTopicValidatorFunc struct {
	mock.Mock
}

type MockTopicValidatorFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopicValidatorFunc) EXPECT() *MockTopicValidatorFunc_Expecter {
	return &MockTopicValidatorFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTopicValidatorFunc) Execute(_a0 context.Context, _a1 peer.ID, _a2 *pubsub.Message) p2p.ValidationResult {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 p2p.ValidationResult
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, *pubsub.Message) p2p.ValidationResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(p2p.ValidationResult)
	}

	return r0
}

// MockTopicValidatorFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockTopicValidatorFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 peer.ID
//   - _a2 *pubsub.Message
func (_e *MockTopicValidatorFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockTopicValidatorFunc_Execute_Call {
	return &MockTopicValidatorFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *MockTopicValidatorFunc_Execute_Call) Run(run func(_a0 context.Context, _a1 peer.ID, _a2 *pubsub.Message)) *MockTopicValidatorFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.ID), args[2].(*pubsub.Message))
	})
	return _c
}

func (_c *MockTopicValidatorFunc_Execute_Call) Return(_a0 p2p.ValidationResult) *MockTopicValidatorFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopicValidatorFunc_Execute_Call) RunAndReturn(run func(context.Context, peer.ID, *pubsub.Message) p2p.ValidationResult) *MockTopicValidatorFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopicValidatorFunc creates a new instance of MockTopicValidatorFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicValidatorFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicValidatorFunc {
	mock := &MockTopicValidatorFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
