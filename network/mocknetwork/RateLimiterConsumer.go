// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockRateLimiterConsumer is an autogenerated mock type for the RateLimiterConsumer type
type MockRateLimiterConsumer struct {
	mock.Mock
}

type MockRateLimiterConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateLimiterConsumer) EXPECT() *MockRateLimiterConsumer_Expecter {
	return &MockRateLimiterConsumer_Expecter{mock: &_m.Mock}
}

// OnRateLimitedPeer provides a mock function with given fields: pid, role, msgType, topic, reason
func (_m *MockRateLimiterConsumer) OnRateLimitedPeer(pid peer.ID, role string, msgType string, topic string, reason string) {
	_m.Called(pid, role, msgType, topic, reason)
}

// MockRateLimiterConsumer_OnRateLimitedPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRateLimitedPeer'
type MockRateLimiterConsumer_OnRateLimitedPeer_Call struct {
	*mock.Call
}

// OnRateLimitedPeer is a helper method to define mock.On call
//   - pid peer.ID
//   - role string
//   - msgType string
//   - topic string
//   - reason string
func (_e *MockRateLimiterConsumer_Expecter) OnRateLimitedPeer(pid interface{}, role interface{}, msgType interface{}, topic interface{}, reason interface{}) *MockRateLimiterConsumer_OnRateLimitedPeer_Call {
	return &MockRateLimiterConsumer_OnRateLimitedPeer_Call{Call: _e.mock.On("OnRateLimitedPeer", pid, role, msgType, topic, reason)}
}

func (_c *MockRateLimiterConsumer_OnRateLimitedPeer_Call) Run(run func(pid peer.ID, role string, msgType string, topic string, reason string)) *MockRateLimiterConsumer_OnRateLimitedPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockRateLimiterConsumer_OnRateLimitedPeer_Call) Return() *MockRateLimiterConsumer_OnRateLimitedPeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRateLimiterConsumer_OnRateLimitedPeer_Call) RunAndReturn(run func(peer.ID, string, string, string, string)) *MockRateLimiterConsumer_OnRateLimitedPeer_Call {
	_c.Run(run)
	return _c
}

// NewMockRateLimiterConsumer creates a new instance of MockRateLimiterConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimiterConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimiterConsumer {
	mock := &MockRateLimiterConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
