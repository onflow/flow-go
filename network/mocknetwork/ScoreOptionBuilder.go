// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/libp2p/go-libp2p-pubsub"
)

// MockScoreOptionBuilder is an autogenerated mock type for the ScoreOptionBuilder type
type MockScoreOptionBuilder struct {
	mock.Mock
}

type MockScoreOptionBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScoreOptionBuilder) EXPECT() *MockScoreOptionBuilder_Expecter {
	return &MockScoreOptionBuilder_Expecter{mock: &_m.Mock}
}

// BuildFlowPubSubScoreOption provides a mock function with no fields
func (_m *MockScoreOptionBuilder) BuildFlowPubSubScoreOption() (*pubsub.PeerScoreParams, *pubsub.PeerScoreThresholds) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildFlowPubSubScoreOption")
	}

	var r0 *pubsub.PeerScoreParams
	var r1 *pubsub.PeerScoreThresholds
	if rf, ok := ret.Get(0).(func() (*pubsub.PeerScoreParams, *pubsub.PeerScoreThresholds)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *pubsub.PeerScoreParams); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.PeerScoreParams)
		}
	}

	if rf, ok := ret.Get(1).(func() *pubsub.PeerScoreThresholds); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pubsub.PeerScoreThresholds)
		}
	}

	return r0, r1
}

// MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildFlowPubSubScoreOption'
type MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call struct {
	*mock.Call
}

// BuildFlowPubSubScoreOption is a helper method to define mock.On call
func (_e *MockScoreOptionBuilder_Expecter) BuildFlowPubSubScoreOption() *MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call {
	return &MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call{Call: _e.mock.On("BuildFlowPubSubScoreOption")}
}

func (_c *MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call) Run(run func()) *MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call) Return(_a0 *pubsub.PeerScoreParams, _a1 *pubsub.PeerScoreThresholds) *MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call) RunAndReturn(run func() (*pubsub.PeerScoreParams, *pubsub.PeerScoreThresholds)) *MockScoreOptionBuilder_BuildFlowPubSubScoreOption_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockScoreOptionBuilder) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockScoreOptionBuilder_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockScoreOptionBuilder_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockScoreOptionBuilder_Expecter) Done() *MockScoreOptionBuilder_Done_Call {
	return &MockScoreOptionBuilder_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockScoreOptionBuilder_Done_Call) Run(run func()) *MockScoreOptionBuilder_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScoreOptionBuilder_Done_Call) Return(_a0 <-chan struct{}) *MockScoreOptionBuilder_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScoreOptionBuilder_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockScoreOptionBuilder_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockScoreOptionBuilder) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockScoreOptionBuilder_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockScoreOptionBuilder_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockScoreOptionBuilder_Expecter) Ready() *MockScoreOptionBuilder_Ready_Call {
	return &MockScoreOptionBuilder_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockScoreOptionBuilder_Ready_Call) Run(run func()) *MockScoreOptionBuilder_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScoreOptionBuilder_Ready_Call) Return(_a0 <-chan struct{}) *MockScoreOptionBuilder_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScoreOptionBuilder_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockScoreOptionBuilder_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockScoreOptionBuilder) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockScoreOptionBuilder_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockScoreOptionBuilder_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockScoreOptionBuilder_Expecter) Start(_a0 interface{}) *MockScoreOptionBuilder_Start_Call {
	return &MockScoreOptionBuilder_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockScoreOptionBuilder_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockScoreOptionBuilder_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockScoreOptionBuilder_Start_Call) Return() *MockScoreOptionBuilder_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockScoreOptionBuilder_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockScoreOptionBuilder_Start_Call {
	_c.Run(run)
	return _c
}

// TopicScoreParams provides a mock function with given fields: _a0
func (_m *MockScoreOptionBuilder) TopicScoreParams(_a0 *pubsub.Topic) *pubsub.TopicScoreParams {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for TopicScoreParams")
	}

	var r0 *pubsub.TopicScoreParams
	if rf, ok := ret.Get(0).(func(*pubsub.Topic) *pubsub.TopicScoreParams); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.TopicScoreParams)
		}
	}

	return r0
}

// MockScoreOptionBuilder_TopicScoreParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopicScoreParams'
type MockScoreOptionBuilder_TopicScoreParams_Call struct {
	*mock.Call
}

// TopicScoreParams is a helper method to define mock.On call
//   - _a0 *pubsub.Topic
func (_e *MockScoreOptionBuilder_Expecter) TopicScoreParams(_a0 interface{}) *MockScoreOptionBuilder_TopicScoreParams_Call {
	return &MockScoreOptionBuilder_TopicScoreParams_Call{Call: _e.mock.On("TopicScoreParams", _a0)}
}

func (_c *MockScoreOptionBuilder_TopicScoreParams_Call) Run(run func(_a0 *pubsub.Topic)) *MockScoreOptionBuilder_TopicScoreParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.Topic))
	})
	return _c
}

func (_c *MockScoreOptionBuilder_TopicScoreParams_Call) Return(_a0 *pubsub.TopicScoreParams) *MockScoreOptionBuilder_TopicScoreParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScoreOptionBuilder_TopicScoreParams_Call) RunAndReturn(run func(*pubsub.Topic) *pubsub.TopicScoreParams) *MockScoreOptionBuilder_TopicScoreParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScoreOptionBuilder creates a new instance of MockScoreOptionBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScoreOptionBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScoreOptionBuilder {
	mock := &MockScoreOptionBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
