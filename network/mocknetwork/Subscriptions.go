// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	channels "github.com/onflow/flow-go/network/channels"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"
)

// MockSubscriptions is an autogenerated mock type for the Subscriptions type
type MockSubscriptions struct {
	mock.Mock
}

type MockSubscriptions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptions) EXPECT() *MockSubscriptions_Expecter {
	return &MockSubscriptions_Expecter{mock: &_m.Mock}
}

// HasSubscription provides a mock function with given fields: topic
func (_m *MockSubscriptions) HasSubscription(topic channels.Topic) bool {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for HasSubscription")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(channels.Topic) bool); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSubscriptions_HasSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSubscription'
type MockSubscriptions_HasSubscription_Call struct {
	*mock.Call
}

// HasSubscription is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockSubscriptions_Expecter) HasSubscription(topic interface{}) *MockSubscriptions_HasSubscription_Call {
	return &MockSubscriptions_HasSubscription_Call{Call: _e.mock.On("HasSubscription", topic)}
}

func (_c *MockSubscriptions_HasSubscription_Call) Run(run func(topic channels.Topic)) *MockSubscriptions_HasSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockSubscriptions_HasSubscription_Call) Return(_a0 bool) *MockSubscriptions_HasSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptions_HasSubscription_Call) RunAndReturn(run func(channels.Topic) bool) *MockSubscriptions_HasSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// SetUnicastManager provides a mock function with given fields: uniMgr
func (_m *MockSubscriptions) SetUnicastManager(uniMgr p2p.UnicastManager) {
	_m.Called(uniMgr)
}

// MockSubscriptions_SetUnicastManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUnicastManager'
type MockSubscriptions_SetUnicastManager_Call struct {
	*mock.Call
}

// SetUnicastManager is a helper method to define mock.On call
//   - uniMgr p2p.UnicastManager
func (_e *MockSubscriptions_Expecter) SetUnicastManager(uniMgr interface{}) *MockSubscriptions_SetUnicastManager_Call {
	return &MockSubscriptions_SetUnicastManager_Call{Call: _e.mock.On("SetUnicastManager", uniMgr)}
}

func (_c *MockSubscriptions_SetUnicastManager_Call) Run(run func(uniMgr p2p.UnicastManager)) *MockSubscriptions_SetUnicastManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.UnicastManager))
	})
	return _c
}

func (_c *MockSubscriptions_SetUnicastManager_Call) Return() *MockSubscriptions_SetUnicastManager_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscriptions_SetUnicastManager_Call) RunAndReturn(run func(p2p.UnicastManager)) *MockSubscriptions_SetUnicastManager_Call {
	_c.Run(run)
	return _c
}

// NewMockSubscriptions creates a new instance of MockSubscriptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptions {
	mock := &MockSubscriptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
