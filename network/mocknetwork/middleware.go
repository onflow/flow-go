// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocknetwork

import (
	mock "github.com/stretchr/testify/mock"

	channels "github.com/onflow/flow-go/network/channels"

	network "github.com/onflow/flow-go/network"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *Middleware) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// OnAllowListNotification provides a mock function with given fields: _a0
func (_m *Middleware) OnAllowListNotification(_a0 *network.AllowListingUpdate) {
	_m.Called(_a0)
}

// OnDisallowListNotification provides a mock function with given fields: _a0
func (_m *Middleware) OnDisallowListNotification(_a0 *network.DisallowListingUpdate) {
	_m.Called(_a0)
}

// Ready provides a mock function with given fields:
func (_m *Middleware) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: channel
func (_m *Middleware) Subscribe(channel channels.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: channel
func (_m *Middleware) Unsubscribe(channel channels.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNodeAddresses provides a mock function with given fields:
func (_m *Middleware) UpdateNodeAddresses() {
	_m.Called()
}

type mockConstructorTestingTNewMiddleware interface {
	mock.TestingT
	Cleanup(func())
}

// NewMiddleware creates a new instance of Middleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMiddleware(t mockConstructorTestingTNewMiddleware) *Middleware {
	mock := &Middleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
