// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocknetwork

import (
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"

	context "context"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// BlobService is an autogenerated mock type for the BlobService type
type BlobService struct {
	mock.Mock
}

// AddBlob provides a mock function with given fields: ctx, b
func (_m *BlobService) AddBlob(ctx context.Context, b blocks.Block) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, blocks.Block) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddBlobs provides a mock function with given fields: ctx, bs
func (_m *BlobService) AddBlobs(ctx context.Context, bs []blocks.Block) error {
	ret := _m.Called(ctx, bs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []blocks.Block) error); ok {
		r0 = rf(ctx, bs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlob provides a mock function with given fields: ctx, c
func (_m *BlobService) DeleteBlob(ctx context.Context, c cid.Cid) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Done provides a mock function with given fields:
func (_m *BlobService) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// GetBlob provides a mock function with given fields: ctx, c
func (_m *BlobService) GetBlob(ctx context.Context, c cid.Cid) (blocks.Block, error) {
	ret := _m.Called(ctx, c)

	var r0 blocks.Block
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) blocks.Block); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blocks.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlobs provides a mock function with given fields: ctx, ks
func (_m *BlobService) GetBlobs(ctx context.Context, ks []cid.Cid) <-chan blocks.Block {
	ret := _m.Called(ctx, ks)

	var r0 <-chan blocks.Block
	if rf, ok := ret.Get(0).(func(context.Context, []cid.Cid) <-chan blocks.Block); ok {
		r0 = rf(ctx, ks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan blocks.Block)
		}
	}

	return r0
}

// GetSession provides a mock function with given fields: ctx
func (_m *BlobService) GetSession(ctx context.Context) network.BlobGetter {
	ret := _m.Called(ctx)

	var r0 network.BlobGetter
	if rf, ok := ret.Get(0).(func(context.Context) network.BlobGetter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.BlobGetter)
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *BlobService) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *BlobService) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// TriggerReprovide provides a mock function with given fields: ctx
func (_m *BlobService) TriggerReprovide(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
