// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	network "github.com/libp2p/go-libp2p/core/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"
)

// MockStreamFactory is an autogenerated mock type for the StreamFactory type
type MockStreamFactory struct {
	mock.Mock
}

type MockStreamFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStreamFactory) EXPECT() *MockStreamFactory_Expecter {
	return &MockStreamFactory_Expecter{mock: &_m.Mock}
}

// NewStream provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStreamFactory) NewStream(_a0 context.Context, _a1 peer.ID, _a2 protocol.ID) (network.Stream, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for NewStream")
	}

	var r0 network.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, protocol.ID) (network.Stream, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, protocol.ID) network.Stream); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID, protocol.ID) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStreamFactory_NewStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStream'
type MockStreamFactory_NewStream_Call struct {
	*mock.Call
}

// NewStream is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 peer.ID
//   - _a2 protocol.ID
func (_e *MockStreamFactory_Expecter) NewStream(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStreamFactory_NewStream_Call {
	return &MockStreamFactory_NewStream_Call{Call: _e.mock.On("NewStream", _a0, _a1, _a2)}
}

func (_c *MockStreamFactory_NewStream_Call) Run(run func(_a0 context.Context, _a1 peer.ID, _a2 protocol.ID)) *MockStreamFactory_NewStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.ID), args[2].(protocol.ID))
	})
	return _c
}

func (_c *MockStreamFactory_NewStream_Call) Return(_a0 network.Stream, _a1 error) *MockStreamFactory_NewStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStreamFactory_NewStream_Call) RunAndReturn(run func(context.Context, peer.ID, protocol.ID) (network.Stream, error)) *MockStreamFactory_NewStream_Call {
	_c.Call.Return(run)
	return _c
}

// SetStreamHandler provides a mock function with given fields: _a0, _a1
func (_m *MockStreamFactory) SetStreamHandler(_a0 protocol.ID, _a1 network.StreamHandler) {
	_m.Called(_a0, _a1)
}

// MockStreamFactory_SetStreamHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStreamHandler'
type MockStreamFactory_SetStreamHandler_Call struct {
	*mock.Call
}

// SetStreamHandler is a helper method to define mock.On call
//   - _a0 protocol.ID
//   - _a1 network.StreamHandler
func (_e *MockStreamFactory_Expecter) SetStreamHandler(_a0 interface{}, _a1 interface{}) *MockStreamFactory_SetStreamHandler_Call {
	return &MockStreamFactory_SetStreamHandler_Call{Call: _e.mock.On("SetStreamHandler", _a0, _a1)}
}

func (_c *MockStreamFactory_SetStreamHandler_Call) Run(run func(_a0 protocol.ID, _a1 network.StreamHandler)) *MockStreamFactory_SetStreamHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID), args[1].(network.StreamHandler))
	})
	return _c
}

func (_c *MockStreamFactory_SetStreamHandler_Call) Return() *MockStreamFactory_SetStreamHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStreamFactory_SetStreamHandler_Call) RunAndReturn(run func(protocol.ID, network.StreamHandler)) *MockStreamFactory_SetStreamHandler_Call {
	_c.Run(run)
	return _c
}

// NewMockStreamFactory creates a new instance of MockStreamFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamFactory {
	mock := &MockStreamFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
