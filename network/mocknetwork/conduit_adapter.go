// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// ConduitAdapter is an autogenerated mock type for the ConduitAdapter type
type ConduitAdapter struct {
	mock.Mock
}

// MulticastOnChannel provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ConduitAdapter) MulticastOnChannel(_a0 channels.Channel, _a1 interface{}, _a2 uint, _a3 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MulticastOnChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, interface{}, uint, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishOnChannel provides a mock function with given fields: _a0, _a1, _a2
func (_m *ConduitAdapter) PublishOnChannel(_a0 channels.Channel, _a1 interface{}, _a2 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishOnChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, interface{}, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportMisbehaviorOnChannel provides a mock function with given fields: channel, report
func (_m *ConduitAdapter) ReportMisbehaviorOnChannel(channel channels.Channel, report network.MisbehaviorReport) {
	_m.Called(channel, report)
}

// UnRegisterChannel provides a mock function with given fields: channel
func (_m *ConduitAdapter) UnRegisterChannel(channel channels.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for UnRegisterChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnicastOnChannel provides a mock function with given fields: _a0, _a1, _a2
func (_m *ConduitAdapter) UnicastOnChannel(_a0 channels.Channel, _a1 interface{}, _a2 flow.Identifier) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UnicastOnChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, interface{}, flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConduitAdapter creates a new instance of ConduitAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConduitAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConduitAdapter {
	mock := &ConduitAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
