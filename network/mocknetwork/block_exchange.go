// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocknetwork

import (
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"

	context "context"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// BlockExchange is an autogenerated mock type for the BlockExchange type
type BlockExchange struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *BlockExchange) Close() {
	_m.Called()
}

// GetBlocks provides a mock function with given fields: cids
func (_m *BlockExchange) GetBlocks(cids ...cid.Cid) network.BlocksPromise {
	_va := make([]interface{}, len(cids))
	for _i := range cids {
		_va[_i] = cids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 network.BlocksPromise
	if rf, ok := ret.Get(0).(func(...cid.Cid) network.BlocksPromise); ok {
		r0 = rf(cids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.BlocksPromise)
		}
	}

	return r0
}

// GetSession provides a mock function with given fields: ctx
func (_m *BlockExchange) GetSession(ctx context.Context) network.BlockExchangeFetcher {
	ret := _m.Called(ctx)

	var r0 network.BlockExchangeFetcher
	if rf, ok := ret.Get(0).(func(context.Context) network.BlockExchangeFetcher); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.BlockExchangeFetcher)
		}
	}

	return r0
}

// HasBlock provides a mock function with given fields: block
func (_m *BlockExchange) HasBlock(block blocks.Block) error {
	ret := _m.Called(block)

	var r0 error
	if rf, ok := ret.Get(0).(func(blocks.Block) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
