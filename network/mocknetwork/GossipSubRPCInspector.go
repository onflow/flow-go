// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	pubsub "github.com/libp2p/go-libp2p-pubsub"
)

// MockGossipSubRPCInspector is an autogenerated mock type for the GossipSubRPCInspector type
type MockGossipSubRPCInspector struct {
	mock.Mock
}

type MockGossipSubRPCInspector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGossipSubRPCInspector) EXPECT() *MockGossipSubRPCInspector_Expecter {
	return &MockGossipSubRPCInspector_Expecter{mock: &_m.Mock}
}

// ActiveClustersChanged provides a mock function with given fields: _a0
func (_m *MockGossipSubRPCInspector) ActiveClustersChanged(_a0 flow.ChainIDList) {
	_m.Called(_a0)
}

// MockGossipSubRPCInspector_ActiveClustersChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActiveClustersChanged'
type MockGossipSubRPCInspector_ActiveClustersChanged_Call struct {
	*mock.Call
}

// ActiveClustersChanged is a helper method to define mock.On call
//   - _a0 flow.ChainIDList
func (_e *MockGossipSubRPCInspector_Expecter) ActiveClustersChanged(_a0 interface{}) *MockGossipSubRPCInspector_ActiveClustersChanged_Call {
	return &MockGossipSubRPCInspector_ActiveClustersChanged_Call{Call: _e.mock.On("ActiveClustersChanged", _a0)}
}

func (_c *MockGossipSubRPCInspector_ActiveClustersChanged_Call) Run(run func(_a0 flow.ChainIDList)) *MockGossipSubRPCInspector_ActiveClustersChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ChainIDList))
	})
	return _c
}

func (_c *MockGossipSubRPCInspector_ActiveClustersChanged_Call) Return() *MockGossipSubRPCInspector_ActiveClustersChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGossipSubRPCInspector_ActiveClustersChanged_Call) RunAndReturn(run func(flow.ChainIDList)) *MockGossipSubRPCInspector_ActiveClustersChanged_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockGossipSubRPCInspector) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockGossipSubRPCInspector_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockGossipSubRPCInspector_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockGossipSubRPCInspector_Expecter) Done() *MockGossipSubRPCInspector_Done_Call {
	return &MockGossipSubRPCInspector_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockGossipSubRPCInspector_Done_Call) Run(run func()) *MockGossipSubRPCInspector_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGossipSubRPCInspector_Done_Call) Return(_a0 <-chan struct{}) *MockGossipSubRPCInspector_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGossipSubRPCInspector_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockGossipSubRPCInspector_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Inspect provides a mock function with given fields: _a0, _a1
func (_m *MockGossipSubRPCInspector) Inspect(_a0 peer.ID, _a1 *pubsub.RPC) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Inspect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID, *pubsub.RPC) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGossipSubRPCInspector_Inspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inspect'
type MockGossipSubRPCInspector_Inspect_Call struct {
	*mock.Call
}

// Inspect is a helper method to define mock.On call
//   - _a0 peer.ID
//   - _a1 *pubsub.RPC
func (_e *MockGossipSubRPCInspector_Expecter) Inspect(_a0 interface{}, _a1 interface{}) *MockGossipSubRPCInspector_Inspect_Call {
	return &MockGossipSubRPCInspector_Inspect_Call{Call: _e.mock.On("Inspect", _a0, _a1)}
}

func (_c *MockGossipSubRPCInspector_Inspect_Call) Run(run func(_a0 peer.ID, _a1 *pubsub.RPC)) *MockGossipSubRPCInspector_Inspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(*pubsub.RPC))
	})
	return _c
}

func (_c *MockGossipSubRPCInspector_Inspect_Call) Return(_a0 error) *MockGossipSubRPCInspector_Inspect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGossipSubRPCInspector_Inspect_Call) RunAndReturn(run func(peer.ID, *pubsub.RPC) error) *MockGossipSubRPCInspector_Inspect_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockGossipSubRPCInspector) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockGossipSubRPCInspector_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockGossipSubRPCInspector_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockGossipSubRPCInspector_Expecter) Name() *MockGossipSubRPCInspector_Name_Call {
	return &MockGossipSubRPCInspector_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockGossipSubRPCInspector_Name_Call) Run(run func()) *MockGossipSubRPCInspector_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGossipSubRPCInspector_Name_Call) Return(_a0 string) *MockGossipSubRPCInspector_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGossipSubRPCInspector_Name_Call) RunAndReturn(run func() string) *MockGossipSubRPCInspector_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockGossipSubRPCInspector) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockGossipSubRPCInspector_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockGossipSubRPCInspector_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockGossipSubRPCInspector_Expecter) Ready() *MockGossipSubRPCInspector_Ready_Call {
	return &MockGossipSubRPCInspector_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockGossipSubRPCInspector_Ready_Call) Run(run func()) *MockGossipSubRPCInspector_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGossipSubRPCInspector_Ready_Call) Return(_a0 <-chan struct{}) *MockGossipSubRPCInspector_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGossipSubRPCInspector_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockGossipSubRPCInspector_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockGossipSubRPCInspector) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockGossipSubRPCInspector_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockGossipSubRPCInspector_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockGossipSubRPCInspector_Expecter) Start(_a0 interface{}) *MockGossipSubRPCInspector_Start_Call {
	return &MockGossipSubRPCInspector_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockGossipSubRPCInspector_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockGossipSubRPCInspector_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockGossipSubRPCInspector_Start_Call) Return() *MockGossipSubRPCInspector_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGossipSubRPCInspector_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockGossipSubRPCInspector_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockGossipSubRPCInspector creates a new instance of MockGossipSubRPCInspector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGossipSubRPCInspector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGossipSubRPCInspector {
	mock := &MockGossipSubRPCInspector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
