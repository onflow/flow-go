// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"
)

// MockUpdateFunction is an autogenerated mock type for the UpdateFunction type
type MockUpdateFunction struct {
	mock.Mock
}

type MockUpdateFunction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateFunction) EXPECT() *MockUpdateFunction_Expecter {
	return &MockUpdateFunction_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: record
func (_m *MockUpdateFunction) Execute(record p2p.GossipSubSpamRecord) p2p.GossipSubSpamRecord {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 p2p.GossipSubSpamRecord
	if rf, ok := ret.Get(0).(func(p2p.GossipSubSpamRecord) p2p.GossipSubSpamRecord); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(p2p.GossipSubSpamRecord)
	}

	return r0
}

// MockUpdateFunction_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockUpdateFunction_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - record p2p.GossipSubSpamRecord
func (_e *MockUpdateFunction_Expecter) Execute(record interface{}) *MockUpdateFunction_Execute_Call {
	return &MockUpdateFunction_Execute_Call{Call: _e.mock.On("Execute", record)}
}

func (_c *MockUpdateFunction_Execute_Call) Run(run func(record p2p.GossipSubSpamRecord)) *MockUpdateFunction_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.GossipSubSpamRecord))
	})
	return _c
}

func (_c *MockUpdateFunction_Execute_Call) Return(_a0 p2p.GossipSubSpamRecord) *MockUpdateFunction_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdateFunction_Execute_Call) RunAndReturn(run func(p2p.GossipSubSpamRecord) p2p.GossipSubSpamRecord) *MockUpdateFunction_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateFunction creates a new instance of MockUpdateFunction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateFunction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateFunction {
	mock := &MockUpdateFunction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
