// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"

	time "time"
)

// MockPeerScoreTracer is an autogenerated mock type for the PeerScoreTracer type
type MockPeerScoreTracer struct {
	mock.Mock
}

type MockPeerScoreTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeerScoreTracer) EXPECT() *MockPeerScoreTracer_Expecter {
	return &MockPeerScoreTracer_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockPeerScoreTracer) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPeerScoreTracer_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockPeerScoreTracer_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockPeerScoreTracer_Expecter) Done() *MockPeerScoreTracer_Done_Call {
	return &MockPeerScoreTracer_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockPeerScoreTracer_Done_Call) Run(run func()) *MockPeerScoreTracer_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerScoreTracer_Done_Call) Return(_a0 <-chan struct{}) *MockPeerScoreTracer_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerScoreTracer_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockPeerScoreTracer_Done_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppScore provides a mock function with given fields: peerID
func (_m *MockPeerScoreTracer) GetAppScore(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppScore")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreTracer_GetAppScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppScore'
type MockPeerScoreTracer_GetAppScore_Call struct {
	*mock.Call
}

// GetAppScore is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreTracer_Expecter) GetAppScore(peerID interface{}) *MockPeerScoreTracer_GetAppScore_Call {
	return &MockPeerScoreTracer_GetAppScore_Call{Call: _e.mock.On("GetAppScore", peerID)}
}

func (_c *MockPeerScoreTracer_GetAppScore_Call) Run(run func(peerID peer.ID)) *MockPeerScoreTracer_GetAppScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreTracer_GetAppScore_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreTracer_GetAppScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreTracer_GetAppScore_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreTracer_GetAppScore_Call {
	_c.Call.Return(run)
	return _c
}

// GetBehaviourPenalty provides a mock function with given fields: peerID
func (_m *MockPeerScoreTracer) GetBehaviourPenalty(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBehaviourPenalty")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreTracer_GetBehaviourPenalty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBehaviourPenalty'
type MockPeerScoreTracer_GetBehaviourPenalty_Call struct {
	*mock.Call
}

// GetBehaviourPenalty is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreTracer_Expecter) GetBehaviourPenalty(peerID interface{}) *MockPeerScoreTracer_GetBehaviourPenalty_Call {
	return &MockPeerScoreTracer_GetBehaviourPenalty_Call{Call: _e.mock.On("GetBehaviourPenalty", peerID)}
}

func (_c *MockPeerScoreTracer_GetBehaviourPenalty_Call) Run(run func(peerID peer.ID)) *MockPeerScoreTracer_GetBehaviourPenalty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreTracer_GetBehaviourPenalty_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreTracer_GetBehaviourPenalty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreTracer_GetBehaviourPenalty_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreTracer_GetBehaviourPenalty_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPColocationFactor provides a mock function with given fields: peerID
func (_m *MockPeerScoreTracer) GetIPColocationFactor(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetIPColocationFactor")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreTracer_GetIPColocationFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPColocationFactor'
type MockPeerScoreTracer_GetIPColocationFactor_Call struct {
	*mock.Call
}

// GetIPColocationFactor is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreTracer_Expecter) GetIPColocationFactor(peerID interface{}) *MockPeerScoreTracer_GetIPColocationFactor_Call {
	return &MockPeerScoreTracer_GetIPColocationFactor_Call{Call: _e.mock.On("GetIPColocationFactor", peerID)}
}

func (_c *MockPeerScoreTracer_GetIPColocationFactor_Call) Run(run func(peerID peer.ID)) *MockPeerScoreTracer_GetIPColocationFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreTracer_GetIPColocationFactor_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreTracer_GetIPColocationFactor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreTracer_GetIPColocationFactor_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreTracer_GetIPColocationFactor_Call {
	_c.Call.Return(run)
	return _c
}

// GetScore provides a mock function with given fields: peerID
func (_m *MockPeerScoreTracer) GetScore(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetScore")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreTracer_GetScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScore'
type MockPeerScoreTracer_GetScore_Call struct {
	*mock.Call
}

// GetScore is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreTracer_Expecter) GetScore(peerID interface{}) *MockPeerScoreTracer_GetScore_Call {
	return &MockPeerScoreTracer_GetScore_Call{Call: _e.mock.On("GetScore", peerID)}
}

func (_c *MockPeerScoreTracer_GetScore_Call) Run(run func(peerID peer.ID)) *MockPeerScoreTracer_GetScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreTracer_GetScore_Call) Return(_a0 float64, _a1 bool) *MockPeerScoreTracer_GetScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreTracer_GetScore_Call) RunAndReturn(run func(peer.ID) (float64, bool)) *MockPeerScoreTracer_GetScore_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopicScores provides a mock function with given fields: peerID
func (_m *MockPeerScoreTracer) GetTopicScores(peerID peer.ID) (map[string]p2p.TopicScoreSnapshot, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetTopicScores")
	}

	var r0 map[string]p2p.TopicScoreSnapshot
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (map[string]p2p.TopicScoreSnapshot, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) map[string]p2p.TopicScoreSnapshot); ok {
		r0 = rf(peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]p2p.TopicScoreSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPeerScoreTracer_GetTopicScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopicScores'
type MockPeerScoreTracer_GetTopicScores_Call struct {
	*mock.Call
}

// GetTopicScores is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerScoreTracer_Expecter) GetTopicScores(peerID interface{}) *MockPeerScoreTracer_GetTopicScores_Call {
	return &MockPeerScoreTracer_GetTopicScores_Call{Call: _e.mock.On("GetTopicScores", peerID)}
}

func (_c *MockPeerScoreTracer_GetTopicScores_Call) Run(run func(peerID peer.ID)) *MockPeerScoreTracer_GetTopicScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerScoreTracer_GetTopicScores_Call) Return(_a0 map[string]p2p.TopicScoreSnapshot, _a1 bool) *MockPeerScoreTracer_GetTopicScores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerScoreTracer_GetTopicScores_Call) RunAndReturn(run func(peer.ID) (map[string]p2p.TopicScoreSnapshot, bool)) *MockPeerScoreTracer_GetTopicScores_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockPeerScoreTracer) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPeerScoreTracer_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockPeerScoreTracer_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockPeerScoreTracer_Expecter) Ready() *MockPeerScoreTracer_Ready_Call {
	return &MockPeerScoreTracer_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockPeerScoreTracer_Ready_Call) Run(run func()) *MockPeerScoreTracer_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerScoreTracer_Ready_Call) Return(_a0 <-chan struct{}) *MockPeerScoreTracer_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerScoreTracer_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockPeerScoreTracer_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockPeerScoreTracer) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockPeerScoreTracer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPeerScoreTracer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockPeerScoreTracer_Expecter) Start(_a0 interface{}) *MockPeerScoreTracer_Start_Call {
	return &MockPeerScoreTracer_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockPeerScoreTracer_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockPeerScoreTracer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockPeerScoreTracer_Start_Call) Return() *MockPeerScoreTracer_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerScoreTracer_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockPeerScoreTracer_Start_Call {
	_c.Run(run)
	return _c
}

// UpdateInterval provides a mock function with no fields
func (_m *MockPeerScoreTracer) UpdateInterval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockPeerScoreTracer_UpdateInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInterval'
type MockPeerScoreTracer_UpdateInterval_Call struct {
	*mock.Call
}

// UpdateInterval is a helper method to define mock.On call
func (_e *MockPeerScoreTracer_Expecter) UpdateInterval() *MockPeerScoreTracer_UpdateInterval_Call {
	return &MockPeerScoreTracer_UpdateInterval_Call{Call: _e.mock.On("UpdateInterval")}
}

func (_c *MockPeerScoreTracer_UpdateInterval_Call) Run(run func()) *MockPeerScoreTracer_UpdateInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerScoreTracer_UpdateInterval_Call) Return(_a0 time.Duration) *MockPeerScoreTracer_UpdateInterval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerScoreTracer_UpdateInterval_Call) RunAndReturn(run func() time.Duration) *MockPeerScoreTracer_UpdateInterval_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeerScoreSnapshots provides a mock function with given fields: _a0
func (_m *MockPeerScoreTracer) UpdatePeerScoreSnapshots(_a0 map[peer.ID]*p2p.PeerScoreSnapshot) {
	_m.Called(_a0)
}

// MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeerScoreSnapshots'
type MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call struct {
	*mock.Call
}

// UpdatePeerScoreSnapshots is a helper method to define mock.On call
//   - _a0 map[peer.ID]*p2p.PeerScoreSnapshot
func (_e *MockPeerScoreTracer_Expecter) UpdatePeerScoreSnapshots(_a0 interface{}) *MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call {
	return &MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call{Call: _e.mock.On("UpdatePeerScoreSnapshots", _a0)}
}

func (_c *MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call) Run(run func(_a0 map[peer.ID]*p2p.PeerScoreSnapshot)) *MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[peer.ID]*p2p.PeerScoreSnapshot))
	})
	return _c
}

func (_c *MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call) Return() *MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call) RunAndReturn(run func(map[peer.ID]*p2p.PeerScoreSnapshot)) *MockPeerScoreTracer_UpdatePeerScoreSnapshots_Call {
	_c.Run(run)
	return _c
}

// NewMockPeerScoreTracer creates a new instance of MockPeerScoreTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeerScoreTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeerScoreTracer {
	mock := &MockPeerScoreTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
