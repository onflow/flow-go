// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	network "github.com/onflow/flow-go/network"
	mock "github.com/stretchr/testify/mock"
)

// MockDisallowListNotificationConsumer is an autogenerated mock type for the DisallowListNotificationConsumer type
type MockDisallowListNotificationConsumer struct {
	mock.Mock
}

type MockDisallowListNotificationConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDisallowListNotificationConsumer) EXPECT() *MockDisallowListNotificationConsumer_Expecter {
	return &MockDisallowListNotificationConsumer_Expecter{mock: &_m.Mock}
}

// OnAllowListNotification provides a mock function with given fields: _a0
func (_m *MockDisallowListNotificationConsumer) OnAllowListNotification(_a0 *network.AllowListingUpdate) {
	_m.Called(_a0)
}

// MockDisallowListNotificationConsumer_OnAllowListNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAllowListNotification'
type MockDisallowListNotificationConsumer_OnAllowListNotification_Call struct {
	*mock.Call
}

// OnAllowListNotification is a helper method to define mock.On call
//   - _a0 *network.AllowListingUpdate
func (_e *MockDisallowListNotificationConsumer_Expecter) OnAllowListNotification(_a0 interface{}) *MockDisallowListNotificationConsumer_OnAllowListNotification_Call {
	return &MockDisallowListNotificationConsumer_OnAllowListNotification_Call{Call: _e.mock.On("OnAllowListNotification", _a0)}
}

func (_c *MockDisallowListNotificationConsumer_OnAllowListNotification_Call) Run(run func(_a0 *network.AllowListingUpdate)) *MockDisallowListNotificationConsumer_OnAllowListNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*network.AllowListingUpdate))
	})
	return _c
}

func (_c *MockDisallowListNotificationConsumer_OnAllowListNotification_Call) Return() *MockDisallowListNotificationConsumer_OnAllowListNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDisallowListNotificationConsumer_OnAllowListNotification_Call) RunAndReturn(run func(*network.AllowListingUpdate)) *MockDisallowListNotificationConsumer_OnAllowListNotification_Call {
	_c.Run(run)
	return _c
}

// OnDisallowListNotification provides a mock function with given fields: _a0
func (_m *MockDisallowListNotificationConsumer) OnDisallowListNotification(_a0 *network.DisallowListingUpdate) {
	_m.Called(_a0)
}

// MockDisallowListNotificationConsumer_OnDisallowListNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDisallowListNotification'
type MockDisallowListNotificationConsumer_OnDisallowListNotification_Call struct {
	*mock.Call
}

// OnDisallowListNotification is a helper method to define mock.On call
//   - _a0 *network.DisallowListingUpdate
func (_e *MockDisallowListNotificationConsumer_Expecter) OnDisallowListNotification(_a0 interface{}) *MockDisallowListNotificationConsumer_OnDisallowListNotification_Call {
	return &MockDisallowListNotificationConsumer_OnDisallowListNotification_Call{Call: _e.mock.On("OnDisallowListNotification", _a0)}
}

func (_c *MockDisallowListNotificationConsumer_OnDisallowListNotification_Call) Run(run func(_a0 *network.DisallowListingUpdate)) *MockDisallowListNotificationConsumer_OnDisallowListNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*network.DisallowListingUpdate))
	})
	return _c
}

func (_c *MockDisallowListNotificationConsumer_OnDisallowListNotification_Call) Return() *MockDisallowListNotificationConsumer_OnDisallowListNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDisallowListNotificationConsumer_OnDisallowListNotification_Call) RunAndReturn(run func(*network.DisallowListingUpdate)) *MockDisallowListNotificationConsumer_OnDisallowListNotification_Call {
	_c.Run(run)
	return _c
}

// NewMockDisallowListNotificationConsumer creates a new instance of MockDisallowListNotificationConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDisallowListNotificationConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDisallowListNotificationConsumer {
	mock := &MockDisallowListNotificationConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
