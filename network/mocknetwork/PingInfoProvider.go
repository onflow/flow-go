// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import mock "github.com/stretchr/testify/mock"

// MockPingInfoProvider is an autogenerated mock type for the PingInfoProvider type
type MockPingInfoProvider struct {
	mock.Mock
}

type MockPingInfoProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPingInfoProvider) EXPECT() *MockPingInfoProvider_Expecter {
	return &MockPingInfoProvider_Expecter{mock: &_m.Mock}
}

// HotstuffView provides a mock function with no fields
func (_m *MockPingInfoProvider) HotstuffView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HotstuffView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockPingInfoProvider_HotstuffView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HotstuffView'
type MockPingInfoProvider_HotstuffView_Call struct {
	*mock.Call
}

// HotstuffView is a helper method to define mock.On call
func (_e *MockPingInfoProvider_Expecter) HotstuffView() *MockPingInfoProvider_HotstuffView_Call {
	return &MockPingInfoProvider_HotstuffView_Call{Call: _e.mock.On("HotstuffView")}
}

func (_c *MockPingInfoProvider_HotstuffView_Call) Run(run func()) *MockPingInfoProvider_HotstuffView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPingInfoProvider_HotstuffView_Call) Return(_a0 uint64) *MockPingInfoProvider_HotstuffView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPingInfoProvider_HotstuffView_Call) RunAndReturn(run func() uint64) *MockPingInfoProvider_HotstuffView_Call {
	_c.Call.Return(run)
	return _c
}

// SealedBlockHeight provides a mock function with no fields
func (_m *MockPingInfoProvider) SealedBlockHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SealedBlockHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockPingInfoProvider_SealedBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SealedBlockHeight'
type MockPingInfoProvider_SealedBlockHeight_Call struct {
	*mock.Call
}

// SealedBlockHeight is a helper method to define mock.On call
func (_e *MockPingInfoProvider_Expecter) SealedBlockHeight() *MockPingInfoProvider_SealedBlockHeight_Call {
	return &MockPingInfoProvider_SealedBlockHeight_Call{Call: _e.mock.On("SealedBlockHeight")}
}

func (_c *MockPingInfoProvider_SealedBlockHeight_Call) Run(run func()) *MockPingInfoProvider_SealedBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPingInfoProvider_SealedBlockHeight_Call) Return(_a0 uint64) *MockPingInfoProvider_SealedBlockHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPingInfoProvider_SealedBlockHeight_Call) RunAndReturn(run func() uint64) *MockPingInfoProvider_SealedBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SoftwareVersion provides a mock function with no fields
func (_m *MockPingInfoProvider) SoftwareVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SoftwareVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPingInfoProvider_SoftwareVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftwareVersion'
type MockPingInfoProvider_SoftwareVersion_Call struct {
	*mock.Call
}

// SoftwareVersion is a helper method to define mock.On call
func (_e *MockPingInfoProvider_Expecter) SoftwareVersion() *MockPingInfoProvider_SoftwareVersion_Call {
	return &MockPingInfoProvider_SoftwareVersion_Call{Call: _e.mock.On("SoftwareVersion")}
}

func (_c *MockPingInfoProvider_SoftwareVersion_Call) Run(run func()) *MockPingInfoProvider_SoftwareVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPingInfoProvider_SoftwareVersion_Call) Return(_a0 string) *MockPingInfoProvider_SoftwareVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPingInfoProvider_SoftwareVersion_Call) RunAndReturn(run func() string) *MockPingInfoProvider_SoftwareVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPingInfoProvider creates a new instance of MockPingInfoProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPingInfoProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPingInfoProvider {
	mock := &MockPingInfoProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
