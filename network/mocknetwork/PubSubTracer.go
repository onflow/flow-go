// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	channels "github.com/onflow/flow-go/network/channels"

	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"

	pubsub "github.com/libp2p/go-libp2p-pubsub"
)

// MockPubSubTracer is an autogenerated mock type for the PubSubTracer type
type MockPubSubTracer struct {
	mock.Mock
}

type MockPubSubTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSubTracer) EXPECT() *MockPubSubTracer_Expecter {
	return &MockPubSubTracer_Expecter{mock: &_m.Mock}
}

// AddPeer provides a mock function with given fields: p, proto
func (_m *MockPubSubTracer) AddPeer(p peer.ID, proto protocol.ID) {
	_m.Called(p, proto)
}

// MockPubSubTracer_AddPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPeer'
type MockPubSubTracer_AddPeer_Call struct {
	*mock.Call
}

// AddPeer is a helper method to define mock.On call
//   - p peer.ID
//   - proto protocol.ID
func (_e *MockPubSubTracer_Expecter) AddPeer(p interface{}, proto interface{}) *MockPubSubTracer_AddPeer_Call {
	return &MockPubSubTracer_AddPeer_Call{Call: _e.mock.On("AddPeer", p, proto)}
}

func (_c *MockPubSubTracer_AddPeer_Call) Run(run func(p peer.ID, proto protocol.ID)) *MockPubSubTracer_AddPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(protocol.ID))
	})
	return _c
}

func (_c *MockPubSubTracer_AddPeer_Call) Return() *MockPubSubTracer_AddPeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_AddPeer_Call) RunAndReturn(run func(peer.ID, protocol.ID)) *MockPubSubTracer_AddPeer_Call {
	_c.Run(run)
	return _c
}

// DeliverMessage provides a mock function with given fields: msg
func (_m *MockPubSubTracer) DeliverMessage(msg *pubsub.Message) {
	_m.Called(msg)
}

// MockPubSubTracer_DeliverMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliverMessage'
type MockPubSubTracer_DeliverMessage_Call struct {
	*mock.Call
}

// DeliverMessage is a helper method to define mock.On call
//   - msg *pubsub.Message
func (_e *MockPubSubTracer_Expecter) DeliverMessage(msg interface{}) *MockPubSubTracer_DeliverMessage_Call {
	return &MockPubSubTracer_DeliverMessage_Call{Call: _e.mock.On("DeliverMessage", msg)}
}

func (_c *MockPubSubTracer_DeliverMessage_Call) Run(run func(msg *pubsub.Message)) *MockPubSubTracer_DeliverMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.Message))
	})
	return _c
}

func (_c *MockPubSubTracer_DeliverMessage_Call) Return() *MockPubSubTracer_DeliverMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_DeliverMessage_Call) RunAndReturn(run func(*pubsub.Message)) *MockPubSubTracer_DeliverMessage_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockPubSubTracer) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPubSubTracer_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockPubSubTracer_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockPubSubTracer_Expecter) Done() *MockPubSubTracer_Done_Call {
	return &MockPubSubTracer_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockPubSubTracer_Done_Call) Run(run func()) *MockPubSubTracer_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubTracer_Done_Call) Return(_a0 <-chan struct{}) *MockPubSubTracer_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubTracer_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockPubSubTracer_Done_Call {
	_c.Call.Return(run)
	return _c
}

// DropRPC provides a mock function with given fields: rpc, p
func (_m *MockPubSubTracer) DropRPC(rpc *pubsub.RPC, p peer.ID) {
	_m.Called(rpc, p)
}

// MockPubSubTracer_DropRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropRPC'
type MockPubSubTracer_DropRPC_Call struct {
	*mock.Call
}

// DropRPC is a helper method to define mock.On call
//   - rpc *pubsub.RPC
//   - p peer.ID
func (_e *MockPubSubTracer_Expecter) DropRPC(rpc interface{}, p interface{}) *MockPubSubTracer_DropRPC_Call {
	return &MockPubSubTracer_DropRPC_Call{Call: _e.mock.On("DropRPC", rpc, p)}
}

func (_c *MockPubSubTracer_DropRPC_Call) Run(run func(rpc *pubsub.RPC, p peer.ID)) *MockPubSubTracer_DropRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.RPC), args[1].(peer.ID))
	})
	return _c
}

func (_c *MockPubSubTracer_DropRPC_Call) Return() *MockPubSubTracer_DropRPC_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_DropRPC_Call) RunAndReturn(run func(*pubsub.RPC, peer.ID)) *MockPubSubTracer_DropRPC_Call {
	_c.Run(run)
	return _c
}

// DuplicateMessage provides a mock function with given fields: msg
func (_m *MockPubSubTracer) DuplicateMessage(msg *pubsub.Message) {
	_m.Called(msg)
}

// MockPubSubTracer_DuplicateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DuplicateMessage'
type MockPubSubTracer_DuplicateMessage_Call struct {
	*mock.Call
}

// DuplicateMessage is a helper method to define mock.On call
//   - msg *pubsub.Message
func (_e *MockPubSubTracer_Expecter) DuplicateMessage(msg interface{}) *MockPubSubTracer_DuplicateMessage_Call {
	return &MockPubSubTracer_DuplicateMessage_Call{Call: _e.mock.On("DuplicateMessage", msg)}
}

func (_c *MockPubSubTracer_DuplicateMessage_Call) Run(run func(msg *pubsub.Message)) *MockPubSubTracer_DuplicateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.Message))
	})
	return _c
}

func (_c *MockPubSubTracer_DuplicateMessage_Call) Return() *MockPubSubTracer_DuplicateMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_DuplicateMessage_Call) RunAndReturn(run func(*pubsub.Message)) *MockPubSubTracer_DuplicateMessage_Call {
	_c.Run(run)
	return _c
}

// DuplicateMessageCount provides a mock function with given fields: _a0
func (_m *MockPubSubTracer) DuplicateMessageCount(_a0 peer.ID) float64 {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DuplicateMessageCount")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockPubSubTracer_DuplicateMessageCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DuplicateMessageCount'
type MockPubSubTracer_DuplicateMessageCount_Call struct {
	*mock.Call
}

// DuplicateMessageCount is a helper method to define mock.On call
//   - _a0 peer.ID
func (_e *MockPubSubTracer_Expecter) DuplicateMessageCount(_a0 interface{}) *MockPubSubTracer_DuplicateMessageCount_Call {
	return &MockPubSubTracer_DuplicateMessageCount_Call{Call: _e.mock.On("DuplicateMessageCount", _a0)}
}

func (_c *MockPubSubTracer_DuplicateMessageCount_Call) Run(run func(_a0 peer.ID)) *MockPubSubTracer_DuplicateMessageCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPubSubTracer_DuplicateMessageCount_Call) Return(_a0 float64) *MockPubSubTracer_DuplicateMessageCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubTracer_DuplicateMessageCount_Call) RunAndReturn(run func(peer.ID) float64) *MockPubSubTracer_DuplicateMessageCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalMeshPeers provides a mock function with given fields: topic
func (_m *MockPubSubTracer) GetLocalMeshPeers(topic channels.Topic) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalMeshPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(channels.Topic) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockPubSubTracer_GetLocalMeshPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalMeshPeers'
type MockPubSubTracer_GetLocalMeshPeers_Call struct {
	*mock.Call
}

// GetLocalMeshPeers is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockPubSubTracer_Expecter) GetLocalMeshPeers(topic interface{}) *MockPubSubTracer_GetLocalMeshPeers_Call {
	return &MockPubSubTracer_GetLocalMeshPeers_Call{Call: _e.mock.On("GetLocalMeshPeers", topic)}
}

func (_c *MockPubSubTracer_GetLocalMeshPeers_Call) Run(run func(topic channels.Topic)) *MockPubSubTracer_GetLocalMeshPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockPubSubTracer_GetLocalMeshPeers_Call) Return(_a0 []peer.ID) *MockPubSubTracer_GetLocalMeshPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubTracer_GetLocalMeshPeers_Call) RunAndReturn(run func(channels.Topic) []peer.ID) *MockPubSubTracer_GetLocalMeshPeers_Call {
	_c.Call.Return(run)
	return _c
}

// Graft provides a mock function with given fields: p, topic
func (_m *MockPubSubTracer) Graft(p peer.ID, topic string) {
	_m.Called(p, topic)
}

// MockPubSubTracer_Graft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Graft'
type MockPubSubTracer_Graft_Call struct {
	*mock.Call
}

// Graft is a helper method to define mock.On call
//   - p peer.ID
//   - topic string
func (_e *MockPubSubTracer_Expecter) Graft(p interface{}, topic interface{}) *MockPubSubTracer_Graft_Call {
	return &MockPubSubTracer_Graft_Call{Call: _e.mock.On("Graft", p, topic)}
}

func (_c *MockPubSubTracer_Graft_Call) Run(run func(p peer.ID, topic string)) *MockPubSubTracer_Graft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(string))
	})
	return _c
}

func (_c *MockPubSubTracer_Graft_Call) Return() *MockPubSubTracer_Graft_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_Graft_Call) RunAndReturn(run func(peer.ID, string)) *MockPubSubTracer_Graft_Call {
	_c.Run(run)
	return _c
}

// Join provides a mock function with given fields: topic
func (_m *MockPubSubTracer) Join(topic string) {
	_m.Called(topic)
}

// MockPubSubTracer_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockPubSubTracer_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - topic string
func (_e *MockPubSubTracer_Expecter) Join(topic interface{}) *MockPubSubTracer_Join_Call {
	return &MockPubSubTracer_Join_Call{Call: _e.mock.On("Join", topic)}
}

func (_c *MockPubSubTracer_Join_Call) Run(run func(topic string)) *MockPubSubTracer_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPubSubTracer_Join_Call) Return() *MockPubSubTracer_Join_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_Join_Call) RunAndReturn(run func(string)) *MockPubSubTracer_Join_Call {
	_c.Run(run)
	return _c
}

// LastHighestIHaveRPCSize provides a mock function with no fields
func (_m *MockPubSubTracer) LastHighestIHaveRPCSize() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastHighestIHaveRPCSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockPubSubTracer_LastHighestIHaveRPCSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastHighestIHaveRPCSize'
type MockPubSubTracer_LastHighestIHaveRPCSize_Call struct {
	*mock.Call
}

// LastHighestIHaveRPCSize is a helper method to define mock.On call
func (_e *MockPubSubTracer_Expecter) LastHighestIHaveRPCSize() *MockPubSubTracer_LastHighestIHaveRPCSize_Call {
	return &MockPubSubTracer_LastHighestIHaveRPCSize_Call{Call: _e.mock.On("LastHighestIHaveRPCSize")}
}

func (_c *MockPubSubTracer_LastHighestIHaveRPCSize_Call) Run(run func()) *MockPubSubTracer_LastHighestIHaveRPCSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubTracer_LastHighestIHaveRPCSize_Call) Return(_a0 int64) *MockPubSubTracer_LastHighestIHaveRPCSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubTracer_LastHighestIHaveRPCSize_Call) RunAndReturn(run func() int64) *MockPubSubTracer_LastHighestIHaveRPCSize_Call {
	_c.Call.Return(run)
	return _c
}

// Leave provides a mock function with given fields: topic
func (_m *MockPubSubTracer) Leave(topic string) {
	_m.Called(topic)
}

// MockPubSubTracer_Leave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leave'
type MockPubSubTracer_Leave_Call struct {
	*mock.Call
}

// Leave is a helper method to define mock.On call
//   - topic string
func (_e *MockPubSubTracer_Expecter) Leave(topic interface{}) *MockPubSubTracer_Leave_Call {
	return &MockPubSubTracer_Leave_Call{Call: _e.mock.On("Leave", topic)}
}

func (_c *MockPubSubTracer_Leave_Call) Run(run func(topic string)) *MockPubSubTracer_Leave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPubSubTracer_Leave_Call) Return() *MockPubSubTracer_Leave_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_Leave_Call) RunAndReturn(run func(string)) *MockPubSubTracer_Leave_Call {
	_c.Run(run)
	return _c
}

// Prune provides a mock function with given fields: p, topic
func (_m *MockPubSubTracer) Prune(p peer.ID, topic string) {
	_m.Called(p, topic)
}

// MockPubSubTracer_Prune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prune'
type MockPubSubTracer_Prune_Call struct {
	*mock.Call
}

// Prune is a helper method to define mock.On call
//   - p peer.ID
//   - topic string
func (_e *MockPubSubTracer_Expecter) Prune(p interface{}, topic interface{}) *MockPubSubTracer_Prune_Call {
	return &MockPubSubTracer_Prune_Call{Call: _e.mock.On("Prune", p, topic)}
}

func (_c *MockPubSubTracer_Prune_Call) Run(run func(p peer.ID, topic string)) *MockPubSubTracer_Prune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(string))
	})
	return _c
}

func (_c *MockPubSubTracer_Prune_Call) Return() *MockPubSubTracer_Prune_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_Prune_Call) RunAndReturn(run func(peer.ID, string)) *MockPubSubTracer_Prune_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockPubSubTracer) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPubSubTracer_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockPubSubTracer_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockPubSubTracer_Expecter) Ready() *MockPubSubTracer_Ready_Call {
	return &MockPubSubTracer_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockPubSubTracer_Ready_Call) Run(run func()) *MockPubSubTracer_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPubSubTracer_Ready_Call) Return(_a0 <-chan struct{}) *MockPubSubTracer_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubTracer_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockPubSubTracer_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// RecvRPC provides a mock function with given fields: rpc
func (_m *MockPubSubTracer) RecvRPC(rpc *pubsub.RPC) {
	_m.Called(rpc)
}

// MockPubSubTracer_RecvRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvRPC'
type MockPubSubTracer_RecvRPC_Call struct {
	*mock.Call
}

// RecvRPC is a helper method to define mock.On call
//   - rpc *pubsub.RPC
func (_e *MockPubSubTracer_Expecter) RecvRPC(rpc interface{}) *MockPubSubTracer_RecvRPC_Call {
	return &MockPubSubTracer_RecvRPC_Call{Call: _e.mock.On("RecvRPC", rpc)}
}

func (_c *MockPubSubTracer_RecvRPC_Call) Run(run func(rpc *pubsub.RPC)) *MockPubSubTracer_RecvRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.RPC))
	})
	return _c
}

func (_c *MockPubSubTracer_RecvRPC_Call) Return() *MockPubSubTracer_RecvRPC_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_RecvRPC_Call) RunAndReturn(run func(*pubsub.RPC)) *MockPubSubTracer_RecvRPC_Call {
	_c.Run(run)
	return _c
}

// RejectMessage provides a mock function with given fields: msg, reason
func (_m *MockPubSubTracer) RejectMessage(msg *pubsub.Message, reason string) {
	_m.Called(msg, reason)
}

// MockPubSubTracer_RejectMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectMessage'
type MockPubSubTracer_RejectMessage_Call struct {
	*mock.Call
}

// RejectMessage is a helper method to define mock.On call
//   - msg *pubsub.Message
//   - reason string
func (_e *MockPubSubTracer_Expecter) RejectMessage(msg interface{}, reason interface{}) *MockPubSubTracer_RejectMessage_Call {
	return &MockPubSubTracer_RejectMessage_Call{Call: _e.mock.On("RejectMessage", msg, reason)}
}

func (_c *MockPubSubTracer_RejectMessage_Call) Run(run func(msg *pubsub.Message, reason string)) *MockPubSubTracer_RejectMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.Message), args[1].(string))
	})
	return _c
}

func (_c *MockPubSubTracer_RejectMessage_Call) Return() *MockPubSubTracer_RejectMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_RejectMessage_Call) RunAndReturn(run func(*pubsub.Message, string)) *MockPubSubTracer_RejectMessage_Call {
	_c.Run(run)
	return _c
}

// RemovePeer provides a mock function with given fields: p
func (_m *MockPubSubTracer) RemovePeer(p peer.ID) {
	_m.Called(p)
}

// MockPubSubTracer_RemovePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePeer'
type MockPubSubTracer_RemovePeer_Call struct {
	*mock.Call
}

// RemovePeer is a helper method to define mock.On call
//   - p peer.ID
func (_e *MockPubSubTracer_Expecter) RemovePeer(p interface{}) *MockPubSubTracer_RemovePeer_Call {
	return &MockPubSubTracer_RemovePeer_Call{Call: _e.mock.On("RemovePeer", p)}
}

func (_c *MockPubSubTracer_RemovePeer_Call) Run(run func(p peer.ID)) *MockPubSubTracer_RemovePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPubSubTracer_RemovePeer_Call) Return() *MockPubSubTracer_RemovePeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_RemovePeer_Call) RunAndReturn(run func(peer.ID)) *MockPubSubTracer_RemovePeer_Call {
	_c.Run(run)
	return _c
}

// SendRPC provides a mock function with given fields: rpc, p
func (_m *MockPubSubTracer) SendRPC(rpc *pubsub.RPC, p peer.ID) {
	_m.Called(rpc, p)
}

// MockPubSubTracer_SendRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRPC'
type MockPubSubTracer_SendRPC_Call struct {
	*mock.Call
}

// SendRPC is a helper method to define mock.On call
//   - rpc *pubsub.RPC
//   - p peer.ID
func (_e *MockPubSubTracer_Expecter) SendRPC(rpc interface{}, p interface{}) *MockPubSubTracer_SendRPC_Call {
	return &MockPubSubTracer_SendRPC_Call{Call: _e.mock.On("SendRPC", rpc, p)}
}

func (_c *MockPubSubTracer_SendRPC_Call) Run(run func(rpc *pubsub.RPC, p peer.ID)) *MockPubSubTracer_SendRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.RPC), args[1].(peer.ID))
	})
	return _c
}

func (_c *MockPubSubTracer_SendRPC_Call) Return() *MockPubSubTracer_SendRPC_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_SendRPC_Call) RunAndReturn(run func(*pubsub.RPC, peer.ID)) *MockPubSubTracer_SendRPC_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockPubSubTracer) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockPubSubTracer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPubSubTracer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockPubSubTracer_Expecter) Start(_a0 interface{}) *MockPubSubTracer_Start_Call {
	return &MockPubSubTracer_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockPubSubTracer_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockPubSubTracer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockPubSubTracer_Start_Call) Return() *MockPubSubTracer_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockPubSubTracer_Start_Call {
	_c.Run(run)
	return _c
}

// ThrottlePeer provides a mock function with given fields: p
func (_m *MockPubSubTracer) ThrottlePeer(p peer.ID) {
	_m.Called(p)
}

// MockPubSubTracer_ThrottlePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ThrottlePeer'
type MockPubSubTracer_ThrottlePeer_Call struct {
	*mock.Call
}

// ThrottlePeer is a helper method to define mock.On call
//   - p peer.ID
func (_e *MockPubSubTracer_Expecter) ThrottlePeer(p interface{}) *MockPubSubTracer_ThrottlePeer_Call {
	return &MockPubSubTracer_ThrottlePeer_Call{Call: _e.mock.On("ThrottlePeer", p)}
}

func (_c *MockPubSubTracer_ThrottlePeer_Call) Run(run func(p peer.ID)) *MockPubSubTracer_ThrottlePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPubSubTracer_ThrottlePeer_Call) Return() *MockPubSubTracer_ThrottlePeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_ThrottlePeer_Call) RunAndReturn(run func(peer.ID)) *MockPubSubTracer_ThrottlePeer_Call {
	_c.Run(run)
	return _c
}

// UndeliverableMessage provides a mock function with given fields: msg
func (_m *MockPubSubTracer) UndeliverableMessage(msg *pubsub.Message) {
	_m.Called(msg)
}

// MockPubSubTracer_UndeliverableMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UndeliverableMessage'
type MockPubSubTracer_UndeliverableMessage_Call struct {
	*mock.Call
}

// UndeliverableMessage is a helper method to define mock.On call
//   - msg *pubsub.Message
func (_e *MockPubSubTracer_Expecter) UndeliverableMessage(msg interface{}) *MockPubSubTracer_UndeliverableMessage_Call {
	return &MockPubSubTracer_UndeliverableMessage_Call{Call: _e.mock.On("UndeliverableMessage", msg)}
}

func (_c *MockPubSubTracer_UndeliverableMessage_Call) Run(run func(msg *pubsub.Message)) *MockPubSubTracer_UndeliverableMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.Message))
	})
	return _c
}

func (_c *MockPubSubTracer_UndeliverableMessage_Call) Return() *MockPubSubTracer_UndeliverableMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_UndeliverableMessage_Call) RunAndReturn(run func(*pubsub.Message)) *MockPubSubTracer_UndeliverableMessage_Call {
	_c.Run(run)
	return _c
}

// ValidateMessage provides a mock function with given fields: msg
func (_m *MockPubSubTracer) ValidateMessage(msg *pubsub.Message) {
	_m.Called(msg)
}

// MockPubSubTracer_ValidateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMessage'
type MockPubSubTracer_ValidateMessage_Call struct {
	*mock.Call
}

// ValidateMessage is a helper method to define mock.On call
//   - msg *pubsub.Message
func (_e *MockPubSubTracer_Expecter) ValidateMessage(msg interface{}) *MockPubSubTracer_ValidateMessage_Call {
	return &MockPubSubTracer_ValidateMessage_Call{Call: _e.mock.On("ValidateMessage", msg)}
}

func (_c *MockPubSubTracer_ValidateMessage_Call) Run(run func(msg *pubsub.Message)) *MockPubSubTracer_ValidateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pubsub.Message))
	})
	return _c
}

func (_c *MockPubSubTracer_ValidateMessage_Call) Return() *MockPubSubTracer_ValidateMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSubTracer_ValidateMessage_Call) RunAndReturn(run func(*pubsub.Message)) *MockPubSubTracer_ValidateMessage_Call {
	_c.Run(run)
	return _c
}

// WasIHaveRPCSent provides a mock function with given fields: messageID
func (_m *MockPubSubTracer) WasIHaveRPCSent(messageID string) bool {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for WasIHaveRPCSent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPubSubTracer_WasIHaveRPCSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WasIHaveRPCSent'
type MockPubSubTracer_WasIHaveRPCSent_Call struct {
	*mock.Call
}

// WasIHaveRPCSent is a helper method to define mock.On call
//   - messageID string
func (_e *MockPubSubTracer_Expecter) WasIHaveRPCSent(messageID interface{}) *MockPubSubTracer_WasIHaveRPCSent_Call {
	return &MockPubSubTracer_WasIHaveRPCSent_Call{Call: _e.mock.On("WasIHaveRPCSent", messageID)}
}

func (_c *MockPubSubTracer_WasIHaveRPCSent_Call) Run(run func(messageID string)) *MockPubSubTracer_WasIHaveRPCSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPubSubTracer_WasIHaveRPCSent_Call) Return(_a0 bool) *MockPubSubTracer_WasIHaveRPCSent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSubTracer_WasIHaveRPCSent_Call) RunAndReturn(run func(string) bool) *MockPubSubTracer_WasIHaveRPCSent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSubTracer creates a new instance of MockPubSubTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSubTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSubTracer {
	mock := &MockPubSubTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
