// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	host "github.com/libp2p/go-libp2p/core/host"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	zerolog "github.com/rs/zerolog"
)

// MockGossipSubFactoryFunc is an autogenerated mock type for the GossipSubFactoryFunc type
type MockGossipSubFactoryFunc struct {
	mock.Mock
}

type MockGossipSubFactoryFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGossipSubFactoryFunc) EXPECT() *MockGossipSubFactoryFunc_Expecter {
	return &MockGossipSubFactoryFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockGossipSubFactoryFunc) Execute(_a0 context.Context, _a1 zerolog.Logger, _a2 host.Host, _a3 p2p.PubSubAdapterConfig, _a4 p2p.CollectionClusterChangesConsumer) (p2p.PubSubAdapter, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 p2p.PubSubAdapter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, zerolog.Logger, host.Host, p2p.PubSubAdapterConfig, p2p.CollectionClusterChangesConsumer) (p2p.PubSubAdapter, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, zerolog.Logger, host.Host, p2p.PubSubAdapterConfig, p2p.CollectionClusterChangesConsumer) p2p.PubSubAdapter); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.PubSubAdapter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, zerolog.Logger, host.Host, p2p.PubSubAdapterConfig, p2p.CollectionClusterChangesConsumer) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGossipSubFactoryFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockGossipSubFactoryFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 zerolog.Logger
//   - _a2 host.Host
//   - _a3 p2p.PubSubAdapterConfig
//   - _a4 p2p.CollectionClusterChangesConsumer
func (_e *MockGossipSubFactoryFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockGossipSubFactoryFunc_Execute_Call {
	return &MockGossipSubFactoryFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockGossipSubFactoryFunc_Execute_Call) Run(run func(_a0 context.Context, _a1 zerolog.Logger, _a2 host.Host, _a3 p2p.PubSubAdapterConfig, _a4 p2p.CollectionClusterChangesConsumer)) *MockGossipSubFactoryFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(zerolog.Logger), args[2].(host.Host), args[3].(p2p.PubSubAdapterConfig), args[4].(p2p.CollectionClusterChangesConsumer))
	})
	return _c
}

func (_c *MockGossipSubFactoryFunc_Execute_Call) Return(_a0 p2p.PubSubAdapter, _a1 error) *MockGossipSubFactoryFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGossipSubFactoryFunc_Execute_Call) RunAndReturn(run func(context.Context, zerolog.Logger, host.Host, p2p.PubSubAdapterConfig, p2p.CollectionClusterChangesConsumer) (p2p.PubSubAdapter, error)) *MockGossipSubFactoryFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGossipSubFactoryFunc creates a new instance of MockGossipSubFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGossipSubFactoryFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGossipSubFactoryFunc {
	mock := &MockGossipSubFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
