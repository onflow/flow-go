// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	network "github.com/libp2p/go-libp2p/core/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockConnectorHost is an autogenerated mock type for the ConnectorHost type
type MockConnectorHost struct {
	mock.Mock
}

type MockConnectorHost_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectorHost) EXPECT() *MockConnectorHost_Expecter {
	return &MockConnectorHost_Expecter{mock: &_m.Mock}
}

// ClosePeer provides a mock function with given fields: peerId
func (_m *MockConnectorHost) ClosePeer(peerId peer.ID) error {
	ret := _m.Called(peerId)

	if len(ret) == 0 {
		panic("no return value specified for ClosePeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID) error); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectorHost_ClosePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClosePeer'
type MockConnectorHost_ClosePeer_Call struct {
	*mock.Call
}

// ClosePeer is a helper method to define mock.On call
//   - peerId peer.ID
func (_e *MockConnectorHost_Expecter) ClosePeer(peerId interface{}) *MockConnectorHost_ClosePeer_Call {
	return &MockConnectorHost_ClosePeer_Call{Call: _e.mock.On("ClosePeer", peerId)}
}

func (_c *MockConnectorHost_ClosePeer_Call) Run(run func(peerId peer.ID)) *MockConnectorHost_ClosePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockConnectorHost_ClosePeer_Call) Return(_a0 error) *MockConnectorHost_ClosePeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectorHost_ClosePeer_Call) RunAndReturn(run func(peer.ID) error) *MockConnectorHost_ClosePeer_Call {
	_c.Call.Return(run)
	return _c
}

// Connections provides a mock function with no fields
func (_m *MockConnectorHost) Connections() []network.Conn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connections")
	}

	var r0 []network.Conn
	if rf, ok := ret.Get(0).(func() []network.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.Conn)
		}
	}

	return r0
}

// MockConnectorHost_Connections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connections'
type MockConnectorHost_Connections_Call struct {
	*mock.Call
}

// Connections is a helper method to define mock.On call
func (_e *MockConnectorHost_Expecter) Connections() *MockConnectorHost_Connections_Call {
	return &MockConnectorHost_Connections_Call{Call: _e.mock.On("Connections")}
}

func (_c *MockConnectorHost_Connections_Call) Run(run func()) *MockConnectorHost_Connections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectorHost_Connections_Call) Return(_a0 []network.Conn) *MockConnectorHost_Connections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectorHost_Connections_Call) RunAndReturn(run func() []network.Conn) *MockConnectorHost_Connections_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockConnectorHost) ID() peer.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 peer.ID
	if rf, ok := ret.Get(0).(func() peer.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	return r0
}

// MockConnectorHost_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockConnectorHost_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockConnectorHost_Expecter) ID() *MockConnectorHost_ID_Call {
	return &MockConnectorHost_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockConnectorHost_ID_Call) Run(run func()) *MockConnectorHost_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectorHost_ID_Call) Return(_a0 peer.ID) *MockConnectorHost_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectorHost_ID_Call) RunAndReturn(run func() peer.ID) *MockConnectorHost_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnectedTo provides a mock function with given fields: peerId
func (_m *MockConnectorHost) IsConnectedTo(peerId peer.ID) bool {
	ret := _m.Called(peerId)

	if len(ret) == 0 {
		panic("no return value specified for IsConnectedTo")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(peer.ID) bool); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConnectorHost_IsConnectedTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnectedTo'
type MockConnectorHost_IsConnectedTo_Call struct {
	*mock.Call
}

// IsConnectedTo is a helper method to define mock.On call
//   - peerId peer.ID
func (_e *MockConnectorHost_Expecter) IsConnectedTo(peerId interface{}) *MockConnectorHost_IsConnectedTo_Call {
	return &MockConnectorHost_IsConnectedTo_Call{Call: _e.mock.On("IsConnectedTo", peerId)}
}

func (_c *MockConnectorHost_IsConnectedTo_Call) Run(run func(peerId peer.ID)) *MockConnectorHost_IsConnectedTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockConnectorHost_IsConnectedTo_Call) Return(_a0 bool) *MockConnectorHost_IsConnectedTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectorHost_IsConnectedTo_Call) RunAndReturn(run func(peer.ID) bool) *MockConnectorHost_IsConnectedTo_Call {
	_c.Call.Return(run)
	return _c
}

// IsProtected provides a mock function with given fields: peerId
func (_m *MockConnectorHost) IsProtected(peerId peer.ID) bool {
	ret := _m.Called(peerId)

	if len(ret) == 0 {
		panic("no return value specified for IsProtected")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(peer.ID) bool); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConnectorHost_IsProtected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProtected'
type MockConnectorHost_IsProtected_Call struct {
	*mock.Call
}

// IsProtected is a helper method to define mock.On call
//   - peerId peer.ID
func (_e *MockConnectorHost_Expecter) IsProtected(peerId interface{}) *MockConnectorHost_IsProtected_Call {
	return &MockConnectorHost_IsProtected_Call{Call: _e.mock.On("IsProtected", peerId)}
}

func (_c *MockConnectorHost_IsProtected_Call) Run(run func(peerId peer.ID)) *MockConnectorHost_IsProtected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockConnectorHost_IsProtected_Call) Return(_a0 bool) *MockConnectorHost_IsProtected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectorHost_IsProtected_Call) RunAndReturn(run func(peer.ID) bool) *MockConnectorHost_IsProtected_Call {
	_c.Call.Return(run)
	return _c
}

// PeerInfo provides a mock function with given fields: peerId
func (_m *MockConnectorHost) PeerInfo(peerId peer.ID) peer.AddrInfo {
	ret := _m.Called(peerId)

	if len(ret) == 0 {
		panic("no return value specified for PeerInfo")
	}

	var r0 peer.AddrInfo
	if rf, ok := ret.Get(0).(func(peer.ID) peer.AddrInfo); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Get(0).(peer.AddrInfo)
	}

	return r0
}

// MockConnectorHost_PeerInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerInfo'
type MockConnectorHost_PeerInfo_Call struct {
	*mock.Call
}

// PeerInfo is a helper method to define mock.On call
//   - peerId peer.ID
func (_e *MockConnectorHost_Expecter) PeerInfo(peerId interface{}) *MockConnectorHost_PeerInfo_Call {
	return &MockConnectorHost_PeerInfo_Call{Call: _e.mock.On("PeerInfo", peerId)}
}

func (_c *MockConnectorHost_PeerInfo_Call) Run(run func(peerId peer.ID)) *MockConnectorHost_PeerInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockConnectorHost_PeerInfo_Call) Return(_a0 peer.AddrInfo) *MockConnectorHost_PeerInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectorHost_PeerInfo_Call) RunAndReturn(run func(peer.ID) peer.AddrInfo) *MockConnectorHost_PeerInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectorHost creates a new instance of MockConnectorHost. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectorHost(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectorHost {
	mock := &MockConnectorHost{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
