// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	mock "github.com/stretchr/testify/mock"
)

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

type MockEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngine) EXPECT() *MockEngine_Expecter {
	return &MockEngine_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockEngine) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockEngine_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockEngine_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockEngine_Expecter) Done() *MockEngine_Done_Call {
	return &MockEngine_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockEngine_Done_Call) Run(run func()) *MockEngine_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_Done_Call) Return(_a0 <-chan struct{}) *MockEngine_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockEngine_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: channel, originID, event
func (_m *MockEngine) Process(channel channels.Channel, originID flow.Identifier, event interface{}) error {
	ret := _m.Called(channel, originID, event)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, flow.Identifier, interface{}) error); ok {
		r0 = rf(channel, originID, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockEngine_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - channel channels.Channel
//   - originID flow.Identifier
//   - event interface{}
func (_e *MockEngine_Expecter) Process(channel interface{}, originID interface{}, event interface{}) *MockEngine_Process_Call {
	return &MockEngine_Process_Call{Call: _e.mock.On("Process", channel, originID, event)}
}

func (_c *MockEngine_Process_Call) Run(run func(channel channels.Channel, originID flow.Identifier, event interface{})) *MockEngine_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel), args[1].(flow.Identifier), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEngine_Process_Call) Return(_a0 error) *MockEngine_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_Process_Call) RunAndReturn(run func(channels.Channel, flow.Identifier, interface{}) error) *MockEngine_Process_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessLocal provides a mock function with given fields: event
func (_m *MockEngine) ProcessLocal(event interface{}) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ProcessLocal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEngine_ProcessLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessLocal'
type MockEngine_ProcessLocal_Call struct {
	*mock.Call
}

// ProcessLocal is a helper method to define mock.On call
//   - event interface{}
func (_e *MockEngine_Expecter) ProcessLocal(event interface{}) *MockEngine_ProcessLocal_Call {
	return &MockEngine_ProcessLocal_Call{Call: _e.mock.On("ProcessLocal", event)}
}

func (_c *MockEngine_ProcessLocal_Call) Run(run func(event interface{})) *MockEngine_ProcessLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockEngine_ProcessLocal_Call) Return(_a0 error) *MockEngine_ProcessLocal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_ProcessLocal_Call) RunAndReturn(run func(interface{}) error) *MockEngine_ProcessLocal_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockEngine) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockEngine_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockEngine_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockEngine_Expecter) Ready() *MockEngine_Ready_Call {
	return &MockEngine_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockEngine_Ready_Call) Run(run func()) *MockEngine_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_Ready_Call) Return(_a0 <-chan struct{}) *MockEngine_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockEngine_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Submit provides a mock function with given fields: channel, originID, event
func (_m *MockEngine) Submit(channel channels.Channel, originID flow.Identifier, event interface{}) {
	_m.Called(channel, originID, event)
}

// MockEngine_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type MockEngine_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - channel channels.Channel
//   - originID flow.Identifier
//   - event interface{}
func (_e *MockEngine_Expecter) Submit(channel interface{}, originID interface{}, event interface{}) *MockEngine_Submit_Call {
	return &MockEngine_Submit_Call{Call: _e.mock.On("Submit", channel, originID, event)}
}

func (_c *MockEngine_Submit_Call) Run(run func(channel channels.Channel, originID flow.Identifier, event interface{})) *MockEngine_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel), args[1].(flow.Identifier), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEngine_Submit_Call) Return() *MockEngine_Submit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngine_Submit_Call) RunAndReturn(run func(channels.Channel, flow.Identifier, interface{})) *MockEngine_Submit_Call {
	_c.Run(run)
	return _c
}

// SubmitLocal provides a mock function with given fields: event
func (_m *MockEngine) SubmitLocal(event interface{}) {
	_m.Called(event)
}

// MockEngine_SubmitLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitLocal'
type MockEngine_SubmitLocal_Call struct {
	*mock.Call
}

// SubmitLocal is a helper method to define mock.On call
//   - event interface{}
func (_e *MockEngine_Expecter) SubmitLocal(event interface{}) *MockEngine_SubmitLocal_Call {
	return &MockEngine_SubmitLocal_Call{Call: _e.mock.On("SubmitLocal", event)}
}

func (_c *MockEngine_SubmitLocal_Call) Run(run func(event interface{})) *MockEngine_SubmitLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockEngine_SubmitLocal_Call) Return() *MockEngine_SubmitLocal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngine_SubmitLocal_Call) RunAndReturn(run func(interface{})) *MockEngine_SubmitLocal_Call {
	_c.Run(run)
	return _c
}

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
