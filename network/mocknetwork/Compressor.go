// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	io "io"

	network "github.com/onflow/flow-go/network"
	mock "github.com/stretchr/testify/mock"
)

// MockCompressor is an autogenerated mock type for the Compressor type
type MockCompressor struct {
	mock.Mock
}

type MockCompressor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompressor) EXPECT() *MockCompressor_Expecter {
	return &MockCompressor_Expecter{mock: &_m.Mock}
}

// NewReader provides a mock function with given fields: _a0
func (_m *MockCompressor) NewReader(_a0 io.Reader) (io.ReadCloser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewReader")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (io.ReadCloser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) io.ReadCloser); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompressor_NewReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewReader'
type MockCompressor_NewReader_Call struct {
	*mock.Call
}

// NewReader is a helper method to define mock.On call
//   - _a0 io.Reader
func (_e *MockCompressor_Expecter) NewReader(_a0 interface{}) *MockCompressor_NewReader_Call {
	return &MockCompressor_NewReader_Call{Call: _e.mock.On("NewReader", _a0)}
}

func (_c *MockCompressor_NewReader_Call) Run(run func(_a0 io.Reader)) *MockCompressor_NewReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockCompressor_NewReader_Call) Return(_a0 io.ReadCloser, _a1 error) *MockCompressor_NewReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompressor_NewReader_Call) RunAndReturn(run func(io.Reader) (io.ReadCloser, error)) *MockCompressor_NewReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter provides a mock function with given fields: _a0
func (_m *MockCompressor) NewWriter(_a0 io.Writer) (network.WriteCloseFlusher, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewWriter")
	}

	var r0 network.WriteCloseFlusher
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Writer) (network.WriteCloseFlusher, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(io.Writer) network.WriteCloseFlusher); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.WriteCloseFlusher)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Writer) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompressor_NewWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWriter'
type MockCompressor_NewWriter_Call struct {
	*mock.Call
}

// NewWriter is a helper method to define mock.On call
//   - _a0 io.Writer
func (_e *MockCompressor_Expecter) NewWriter(_a0 interface{}) *MockCompressor_NewWriter_Call {
	return &MockCompressor_NewWriter_Call{Call: _e.mock.On("NewWriter", _a0)}
}

func (_c *MockCompressor_NewWriter_Call) Run(run func(_a0 io.Writer)) *MockCompressor_NewWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockCompressor_NewWriter_Call) Return(_a0 network.WriteCloseFlusher, _a1 error) *MockCompressor_NewWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompressor_NewWriter_Call) RunAndReturn(run func(io.Writer) (network.WriteCloseFlusher, error)) *MockCompressor_NewWriter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCompressor creates a new instance of MockCompressor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCompressor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCompressor {
	mock := &MockCompressor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
