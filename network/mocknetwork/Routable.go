// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	kbucket "github.com/libp2p/go-libp2p-kbucket"
	mock "github.com/stretchr/testify/mock"

	routing "github.com/libp2p/go-libp2p/core/routing"
)

// MockRoutable is an autogenerated mock type for the Routable type
type MockRoutable struct {
	mock.Mock
}

type MockRoutable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoutable) EXPECT() *MockRoutable_Expecter {
	return &MockRoutable_Expecter{mock: &_m.Mock}
}

// Routing provides a mock function with no fields
func (_m *MockRoutable) Routing() routing.Routing {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Routing")
	}

	var r0 routing.Routing
	if rf, ok := ret.Get(0).(func() routing.Routing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(routing.Routing)
		}
	}

	return r0
}

// MockRoutable_Routing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routing'
type MockRoutable_Routing_Call struct {
	*mock.Call
}

// Routing is a helper method to define mock.On call
func (_e *MockRoutable_Expecter) Routing() *MockRoutable_Routing_Call {
	return &MockRoutable_Routing_Call{Call: _e.mock.On("Routing")}
}

func (_c *MockRoutable_Routing_Call) Run(run func()) *MockRoutable_Routing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRoutable_Routing_Call) Return(_a0 routing.Routing) *MockRoutable_Routing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoutable_Routing_Call) RunAndReturn(run func() routing.Routing) *MockRoutable_Routing_Call {
	_c.Call.Return(run)
	return _c
}

// RoutingTable provides a mock function with no fields
func (_m *MockRoutable) RoutingTable() *kbucket.RoutingTable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RoutingTable")
	}

	var r0 *kbucket.RoutingTable
	if rf, ok := ret.Get(0).(func() *kbucket.RoutingTable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kbucket.RoutingTable)
		}
	}

	return r0
}

// MockRoutable_RoutingTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoutingTable'
type MockRoutable_RoutingTable_Call struct {
	*mock.Call
}

// RoutingTable is a helper method to define mock.On call
func (_e *MockRoutable_Expecter) RoutingTable() *MockRoutable_RoutingTable_Call {
	return &MockRoutable_RoutingTable_Call{Call: _e.mock.On("RoutingTable")}
}

func (_c *MockRoutable_RoutingTable_Call) Run(run func()) *MockRoutable_RoutingTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRoutable_RoutingTable_Call) Return(_a0 *kbucket.RoutingTable) *MockRoutable_RoutingTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoutable_RoutingTable_Call) RunAndReturn(run func() *kbucket.RoutingTable) *MockRoutable_RoutingTable_Call {
	_c.Call.Return(run)
	return _c
}

// SetRouting provides a mock function with given fields: r
func (_m *MockRoutable) SetRouting(r routing.Routing) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SetRouting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(routing.Routing) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoutable_SetRouting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRouting'
type MockRoutable_SetRouting_Call struct {
	*mock.Call
}

// SetRouting is a helper method to define mock.On call
//   - r routing.Routing
func (_e *MockRoutable_Expecter) SetRouting(r interface{}) *MockRoutable_SetRouting_Call {
	return &MockRoutable_SetRouting_Call{Call: _e.mock.On("SetRouting", r)}
}

func (_c *MockRoutable_SetRouting_Call) Run(run func(r routing.Routing)) *MockRoutable_SetRouting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(routing.Routing))
	})
	return _c
}

func (_c *MockRoutable_SetRouting_Call) Return(_a0 error) *MockRoutable_SetRouting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoutable_SetRouting_Call) RunAndReturn(run func(routing.Routing) error) *MockRoutable_SetRouting_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRoutable creates a new instance of MockRoutable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoutable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoutable {
	mock := &MockRoutable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
