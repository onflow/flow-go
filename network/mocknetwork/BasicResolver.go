// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockBasicResolver is an autogenerated mock type for the BasicResolver type
type MockBasicResolver struct {
	mock.Mock
}

type MockBasicResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBasicResolver) EXPECT() *MockBasicResolver_Expecter {
	return &MockBasicResolver_Expecter{mock: &_m.Mock}
}

// LookupIPAddr provides a mock function with given fields: _a0, _a1
func (_m *MockBasicResolver) LookupIPAddr(_a0 context.Context, _a1 string) ([]net.IPAddr, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LookupIPAddr")
	}

	var r0 []net.IPAddr
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]net.IPAddr, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []net.IPAddr); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IPAddr)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBasicResolver_LookupIPAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupIPAddr'
type MockBasicResolver_LookupIPAddr_Call struct {
	*mock.Call
}

// LookupIPAddr is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockBasicResolver_Expecter) LookupIPAddr(_a0 interface{}, _a1 interface{}) *MockBasicResolver_LookupIPAddr_Call {
	return &MockBasicResolver_LookupIPAddr_Call{Call: _e.mock.On("LookupIPAddr", _a0, _a1)}
}

func (_c *MockBasicResolver_LookupIPAddr_Call) Run(run func(_a0 context.Context, _a1 string)) *MockBasicResolver_LookupIPAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBasicResolver_LookupIPAddr_Call) Return(_a0 []net.IPAddr, _a1 error) *MockBasicResolver_LookupIPAddr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBasicResolver_LookupIPAddr_Call) RunAndReturn(run func(context.Context, string) ([]net.IPAddr, error)) *MockBasicResolver_LookupIPAddr_Call {
	_c.Call.Return(run)
	return _c
}

// LookupTXT provides a mock function with given fields: _a0, _a1
func (_m *MockBasicResolver) LookupTXT(_a0 context.Context, _a1 string) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LookupTXT")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBasicResolver_LookupTXT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupTXT'
type MockBasicResolver_LookupTXT_Call struct {
	*mock.Call
}

// LookupTXT is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockBasicResolver_Expecter) LookupTXT(_a0 interface{}, _a1 interface{}) *MockBasicResolver_LookupTXT_Call {
	return &MockBasicResolver_LookupTXT_Call{Call: _e.mock.On("LookupTXT", _a0, _a1)}
}

func (_c *MockBasicResolver_LookupTXT_Call) Run(run func(_a0 context.Context, _a1 string)) *MockBasicResolver_LookupTXT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBasicResolver_LookupTXT_Call) Return(_a0 []string, _a1 error) *MockBasicResolver_LookupTXT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBasicResolver_LookupTXT_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockBasicResolver_LookupTXT_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBasicResolver creates a new instance of MockBasicResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBasicResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBasicResolver {
	mock := &MockBasicResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
