// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	pubsub_pb "github.com/libp2p/go-libp2p-pubsub/pb"
)

// MockSubscriptionFilter is an autogenerated mock type for the SubscriptionFilter type
type MockSubscriptionFilter struct {
	mock.Mock
}

type MockSubscriptionFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionFilter) EXPECT() *MockSubscriptionFilter_Expecter {
	return &MockSubscriptionFilter_Expecter{mock: &_m.Mock}
}

// CanSubscribe provides a mock function with given fields: _a0
func (_m *MockSubscriptionFilter) CanSubscribe(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CanSubscribe")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSubscriptionFilter_CanSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanSubscribe'
type MockSubscriptionFilter_CanSubscribe_Call struct {
	*mock.Call
}

// CanSubscribe is a helper method to define mock.On call
//   - _a0 string
func (_e *MockSubscriptionFilter_Expecter) CanSubscribe(_a0 interface{}) *MockSubscriptionFilter_CanSubscribe_Call {
	return &MockSubscriptionFilter_CanSubscribe_Call{Call: _e.mock.On("CanSubscribe", _a0)}
}

func (_c *MockSubscriptionFilter_CanSubscribe_Call) Run(run func(_a0 string)) *MockSubscriptionFilter_CanSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSubscriptionFilter_CanSubscribe_Call) Return(_a0 bool) *MockSubscriptionFilter_CanSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionFilter_CanSubscribe_Call) RunAndReturn(run func(string) bool) *MockSubscriptionFilter_CanSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// FilterIncomingSubscriptions provides a mock function with given fields: _a0, _a1
func (_m *MockSubscriptionFilter) FilterIncomingSubscriptions(_a0 peer.ID, _a1 []*pubsub_pb.RPC_SubOpts) ([]*pubsub_pb.RPC_SubOpts, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FilterIncomingSubscriptions")
	}

	var r0 []*pubsub_pb.RPC_SubOpts
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID, []*pubsub_pb.RPC_SubOpts) ([]*pubsub_pb.RPC_SubOpts, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(peer.ID, []*pubsub_pb.RPC_SubOpts) []*pubsub_pb.RPC_SubOpts); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pubsub_pb.RPC_SubOpts)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID, []*pubsub_pb.RPC_SubOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionFilter_FilterIncomingSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterIncomingSubscriptions'
type MockSubscriptionFilter_FilterIncomingSubscriptions_Call struct {
	*mock.Call
}

// FilterIncomingSubscriptions is a helper method to define mock.On call
//   - _a0 peer.ID
//   - _a1 []*pubsub_pb.RPC_SubOpts
func (_e *MockSubscriptionFilter_Expecter) FilterIncomingSubscriptions(_a0 interface{}, _a1 interface{}) *MockSubscriptionFilter_FilterIncomingSubscriptions_Call {
	return &MockSubscriptionFilter_FilterIncomingSubscriptions_Call{Call: _e.mock.On("FilterIncomingSubscriptions", _a0, _a1)}
}

func (_c *MockSubscriptionFilter_FilterIncomingSubscriptions_Call) Run(run func(_a0 peer.ID, _a1 []*pubsub_pb.RPC_SubOpts)) *MockSubscriptionFilter_FilterIncomingSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].([]*pubsub_pb.RPC_SubOpts))
	})
	return _c
}

func (_c *MockSubscriptionFilter_FilterIncomingSubscriptions_Call) Return(_a0 []*pubsub_pb.RPC_SubOpts, _a1 error) *MockSubscriptionFilter_FilterIncomingSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionFilter_FilterIncomingSubscriptions_Call) RunAndReturn(run func(peer.ID, []*pubsub_pb.RPC_SubOpts) ([]*pubsub_pb.RPC_SubOpts, error)) *MockSubscriptionFilter_FilterIncomingSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriptionFilter creates a new instance of MockSubscriptionFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionFilter {
	mock := &MockSubscriptionFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
