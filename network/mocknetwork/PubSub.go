// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	channels "github.com/onflow/flow-go/network/channels"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockPubSub is an autogenerated mock type for the PubSub type
type MockPubSub struct {
	mock.Mock
}

type MockPubSub_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubSub) EXPECT() *MockPubSub_Expecter {
	return &MockPubSub_Expecter{mock: &_m.Mock}
}

// GetLocalMeshPeers provides a mock function with given fields: topic
func (_m *MockPubSub) GetLocalMeshPeers(topic channels.Topic) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalMeshPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(channels.Topic) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockPubSub_GetLocalMeshPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalMeshPeers'
type MockPubSub_GetLocalMeshPeers_Call struct {
	*mock.Call
}

// GetLocalMeshPeers is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockPubSub_Expecter) GetLocalMeshPeers(topic interface{}) *MockPubSub_GetLocalMeshPeers_Call {
	return &MockPubSub_GetLocalMeshPeers_Call{Call: _e.mock.On("GetLocalMeshPeers", topic)}
}

func (_c *MockPubSub_GetLocalMeshPeers_Call) Run(run func(topic channels.Topic)) *MockPubSub_GetLocalMeshPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockPubSub_GetLocalMeshPeers_Call) Return(_a0 []peer.ID) *MockPubSub_GetLocalMeshPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSub_GetLocalMeshPeers_Call) RunAndReturn(run func(channels.Topic) []peer.ID) *MockPubSub_GetLocalMeshPeers_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, messageScope
func (_m *MockPubSub) Publish(ctx context.Context, messageScope network.OutgoingMessageScope) error {
	ret := _m.Called(ctx, messageScope)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, network.OutgoingMessageScope) error); ok {
		r0 = rf(ctx, messageScope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPubSub_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPubSub_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - messageScope network.OutgoingMessageScope
func (_e *MockPubSub_Expecter) Publish(ctx interface{}, messageScope interface{}) *MockPubSub_Publish_Call {
	return &MockPubSub_Publish_Call{Call: _e.mock.On("Publish", ctx, messageScope)}
}

func (_c *MockPubSub_Publish_Call) Run(run func(ctx context.Context, messageScope network.OutgoingMessageScope)) *MockPubSub_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(network.OutgoingMessageScope))
	})
	return _c
}

func (_c *MockPubSub_Publish_Call) Return(_a0 error) *MockPubSub_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSub_Publish_Call) RunAndReturn(run func(context.Context, network.OutgoingMessageScope) error) *MockPubSub_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// SetPubSub provides a mock function with given fields: ps
func (_m *MockPubSub) SetPubSub(ps p2p.PubSubAdapter) {
	_m.Called(ps)
}

// MockPubSub_SetPubSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPubSub'
type MockPubSub_SetPubSub_Call struct {
	*mock.Call
}

// SetPubSub is a helper method to define mock.On call
//   - ps p2p.PubSubAdapter
func (_e *MockPubSub_Expecter) SetPubSub(ps interface{}) *MockPubSub_SetPubSub_Call {
	return &MockPubSub_SetPubSub_Call{Call: _e.mock.On("SetPubSub", ps)}
}

func (_c *MockPubSub_SetPubSub_Call) Run(run func(ps p2p.PubSubAdapter)) *MockPubSub_SetPubSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.PubSubAdapter))
	})
	return _c
}

func (_c *MockPubSub_SetPubSub_Call) Return() *MockPubSub_SetPubSub_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPubSub_SetPubSub_Call) RunAndReturn(run func(p2p.PubSubAdapter)) *MockPubSub_SetPubSub_Call {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, topicValidator
func (_m *MockPubSub) Subscribe(topic channels.Topic, topicValidator p2p.TopicValidatorFunc) (p2p.Subscription, error) {
	ret := _m.Called(topic, topicValidator)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 p2p.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(channels.Topic, p2p.TopicValidatorFunc) (p2p.Subscription, error)); ok {
		return rf(topic, topicValidator)
	}
	if rf, ok := ret.Get(0).(func(channels.Topic, p2p.TopicValidatorFunc) p2p.Subscription); ok {
		r0 = rf(topic, topicValidator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(channels.Topic, p2p.TopicValidatorFunc) error); ok {
		r1 = rf(topic, topicValidator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPubSub_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockPubSub_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic channels.Topic
//   - topicValidator p2p.TopicValidatorFunc
func (_e *MockPubSub_Expecter) Subscribe(topic interface{}, topicValidator interface{}) *MockPubSub_Subscribe_Call {
	return &MockPubSub_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, topicValidator)}
}

func (_c *MockPubSub_Subscribe_Call) Run(run func(topic channels.Topic, topicValidator p2p.TopicValidatorFunc)) *MockPubSub_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic), args[1].(p2p.TopicValidatorFunc))
	})
	return _c
}

func (_c *MockPubSub_Subscribe_Call) Return(_a0 p2p.Subscription, _a1 error) *MockPubSub_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPubSub_Subscribe_Call) RunAndReturn(run func(channels.Topic, p2p.TopicValidatorFunc) (p2p.Subscription, error)) *MockPubSub_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: topic
func (_m *MockPubSub) Unsubscribe(topic channels.Topic) error {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPubSub_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockPubSub_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockPubSub_Expecter) Unsubscribe(topic interface{}) *MockPubSub_Unsubscribe_Call {
	return &MockPubSub_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", topic)}
}

func (_c *MockPubSub_Unsubscribe_Call) Run(run func(topic channels.Topic)) *MockPubSub_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockPubSub_Unsubscribe_Call) Return(_a0 error) *MockPubSub_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPubSub_Unsubscribe_Call) RunAndReturn(run func(channels.Topic) error) *MockPubSub_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubSub creates a new instance of MockPubSub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubSub(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubSub {
	mock := &MockPubSub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
