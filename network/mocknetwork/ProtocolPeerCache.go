// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"
)

// MockProtocolPeerCache is an autogenerated mock type for the ProtocolPeerCache type
type MockProtocolPeerCache struct {
	mock.Mock
}

type MockProtocolPeerCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProtocolPeerCache) EXPECT() *MockProtocolPeerCache_Expecter {
	return &MockProtocolPeerCache_Expecter{mock: &_m.Mock}
}

// AddProtocols provides a mock function with given fields: peerID, protocols
func (_m *MockProtocolPeerCache) AddProtocols(peerID peer.ID, protocols []protocol.ID) {
	_m.Called(peerID, protocols)
}

// MockProtocolPeerCache_AddProtocols_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProtocols'
type MockProtocolPeerCache_AddProtocols_Call struct {
	*mock.Call
}

// AddProtocols is a helper method to define mock.On call
//   - peerID peer.ID
//   - protocols []protocol.ID
func (_e *MockProtocolPeerCache_Expecter) AddProtocols(peerID interface{}, protocols interface{}) *MockProtocolPeerCache_AddProtocols_Call {
	return &MockProtocolPeerCache_AddProtocols_Call{Call: _e.mock.On("AddProtocols", peerID, protocols)}
}

func (_c *MockProtocolPeerCache_AddProtocols_Call) Run(run func(peerID peer.ID, protocols []protocol.ID)) *MockProtocolPeerCache_AddProtocols_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].([]protocol.ID))
	})
	return _c
}

func (_c *MockProtocolPeerCache_AddProtocols_Call) Return() *MockProtocolPeerCache_AddProtocols_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocolPeerCache_AddProtocols_Call) RunAndReturn(run func(peer.ID, []protocol.ID)) *MockProtocolPeerCache_AddProtocols_Call {
	_c.Run(run)
	return _c
}

// GetPeers provides a mock function with given fields: pid
func (_m *MockProtocolPeerCache) GetPeers(pid protocol.ID) peer.IDSlice {
	ret := _m.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for GetPeers")
	}

	var r0 peer.IDSlice
	if rf, ok := ret.Get(0).(func(protocol.ID) peer.IDSlice); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peer.IDSlice)
		}
	}

	return r0
}

// MockProtocolPeerCache_GetPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeers'
type MockProtocolPeerCache_GetPeers_Call struct {
	*mock.Call
}

// GetPeers is a helper method to define mock.On call
//   - pid protocol.ID
func (_e *MockProtocolPeerCache_Expecter) GetPeers(pid interface{}) *MockProtocolPeerCache_GetPeers_Call {
	return &MockProtocolPeerCache_GetPeers_Call{Call: _e.mock.On("GetPeers", pid)}
}

func (_c *MockProtocolPeerCache_GetPeers_Call) Run(run func(pid protocol.ID)) *MockProtocolPeerCache_GetPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID))
	})
	return _c
}

func (_c *MockProtocolPeerCache_GetPeers_Call) Return(_a0 peer.IDSlice) *MockProtocolPeerCache_GetPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtocolPeerCache_GetPeers_Call) RunAndReturn(run func(protocol.ID) peer.IDSlice) *MockProtocolPeerCache_GetPeers_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePeer provides a mock function with given fields: peerID
func (_m *MockProtocolPeerCache) RemovePeer(peerID peer.ID) {
	_m.Called(peerID)
}

// MockProtocolPeerCache_RemovePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePeer'
type MockProtocolPeerCache_RemovePeer_Call struct {
	*mock.Call
}

// RemovePeer is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockProtocolPeerCache_Expecter) RemovePeer(peerID interface{}) *MockProtocolPeerCache_RemovePeer_Call {
	return &MockProtocolPeerCache_RemovePeer_Call{Call: _e.mock.On("RemovePeer", peerID)}
}

func (_c *MockProtocolPeerCache_RemovePeer_Call) Run(run func(peerID peer.ID)) *MockProtocolPeerCache_RemovePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockProtocolPeerCache_RemovePeer_Call) Return() *MockProtocolPeerCache_RemovePeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocolPeerCache_RemovePeer_Call) RunAndReturn(run func(peer.ID)) *MockProtocolPeerCache_RemovePeer_Call {
	_c.Run(run)
	return _c
}

// RemoveProtocols provides a mock function with given fields: peerID, protocols
func (_m *MockProtocolPeerCache) RemoveProtocols(peerID peer.ID, protocols []protocol.ID) {
	_m.Called(peerID, protocols)
}

// MockProtocolPeerCache_RemoveProtocols_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProtocols'
type MockProtocolPeerCache_RemoveProtocols_Call struct {
	*mock.Call
}

// RemoveProtocols is a helper method to define mock.On call
//   - peerID peer.ID
//   - protocols []protocol.ID
func (_e *MockProtocolPeerCache_Expecter) RemoveProtocols(peerID interface{}, protocols interface{}) *MockProtocolPeerCache_RemoveProtocols_Call {
	return &MockProtocolPeerCache_RemoveProtocols_Call{Call: _e.mock.On("RemoveProtocols", peerID, protocols)}
}

func (_c *MockProtocolPeerCache_RemoveProtocols_Call) Run(run func(peerID peer.ID, protocols []protocol.ID)) *MockProtocolPeerCache_RemoveProtocols_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].([]protocol.ID))
	})
	return _c
}

func (_c *MockProtocolPeerCache_RemoveProtocols_Call) Return() *MockProtocolPeerCache_RemoveProtocols_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProtocolPeerCache_RemoveProtocols_Call) RunAndReturn(run func(peer.ID, []protocol.ID)) *MockProtocolPeerCache_RemoveProtocols_Call {
	_c.Run(run)
	return _c
}

// NewMockProtocolPeerCache creates a new instance of MockProtocolPeerCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProtocolPeerCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProtocolPeerCache {
	mock := &MockProtocolPeerCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
