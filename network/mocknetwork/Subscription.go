// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/libp2p/go-libp2p-pubsub"
)

// MockSubscription is an autogenerated mock type for the Subscription type
type MockSubscription struct {
	mock.Mock
}

type MockSubscription_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscription) EXPECT() *MockSubscription_Expecter {
	return &MockSubscription_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with no fields
func (_m *MockSubscription) Cancel() {
	_m.Called()
}

// MockSubscription_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockSubscription_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
func (_e *MockSubscription_Expecter) Cancel() *MockSubscription_Cancel_Call {
	return &MockSubscription_Cancel_Call{Call: _e.mock.On("Cancel")}
}

func (_c *MockSubscription_Cancel_Call) Run(run func()) *MockSubscription_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscription_Cancel_Call) Return() *MockSubscription_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscription_Cancel_Call) RunAndReturn(run func()) *MockSubscription_Cancel_Call {
	_c.Run(run)
	return _c
}

// Next provides a mock function with given fields: _a0
func (_m *MockSubscription) Next(_a0 context.Context) (*pubsub.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *pubsub.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*pubsub.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *pubsub.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscription_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockSubscription_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSubscription_Expecter) Next(_a0 interface{}) *MockSubscription_Next_Call {
	return &MockSubscription_Next_Call{Call: _e.mock.On("Next", _a0)}
}

func (_c *MockSubscription_Next_Call) Run(run func(_a0 context.Context)) *MockSubscription_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSubscription_Next_Call) Return(_a0 *pubsub.Message, _a1 error) *MockSubscription_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscription_Next_Call) RunAndReturn(run func(context.Context) (*pubsub.Message, error)) *MockSubscription_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with no fields
func (_m *MockSubscription) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSubscription_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type MockSubscription_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *MockSubscription_Expecter) Topic() *MockSubscription_Topic_Call {
	return &MockSubscription_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *MockSubscription_Topic_Call) Run(run func()) *MockSubscription_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscription_Topic_Call) Return(_a0 string) *MockSubscription_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscription_Topic_Call) RunAndReturn(run func() string) *MockSubscription_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscription creates a new instance of MockSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscription {
	mock := &MockSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
