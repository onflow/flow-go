// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockIDTranslator is an autogenerated mock type for the IDTranslator type
type MockIDTranslator struct {
	mock.Mock
}

type MockIDTranslator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDTranslator) EXPECT() *MockIDTranslator_Expecter {
	return &MockIDTranslator_Expecter{mock: &_m.Mock}
}

// GetFlowID provides a mock function with given fields: _a0
func (_m *MockIDTranslator) GetFlowID(_a0 peer.ID) (flow.Identifier, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFlowID")
	}

	var r0 flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID) (flow.Identifier, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) flow.Identifier); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDTranslator_GetFlowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlowID'
type MockIDTranslator_GetFlowID_Call struct {
	*mock.Call
}

// GetFlowID is a helper method to define mock.On call
//   - _a0 peer.ID
func (_e *MockIDTranslator_Expecter) GetFlowID(_a0 interface{}) *MockIDTranslator_GetFlowID_Call {
	return &MockIDTranslator_GetFlowID_Call{Call: _e.mock.On("GetFlowID", _a0)}
}

func (_c *MockIDTranslator_GetFlowID_Call) Run(run func(_a0 peer.ID)) *MockIDTranslator_GetFlowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockIDTranslator_GetFlowID_Call) Return(_a0 flow.Identifier, _a1 error) *MockIDTranslator_GetFlowID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDTranslator_GetFlowID_Call) RunAndReturn(run func(peer.ID) (flow.Identifier, error)) *MockIDTranslator_GetFlowID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeerID provides a mock function with given fields: _a0
func (_m *MockIDTranslator) GetPeerID(_a0 flow.Identifier) (peer.ID, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPeerID")
	}

	var r0 peer.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (peer.ID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) peer.ID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDTranslator_GetPeerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeerID'
type MockIDTranslator_GetPeerID_Call struct {
	*mock.Call
}

// GetPeerID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockIDTranslator_Expecter) GetPeerID(_a0 interface{}) *MockIDTranslator_GetPeerID_Call {
	return &MockIDTranslator_GetPeerID_Call{Call: _e.mock.On("GetPeerID", _a0)}
}

func (_c *MockIDTranslator_GetPeerID_Call) Run(run func(_a0 flow.Identifier)) *MockIDTranslator_GetPeerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIDTranslator_GetPeerID_Call) Return(_a0 peer.ID, _a1 error) *MockIDTranslator_GetPeerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDTranslator_GetPeerID_Call) RunAndReturn(run func(flow.Identifier) (peer.ID, error)) *MockIDTranslator_GetPeerID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDTranslator creates a new instance of MockIDTranslator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDTranslator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDTranslator {
	mock := &MockIDTranslator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
