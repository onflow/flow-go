// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	connmgr "github.com/libp2p/go-libp2p/core/connmgr"

	host "github.com/libp2p/go-libp2p/core/host"

	madns "github.com/multiformats/go-multiaddr-dns"

	mock "github.com/stretchr/testify/mock"

	network "github.com/libp2p/go-libp2p/core/network"

	p2p "github.com/onflow/flow-go/network/p2p"

	pubsub "github.com/libp2p/go-libp2p-pubsub"

	routing "github.com/libp2p/go-libp2p/core/routing"
)

// MockNodeBuilder is an autogenerated mock type for the NodeBuilder type
type MockNodeBuilder struct {
	mock.Mock
}

type MockNodeBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeBuilder) EXPECT() *MockNodeBuilder_Expecter {
	return &MockNodeBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *MockNodeBuilder) Build() (p2p.LibP2PNode, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 p2p.LibP2PNode
	var r1 error
	if rf, ok := ret.Get(0).(func() (p2p.LibP2PNode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() p2p.LibP2PNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.LibP2PNode)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodeBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockNodeBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *MockNodeBuilder_Expecter) Build() *MockNodeBuilder_Build_Call {
	return &MockNodeBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *MockNodeBuilder_Build_Call) Run(run func()) *MockNodeBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeBuilder_Build_Call) Return(_a0 p2p.LibP2PNode, _a1 error) *MockNodeBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeBuilder_Build_Call) RunAndReturn(run func() (p2p.LibP2PNode, error)) *MockNodeBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// OverrideDefaultRpcInspectorFactory provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) OverrideDefaultRpcInspectorFactory(_a0 p2p.GossipSubRpcInspectorFactoryFunc) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OverrideDefaultRpcInspectorFactory")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(p2p.GossipSubRpcInspectorFactoryFunc) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverrideDefaultRpcInspectorFactory'
type MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call struct {
	*mock.Call
}

// OverrideDefaultRpcInspectorFactory is a helper method to define mock.On call
//   - _a0 p2p.GossipSubRpcInspectorFactoryFunc
func (_e *MockNodeBuilder_Expecter) OverrideDefaultRpcInspectorFactory(_a0 interface{}) *MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call {
	return &MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call{Call: _e.mock.On("OverrideDefaultRpcInspectorFactory", _a0)}
}

func (_c *MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call) Run(run func(_a0 p2p.GossipSubRpcInspectorFactoryFunc)) *MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.GossipSubRpcInspectorFactoryFunc))
	})
	return _c
}

func (_c *MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call) RunAndReturn(run func(p2p.GossipSubRpcInspectorFactoryFunc) p2p.NodeBuilder) *MockNodeBuilder_OverrideDefaultRpcInspectorFactory_Call {
	_c.Call.Return(run)
	return _c
}

// OverrideDefaultValidateQueueSize provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) OverrideDefaultValidateQueueSize(_a0 int) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OverrideDefaultValidateQueueSize")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(int) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_OverrideDefaultValidateQueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverrideDefaultValidateQueueSize'
type MockNodeBuilder_OverrideDefaultValidateQueueSize_Call struct {
	*mock.Call
}

// OverrideDefaultValidateQueueSize is a helper method to define mock.On call
//   - _a0 int
func (_e *MockNodeBuilder_Expecter) OverrideDefaultValidateQueueSize(_a0 interface{}) *MockNodeBuilder_OverrideDefaultValidateQueueSize_Call {
	return &MockNodeBuilder_OverrideDefaultValidateQueueSize_Call{Call: _e.mock.On("OverrideDefaultValidateQueueSize", _a0)}
}

func (_c *MockNodeBuilder_OverrideDefaultValidateQueueSize_Call) Run(run func(_a0 int)) *MockNodeBuilder_OverrideDefaultValidateQueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNodeBuilder_OverrideDefaultValidateQueueSize_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_OverrideDefaultValidateQueueSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_OverrideDefaultValidateQueueSize_Call) RunAndReturn(run func(int) p2p.NodeBuilder) *MockNodeBuilder_OverrideDefaultValidateQueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// OverrideGossipSubFactory provides a mock function with given fields: _a0, _a1
func (_m *MockNodeBuilder) OverrideGossipSubFactory(_a0 p2p.GossipSubFactoryFunc, _a1 p2p.GossipSubAdapterConfigFunc) p2p.NodeBuilder {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OverrideGossipSubFactory")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(p2p.GossipSubFactoryFunc, p2p.GossipSubAdapterConfigFunc) p2p.NodeBuilder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_OverrideGossipSubFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverrideGossipSubFactory'
type MockNodeBuilder_OverrideGossipSubFactory_Call struct {
	*mock.Call
}

// OverrideGossipSubFactory is a helper method to define mock.On call
//   - _a0 p2p.GossipSubFactoryFunc
//   - _a1 p2p.GossipSubAdapterConfigFunc
func (_e *MockNodeBuilder_Expecter) OverrideGossipSubFactory(_a0 interface{}, _a1 interface{}) *MockNodeBuilder_OverrideGossipSubFactory_Call {
	return &MockNodeBuilder_OverrideGossipSubFactory_Call{Call: _e.mock.On("OverrideGossipSubFactory", _a0, _a1)}
}

func (_c *MockNodeBuilder_OverrideGossipSubFactory_Call) Run(run func(_a0 p2p.GossipSubFactoryFunc, _a1 p2p.GossipSubAdapterConfigFunc)) *MockNodeBuilder_OverrideGossipSubFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.GossipSubFactoryFunc), args[1].(p2p.GossipSubAdapterConfigFunc))
	})
	return _c
}

func (_c *MockNodeBuilder_OverrideGossipSubFactory_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_OverrideGossipSubFactory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_OverrideGossipSubFactory_Call) RunAndReturn(run func(p2p.GossipSubFactoryFunc, p2p.GossipSubAdapterConfigFunc) p2p.NodeBuilder) *MockNodeBuilder_OverrideGossipSubFactory_Call {
	_c.Call.Return(run)
	return _c
}

// OverrideGossipSubScoringConfig provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) OverrideGossipSubScoringConfig(_a0 *p2p.PeerScoringConfigOverride) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OverrideGossipSubScoringConfig")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(*p2p.PeerScoringConfigOverride) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_OverrideGossipSubScoringConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverrideGossipSubScoringConfig'
type MockNodeBuilder_OverrideGossipSubScoringConfig_Call struct {
	*mock.Call
}

// OverrideGossipSubScoringConfig is a helper method to define mock.On call
//   - _a0 *p2p.PeerScoringConfigOverride
func (_e *MockNodeBuilder_Expecter) OverrideGossipSubScoringConfig(_a0 interface{}) *MockNodeBuilder_OverrideGossipSubScoringConfig_Call {
	return &MockNodeBuilder_OverrideGossipSubScoringConfig_Call{Call: _e.mock.On("OverrideGossipSubScoringConfig", _a0)}
}

func (_c *MockNodeBuilder_OverrideGossipSubScoringConfig_Call) Run(run func(_a0 *p2p.PeerScoringConfigOverride)) *MockNodeBuilder_OverrideGossipSubScoringConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*p2p.PeerScoringConfigOverride))
	})
	return _c
}

func (_c *MockNodeBuilder_OverrideGossipSubScoringConfig_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_OverrideGossipSubScoringConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_OverrideGossipSubScoringConfig_Call) RunAndReturn(run func(*p2p.PeerScoringConfigOverride) p2p.NodeBuilder) *MockNodeBuilder_OverrideGossipSubScoringConfig_Call {
	_c.Call.Return(run)
	return _c
}

// OverrideNodeConstructor provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) OverrideNodeConstructor(_a0 p2p.NodeConstructor) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OverrideNodeConstructor")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(p2p.NodeConstructor) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_OverrideNodeConstructor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverrideNodeConstructor'
type MockNodeBuilder_OverrideNodeConstructor_Call struct {
	*mock.Call
}

// OverrideNodeConstructor is a helper method to define mock.On call
//   - _a0 p2p.NodeConstructor
func (_e *MockNodeBuilder_Expecter) OverrideNodeConstructor(_a0 interface{}) *MockNodeBuilder_OverrideNodeConstructor_Call {
	return &MockNodeBuilder_OverrideNodeConstructor_Call{Call: _e.mock.On("OverrideNodeConstructor", _a0)}
}

func (_c *MockNodeBuilder_OverrideNodeConstructor_Call) Run(run func(_a0 p2p.NodeConstructor)) *MockNodeBuilder_OverrideNodeConstructor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.NodeConstructor))
	})
	return _c
}

func (_c *MockNodeBuilder_OverrideNodeConstructor_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_OverrideNodeConstructor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_OverrideNodeConstructor_Call) RunAndReturn(run func(p2p.NodeConstructor) p2p.NodeBuilder) *MockNodeBuilder_OverrideNodeConstructor_Call {
	_c.Call.Return(run)
	return _c
}

// SetBasicResolver provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) SetBasicResolver(_a0 madns.BasicResolver) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetBasicResolver")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(madns.BasicResolver) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_SetBasicResolver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBasicResolver'
type MockNodeBuilder_SetBasicResolver_Call struct {
	*mock.Call
}

// SetBasicResolver is a helper method to define mock.On call
//   - _a0 madns.BasicResolver
func (_e *MockNodeBuilder_Expecter) SetBasicResolver(_a0 interface{}) *MockNodeBuilder_SetBasicResolver_Call {
	return &MockNodeBuilder_SetBasicResolver_Call{Call: _e.mock.On("SetBasicResolver", _a0)}
}

func (_c *MockNodeBuilder_SetBasicResolver_Call) Run(run func(_a0 madns.BasicResolver)) *MockNodeBuilder_SetBasicResolver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(madns.BasicResolver))
	})
	return _c
}

func (_c *MockNodeBuilder_SetBasicResolver_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_SetBasicResolver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_SetBasicResolver_Call) RunAndReturn(run func(madns.BasicResolver) p2p.NodeBuilder) *MockNodeBuilder_SetBasicResolver_Call {
	_c.Call.Return(run)
	return _c
}

// SetConnectionGater provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) SetConnectionGater(_a0 p2p.ConnectionGater) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetConnectionGater")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(p2p.ConnectionGater) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_SetConnectionGater_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConnectionGater'
type MockNodeBuilder_SetConnectionGater_Call struct {
	*mock.Call
}

// SetConnectionGater is a helper method to define mock.On call
//   - _a0 p2p.ConnectionGater
func (_e *MockNodeBuilder_Expecter) SetConnectionGater(_a0 interface{}) *MockNodeBuilder_SetConnectionGater_Call {
	return &MockNodeBuilder_SetConnectionGater_Call{Call: _e.mock.On("SetConnectionGater", _a0)}
}

func (_c *MockNodeBuilder_SetConnectionGater_Call) Run(run func(_a0 p2p.ConnectionGater)) *MockNodeBuilder_SetConnectionGater_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.ConnectionGater))
	})
	return _c
}

func (_c *MockNodeBuilder_SetConnectionGater_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_SetConnectionGater_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_SetConnectionGater_Call) RunAndReturn(run func(p2p.ConnectionGater) p2p.NodeBuilder) *MockNodeBuilder_SetConnectionGater_Call {
	_c.Call.Return(run)
	return _c
}

// SetConnectionManager provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) SetConnectionManager(_a0 connmgr.ConnManager) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetConnectionManager")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(connmgr.ConnManager) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_SetConnectionManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConnectionManager'
type MockNodeBuilder_SetConnectionManager_Call struct {
	*mock.Call
}

// SetConnectionManager is a helper method to define mock.On call
//   - _a0 connmgr.ConnManager
func (_e *MockNodeBuilder_Expecter) SetConnectionManager(_a0 interface{}) *MockNodeBuilder_SetConnectionManager_Call {
	return &MockNodeBuilder_SetConnectionManager_Call{Call: _e.mock.On("SetConnectionManager", _a0)}
}

func (_c *MockNodeBuilder_SetConnectionManager_Call) Run(run func(_a0 connmgr.ConnManager)) *MockNodeBuilder_SetConnectionManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(connmgr.ConnManager))
	})
	return _c
}

func (_c *MockNodeBuilder_SetConnectionManager_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_SetConnectionManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_SetConnectionManager_Call) RunAndReturn(run func(connmgr.ConnManager) p2p.NodeBuilder) *MockNodeBuilder_SetConnectionManager_Call {
	_c.Call.Return(run)
	return _c
}

// SetResourceManager provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) SetResourceManager(_a0 network.ResourceManager) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetResourceManager")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(network.ResourceManager) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_SetResourceManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResourceManager'
type MockNodeBuilder_SetResourceManager_Call struct {
	*mock.Call
}

// SetResourceManager is a helper method to define mock.On call
//   - _a0 network.ResourceManager
func (_e *MockNodeBuilder_Expecter) SetResourceManager(_a0 interface{}) *MockNodeBuilder_SetResourceManager_Call {
	return &MockNodeBuilder_SetResourceManager_Call{Call: _e.mock.On("SetResourceManager", _a0)}
}

func (_c *MockNodeBuilder_SetResourceManager_Call) Run(run func(_a0 network.ResourceManager)) *MockNodeBuilder_SetResourceManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.ResourceManager))
	})
	return _c
}

func (_c *MockNodeBuilder_SetResourceManager_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_SetResourceManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_SetResourceManager_Call) RunAndReturn(run func(network.ResourceManager) p2p.NodeBuilder) *MockNodeBuilder_SetResourceManager_Call {
	_c.Call.Return(run)
	return _c
}

// SetRoutingSystem provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) SetRoutingSystem(_a0 func(context.Context, host.Host) (routing.Routing, error)) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetRoutingSystem")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(func(context.Context, host.Host) (routing.Routing, error)) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_SetRoutingSystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoutingSystem'
type MockNodeBuilder_SetRoutingSystem_Call struct {
	*mock.Call
}

// SetRoutingSystem is a helper method to define mock.On call
//   - _a0 func(context.Context , host.Host)(routing.Routing , error)
func (_e *MockNodeBuilder_Expecter) SetRoutingSystem(_a0 interface{}) *MockNodeBuilder_SetRoutingSystem_Call {
	return &MockNodeBuilder_SetRoutingSystem_Call{Call: _e.mock.On("SetRoutingSystem", _a0)}
}

func (_c *MockNodeBuilder_SetRoutingSystem_Call) Run(run func(_a0 func(context.Context, host.Host) (routing.Routing, error))) *MockNodeBuilder_SetRoutingSystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, host.Host) (routing.Routing, error)))
	})
	return _c
}

func (_c *MockNodeBuilder_SetRoutingSystem_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_SetRoutingSystem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_SetRoutingSystem_Call) RunAndReturn(run func(func(context.Context, host.Host) (routing.Routing, error)) p2p.NodeBuilder) *MockNodeBuilder_SetRoutingSystem_Call {
	_c.Call.Return(run)
	return _c
}

// SetSubscriptionFilter provides a mock function with given fields: _a0
func (_m *MockNodeBuilder) SetSubscriptionFilter(_a0 pubsub.SubscriptionFilter) p2p.NodeBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetSubscriptionFilter")
	}

	var r0 p2p.NodeBuilder
	if rf, ok := ret.Get(0).(func(pubsub.SubscriptionFilter) p2p.NodeBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.NodeBuilder)
		}
	}

	return r0
}

// MockNodeBuilder_SetSubscriptionFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSubscriptionFilter'
type MockNodeBuilder_SetSubscriptionFilter_Call struct {
	*mock.Call
}

// SetSubscriptionFilter is a helper method to define mock.On call
//   - _a0 pubsub.SubscriptionFilter
func (_e *MockNodeBuilder_Expecter) SetSubscriptionFilter(_a0 interface{}) *MockNodeBuilder_SetSubscriptionFilter_Call {
	return &MockNodeBuilder_SetSubscriptionFilter_Call{Call: _e.mock.On("SetSubscriptionFilter", _a0)}
}

func (_c *MockNodeBuilder_SetSubscriptionFilter_Call) Run(run func(_a0 pubsub.SubscriptionFilter)) *MockNodeBuilder_SetSubscriptionFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pubsub.SubscriptionFilter))
	})
	return _c
}

func (_c *MockNodeBuilder_SetSubscriptionFilter_Call) Return(_a0 p2p.NodeBuilder) *MockNodeBuilder_SetSubscriptionFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeBuilder_SetSubscriptionFilter_Call) RunAndReturn(run func(pubsub.SubscriptionFilter) p2p.NodeBuilder) *MockNodeBuilder_SetSubscriptionFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeBuilder creates a new instance of MockNodeBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeBuilder {
	mock := &MockNodeBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
