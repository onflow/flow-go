// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	channels "github.com/onflow/flow-go/network/channels"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// MockConduitFactory is an autogenerated mock type for the ConduitFactory type
type MockConduitFactory struct {
	mock.Mock
}

type MockConduitFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConduitFactory) EXPECT() *MockConduitFactory_Expecter {
	return &MockConduitFactory_Expecter{mock: &_m.Mock}
}

// NewConduit provides a mock function with given fields: _a0, _a1
func (_m *MockConduitFactory) NewConduit(_a0 context.Context, _a1 channels.Channel) (network.Conduit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewConduit")
	}

	var r0 network.Conduit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) (network.Conduit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) network.Conduit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Conduit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, channels.Channel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConduitFactory_NewConduit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConduit'
type MockConduitFactory_NewConduit_Call struct {
	*mock.Call
}

// NewConduit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 channels.Channel
func (_e *MockConduitFactory_Expecter) NewConduit(_a0 interface{}, _a1 interface{}) *MockConduitFactory_NewConduit_Call {
	return &MockConduitFactory_NewConduit_Call{Call: _e.mock.On("NewConduit", _a0, _a1)}
}

func (_c *MockConduitFactory_NewConduit_Call) Run(run func(_a0 context.Context, _a1 channels.Channel)) *MockConduitFactory_NewConduit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Channel))
	})
	return _c
}

func (_c *MockConduitFactory_NewConduit_Call) Return(_a0 network.Conduit, _a1 error) *MockConduitFactory_NewConduit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConduitFactory_NewConduit_Call) RunAndReturn(run func(context.Context, channels.Channel) (network.Conduit, error)) *MockConduitFactory_NewConduit_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAdapter provides a mock function with given fields: _a0
func (_m *MockConduitFactory) RegisterAdapter(_a0 network.ConduitAdapter) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAdapter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(network.ConduitAdapter) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduitFactory_RegisterAdapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAdapter'
type MockConduitFactory_RegisterAdapter_Call struct {
	*mock.Call
}

// RegisterAdapter is a helper method to define mock.On call
//   - _a0 network.ConduitAdapter
func (_e *MockConduitFactory_Expecter) RegisterAdapter(_a0 interface{}) *MockConduitFactory_RegisterAdapter_Call {
	return &MockConduitFactory_RegisterAdapter_Call{Call: _e.mock.On("RegisterAdapter", _a0)}
}

func (_c *MockConduitFactory_RegisterAdapter_Call) Run(run func(_a0 network.ConduitAdapter)) *MockConduitFactory_RegisterAdapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.ConduitAdapter))
	})
	return _c
}

func (_c *MockConduitFactory_RegisterAdapter_Call) Return(_a0 error) *MockConduitFactory_RegisterAdapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduitFactory_RegisterAdapter_Call) RunAndReturn(run func(network.ConduitAdapter) error) *MockConduitFactory_RegisterAdapter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConduitFactory creates a new instance of MockConduitFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConduitFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConduitFactory {
	mock := &MockConduitFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
