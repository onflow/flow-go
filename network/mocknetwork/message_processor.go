// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	mock "github.com/stretchr/testify/mock"
)

// MessageProcessor is an autogenerated mock type for the MessageProcessor type
type MessageProcessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: channel, originID, message
func (_m *MessageProcessor) Process(channel channels.Channel, originID flow.Identifier, message interface{}) error {
	ret := _m.Called(channel, originID, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, flow.Identifier, interface{}) error); ok {
		r0 = rf(channel, originID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMessageProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageProcessor creates a new instance of MessageProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageProcessor(t mockConstructorTestingTNewMessageProcessor) *MessageProcessor {
	mock := &MessageProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
