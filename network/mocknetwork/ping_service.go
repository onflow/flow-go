// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	message "github.com/onflow/flow-go/network/message"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	time "time"
)

// PingService is an autogenerated mock type for the PingService type
type PingService struct {
	mock.Mock
}

// Ping provides a mock function with given fields: ctx, peerID
func (_m *PingService) Ping(ctx context.Context, peerID peer.ID) (message.PingResponse, time.Duration, error) {
	ret := _m.Called(ctx, peerID)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 message.PingResponse
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) (message.PingResponse, time.Duration, error)); ok {
		return rf(ctx, peerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) message.PingResponse); ok {
		r0 = rf(ctx, peerID)
	} else {
		r0 = ret.Get(0).(message.PingResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID) time.Duration); ok {
		r1 = rf(ctx, peerID)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(context.Context, peer.ID) error); ok {
		r2 = rf(ctx, peerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewPingService creates a new instance of PingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PingService {
	mock := &PingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
