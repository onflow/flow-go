// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	channels "github.com/onflow/flow-go/network/channels"
	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// MockUnderlay is an autogenerated mock type for the Underlay type
type MockUnderlay struct {
	mock.Mock
}

type MockUnderlay_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnderlay) EXPECT() *MockUnderlay_Expecter {
	return &MockUnderlay_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockUnderlay) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockUnderlay_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockUnderlay_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockUnderlay_Expecter) Done() *MockUnderlay_Done_Call {
	return &MockUnderlay_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockUnderlay_Done_Call) Run(run func()) *MockUnderlay_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnderlay_Done_Call) Return(_a0 <-chan struct{}) *MockUnderlay_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnderlay_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockUnderlay_Done_Call {
	_c.Call.Return(run)
	return _c
}

// OnAllowListNotification provides a mock function with given fields: _a0
func (_m *MockUnderlay) OnAllowListNotification(_a0 *network.AllowListingUpdate) {
	_m.Called(_a0)
}

// MockUnderlay_OnAllowListNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAllowListNotification'
type MockUnderlay_OnAllowListNotification_Call struct {
	*mock.Call
}

// OnAllowListNotification is a helper method to define mock.On call
//   - _a0 *network.AllowListingUpdate
func (_e *MockUnderlay_Expecter) OnAllowListNotification(_a0 interface{}) *MockUnderlay_OnAllowListNotification_Call {
	return &MockUnderlay_OnAllowListNotification_Call{Call: _e.mock.On("OnAllowListNotification", _a0)}
}

func (_c *MockUnderlay_OnAllowListNotification_Call) Run(run func(_a0 *network.AllowListingUpdate)) *MockUnderlay_OnAllowListNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*network.AllowListingUpdate))
	})
	return _c
}

func (_c *MockUnderlay_OnAllowListNotification_Call) Return() *MockUnderlay_OnAllowListNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnderlay_OnAllowListNotification_Call) RunAndReturn(run func(*network.AllowListingUpdate)) *MockUnderlay_OnAllowListNotification_Call {
	_c.Run(run)
	return _c
}

// OnDisallowListNotification provides a mock function with given fields: _a0
func (_m *MockUnderlay) OnDisallowListNotification(_a0 *network.DisallowListingUpdate) {
	_m.Called(_a0)
}

// MockUnderlay_OnDisallowListNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDisallowListNotification'
type MockUnderlay_OnDisallowListNotification_Call struct {
	*mock.Call
}

// OnDisallowListNotification is a helper method to define mock.On call
//   - _a0 *network.DisallowListingUpdate
func (_e *MockUnderlay_Expecter) OnDisallowListNotification(_a0 interface{}) *MockUnderlay_OnDisallowListNotification_Call {
	return &MockUnderlay_OnDisallowListNotification_Call{Call: _e.mock.On("OnDisallowListNotification", _a0)}
}

func (_c *MockUnderlay_OnDisallowListNotification_Call) Run(run func(_a0 *network.DisallowListingUpdate)) *MockUnderlay_OnDisallowListNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*network.DisallowListingUpdate))
	})
	return _c
}

func (_c *MockUnderlay_OnDisallowListNotification_Call) Return() *MockUnderlay_OnDisallowListNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnderlay_OnDisallowListNotification_Call) RunAndReturn(run func(*network.DisallowListingUpdate)) *MockUnderlay_OnDisallowListNotification_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockUnderlay) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockUnderlay_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockUnderlay_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockUnderlay_Expecter) Ready() *MockUnderlay_Ready_Call {
	return &MockUnderlay_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockUnderlay_Ready_Call) Run(run func()) *MockUnderlay_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnderlay_Ready_Call) Return(_a0 <-chan struct{}) *MockUnderlay_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnderlay_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockUnderlay_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: channel
func (_m *MockUnderlay) Subscribe(channel channels.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnderlay_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockUnderlay_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - channel channels.Channel
func (_e *MockUnderlay_Expecter) Subscribe(channel interface{}) *MockUnderlay_Subscribe_Call {
	return &MockUnderlay_Subscribe_Call{Call: _e.mock.On("Subscribe", channel)}
}

func (_c *MockUnderlay_Subscribe_Call) Run(run func(channel channels.Channel)) *MockUnderlay_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel))
	})
	return _c
}

func (_c *MockUnderlay_Subscribe_Call) Return(_a0 error) *MockUnderlay_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnderlay_Subscribe_Call) RunAndReturn(run func(channels.Channel) error) *MockUnderlay_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: channel
func (_m *MockUnderlay) Unsubscribe(channel channels.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnderlay_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockUnderlay_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - channel channels.Channel
func (_e *MockUnderlay_Expecter) Unsubscribe(channel interface{}) *MockUnderlay_Unsubscribe_Call {
	return &MockUnderlay_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", channel)}
}

func (_c *MockUnderlay_Unsubscribe_Call) Run(run func(channel channels.Channel)) *MockUnderlay_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel))
	})
	return _c
}

func (_c *MockUnderlay_Unsubscribe_Call) Return(_a0 error) *MockUnderlay_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnderlay_Unsubscribe_Call) RunAndReturn(run func(channels.Channel) error) *MockUnderlay_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNodeAddresses provides a mock function with no fields
func (_m *MockUnderlay) UpdateNodeAddresses() {
	_m.Called()
}

// MockUnderlay_UpdateNodeAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNodeAddresses'
type MockUnderlay_UpdateNodeAddresses_Call struct {
	*mock.Call
}

// UpdateNodeAddresses is a helper method to define mock.On call
func (_e *MockUnderlay_Expecter) UpdateNodeAddresses() *MockUnderlay_UpdateNodeAddresses_Call {
	return &MockUnderlay_UpdateNodeAddresses_Call{Call: _e.mock.On("UpdateNodeAddresses")}
}

func (_c *MockUnderlay_UpdateNodeAddresses_Call) Run(run func()) *MockUnderlay_UpdateNodeAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnderlay_UpdateNodeAddresses_Call) Return() *MockUnderlay_UpdateNodeAddresses_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnderlay_UpdateNodeAddresses_Call) RunAndReturn(run func()) *MockUnderlay_UpdateNodeAddresses_Call {
	_c.Run(run)
	return _c
}

// NewMockUnderlay creates a new instance of MockUnderlay. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnderlay(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnderlay {
	mock := &MockUnderlay{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
