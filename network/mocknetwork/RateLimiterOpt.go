// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"
)

// MockRateLimiterOpt is an autogenerated mock type for the RateLimiterOpt type
type MockRateLimiterOpt struct {
	mock.Mock
}

type MockRateLimiterOpt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateLimiterOpt) EXPECT() *MockRateLimiterOpt_Expecter {
	return &MockRateLimiterOpt_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: limiter
func (_m *MockRateLimiterOpt) Execute(limiter p2p.RateLimiter) {
	_m.Called(limiter)
}

// MockRateLimiterOpt_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRateLimiterOpt_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - limiter p2p.RateLimiter
func (_e *MockRateLimiterOpt_Expecter) Execute(limiter interface{}) *MockRateLimiterOpt_Execute_Call {
	return &MockRateLimiterOpt_Execute_Call{Call: _e.mock.On("Execute", limiter)}
}

func (_c *MockRateLimiterOpt_Execute_Call) Run(run func(limiter p2p.RateLimiter)) *MockRateLimiterOpt_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.RateLimiter))
	})
	return _c
}

func (_c *MockRateLimiterOpt_Execute_Call) Return() *MockRateLimiterOpt_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRateLimiterOpt_Execute_Call) RunAndReturn(run func(p2p.RateLimiter)) *MockRateLimiterOpt_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockRateLimiterOpt creates a new instance of MockRateLimiterOpt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimiterOpt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimiterOpt {
	mock := &MockRateLimiterOpt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
