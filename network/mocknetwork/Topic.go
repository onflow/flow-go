// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	p2p "github.com/onflow/flow-go/network/p2p"
	mock "github.com/stretchr/testify/mock"
)

// MockTopic is an autogenerated mock type for the Topic type
type MockTopic struct {
	mock.Mock
}

type MockTopic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopic) EXPECT() *MockTopic_Expecter {
	return &MockTopic_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockTopic) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTopic_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTopic_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTopic_Expecter) Close() *MockTopic_Close_Call {
	return &MockTopic_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTopic_Close_Call) Run(run func()) *MockTopic_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTopic_Close_Call) Return(_a0 error) *MockTopic_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopic_Close_Call) RunAndReturn(run func() error) *MockTopic_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *MockTopic) Publish(_a0 context.Context, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTopic_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockTopic_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []byte
func (_e *MockTopic_Expecter) Publish(_a0 interface{}, _a1 interface{}) *MockTopic_Publish_Call {
	return &MockTopic_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1)}
}

func (_c *MockTopic_Publish_Call) Run(run func(_a0 context.Context, _a1 []byte)) *MockTopic_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockTopic_Publish_Call) Return(_a0 error) *MockTopic_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopic_Publish_Call) RunAndReturn(run func(context.Context, []byte) error) *MockTopic_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockTopic) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTopic_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockTopic_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockTopic_Expecter) String() *MockTopic_String_Call {
	return &MockTopic_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockTopic_String_Call) Run(run func()) *MockTopic_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTopic_String_Call) Return(_a0 string) *MockTopic_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopic_String_Call) RunAndReturn(run func() string) *MockTopic_String_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with no fields
func (_m *MockTopic) Subscribe() (p2p.Subscription, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 p2p.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func() (p2p.Subscription, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() p2p.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopic_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockTopic_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
func (_e *MockTopic_Expecter) Subscribe() *MockTopic_Subscribe_Call {
	return &MockTopic_Subscribe_Call{Call: _e.mock.On("Subscribe")}
}

func (_c *MockTopic_Subscribe_Call) Run(run func()) *MockTopic_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTopic_Subscribe_Call) Return(_a0 p2p.Subscription, _a1 error) *MockTopic_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopic_Subscribe_Call) RunAndReturn(run func() (p2p.Subscription, error)) *MockTopic_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopic creates a new instance of MockTopic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopic {
	mock := &MockTopic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
