// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import mock "github.com/stretchr/testify/mock"

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

type MockConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnection) EXPECT() *MockConnection_Expecter {
	return &MockConnection_Expecter{mock: &_m.Mock}
}

// Receive provides a mock function with no fields
func (_m *MockConnection) Receive() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnection_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type MockConnection_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
func (_e *MockConnection_Expecter) Receive() *MockConnection_Receive_Call {
	return &MockConnection_Receive_Call{Call: _e.mock.On("Receive")}
}

func (_c *MockConnection_Receive_Call) Run(run func()) *MockConnection_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_Receive_Call) Return(_a0 interface{}, _a1 error) *MockConnection_Receive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnection_Receive_Call) RunAndReturn(run func() (interface{}, error)) *MockConnection_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: msg
func (_m *MockConnection) Send(msg interface{}) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnection_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockConnection_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - msg interface{}
func (_e *MockConnection_Expecter) Send(msg interface{}) *MockConnection_Send_Call {
	return &MockConnection_Send_Call{Call: _e.mock.On("Send", msg)}
}

func (_c *MockConnection_Send_Call) Run(run func(msg interface{})) *MockConnection_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockConnection_Send_Call) Return(_a0 error) *MockConnection_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnection_Send_Call) RunAndReturn(run func(interface{}) error) *MockConnection_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
