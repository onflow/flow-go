// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	network "github.com/libp2p/go-libp2p/core/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocols "github.com/onflow/flow-go/network/p2p/unicast/protocols"
)

// MockUnicastManagement is an autogenerated mock type for the UnicastManagement type
type MockUnicastManagement struct {
	mock.Mock
}

type MockUnicastManagement_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnicastManagement) EXPECT() *MockUnicastManagement_Expecter {
	return &MockUnicastManagement_Expecter{mock: &_m.Mock}
}

// OpenAndWriteOnStream provides a mock function with given fields: ctx, peerID, protectionTag, writingLogic
func (_m *MockUnicastManagement) OpenAndWriteOnStream(ctx context.Context, peerID peer.ID, protectionTag string, writingLogic func(network.Stream) error) error {
	ret := _m.Called(ctx, peerID, protectionTag, writingLogic)

	if len(ret) == 0 {
		panic("no return value specified for OpenAndWriteOnStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, string, func(network.Stream) error) error); ok {
		r0 = rf(ctx, peerID, protectionTag, writingLogic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnicastManagement_OpenAndWriteOnStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAndWriteOnStream'
type MockUnicastManagement_OpenAndWriteOnStream_Call struct {
	*mock.Call
}

// OpenAndWriteOnStream is a helper method to define mock.On call
//   - ctx context.Context
//   - peerID peer.ID
//   - protectionTag string
//   - writingLogic func(network.Stream) error
func (_e *MockUnicastManagement_Expecter) OpenAndWriteOnStream(ctx interface{}, peerID interface{}, protectionTag interface{}, writingLogic interface{}) *MockUnicastManagement_OpenAndWriteOnStream_Call {
	return &MockUnicastManagement_OpenAndWriteOnStream_Call{Call: _e.mock.On("OpenAndWriteOnStream", ctx, peerID, protectionTag, writingLogic)}
}

func (_c *MockUnicastManagement_OpenAndWriteOnStream_Call) Run(run func(ctx context.Context, peerID peer.ID, protectionTag string, writingLogic func(network.Stream) error)) *MockUnicastManagement_OpenAndWriteOnStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.ID), args[2].(string), args[3].(func(network.Stream) error))
	})
	return _c
}

func (_c *MockUnicastManagement_OpenAndWriteOnStream_Call) Return(_a0 error) *MockUnicastManagement_OpenAndWriteOnStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnicastManagement_OpenAndWriteOnStream_Call) RunAndReturn(run func(context.Context, peer.ID, string, func(network.Stream) error) error) *MockUnicastManagement_OpenAndWriteOnStream_Call {
	_c.Call.Return(run)
	return _c
}

// WithDefaultUnicastProtocol provides a mock function with given fields: defaultHandler, preferred
func (_m *MockUnicastManagement) WithDefaultUnicastProtocol(defaultHandler network.StreamHandler, preferred []protocols.ProtocolName) error {
	ret := _m.Called(defaultHandler, preferred)

	if len(ret) == 0 {
		panic("no return value specified for WithDefaultUnicastProtocol")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(network.StreamHandler, []protocols.ProtocolName) error); ok {
		r0 = rf(defaultHandler, preferred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnicastManagement_WithDefaultUnicastProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDefaultUnicastProtocol'
type MockUnicastManagement_WithDefaultUnicastProtocol_Call struct {
	*mock.Call
}

// WithDefaultUnicastProtocol is a helper method to define mock.On call
//   - defaultHandler network.StreamHandler
//   - preferred []protocols.ProtocolName
func (_e *MockUnicastManagement_Expecter) WithDefaultUnicastProtocol(defaultHandler interface{}, preferred interface{}) *MockUnicastManagement_WithDefaultUnicastProtocol_Call {
	return &MockUnicastManagement_WithDefaultUnicastProtocol_Call{Call: _e.mock.On("WithDefaultUnicastProtocol", defaultHandler, preferred)}
}

func (_c *MockUnicastManagement_WithDefaultUnicastProtocol_Call) Run(run func(defaultHandler network.StreamHandler, preferred []protocols.ProtocolName)) *MockUnicastManagement_WithDefaultUnicastProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(network.StreamHandler), args[1].([]protocols.ProtocolName))
	})
	return _c
}

func (_c *MockUnicastManagement_WithDefaultUnicastProtocol_Call) Return(_a0 error) *MockUnicastManagement_WithDefaultUnicastProtocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnicastManagement_WithDefaultUnicastProtocol_Call) RunAndReturn(run func(network.StreamHandler, []protocols.ProtocolName) error) *MockUnicastManagement_WithDefaultUnicastProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnicastManagement creates a new instance of MockUnicastManagement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnicastManagement(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnicastManagement {
	mock := &MockUnicastManagement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
