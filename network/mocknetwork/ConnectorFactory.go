// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	host "github.com/libp2p/go-libp2p/core/host"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"
)

// MockConnectorFactory is an autogenerated mock type for the ConnectorFactory type
type MockConnectorFactory struct {
	mock.Mock
}

type MockConnectorFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectorFactory) EXPECT() *MockConnectorFactory_Expecter {
	return &MockConnectorFactory_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockConnectorFactory) Execute(_a0 host.Host) (p2p.Connector, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 p2p.Connector
	var r1 error
	if rf, ok := ret.Get(0).(func(host.Host) (p2p.Connector, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(host.Host) p2p.Connector); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Connector)
		}
	}

	if rf, ok := ret.Get(1).(func(host.Host) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectorFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockConnectorFactory_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 host.Host
func (_e *MockConnectorFactory_Expecter) Execute(_a0 interface{}) *MockConnectorFactory_Execute_Call {
	return &MockConnectorFactory_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockConnectorFactory_Execute_Call) Run(run func(_a0 host.Host)) *MockConnectorFactory_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(host.Host))
	})
	return _c
}

func (_c *MockConnectorFactory_Execute_Call) Return(_a0 p2p.Connector, _a1 error) *MockConnectorFactory_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectorFactory_Execute_Call) RunAndReturn(run func(host.Host) (p2p.Connector, error)) *MockConnectorFactory_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectorFactory creates a new instance of MockConnectorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectorFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectorFactory {
	mock := &MockConnectorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
