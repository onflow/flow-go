// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockConnector is an autogenerated mock type for the Connector type
type MockConnector struct {
	mock.Mock
}

type MockConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnector) EXPECT() *MockConnector_Expecter {
	return &MockConnector_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx, peerChan
func (_m *MockConnector) Connect(ctx context.Context, peerChan <-chan peer.AddrInfo) {
	_m.Called(ctx, peerChan)
}

// MockConnector_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockConnector_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - peerChan <-chan peer.AddrInfo
func (_e *MockConnector_Expecter) Connect(ctx interface{}, peerChan interface{}) *MockConnector_Connect_Call {
	return &MockConnector_Connect_Call{Call: _e.mock.On("Connect", ctx, peerChan)}
}

func (_c *MockConnector_Connect_Call) Run(run func(ctx context.Context, peerChan <-chan peer.AddrInfo)) *MockConnector_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(<-chan peer.AddrInfo))
	})
	return _c
}

func (_c *MockConnector_Connect_Call) Return() *MockConnector_Connect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnector_Connect_Call) RunAndReturn(run func(context.Context, <-chan peer.AddrInfo)) *MockConnector_Connect_Call {
	_c.Run(run)
	return _c
}

// NewMockConnector creates a new instance of MockConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnector {
	mock := &MockConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
