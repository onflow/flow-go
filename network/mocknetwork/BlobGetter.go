// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBlobGetter is an autogenerated mock type for the BlobGetter type
type MockBlobGetter struct {
	mock.Mock
}

type MockBlobGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlobGetter) EXPECT() *MockBlobGetter_Expecter {
	return &MockBlobGetter_Expecter{mock: &_m.Mock}
}

// GetBlob provides a mock function with given fields: ctx, c
func (_m *MockBlobGetter) GetBlob(ctx context.Context, c cid.Cid) (blocks.Block, error) {
	ret := _m.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 blocks.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) (blocks.Block, error)); ok {
		return rf(ctx, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) blocks.Block); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blocks.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobGetter_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type MockBlobGetter_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - c cid.Cid
func (_e *MockBlobGetter_Expecter) GetBlob(ctx interface{}, c interface{}) *MockBlobGetter_GetBlob_Call {
	return &MockBlobGetter_GetBlob_Call{Call: _e.mock.On("GetBlob", ctx, c)}
}

func (_c *MockBlobGetter_GetBlob_Call) Run(run func(ctx context.Context, c cid.Cid)) *MockBlobGetter_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *MockBlobGetter_GetBlob_Call) Return(_a0 blocks.Block, _a1 error) *MockBlobGetter_GetBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobGetter_GetBlob_Call) RunAndReturn(run func(context.Context, cid.Cid) (blocks.Block, error)) *MockBlobGetter_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobs provides a mock function with given fields: ctx, ks
func (_m *MockBlobGetter) GetBlobs(ctx context.Context, ks []cid.Cid) <-chan blocks.Block {
	ret := _m.Called(ctx, ks)

	if len(ret) == 0 {
		panic("no return value specified for GetBlobs")
	}

	var r0 <-chan blocks.Block
	if rf, ok := ret.Get(0).(func(context.Context, []cid.Cid) <-chan blocks.Block); ok {
		r0 = rf(ctx, ks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan blocks.Block)
		}
	}

	return r0
}

// MockBlobGetter_GetBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobs'
type MockBlobGetter_GetBlobs_Call struct {
	*mock.Call
}

// GetBlobs is a helper method to define mock.On call
//   - ctx context.Context
//   - ks []cid.Cid
func (_e *MockBlobGetter_Expecter) GetBlobs(ctx interface{}, ks interface{}) *MockBlobGetter_GetBlobs_Call {
	return &MockBlobGetter_GetBlobs_Call{Call: _e.mock.On("GetBlobs", ctx, ks)}
}

func (_c *MockBlobGetter_GetBlobs_Call) Run(run func(ctx context.Context, ks []cid.Cid)) *MockBlobGetter_GetBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]cid.Cid))
	})
	return _c
}

func (_c *MockBlobGetter_GetBlobs_Call) Return(_a0 <-chan blocks.Block) *MockBlobGetter_GetBlobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobGetter_GetBlobs_Call) RunAndReturn(run func(context.Context, []cid.Cid) <-chan blocks.Block) *MockBlobGetter_GetBlobs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlobGetter creates a new instance of MockBlobGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlobGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlobGetter {
	mock := &MockBlobGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
