// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	component "github.com/onflow/flow-go/module/component"
	channels "github.com/onflow/flow-go/network/channels"

	context "context"

	corenetwork "github.com/libp2p/go-libp2p/core/network"

	host "github.com/libp2p/go-libp2p/core/host"

	kbucket "github.com/libp2p/go-libp2p-kbucket"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"

	protocols "github.com/onflow/flow-go/network/p2p/unicast/protocols"
)

// MockPeerManagement is an autogenerated mock type for the PeerManagement type
type MockPeerManagement struct {
	mock.Mock
}

type MockPeerManagement_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeerManagement) EXPECT() *MockPeerManagement_Expecter {
	return &MockPeerManagement_Expecter{mock: &_m.Mock}
}

// ConnectToPeer provides a mock function with given fields: ctx, peerInfo
func (_m *MockPeerManagement) ConnectToPeer(ctx context.Context, peerInfo peer.AddrInfo) error {
	ret := _m.Called(ctx, peerInfo)

	if len(ret) == 0 {
		panic("no return value specified for ConnectToPeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.AddrInfo) error); ok {
		r0 = rf(ctx, peerInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeerManagement_ConnectToPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectToPeer'
type MockPeerManagement_ConnectToPeer_Call struct {
	*mock.Call
}

// ConnectToPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - peerInfo peer.AddrInfo
func (_e *MockPeerManagement_Expecter) ConnectToPeer(ctx interface{}, peerInfo interface{}) *MockPeerManagement_ConnectToPeer_Call {
	return &MockPeerManagement_ConnectToPeer_Call{Call: _e.mock.On("ConnectToPeer", ctx, peerInfo)}
}

func (_c *MockPeerManagement_ConnectToPeer_Call) Run(run func(ctx context.Context, peerInfo peer.AddrInfo)) *MockPeerManagement_ConnectToPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.AddrInfo))
	})
	return _c
}

func (_c *MockPeerManagement_ConnectToPeer_Call) Return(_a0 error) *MockPeerManagement_ConnectToPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_ConnectToPeer_Call) RunAndReturn(run func(context.Context, peer.AddrInfo) error) *MockPeerManagement_ConnectToPeer_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPPort provides a mock function with no fields
func (_m *MockPeerManagement) GetIPPort() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIPPort")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPeerManagement_GetIPPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPPort'
type MockPeerManagement_GetIPPort_Call struct {
	*mock.Call
}

// GetIPPort is a helper method to define mock.On call
func (_e *MockPeerManagement_Expecter) GetIPPort() *MockPeerManagement_GetIPPort_Call {
	return &MockPeerManagement_GetIPPort_Call{Call: _e.mock.On("GetIPPort")}
}

func (_c *MockPeerManagement_GetIPPort_Call) Run(run func()) *MockPeerManagement_GetIPPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManagement_GetIPPort_Call) Return(_a0 string, _a1 string, _a2 error) *MockPeerManagement_GetIPPort_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPeerManagement_GetIPPort_Call) RunAndReturn(run func() (string, string, error)) *MockPeerManagement_GetIPPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeersForProtocol provides a mock function with given fields: pid
func (_m *MockPeerManagement) GetPeersForProtocol(pid protocol.ID) peer.IDSlice {
	ret := _m.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for GetPeersForProtocol")
	}

	var r0 peer.IDSlice
	if rf, ok := ret.Get(0).(func(protocol.ID) peer.IDSlice); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peer.IDSlice)
		}
	}

	return r0
}

// MockPeerManagement_GetPeersForProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeersForProtocol'
type MockPeerManagement_GetPeersForProtocol_Call struct {
	*mock.Call
}

// GetPeersForProtocol is a helper method to define mock.On call
//   - pid protocol.ID
func (_e *MockPeerManagement_Expecter) GetPeersForProtocol(pid interface{}) *MockPeerManagement_GetPeersForProtocol_Call {
	return &MockPeerManagement_GetPeersForProtocol_Call{Call: _e.mock.On("GetPeersForProtocol", pid)}
}

func (_c *MockPeerManagement_GetPeersForProtocol_Call) Run(run func(pid protocol.ID)) *MockPeerManagement_GetPeersForProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.ID))
	})
	return _c
}

func (_c *MockPeerManagement_GetPeersForProtocol_Call) Return(_a0 peer.IDSlice) *MockPeerManagement_GetPeersForProtocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_GetPeersForProtocol_Call) RunAndReturn(run func(protocol.ID) peer.IDSlice) *MockPeerManagement_GetPeersForProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// Host provides a mock function with no fields
func (_m *MockPeerManagement) Host() host.Host {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 host.Host
	if rf, ok := ret.Get(0).(func() host.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(host.Host)
		}
	}

	return r0
}

// MockPeerManagement_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type MockPeerManagement_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *MockPeerManagement_Expecter) Host() *MockPeerManagement_Host_Call {
	return &MockPeerManagement_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *MockPeerManagement_Host_Call) Run(run func()) *MockPeerManagement_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManagement_Host_Call) Return(_a0 host.Host) *MockPeerManagement_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_Host_Call) RunAndReturn(run func() host.Host) *MockPeerManagement_Host_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockPeerManagement) ID() peer.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 peer.ID
	if rf, ok := ret.Get(0).(func() peer.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	return r0
}

// MockPeerManagement_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockPeerManagement_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockPeerManagement_Expecter) ID() *MockPeerManagement_ID_Call {
	return &MockPeerManagement_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockPeerManagement_ID_Call) Run(run func()) *MockPeerManagement_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManagement_ID_Call) Return(_a0 peer.ID) *MockPeerManagement_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_ID_Call) RunAndReturn(run func() peer.ID) *MockPeerManagement_ID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeers provides a mock function with given fields: topic
func (_m *MockPeerManagement) ListPeers(topic string) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for ListPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(string) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockPeerManagement_ListPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeers'
type MockPeerManagement_ListPeers_Call struct {
	*mock.Call
}

// ListPeers is a helper method to define mock.On call
//   - topic string
func (_e *MockPeerManagement_Expecter) ListPeers(topic interface{}) *MockPeerManagement_ListPeers_Call {
	return &MockPeerManagement_ListPeers_Call{Call: _e.mock.On("ListPeers", topic)}
}

func (_c *MockPeerManagement_ListPeers_Call) Run(run func(topic string)) *MockPeerManagement_ListPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPeerManagement_ListPeers_Call) Return(_a0 []peer.ID) *MockPeerManagement_ListPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_ListPeers_Call) RunAndReturn(run func(string) []peer.ID) *MockPeerManagement_ListPeers_Call {
	_c.Call.Return(run)
	return _c
}

// PeerManagerComponent provides a mock function with no fields
func (_m *MockPeerManagement) PeerManagerComponent() component.Component {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PeerManagerComponent")
	}

	var r0 component.Component
	if rf, ok := ret.Get(0).(func() component.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Component)
		}
	}

	return r0
}

// MockPeerManagement_PeerManagerComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerManagerComponent'
type MockPeerManagement_PeerManagerComponent_Call struct {
	*mock.Call
}

// PeerManagerComponent is a helper method to define mock.On call
func (_e *MockPeerManagement_Expecter) PeerManagerComponent() *MockPeerManagement_PeerManagerComponent_Call {
	return &MockPeerManagement_PeerManagerComponent_Call{Call: _e.mock.On("PeerManagerComponent")}
}

func (_c *MockPeerManagement_PeerManagerComponent_Call) Run(run func()) *MockPeerManagement_PeerManagerComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManagement_PeerManagerComponent_Call) Return(_a0 component.Component) *MockPeerManagement_PeerManagerComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_PeerManagerComponent_Call) RunAndReturn(run func() component.Component) *MockPeerManagement_PeerManagerComponent_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, messageScope
func (_m *MockPeerManagement) Publish(ctx context.Context, messageScope network.OutgoingMessageScope) error {
	ret := _m.Called(ctx, messageScope)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, network.OutgoingMessageScope) error); ok {
		r0 = rf(ctx, messageScope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeerManagement_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPeerManagement_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - messageScope network.OutgoingMessageScope
func (_e *MockPeerManagement_Expecter) Publish(ctx interface{}, messageScope interface{}) *MockPeerManagement_Publish_Call {
	return &MockPeerManagement_Publish_Call{Call: _e.mock.On("Publish", ctx, messageScope)}
}

func (_c *MockPeerManagement_Publish_Call) Run(run func(ctx context.Context, messageScope network.OutgoingMessageScope)) *MockPeerManagement_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(network.OutgoingMessageScope))
	})
	return _c
}

func (_c *MockPeerManagement_Publish_Call) Return(_a0 error) *MockPeerManagement_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_Publish_Call) RunAndReturn(run func(context.Context, network.OutgoingMessageScope) error) *MockPeerManagement_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePeer provides a mock function with given fields: peerID
func (_m *MockPeerManagement) RemovePeer(peerID peer.ID) error {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID) error); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeerManagement_RemovePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePeer'
type MockPeerManagement_RemovePeer_Call struct {
	*mock.Call
}

// RemovePeer is a helper method to define mock.On call
//   - peerID peer.ID
func (_e *MockPeerManagement_Expecter) RemovePeer(peerID interface{}) *MockPeerManagement_RemovePeer_Call {
	return &MockPeerManagement_RemovePeer_Call{Call: _e.mock.On("RemovePeer", peerID)}
}

func (_c *MockPeerManagement_RemovePeer_Call) Run(run func(peerID peer.ID)) *MockPeerManagement_RemovePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockPeerManagement_RemovePeer_Call) Return(_a0 error) *MockPeerManagement_RemovePeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_RemovePeer_Call) RunAndReturn(run func(peer.ID) error) *MockPeerManagement_RemovePeer_Call {
	_c.Call.Return(run)
	return _c
}

// RequestPeerUpdate provides a mock function with no fields
func (_m *MockPeerManagement) RequestPeerUpdate() {
	_m.Called()
}

// MockPeerManagement_RequestPeerUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPeerUpdate'
type MockPeerManagement_RequestPeerUpdate_Call struct {
	*mock.Call
}

// RequestPeerUpdate is a helper method to define mock.On call
func (_e *MockPeerManagement_Expecter) RequestPeerUpdate() *MockPeerManagement_RequestPeerUpdate_Call {
	return &MockPeerManagement_RequestPeerUpdate_Call{Call: _e.mock.On("RequestPeerUpdate")}
}

func (_c *MockPeerManagement_RequestPeerUpdate_Call) Run(run func()) *MockPeerManagement_RequestPeerUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManagement_RequestPeerUpdate_Call) Return() *MockPeerManagement_RequestPeerUpdate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerManagement_RequestPeerUpdate_Call) RunAndReturn(run func()) *MockPeerManagement_RequestPeerUpdate_Call {
	_c.Run(run)
	return _c
}

// RoutingTable provides a mock function with no fields
func (_m *MockPeerManagement) RoutingTable() *kbucket.RoutingTable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RoutingTable")
	}

	var r0 *kbucket.RoutingTable
	if rf, ok := ret.Get(0).(func() *kbucket.RoutingTable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kbucket.RoutingTable)
		}
	}

	return r0
}

// MockPeerManagement_RoutingTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoutingTable'
type MockPeerManagement_RoutingTable_Call struct {
	*mock.Call
}

// RoutingTable is a helper method to define mock.On call
func (_e *MockPeerManagement_Expecter) RoutingTable() *MockPeerManagement_RoutingTable_Call {
	return &MockPeerManagement_RoutingTable_Call{Call: _e.mock.On("RoutingTable")}
}

func (_c *MockPeerManagement_RoutingTable_Call) Run(run func()) *MockPeerManagement_RoutingTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeerManagement_RoutingTable_Call) Return(_a0 *kbucket.RoutingTable) *MockPeerManagement_RoutingTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_RoutingTable_Call) RunAndReturn(run func() *kbucket.RoutingTable) *MockPeerManagement_RoutingTable_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, topicValidator
func (_m *MockPeerManagement) Subscribe(topic channels.Topic, topicValidator p2p.TopicValidatorFunc) (p2p.Subscription, error) {
	ret := _m.Called(topic, topicValidator)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 p2p.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(channels.Topic, p2p.TopicValidatorFunc) (p2p.Subscription, error)); ok {
		return rf(topic, topicValidator)
	}
	if rf, ok := ret.Get(0).(func(channels.Topic, p2p.TopicValidatorFunc) p2p.Subscription); ok {
		r0 = rf(topic, topicValidator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(channels.Topic, p2p.TopicValidatorFunc) error); ok {
		r1 = rf(topic, topicValidator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPeerManagement_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockPeerManagement_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic channels.Topic
//   - topicValidator p2p.TopicValidatorFunc
func (_e *MockPeerManagement_Expecter) Subscribe(topic interface{}, topicValidator interface{}) *MockPeerManagement_Subscribe_Call {
	return &MockPeerManagement_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, topicValidator)}
}

func (_c *MockPeerManagement_Subscribe_Call) Run(run func(topic channels.Topic, topicValidator p2p.TopicValidatorFunc)) *MockPeerManagement_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic), args[1].(p2p.TopicValidatorFunc))
	})
	return _c
}

func (_c *MockPeerManagement_Subscribe_Call) Return(_a0 p2p.Subscription, _a1 error) *MockPeerManagement_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeerManagement_Subscribe_Call) RunAndReturn(run func(channels.Topic, p2p.TopicValidatorFunc) (p2p.Subscription, error)) *MockPeerManagement_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: topic
func (_m *MockPeerManagement) Unsubscribe(topic channels.Topic) error {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeerManagement_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockPeerManagement_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - topic channels.Topic
func (_e *MockPeerManagement_Expecter) Unsubscribe(topic interface{}) *MockPeerManagement_Unsubscribe_Call {
	return &MockPeerManagement_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", topic)}
}

func (_c *MockPeerManagement_Unsubscribe_Call) Run(run func(topic channels.Topic)) *MockPeerManagement_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Topic))
	})
	return _c
}

func (_c *MockPeerManagement_Unsubscribe_Call) Return(_a0 error) *MockPeerManagement_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_Unsubscribe_Call) RunAndReturn(run func(channels.Topic) error) *MockPeerManagement_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// WithDefaultUnicastProtocol provides a mock function with given fields: defaultHandler, preferred
func (_m *MockPeerManagement) WithDefaultUnicastProtocol(defaultHandler corenetwork.StreamHandler, preferred []protocols.ProtocolName) error {
	ret := _m.Called(defaultHandler, preferred)

	if len(ret) == 0 {
		panic("no return value specified for WithDefaultUnicastProtocol")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(corenetwork.StreamHandler, []protocols.ProtocolName) error); ok {
		r0 = rf(defaultHandler, preferred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeerManagement_WithDefaultUnicastProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDefaultUnicastProtocol'
type MockPeerManagement_WithDefaultUnicastProtocol_Call struct {
	*mock.Call
}

// WithDefaultUnicastProtocol is a helper method to define mock.On call
//   - defaultHandler corenetwork.StreamHandler
//   - preferred []protocols.ProtocolName
func (_e *MockPeerManagement_Expecter) WithDefaultUnicastProtocol(defaultHandler interface{}, preferred interface{}) *MockPeerManagement_WithDefaultUnicastProtocol_Call {
	return &MockPeerManagement_WithDefaultUnicastProtocol_Call{Call: _e.mock.On("WithDefaultUnicastProtocol", defaultHandler, preferred)}
}

func (_c *MockPeerManagement_WithDefaultUnicastProtocol_Call) Run(run func(defaultHandler corenetwork.StreamHandler, preferred []protocols.ProtocolName)) *MockPeerManagement_WithDefaultUnicastProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(corenetwork.StreamHandler), args[1].([]protocols.ProtocolName))
	})
	return _c
}

func (_c *MockPeerManagement_WithDefaultUnicastProtocol_Call) Return(_a0 error) *MockPeerManagement_WithDefaultUnicastProtocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeerManagement_WithDefaultUnicastProtocol_Call) RunAndReturn(run func(corenetwork.StreamHandler, []protocols.ProtocolName) error) *MockPeerManagement_WithDefaultUnicastProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// WithPeersProvider provides a mock function with given fields: peersProvider
func (_m *MockPeerManagement) WithPeersProvider(peersProvider p2p.PeersProvider) {
	_m.Called(peersProvider)
}

// MockPeerManagement_WithPeersProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPeersProvider'
type MockPeerManagement_WithPeersProvider_Call struct {
	*mock.Call
}

// WithPeersProvider is a helper method to define mock.On call
//   - peersProvider p2p.PeersProvider
func (_e *MockPeerManagement_Expecter) WithPeersProvider(peersProvider interface{}) *MockPeerManagement_WithPeersProvider_Call {
	return &MockPeerManagement_WithPeersProvider_Call{Call: _e.mock.On("WithPeersProvider", peersProvider)}
}

func (_c *MockPeerManagement_WithPeersProvider_Call) Run(run func(peersProvider p2p.PeersProvider)) *MockPeerManagement_WithPeersProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(p2p.PeersProvider))
	})
	return _c
}

func (_c *MockPeerManagement_WithPeersProvider_Call) Return() *MockPeerManagement_WithPeersProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeerManagement_WithPeersProvider_Call) RunAndReturn(run func(p2p.PeersProvider)) *MockPeerManagement_WithPeersProvider_Call {
	_c.Run(run)
	return _c
}

// NewMockPeerManagement creates a new instance of MockPeerManagement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeerManagement(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeerManagement {
	mock := &MockPeerManagement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
