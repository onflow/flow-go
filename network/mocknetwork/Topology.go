// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockTopology is an autogenerated mock type for the Topology type
type MockTopology struct {
	mock.Mock
}

type MockTopology_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopology) EXPECT() *MockTopology_Expecter {
	return &MockTopology_Expecter{mock: &_m.Mock}
}

// Fanout provides a mock function with given fields: ids
func (_m *MockTopology) Fanout(ids flow.GenericIdentityList[flow.Identity]) flow.GenericIdentityList[flow.Identity] {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for Fanout")
	}

	var r0 flow.GenericIdentityList[flow.Identity]
	if rf, ok := ret.Get(0).(func(flow.GenericIdentityList[flow.Identity]) flow.GenericIdentityList[flow.Identity]); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.Identity])
		}
	}

	return r0
}

// MockTopology_Fanout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fanout'
type MockTopology_Fanout_Call struct {
	*mock.Call
}

// Fanout is a helper method to define mock.On call
//   - ids flow.GenericIdentityList[flow.Identity]
func (_e *MockTopology_Expecter) Fanout(ids interface{}) *MockTopology_Fanout_Call {
	return &MockTopology_Fanout_Call{Call: _e.mock.On("Fanout", ids)}
}

func (_c *MockTopology_Fanout_Call) Run(run func(ids flow.GenericIdentityList[flow.Identity])) *MockTopology_Fanout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.GenericIdentityList[flow.Identity]))
	})
	return _c
}

func (_c *MockTopology_Fanout_Call) Return(_a0 flow.GenericIdentityList[flow.Identity]) *MockTopology_Fanout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopology_Fanout_Call) RunAndReturn(run func(flow.GenericIdentityList[flow.Identity]) flow.GenericIdentityList[flow.Identity]) *MockTopology_Fanout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopology creates a new instance of MockTopology. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopology(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopology {
	mock := &MockTopology{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
