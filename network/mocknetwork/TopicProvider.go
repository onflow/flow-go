// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockTopicProvider is an autogenerated mock type for the TopicProvider type
type MockTopicProvider struct {
	mock.Mock
}

type MockTopicProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopicProvider) EXPECT() *MockTopicProvider_Expecter {
	return &MockTopicProvider_Expecter{mock: &_m.Mock}
}

// GetTopics provides a mock function with no fields
func (_m *MockTopicProvider) GetTopics() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopics")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockTopicProvider_GetTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopics'
type MockTopicProvider_GetTopics_Call struct {
	*mock.Call
}

// GetTopics is a helper method to define mock.On call
func (_e *MockTopicProvider_Expecter) GetTopics() *MockTopicProvider_GetTopics_Call {
	return &MockTopicProvider_GetTopics_Call{Call: _e.mock.On("GetTopics")}
}

func (_c *MockTopicProvider_GetTopics_Call) Run(run func()) *MockTopicProvider_GetTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTopicProvider_GetTopics_Call) Return(_a0 []string) *MockTopicProvider_GetTopics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopicProvider_GetTopics_Call) RunAndReturn(run func() []string) *MockTopicProvider_GetTopics_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeers provides a mock function with given fields: topic
func (_m *MockTopicProvider) ListPeers(topic string) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for ListPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(string) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// MockTopicProvider_ListPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeers'
type MockTopicProvider_ListPeers_Call struct {
	*mock.Call
}

// ListPeers is a helper method to define mock.On call
//   - topic string
func (_e *MockTopicProvider_Expecter) ListPeers(topic interface{}) *MockTopicProvider_ListPeers_Call {
	return &MockTopicProvider_ListPeers_Call{Call: _e.mock.On("ListPeers", topic)}
}

func (_c *MockTopicProvider_ListPeers_Call) Run(run func(topic string)) *MockTopicProvider_ListPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTopicProvider_ListPeers_Call) Return(_a0 []peer.ID) *MockTopicProvider_ListPeers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopicProvider_ListPeers_Call) RunAndReturn(run func(string) []peer.ID) *MockTopicProvider_ListPeers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopicProvider creates a new instance of MockTopicProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicProvider {
	mock := &MockTopicProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
