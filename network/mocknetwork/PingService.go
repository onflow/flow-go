// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	context "context"

	message "github.com/onflow/flow-go/network/message"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	time "time"
)

// MockPingService is an autogenerated mock type for the PingService type
type MockPingService struct {
	mock.Mock
}

type MockPingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPingService) EXPECT() *MockPingService_Expecter {
	return &MockPingService_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: ctx, peerID
func (_m *MockPingService) Ping(ctx context.Context, peerID peer.ID) (message.PingResponse, time.Duration, error) {
	ret := _m.Called(ctx, peerID)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 message.PingResponse
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) (message.PingResponse, time.Duration, error)); ok {
		return rf(ctx, peerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) message.PingResponse); ok {
		r0 = rf(ctx, peerID)
	} else {
		r0 = ret.Get(0).(message.PingResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID) time.Duration); ok {
		r1 = rf(ctx, peerID)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(context.Context, peer.ID) error); ok {
		r2 = rf(ctx, peerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPingService_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockPingService_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
//   - peerID peer.ID
func (_e *MockPingService_Expecter) Ping(ctx interface{}, peerID interface{}) *MockPingService_Ping_Call {
	return &MockPingService_Ping_Call{Call: _e.mock.On("Ping", ctx, peerID)}
}

func (_c *MockPingService_Ping_Call) Run(run func(ctx context.Context, peerID peer.ID)) *MockPingService_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.ID))
	})
	return _c
}

func (_c *MockPingService_Ping_Call) Return(_a0 message.PingResponse, _a1 time.Duration, _a2 error) *MockPingService_Ping_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPingService_Ping_Call) RunAndReturn(run func(context.Context, peer.ID) (message.PingResponse, time.Duration, error)) *MockPingService_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPingService creates a new instance of MockPingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPingService {
	mock := &MockPingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
