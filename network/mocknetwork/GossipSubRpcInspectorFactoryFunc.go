// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	metrics "github.com/onflow/flow-go/module/metrics"

	mock "github.com/stretchr/testify/mock"

	module "github.com/onflow/flow-go/module"

	network "github.com/onflow/flow-go/network"

	p2p "github.com/onflow/flow-go/network/p2p"

	p2pconfig "github.com/onflow/flow-go/network/p2p/config"

	zerolog "github.com/rs/zerolog"
)

// MockGossipSubRpcInspectorFactoryFunc is an autogenerated mock type for the GossipSubRpcInspectorFactoryFunc type
type MockGossipSubRpcInspectorFactoryFunc struct {
	mock.Mock
}

type MockGossipSubRpcInspectorFactoryFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGossipSubRpcInspectorFactoryFunc) EXPECT() *MockGossipSubRpcInspectorFactoryFunc_Expecter {
	return &MockGossipSubRpcInspectorFactoryFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8
func (_m *MockGossipSubRpcInspectorFactoryFunc) Execute(_a0 zerolog.Logger, _a1 flow.Identifier, _a2 *p2pconfig.RpcInspectorParameters, _a3 module.GossipSubMetrics, _a4 metrics.HeroCacheMetricsFactory, _a5 network.NetworkingType, _a6 module.IdentityProvider, _a7 func() p2p.TopicProvider, _a8 p2p.GossipSubInvCtrlMsgNotifConsumer) (p2p.GossipSubRPCInspector, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 p2p.GossipSubRPCInspector
	var r1 error
	if rf, ok := ret.Get(0).(func(zerolog.Logger, flow.Identifier, *p2pconfig.RpcInspectorParameters, module.GossipSubMetrics, metrics.HeroCacheMetricsFactory, network.NetworkingType, module.IdentityProvider, func() p2p.TopicProvider, p2p.GossipSubInvCtrlMsgNotifConsumer) (p2p.GossipSubRPCInspector, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	}
	if rf, ok := ret.Get(0).(func(zerolog.Logger, flow.Identifier, *p2pconfig.RpcInspectorParameters, module.GossipSubMetrics, metrics.HeroCacheMetricsFactory, network.NetworkingType, module.IdentityProvider, func() p2p.TopicProvider, p2p.GossipSubInvCtrlMsgNotifConsumer) p2p.GossipSubRPCInspector); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.GossipSubRPCInspector)
		}
	}

	if rf, ok := ret.Get(1).(func(zerolog.Logger, flow.Identifier, *p2pconfig.RpcInspectorParameters, module.GossipSubMetrics, metrics.HeroCacheMetricsFactory, network.NetworkingType, module.IdentityProvider, func() p2p.TopicProvider, p2p.GossipSubInvCtrlMsgNotifConsumer) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGossipSubRpcInspectorFactoryFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockGossipSubRpcInspectorFactoryFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 zerolog.Logger
//   - _a1 flow.Identifier
//   - _a2 *p2pconfig.RpcInspectorParameters
//   - _a3 module.GossipSubMetrics
//   - _a4 metrics.HeroCacheMetricsFactory
//   - _a5 network.NetworkingType
//   - _a6 module.IdentityProvider
//   - _a7 func() p2p.TopicProvider
//   - _a8 p2p.GossipSubInvCtrlMsgNotifConsumer
func (_e *MockGossipSubRpcInspectorFactoryFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}, _a7 interface{}, _a8 interface{}) *MockGossipSubRpcInspectorFactoryFunc_Execute_Call {
	return &MockGossipSubRpcInspectorFactoryFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)}
}

func (_c *MockGossipSubRpcInspectorFactoryFunc_Execute_Call) Run(run func(_a0 zerolog.Logger, _a1 flow.Identifier, _a2 *p2pconfig.RpcInspectorParameters, _a3 module.GossipSubMetrics, _a4 metrics.HeroCacheMetricsFactory, _a5 network.NetworkingType, _a6 module.IdentityProvider, _a7 func() p2p.TopicProvider, _a8 p2p.GossipSubInvCtrlMsgNotifConsumer)) *MockGossipSubRpcInspectorFactoryFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(zerolog.Logger), args[1].(flow.Identifier), args[2].(*p2pconfig.RpcInspectorParameters), args[3].(module.GossipSubMetrics), args[4].(metrics.HeroCacheMetricsFactory), args[5].(network.NetworkingType), args[6].(module.IdentityProvider), args[7].(func() p2p.TopicProvider), args[8].(p2p.GossipSubInvCtrlMsgNotifConsumer))
	})
	return _c
}

func (_c *MockGossipSubRpcInspectorFactoryFunc_Execute_Call) Return(_a0 p2p.GossipSubRPCInspector, _a1 error) *MockGossipSubRpcInspectorFactoryFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGossipSubRpcInspectorFactoryFunc_Execute_Call) RunAndReturn(run func(zerolog.Logger, flow.Identifier, *p2pconfig.RpcInspectorParameters, module.GossipSubMetrics, metrics.HeroCacheMetricsFactory, network.NetworkingType, module.IdentityProvider, func() p2p.TopicProvider, p2p.GossipSubInvCtrlMsgNotifConsumer) (p2p.GossipSubRPCInspector, error)) *MockGossipSubRpcInspectorFactoryFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGossipSubRpcInspectorFactoryFunc creates a new instance of MockGossipSubRpcInspectorFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGossipSubRpcInspectorFactoryFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGossipSubRpcInspectorFactoryFunc {
	mock := &MockGossipSubRpcInspectorFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
