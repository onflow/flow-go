// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// MockConduitAdapter is an autogenerated mock type for the ConduitAdapter type
type MockConduitAdapter struct {
	mock.Mock
}

type MockConduitAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConduitAdapter) EXPECT() *MockConduitAdapter_Expecter {
	return &MockConduitAdapter_Expecter{mock: &_m.Mock}
}

// MulticastOnChannel provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockConduitAdapter) MulticastOnChannel(_a0 channels.Channel, _a1 interface{}, _a2 uint, _a3 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MulticastOnChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, interface{}, uint, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduitAdapter_MulticastOnChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MulticastOnChannel'
type MockConduitAdapter_MulticastOnChannel_Call struct {
	*mock.Call
}

// MulticastOnChannel is a helper method to define mock.On call
//   - _a0 channels.Channel
//   - _a1 interface{}
//   - _a2 uint
//   - _a3 ...flow.Identifier
func (_e *MockConduitAdapter_Expecter) MulticastOnChannel(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockConduitAdapter_MulticastOnChannel_Call {
	return &MockConduitAdapter_MulticastOnChannel_Call{Call: _e.mock.On("MulticastOnChannel",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockConduitAdapter_MulticastOnChannel_Call) Run(run func(_a0 channels.Channel, _a1 interface{}, _a2 uint, _a3 ...flow.Identifier)) *MockConduitAdapter_MulticastOnChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]flow.Identifier, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(flow.Identifier)
			}
		}
		run(args[0].(channels.Channel), args[1].(interface{}), args[2].(uint), variadicArgs...)
	})
	return _c
}

func (_c *MockConduitAdapter_MulticastOnChannel_Call) Return(_a0 error) *MockConduitAdapter_MulticastOnChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduitAdapter_MulticastOnChannel_Call) RunAndReturn(run func(channels.Channel, interface{}, uint, ...flow.Identifier) error) *MockConduitAdapter_MulticastOnChannel_Call {
	_c.Call.Return(run)
	return _c
}

// PublishOnChannel provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockConduitAdapter) PublishOnChannel(_a0 channels.Channel, _a1 interface{}, _a2 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishOnChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, interface{}, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduitAdapter_PublishOnChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishOnChannel'
type MockConduitAdapter_PublishOnChannel_Call struct {
	*mock.Call
}

// PublishOnChannel is a helper method to define mock.On call
//   - _a0 channels.Channel
//   - _a1 interface{}
//   - _a2 ...flow.Identifier
func (_e *MockConduitAdapter_Expecter) PublishOnChannel(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockConduitAdapter_PublishOnChannel_Call {
	return &MockConduitAdapter_PublishOnChannel_Call{Call: _e.mock.On("PublishOnChannel",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockConduitAdapter_PublishOnChannel_Call) Run(run func(_a0 channels.Channel, _a1 interface{}, _a2 ...flow.Identifier)) *MockConduitAdapter_PublishOnChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]flow.Identifier, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(flow.Identifier)
			}
		}
		run(args[0].(channels.Channel), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockConduitAdapter_PublishOnChannel_Call) Return(_a0 error) *MockConduitAdapter_PublishOnChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduitAdapter_PublishOnChannel_Call) RunAndReturn(run func(channels.Channel, interface{}, ...flow.Identifier) error) *MockConduitAdapter_PublishOnChannel_Call {
	_c.Call.Return(run)
	return _c
}

// ReportMisbehaviorOnChannel provides a mock function with given fields: channel, report
func (_m *MockConduitAdapter) ReportMisbehaviorOnChannel(channel channels.Channel, report network.MisbehaviorReport) {
	_m.Called(channel, report)
}

// MockConduitAdapter_ReportMisbehaviorOnChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportMisbehaviorOnChannel'
type MockConduitAdapter_ReportMisbehaviorOnChannel_Call struct {
	*mock.Call
}

// ReportMisbehaviorOnChannel is a helper method to define mock.On call
//   - channel channels.Channel
//   - report network.MisbehaviorReport
func (_e *MockConduitAdapter_Expecter) ReportMisbehaviorOnChannel(channel interface{}, report interface{}) *MockConduitAdapter_ReportMisbehaviorOnChannel_Call {
	return &MockConduitAdapter_ReportMisbehaviorOnChannel_Call{Call: _e.mock.On("ReportMisbehaviorOnChannel", channel, report)}
}

func (_c *MockConduitAdapter_ReportMisbehaviorOnChannel_Call) Run(run func(channel channels.Channel, report network.MisbehaviorReport)) *MockConduitAdapter_ReportMisbehaviorOnChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel), args[1].(network.MisbehaviorReport))
	})
	return _c
}

func (_c *MockConduitAdapter_ReportMisbehaviorOnChannel_Call) Return() *MockConduitAdapter_ReportMisbehaviorOnChannel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConduitAdapter_ReportMisbehaviorOnChannel_Call) RunAndReturn(run func(channels.Channel, network.MisbehaviorReport)) *MockConduitAdapter_ReportMisbehaviorOnChannel_Call {
	_c.Run(run)
	return _c
}

// UnRegisterChannel provides a mock function with given fields: channel
func (_m *MockConduitAdapter) UnRegisterChannel(channel channels.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for UnRegisterChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduitAdapter_UnRegisterChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnRegisterChannel'
type MockConduitAdapter_UnRegisterChannel_Call struct {
	*mock.Call
}

// UnRegisterChannel is a helper method to define mock.On call
//   - channel channels.Channel
func (_e *MockConduitAdapter_Expecter) UnRegisterChannel(channel interface{}) *MockConduitAdapter_UnRegisterChannel_Call {
	return &MockConduitAdapter_UnRegisterChannel_Call{Call: _e.mock.On("UnRegisterChannel", channel)}
}

func (_c *MockConduitAdapter_UnRegisterChannel_Call) Run(run func(channel channels.Channel)) *MockConduitAdapter_UnRegisterChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel))
	})
	return _c
}

func (_c *MockConduitAdapter_UnRegisterChannel_Call) Return(_a0 error) *MockConduitAdapter_UnRegisterChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduitAdapter_UnRegisterChannel_Call) RunAndReturn(run func(channels.Channel) error) *MockConduitAdapter_UnRegisterChannel_Call {
	_c.Call.Return(run)
	return _c
}

// UnicastOnChannel provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockConduitAdapter) UnicastOnChannel(_a0 channels.Channel, _a1 interface{}, _a2 flow.Identifier) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UnicastOnChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, interface{}, flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConduitAdapter_UnicastOnChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnicastOnChannel'
type MockConduitAdapter_UnicastOnChannel_Call struct {
	*mock.Call
}

// UnicastOnChannel is a helper method to define mock.On call
//   - _a0 channels.Channel
//   - _a1 interface{}
//   - _a2 flow.Identifier
func (_e *MockConduitAdapter_Expecter) UnicastOnChannel(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockConduitAdapter_UnicastOnChannel_Call {
	return &MockConduitAdapter_UnicastOnChannel_Call{Call: _e.mock.On("UnicastOnChannel", _a0, _a1, _a2)}
}

func (_c *MockConduitAdapter_UnicastOnChannel_Call) Run(run func(_a0 channels.Channel, _a1 interface{}, _a2 flow.Identifier)) *MockConduitAdapter_UnicastOnChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel), args[1].(interface{}), args[2].(flow.Identifier))
	})
	return _c
}

func (_c *MockConduitAdapter_UnicastOnChannel_Call) Return(_a0 error) *MockConduitAdapter_UnicastOnChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConduitAdapter_UnicastOnChannel_Call) RunAndReturn(run func(channels.Channel, interface{}, flow.Identifier) error) *MockConduitAdapter_UnicastOnChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConduitAdapter creates a new instance of MockConduitAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConduitAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConduitAdapter {
	mock := &MockConduitAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
