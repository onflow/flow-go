// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocknetwork

import mock "github.com/stretchr/testify/mock"

// MockRpcControlTracking is an autogenerated mock type for the RpcControlTracking type
type MockRpcControlTracking struct {
	mock.Mock
}

type MockRpcControlTracking_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRpcControlTracking) EXPECT() *MockRpcControlTracking_Expecter {
	return &MockRpcControlTracking_Expecter{mock: &_m.Mock}
}

// LastHighestIHaveRPCSize provides a mock function with no fields
func (_m *MockRpcControlTracking) LastHighestIHaveRPCSize() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastHighestIHaveRPCSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockRpcControlTracking_LastHighestIHaveRPCSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastHighestIHaveRPCSize'
type MockRpcControlTracking_LastHighestIHaveRPCSize_Call struct {
	*mock.Call
}

// LastHighestIHaveRPCSize is a helper method to define mock.On call
func (_e *MockRpcControlTracking_Expecter) LastHighestIHaveRPCSize() *MockRpcControlTracking_LastHighestIHaveRPCSize_Call {
	return &MockRpcControlTracking_LastHighestIHaveRPCSize_Call{Call: _e.mock.On("LastHighestIHaveRPCSize")}
}

func (_c *MockRpcControlTracking_LastHighestIHaveRPCSize_Call) Run(run func()) *MockRpcControlTracking_LastHighestIHaveRPCSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRpcControlTracking_LastHighestIHaveRPCSize_Call) Return(_a0 int64) *MockRpcControlTracking_LastHighestIHaveRPCSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRpcControlTracking_LastHighestIHaveRPCSize_Call) RunAndReturn(run func() int64) *MockRpcControlTracking_LastHighestIHaveRPCSize_Call {
	_c.Call.Return(run)
	return _c
}

// WasIHaveRPCSent provides a mock function with given fields: messageID
func (_m *MockRpcControlTracking) WasIHaveRPCSent(messageID string) bool {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for WasIHaveRPCSent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRpcControlTracking_WasIHaveRPCSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WasIHaveRPCSent'
type MockRpcControlTracking_WasIHaveRPCSent_Call struct {
	*mock.Call
}

// WasIHaveRPCSent is a helper method to define mock.On call
//   - messageID string
func (_e *MockRpcControlTracking_Expecter) WasIHaveRPCSent(messageID interface{}) *MockRpcControlTracking_WasIHaveRPCSent_Call {
	return &MockRpcControlTracking_WasIHaveRPCSent_Call{Call: _e.mock.On("WasIHaveRPCSent", messageID)}
}

func (_c *MockRpcControlTracking_WasIHaveRPCSent_Call) Run(run func(messageID string)) *MockRpcControlTracking_WasIHaveRPCSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRpcControlTracking_WasIHaveRPCSent_Call) Return(_a0 bool) *MockRpcControlTracking_WasIHaveRPCSent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRpcControlTracking_WasIHaveRPCSent_Call) RunAndReturn(run func(string) bool) *MockRpcControlTracking_WasIHaveRPCSent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRpcControlTracking creates a new instance of MockRpcControlTracking. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRpcControlTracking(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRpcControlTracking {
	mock := &MockRpcControlTracking{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
