// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	message "github.com/onflow/flow-go/network/gossip/libp2p/message"

	mock "github.com/stretchr/testify/mock"
)

// Overlay is an autogenerated mock type for the Overlay type
type Overlay struct {
	mock.Mock
}

// Identity provides a mock function with given fields:
func (_m *Overlay) Identity() (map[flow.Identifier]flow.Identity, error) {
	ret := _m.Called()

	var r0 map[flow.Identifier]flow.Identity
	if rf, ok := ret.Get(0).(func() map[flow.Identifier]flow.Identity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[flow.Identifier]flow.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Receive provides a mock function with given fields: nodeID, msg
func (_m *Overlay) Receive(nodeID flow.Identifier, msg *message.Message) error {
	ret := _m.Called(nodeID, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, *message.Message) error); ok {
		r0 = rf(nodeID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Topology provides a mock function with given fields:
func (_m *Overlay) Topology() (flow.IdentityList, error) {
	ret := _m.Called()

	var r0 flow.IdentityList
	if rf, ok := ret.Get(0).(func() flow.IdentityList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentityList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
