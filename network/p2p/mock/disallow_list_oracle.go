// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	network "github.com/onflow/flow-go/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// DisallowListOracle is an autogenerated mock type for the DisallowListOracle type
type DisallowListOracle struct {
	mock.Mock
}

// IsDisallowListed provides a mock function with given fields: peerId
func (_m *DisallowListOracle) IsDisallowListed(peerId peer.ID) ([]network.DisallowListedCause, bool) {
	ret := _m.Called(peerId)

	if len(ret) == 0 {
		panic("no return value specified for IsDisallowListed")
	}

	var r0 []network.DisallowListedCause
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) ([]network.DisallowListedCause, bool)); ok {
		return rf(peerId)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) []network.DisallowListedCause); ok {
		r0 = rf(peerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.DisallowListedCause)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewDisallowListOracle creates a new instance of DisallowListOracle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisallowListOracle(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisallowListOracle {
	mock := &DisallowListOracle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
