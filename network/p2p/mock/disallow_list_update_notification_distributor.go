// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockp2p

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"
)

// DisallowListUpdateNotificationDistributor is an autogenerated mock type for the DisallowListUpdateNotificationDistributor type
type DisallowListUpdateNotificationDistributor struct {
	mock.Mock
}

// AddConsumer provides a mock function with given fields: _a0
func (_m *DisallowListUpdateNotificationDistributor) AddConsumer(_a0 p2p.DisallowListUpdateNotificationConsumer) {
	_m.Called(_a0)
}

// DistributeBlockListNotification provides a mock function with given fields: list
func (_m *DisallowListUpdateNotificationDistributor) DistributeBlockListNotification(list flow.IdentifierList) error {
	ret := _m.Called(list)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.IdentifierList) error); ok {
		r0 = rf(list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDisallowListUpdateNotificationDistributor interface {
	mock.TestingT
	Cleanup(func())
}

// NewDisallowListUpdateNotificationDistributor creates a new instance of DisallowListUpdateNotificationDistributor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDisallowListUpdateNotificationDistributor(t mockConstructorTestingTNewDisallowListUpdateNotificationDistributor) *DisallowListUpdateNotificationDistributor {
	mock := &DisallowListUpdateNotificationDistributor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
