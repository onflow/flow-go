// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	network "github.com/onflow/flow-go/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// DisallowListNotificationConsumer is an autogenerated mock type for the DisallowListNotificationConsumer type
type DisallowListNotificationConsumer struct {
	mock.Mock
}

// OnAllowListNotification provides a mock function with given fields: id, cause
func (_m *DisallowListNotificationConsumer) OnAllowListNotification(id peer.ID, cause network.DisallowListedCause) {
	_m.Called(id, cause)
}

// OnDisallowListNotification provides a mock function with given fields: id, cause
func (_m *DisallowListNotificationConsumer) OnDisallowListNotification(id peer.ID, cause network.DisallowListedCause) {
	_m.Called(id, cause)
}

// NewDisallowListNotificationConsumer creates a new instance of DisallowListNotificationConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisallowListNotificationConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisallowListNotificationConsumer {
	mock := &DisallowListNotificationConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
