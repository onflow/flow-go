// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockp2p

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"
)

// ProtocolPeerCache is an autogenerated mock type for the ProtocolPeerCache type
type ProtocolPeerCache struct {
	mock.Mock
}

// AddProtocols provides a mock function with given fields: peerID, protocols
func (_m *ProtocolPeerCache) AddProtocols(peerID peer.ID, protocols []protocol.ID) {
	_m.Called(peerID, protocols)
}

// GetPeers provides a mock function with given fields: pid
func (_m *ProtocolPeerCache) GetPeers(pid protocol.ID) map[peer.ID]struct{} {
	ret := _m.Called(pid)

	var r0 map[peer.ID]struct{}
	if rf, ok := ret.Get(0).(func(protocol.ID) map[peer.ID]struct{}); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[peer.ID]struct{})
		}
	}

	return r0
}

// RemovePeer provides a mock function with given fields: peerID
func (_m *ProtocolPeerCache) RemovePeer(peerID peer.ID) {
	_m.Called(peerID)
}

// RemoveProtocols provides a mock function with given fields: peerID, protocols
func (_m *ProtocolPeerCache) RemoveProtocols(peerID peer.ID, protocols []protocol.ID) {
	_m.Called(peerID, protocols)
}

type mockConstructorTestingTNewProtocolPeerCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolPeerCache creates a new instance of ProtocolPeerCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolPeerCache(t mockConstructorTestingTNewProtocolPeerCache) *ProtocolPeerCache {
	mock := &ProtocolPeerCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
