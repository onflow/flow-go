// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockp2p

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	module "github.com/onflow/flow-go/module"

	p2p "github.com/onflow/flow-go/network/p2p"

	stream "github.com/onflow/flow-go/network/p2p/unicast/stream"

	time "time"

	zerolog "github.com/rs/zerolog"
)

// UnicastManagerFactoryFunc is an autogenerated mock type for the UnicastManagerFactoryFunc type
type UnicastManagerFactoryFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: logger, streamFactory, sporkId, createStreamRetryDelay, connStatus, metrics
func (_m *UnicastManagerFactoryFunc) Execute(logger zerolog.Logger, streamFactory stream.Factory, sporkId flow.Identifier, createStreamRetryDelay time.Duration, connStatus p2p.PeerConnections, metrics module.UnicastManagerMetrics) p2p.UnicastManager {
	ret := _m.Called(logger, streamFactory, sporkId, createStreamRetryDelay, connStatus, metrics)

	var r0 p2p.UnicastManager
	if rf, ok := ret.Get(0).(func(zerolog.Logger, stream.Factory, flow.Identifier, time.Duration, p2p.PeerConnections, module.UnicastManagerMetrics) p2p.UnicastManager); ok {
		r0 = rf(logger, streamFactory, sporkId, createStreamRetryDelay, connStatus, metrics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.UnicastManager)
		}
	}

	return r0
}

type mockConstructorTestingTNewUnicastManagerFactoryFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewUnicastManagerFactoryFunc creates a new instance of UnicastManagerFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUnicastManagerFactoryFunc(t mockConstructorTestingTNewUnicastManagerFactoryFunc) *UnicastManagerFactoryFunc {
	mock := &UnicastManagerFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
