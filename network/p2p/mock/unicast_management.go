// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	context "context"

	network "github.com/libp2p/go-libp2p/core/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocols "github.com/onflow/flow-go/network/p2p/unicast/protocols"
)

// UnicastManagement is an autogenerated mock type for the UnicastManagement type
type UnicastManagement struct {
	mock.Mock
}

// OpenAndWriteOnStream provides a mock function with given fields: ctx, peerID, protectionTag, writingLogic
func (_m *UnicastManagement) OpenAndWriteOnStream(ctx context.Context, peerID peer.ID, protectionTag string, writingLogic func(network.Stream) error) error {
	ret := _m.Called(ctx, peerID, protectionTag, writingLogic)

	if len(ret) == 0 {
		panic("no return value specified for OpenAndWriteOnStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, string, func(network.Stream) error) error); ok {
		r0 = rf(ctx, peerID, protectionTag, writingLogic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithDefaultUnicastProtocol provides a mock function with given fields: defaultHandler, preferred
func (_m *UnicastManagement) WithDefaultUnicastProtocol(defaultHandler network.StreamHandler, preferred []protocols.ProtocolName) error {
	ret := _m.Called(defaultHandler, preferred)

	if len(ret) == 0 {
		panic("no return value specified for WithDefaultUnicastProtocol")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(network.StreamHandler, []protocols.ProtocolName) error); ok {
		r0 = rf(defaultHandler, preferred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUnicastManagement creates a new instance of UnicastManagement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnicastManagement(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnicastManagement {
	mock := &UnicastManagement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
