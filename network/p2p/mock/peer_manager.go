// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	context "context"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// PeerManager is an autogenerated mock type for the PeerManager type
type PeerManager struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *PeerManager) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// ForceUpdatePeers provides a mock function with given fields: _a0
func (_m *PeerManager) ForceUpdatePeers(_a0 context.Context) {
	_m.Called(_a0)
}

// OnRateLimitedPeer provides a mock function with given fields: pid, role, msgType, topic, reason
func (_m *PeerManager) OnRateLimitedPeer(pid peer.ID, role string, msgType string, topic string, reason string) {
	_m.Called(pid, role, msgType, topic, reason)
}

// Ready provides a mock function with given fields:
func (_m *PeerManager) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// RequestPeerUpdate provides a mock function with given fields:
func (_m *PeerManager) RequestPeerUpdate() {
	_m.Called()
}

// SetPeersProvider provides a mock function with given fields: _a0
func (_m *PeerManager) SetPeersProvider(_a0 p2p.PeersProvider) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields: _a0
func (_m *PeerManager) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// NewPeerManager creates a new instance of PeerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeerManager {
	mock := &PeerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
