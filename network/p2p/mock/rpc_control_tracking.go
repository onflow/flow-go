// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import mock "github.com/stretchr/testify/mock"

// RpcControlTracking is an autogenerated mock type for the RpcControlTracking type
type RpcControlTracking struct {
	mock.Mock
}

// LastHighestIHaveRPCSize provides a mock function with given fields:
func (_m *RpcControlTracking) LastHighestIHaveRPCSize() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastHighestIHaveRPCSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// WasIHaveRPCSent provides a mock function with given fields: messageID
func (_m *RpcControlTracking) WasIHaveRPCSent(messageID string) bool {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for WasIHaveRPCSent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewRpcControlTracking creates a new instance of RpcControlTracking. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRpcControlTracking(t interface {
	mock.TestingT
	Cleanup(func())
}) *RpcControlTracking {
	mock := &RpcControlTracking{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
