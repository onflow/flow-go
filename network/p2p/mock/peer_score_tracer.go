// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"

	time "time"
)

// PeerScoreTracer is an autogenerated mock type for the PeerScoreTracer type
type PeerScoreTracer struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *PeerScoreTracer) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// GetAppScore provides a mock function with given fields: peerID
func (_m *PeerScoreTracer) GetAppScore(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppScore")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetBehaviourPenalty provides a mock function with given fields: peerID
func (_m *PeerScoreTracer) GetBehaviourPenalty(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBehaviourPenalty")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetIPColocationFactor provides a mock function with given fields: peerID
func (_m *PeerScoreTracer) GetIPColocationFactor(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetIPColocationFactor")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetScore provides a mock function with given fields: peerID
func (_m *PeerScoreTracer) GetScore(peerID peer.ID) (float64, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetScore")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetTopicScores provides a mock function with given fields: peerID
func (_m *PeerScoreTracer) GetTopicScores(peerID peer.ID) (map[string]p2p.TopicScoreSnapshot, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for GetTopicScores")
	}

	var r0 map[string]p2p.TopicScoreSnapshot
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (map[string]p2p.TopicScoreSnapshot, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) map[string]p2p.TopicScoreSnapshot); ok {
		r0 = rf(peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]p2p.TopicScoreSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Ready provides a mock function with given fields:
func (_m *PeerScoreTracer) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *PeerScoreTracer) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// UpdateInterval provides a mock function with given fields:
func (_m *PeerScoreTracer) UpdateInterval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// UpdatePeerScoreSnapshots provides a mock function with given fields: _a0
func (_m *PeerScoreTracer) UpdatePeerScoreSnapshots(_a0 map[peer.ID]*p2p.PeerScoreSnapshot) {
	_m.Called(_a0)
}

// NewPeerScoreTracer creates a new instance of PeerScoreTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeerScoreTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeerScoreTracer {
	mock := &PeerScoreTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
