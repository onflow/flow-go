// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/libp2p/go-libp2p-pubsub"
)

// Subscription is an autogenerated mock type for the Subscription type
type Subscription struct {
	mock.Mock
}

// Cancel provides a mock function with given fields:
func (_m *Subscription) Cancel() {
	_m.Called()
}

// Next provides a mock function with given fields: _a0
func (_m *Subscription) Next(_a0 context.Context) (*pubsub.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *pubsub.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*pubsub.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *pubsub.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Topic provides a mock function with given fields:
func (_m *Subscription) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSubscription creates a new instance of Subscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscription {
	mock := &Subscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
