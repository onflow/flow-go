// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	context "context"

	network "github.com/libp2p/go-libp2p/core/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocols "github.com/onflow/flow-go/network/p2p/unicast/protocols"
)

// UnicastManager is an autogenerated mock type for the UnicastManager type
type UnicastManager struct {
	mock.Mock
}

// CreateStream provides a mock function with given fields: ctx, peerID
func (_m *UnicastManager) CreateStream(ctx context.Context, peerID peer.ID) (network.Stream, error) {
	ret := _m.Called(ctx, peerID)

	if len(ret) == 0 {
		panic("no return value specified for CreateStream")
	}

	var r0 network.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) (network.Stream, error)); ok {
		return rf(ctx, peerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) network.Stream); ok {
		r0 = rf(ctx, peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID) error); ok {
		r1 = rf(ctx, peerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: unicast
func (_m *UnicastManager) Register(unicast protocols.ProtocolName) error {
	ret := _m.Called(unicast)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(protocols.ProtocolName) error); ok {
		r0 = rf(unicast)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefaultHandler provides a mock function with given fields: defaultHandler
func (_m *UnicastManager) SetDefaultHandler(defaultHandler network.StreamHandler) {
	_m.Called(defaultHandler)
}

// NewUnicastManager creates a new instance of UnicastManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnicastManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnicastManager {
	mock := &UnicastManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
