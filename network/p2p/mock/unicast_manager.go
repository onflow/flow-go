// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockp2p

import (
	context "context"

	multiaddr "github.com/multiformats/go-multiaddr"
	mock "github.com/stretchr/testify/mock"

	network "github.com/libp2p/go-libp2p/core/network"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocols "github.com/onflow/flow-go/network/p2p/unicast/protocols"
)

// UnicastManager is an autogenerated mock type for the UnicastManager type
type UnicastManager struct {
	mock.Mock
}

// CreateStream provides a mock function with given fields: ctx, peerID, maxAttempts
func (_m *UnicastManager) CreateStream(ctx context.Context, peerID peer.ID, maxAttempts int) (network.Stream, []multiaddr.Multiaddr, error) {
	ret := _m.Called(ctx, peerID, maxAttempts)

	var r0 network.Stream
	var r1 []multiaddr.Multiaddr
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, int) (network.Stream, []multiaddr.Multiaddr, error)); ok {
		return rf(ctx, peerID, maxAttempts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, int) network.Stream); ok {
		r0 = rf(ctx, peerID, maxAttempts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID, int) []multiaddr.Multiaddr); ok {
		r1 = rf(ctx, peerID, maxAttempts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]multiaddr.Multiaddr)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, peer.ID, int) error); ok {
		r2 = rf(ctx, peerID, maxAttempts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: unicast
func (_m *UnicastManager) Register(unicast protocols.ProtocolName) error {
	ret := _m.Called(unicast)

	var r0 error
	if rf, ok := ret.Get(0).(func(protocols.ProtocolName) error); ok {
		r0 = rf(unicast)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithDefaultHandler provides a mock function with given fields: defaultHandler
func (_m *UnicastManager) WithDefaultHandler(defaultHandler network.StreamHandler) {
	_m.Called(defaultHandler)
}

type mockConstructorTestingTNewUnicastManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewUnicastManager creates a new instance of UnicastManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUnicastManager(t mockConstructorTestingTNewUnicastManager) *UnicastManager {
	mock := &UnicastManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
