// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	time "time"
)

// GossipSubApplicationSpecificScoreCache is an autogenerated mock type for the GossipSubApplicationSpecificScoreCache type
type GossipSubApplicationSpecificScoreCache struct {
	mock.Mock
}

// AdjustWithInit provides a mock function with given fields: peerID, score, _a2
func (_m *GossipSubApplicationSpecificScoreCache) AdjustWithInit(peerID peer.ID, score float64, _a2 time.Time) error {
	ret := _m.Called(peerID, score, _a2)

	if len(ret) == 0 {
		panic("no return value specified for AdjustWithInit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID, float64, time.Time) error); ok {
		r0 = rf(peerID, score, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: peerID
func (_m *GossipSubApplicationSpecificScoreCache) Get(peerID peer.ID) (float64, time.Time, bool) {
	ret := _m.Called(peerID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 float64
	var r1 time.Time
	var r2 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, time.Time, bool)); ok {
		return rf(peerID)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) time.Time); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(peer.ID) bool); ok {
		r2 = rf(peerID)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// NewGossipSubApplicationSpecificScoreCache creates a new instance of GossipSubApplicationSpecificScoreCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGossipSubApplicationSpecificScoreCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *GossipSubApplicationSpecificScoreCache {
	mock := &GossipSubApplicationSpecificScoreCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
