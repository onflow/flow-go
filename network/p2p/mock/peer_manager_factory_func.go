// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	host "github.com/libp2p/go-libp2p/core/host"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	zerolog "github.com/rs/zerolog"
)

// PeerManagerFactoryFunc is an autogenerated mock type for the PeerManagerFactoryFunc type
type PeerManagerFactoryFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, peersProvider, logger
func (_m *PeerManagerFactoryFunc) Execute(_a0 host.Host, peersProvider p2p.PeersProvider, logger zerolog.Logger) (p2p.PeerManager, error) {
	ret := _m.Called(_a0, peersProvider, logger)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 p2p.PeerManager
	var r1 error
	if rf, ok := ret.Get(0).(func(host.Host, p2p.PeersProvider, zerolog.Logger) (p2p.PeerManager, error)); ok {
		return rf(_a0, peersProvider, logger)
	}
	if rf, ok := ret.Get(0).(func(host.Host, p2p.PeersProvider, zerolog.Logger) p2p.PeerManager); ok {
		r0 = rf(_a0, peersProvider, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.PeerManager)
		}
	}

	if rf, ok := ret.Get(1).(func(host.Host, p2p.PeersProvider, zerolog.Logger) error); ok {
		r1 = rf(_a0, peersProvider, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPeerManagerFactoryFunc creates a new instance of PeerManagerFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeerManagerFactoryFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeerManagerFactoryFunc {
	mock := &PeerManagerFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
