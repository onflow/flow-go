// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockp2p

import (
	context "context"

	network "github.com/libp2p/go-libp2p/core/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	protocol "github.com/libp2p/go-libp2p/core/protocol"
)

// StreamFactory is an autogenerated mock type for the StreamFactory type
type StreamFactory struct {
	mock.Mock
}

// NewStream provides a mock function with given fields: _a0, _a1, _a2
func (_m *StreamFactory) NewStream(_a0 context.Context, _a1 peer.ID, _a2 protocol.ID) (network.Stream, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 network.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, protocol.ID) (network.Stream, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID, protocol.ID) network.Stream); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.ID, protocol.ID) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStreamHandler provides a mock function with given fields: _a0, _a1
func (_m *StreamFactory) SetStreamHandler(_a0 protocol.ID, _a1 network.StreamHandler) {
	_m.Called(_a0, _a1)
}

type mockConstructorTestingTNewStreamFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewStreamFactory creates a new instance of StreamFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStreamFactory(t mockConstructorTestingTNewStreamFactory) *StreamFactory {
	mock := &StreamFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
