// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockp2p

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// GossipSubDuplicateMessageTrackerCache is an autogenerated mock type for the GossipSubDuplicateMessageTrackerCache type
type GossipSubDuplicateMessageTrackerCache struct {
	mock.Mock
}

// Get provides a mock function with given fields: peerId
func (_m *GossipSubDuplicateMessageTrackerCache) Get(peerId peer.ID) (float64, bool, error) {
	ret := _m.Called(peerId)

	var r0 float64
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, bool, error)); ok {
		return rf(peerId)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(peerId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(peer.ID) error); ok {
		r2 = rf(peerId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Inc provides a mock function with given fields: peerId
func (_m *GossipSubDuplicateMessageTrackerCache) Inc(peerId peer.ID) (float64, error) {
	ret := _m.Called(peerId)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, error)); ok {
		return rf(peerId)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(peerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGossipSubDuplicateMessageTrackerCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewGossipSubDuplicateMessageTrackerCache creates a new instance of GossipSubDuplicateMessageTrackerCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGossipSubDuplicateMessageTrackerCache(t mockConstructorTestingTNewGossipSubDuplicateMessageTrackerCache) *GossipSubDuplicateMessageTrackerCache {
	mock := &GossipSubDuplicateMessageTrackerCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
