// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockp2p

import (
	kbucket "github.com/libp2p/go-libp2p-kbucket"
	mock "github.com/stretchr/testify/mock"

	routing "github.com/libp2p/go-libp2p/core/routing"
)

// Routable is an autogenerated mock type for the Routable type
type Routable struct {
	mock.Mock
}

// Routing provides a mock function with given fields:
func (_m *Routable) Routing() routing.Routing {
	ret := _m.Called()

	var r0 routing.Routing
	if rf, ok := ret.Get(0).(func() routing.Routing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(routing.Routing)
		}
	}

	return r0
}

// RoutingTable provides a mock function with given fields:
func (_m *Routable) RoutingTable() *kbucket.RoutingTable {
	ret := _m.Called()

	var r0 *kbucket.RoutingTable
	if rf, ok := ret.Get(0).(func() *kbucket.RoutingTable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kbucket.RoutingTable)
		}
	}

	return r0
}

// SetRouting provides a mock function with given fields: r
func (_m *Routable) SetRouting(r routing.Routing) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(routing.Routing) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRoutable interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoutable creates a new instance of Routable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoutable(t mockConstructorTestingTNewRoutable) *Routable {
	mock := &Routable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
