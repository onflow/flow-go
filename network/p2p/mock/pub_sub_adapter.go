// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockp2p

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	p2p "github.com/onflow/flow-go/network/p2p"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// PubSubAdapter is an autogenerated mock type for the PubSubAdapter type
type PubSubAdapter struct {
	mock.Mock
}

// ActiveClustersChanged provides a mock function with given fields: _a0
func (_m *PubSubAdapter) ActiveClustersChanged(_a0 flow.ChainIDList) {
	_m.Called(_a0)
}

// Done provides a mock function with given fields:
func (_m *PubSubAdapter) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// GetLocalMeshPeers provides a mock function with given fields: topic
func (_m *PubSubAdapter) GetLocalMeshPeers(topic channels.Topic) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalMeshPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(channels.Topic) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// GetTopics provides a mock function with given fields:
func (_m *PubSubAdapter) GetTopics() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopics")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Join provides a mock function with given fields: topic
func (_m *PubSubAdapter) Join(topic string) (p2p.Topic, error) {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 p2p.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (p2p.Topic, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(string) p2p.Topic); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPeers provides a mock function with given fields: topic
func (_m *PubSubAdapter) ListPeers(topic string) []peer.ID {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for ListPeers")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func(string) []peer.ID); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// PeerScoreExposer provides a mock function with given fields:
func (_m *PubSubAdapter) PeerScoreExposer() p2p.PeerScoreExposer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PeerScoreExposer")
	}

	var r0 p2p.PeerScoreExposer
	if rf, ok := ret.Get(0).(func() p2p.PeerScoreExposer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.PeerScoreExposer)
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *PubSubAdapter) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// RegisterTopicValidator provides a mock function with given fields: topic, topicValidator
func (_m *PubSubAdapter) RegisterTopicValidator(topic string, topicValidator p2p.TopicValidatorFunc) error {
	ret := _m.Called(topic, topicValidator)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTopicValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, p2p.TopicValidatorFunc) error); ok {
		r0 = rf(topic, topicValidator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *PubSubAdapter) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// UnregisterTopicValidator provides a mock function with given fields: topic
func (_m *PubSubAdapter) UnregisterTopicValidator(topic string) error {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterTopicValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPubSubAdapter creates a new instance of PubSubAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPubSubAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *PubSubAdapter {
	mock := &PubSubAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
