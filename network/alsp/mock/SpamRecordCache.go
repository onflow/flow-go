// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockalsp

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/network/alsp/model"
)

// MockSpamRecordCache is an autogenerated mock type for the SpamRecordCache type
type MockSpamRecordCache struct {
	mock.Mock
}

type MockSpamRecordCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpamRecordCache) EXPECT() *MockSpamRecordCache_Expecter {
	return &MockSpamRecordCache_Expecter{mock: &_m.Mock}
}

// AdjustWithInit provides a mock function with given fields: originId, adjustFunc
func (_m *MockSpamRecordCache) AdjustWithInit(originId flow.Identifier, adjustFunc model.RecordAdjustFunc) (float64, error) {
	ret := _m.Called(originId, adjustFunc)

	if len(ret) == 0 {
		panic("no return value specified for AdjustWithInit")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, model.RecordAdjustFunc) (float64, error)); ok {
		return rf(originId, adjustFunc)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, model.RecordAdjustFunc) float64); ok {
		r0 = rf(originId, adjustFunc)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, model.RecordAdjustFunc) error); ok {
		r1 = rf(originId, adjustFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpamRecordCache_AdjustWithInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdjustWithInit'
type MockSpamRecordCache_AdjustWithInit_Call struct {
	*mock.Call
}

// AdjustWithInit is a helper method to define mock.On call
//   - originId flow.Identifier
//   - adjustFunc model.RecordAdjustFunc
func (_e *MockSpamRecordCache_Expecter) AdjustWithInit(originId interface{}, adjustFunc interface{}) *MockSpamRecordCache_AdjustWithInit_Call {
	return &MockSpamRecordCache_AdjustWithInit_Call{Call: _e.mock.On("AdjustWithInit", originId, adjustFunc)}
}

func (_c *MockSpamRecordCache_AdjustWithInit_Call) Run(run func(originId flow.Identifier, adjustFunc model.RecordAdjustFunc)) *MockSpamRecordCache_AdjustWithInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(model.RecordAdjustFunc))
	})
	return _c
}

func (_c *MockSpamRecordCache_AdjustWithInit_Call) Return(_a0 float64, _a1 error) *MockSpamRecordCache_AdjustWithInit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpamRecordCache_AdjustWithInit_Call) RunAndReturn(run func(flow.Identifier, model.RecordAdjustFunc) (float64, error)) *MockSpamRecordCache_AdjustWithInit_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: originId
func (_m *MockSpamRecordCache) Get(originId flow.Identifier) (*model.ProtocolSpamRecord, bool) {
	ret := _m.Called(originId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.ProtocolSpamRecord
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*model.ProtocolSpamRecord, bool)); ok {
		return rf(originId)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *model.ProtocolSpamRecord); ok {
		r0 = rf(originId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProtocolSpamRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(originId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockSpamRecordCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSpamRecordCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - originId flow.Identifier
func (_e *MockSpamRecordCache_Expecter) Get(originId interface{}) *MockSpamRecordCache_Get_Call {
	return &MockSpamRecordCache_Get_Call{Call: _e.mock.On("Get", originId)}
}

func (_c *MockSpamRecordCache_Get_Call) Run(run func(originId flow.Identifier)) *MockSpamRecordCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockSpamRecordCache_Get_Call) Return(_a0 *model.ProtocolSpamRecord, _a1 bool) *MockSpamRecordCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpamRecordCache_Get_Call) RunAndReturn(run func(flow.Identifier) (*model.ProtocolSpamRecord, bool)) *MockSpamRecordCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Identities provides a mock function with no fields
func (_m *MockSpamRecordCache) Identities() []flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Identities")
	}

	var r0 []flow.Identifier
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	return r0
}

// MockSpamRecordCache_Identities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identities'
type MockSpamRecordCache_Identities_Call struct {
	*mock.Call
}

// Identities is a helper method to define mock.On call
func (_e *MockSpamRecordCache_Expecter) Identities() *MockSpamRecordCache_Identities_Call {
	return &MockSpamRecordCache_Identities_Call{Call: _e.mock.On("Identities")}
}

func (_c *MockSpamRecordCache_Identities_Call) Run(run func()) *MockSpamRecordCache_Identities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpamRecordCache_Identities_Call) Return(_a0 []flow.Identifier) *MockSpamRecordCache_Identities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpamRecordCache_Identities_Call) RunAndReturn(run func() []flow.Identifier) *MockSpamRecordCache_Identities_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: originId
func (_m *MockSpamRecordCache) Remove(originId flow.Identifier) bool {
	ret := _m.Called(originId)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(originId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSpamRecordCache_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockSpamRecordCache_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - originId flow.Identifier
func (_e *MockSpamRecordCache_Expecter) Remove(originId interface{}) *MockSpamRecordCache_Remove_Call {
	return &MockSpamRecordCache_Remove_Call{Call: _e.mock.On("Remove", originId)}
}

func (_c *MockSpamRecordCache_Remove_Call) Run(run func(originId flow.Identifier)) *MockSpamRecordCache_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockSpamRecordCache_Remove_Call) Return(_a0 bool) *MockSpamRecordCache_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpamRecordCache_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockSpamRecordCache_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockSpamRecordCache) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockSpamRecordCache_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockSpamRecordCache_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockSpamRecordCache_Expecter) Size() *MockSpamRecordCache_Size_Call {
	return &MockSpamRecordCache_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockSpamRecordCache_Size_Call) Run(run func()) *MockSpamRecordCache_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpamRecordCache_Size_Call) Return(_a0 uint) *MockSpamRecordCache_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpamRecordCache_Size_Call) RunAndReturn(run func() uint) *MockSpamRecordCache_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpamRecordCache creates a new instance of MockSpamRecordCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpamRecordCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpamRecordCache {
	mock := &MockSpamRecordCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
