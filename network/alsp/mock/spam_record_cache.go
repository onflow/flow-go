// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockalsp

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/network/alsp/model"
)

// SpamRecordCache is an autogenerated mock type for the SpamRecordCache type
type SpamRecordCache struct {
	mock.Mock
}

// AdjustWithInit provides a mock function with given fields: originId, adjustFunc
func (_m *SpamRecordCache) AdjustWithInit(originId flow.Identifier, adjustFunc model.RecordAdjustFunc) (float64, error) {
	ret := _m.Called(originId, adjustFunc)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, model.RecordAdjustFunc) (float64, error)); ok {
		return rf(originId, adjustFunc)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, model.RecordAdjustFunc) float64); ok {
		r0 = rf(originId, adjustFunc)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, model.RecordAdjustFunc) error); ok {
		r1 = rf(originId, adjustFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: originId
func (_m *SpamRecordCache) Get(originId flow.Identifier) (*model.ProtocolSpamRecord, bool) {
	ret := _m.Called(originId)

	var r0 *model.ProtocolSpamRecord
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*model.ProtocolSpamRecord, bool)); ok {
		return rf(originId)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *model.ProtocolSpamRecord); ok {
		r0 = rf(originId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProtocolSpamRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(originId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Identities provides a mock function with given fields:
func (_m *SpamRecordCache) Identities() []flow.Identifier {
	ret := _m.Called()

	var r0 []flow.Identifier
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: originId
func (_m *SpamRecordCache) Remove(originId flow.Identifier) bool {
	ret := _m.Called(originId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(originId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *SpamRecordCache) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

type mockConstructorTestingTNewSpamRecordCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewSpamRecordCache creates a new instance of SpamRecordCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSpamRecordCache(t mockConstructorTestingTNewSpamRecordCache) *SpamRecordCache {
	mock := &SpamRecordCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
