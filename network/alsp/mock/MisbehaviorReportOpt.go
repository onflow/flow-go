// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockalsp

import (
	alsp "github.com/onflow/flow-go/network/alsp"
	mock "github.com/stretchr/testify/mock"
)

// MockMisbehaviorReportOpt is an autogenerated mock type for the MisbehaviorReportOpt type
type MockMisbehaviorReportOpt struct {
	mock.Mock
}

type MockMisbehaviorReportOpt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMisbehaviorReportOpt) EXPECT() *MockMisbehaviorReportOpt_Expecter {
	return &MockMisbehaviorReportOpt_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: r
func (_m *MockMisbehaviorReportOpt) Execute(r *alsp.MisbehaviorReport) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*alsp.MisbehaviorReport) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMisbehaviorReportOpt_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockMisbehaviorReportOpt_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - r *alsp.MisbehaviorReport
func (_e *MockMisbehaviorReportOpt_Expecter) Execute(r interface{}) *MockMisbehaviorReportOpt_Execute_Call {
	return &MockMisbehaviorReportOpt_Execute_Call{Call: _e.mock.On("Execute", r)}
}

func (_c *MockMisbehaviorReportOpt_Execute_Call) Run(run func(r *alsp.MisbehaviorReport)) *MockMisbehaviorReportOpt_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*alsp.MisbehaviorReport))
	})
	return _c
}

func (_c *MockMisbehaviorReportOpt_Execute_Call) Return(_a0 error) *MockMisbehaviorReportOpt_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMisbehaviorReportOpt_Execute_Call) RunAndReturn(run func(*alsp.MisbehaviorReport) error) *MockMisbehaviorReportOpt_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMisbehaviorReportOpt creates a new instance of MockMisbehaviorReportOpt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMisbehaviorReportOpt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMisbehaviorReportOpt {
	mock := &MockMisbehaviorReportOpt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
