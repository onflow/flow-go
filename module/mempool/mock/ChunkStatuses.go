// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	verification "github.com/onflow/flow-go/model/verification"
)

// MockChunkStatuses is an autogenerated mock type for the ChunkStatuses type
type MockChunkStatuses struct {
	mock.Mock
}

type MockChunkStatuses_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkStatuses) EXPECT() *MockChunkStatuses_Expecter {
	return &MockChunkStatuses_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: status
func (_m *MockChunkStatuses) Add(status *verification.ChunkStatus) bool {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*verification.ChunkStatus) bool); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkStatuses_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockChunkStatuses_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - status *verification.ChunkStatus
func (_e *MockChunkStatuses_Expecter) Add(status interface{}) *MockChunkStatuses_Add_Call {
	return &MockChunkStatuses_Add_Call{Call: _e.mock.On("Add", status)}
}

func (_c *MockChunkStatuses_Add_Call) Run(run func(status *verification.ChunkStatus)) *MockChunkStatuses_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*verification.ChunkStatus))
	})
	return _c
}

func (_c *MockChunkStatuses_Add_Call) Return(_a0 bool) *MockChunkStatuses_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkStatuses_Add_Call) RunAndReturn(run func(*verification.ChunkStatus) bool) *MockChunkStatuses_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockChunkStatuses) All() []*verification.ChunkStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*verification.ChunkStatus
	if rf, ok := ret.Get(0).(func() []*verification.ChunkStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*verification.ChunkStatus)
		}
	}

	return r0
}

// MockChunkStatuses_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockChunkStatuses_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockChunkStatuses_Expecter) All() *MockChunkStatuses_All_Call {
	return &MockChunkStatuses_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockChunkStatuses_All_Call) Run(run func()) *MockChunkStatuses_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkStatuses_All_Call) Return(_a0 []*verification.ChunkStatus) *MockChunkStatuses_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkStatuses_All_Call) RunAndReturn(run func() []*verification.ChunkStatus) *MockChunkStatuses_All_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: chunkIndex, resultID
func (_m *MockChunkStatuses) Get(chunkIndex uint64, resultID flow.Identifier) (*verification.ChunkStatus, bool) {
	ret := _m.Called(chunkIndex, resultID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *verification.ChunkStatus
	var r1 bool
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) (*verification.ChunkStatus, bool)); ok {
		return rf(chunkIndex, resultID)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) *verification.ChunkStatus); ok {
		r0 = rf(chunkIndex, resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.ChunkStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier) bool); ok {
		r1 = rf(chunkIndex, resultID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockChunkStatuses_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockChunkStatuses_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - chunkIndex uint64
//   - resultID flow.Identifier
func (_e *MockChunkStatuses_Expecter) Get(chunkIndex interface{}, resultID interface{}) *MockChunkStatuses_Get_Call {
	return &MockChunkStatuses_Get_Call{Call: _e.mock.On("Get", chunkIndex, resultID)}
}

func (_c *MockChunkStatuses_Get_Call) Run(run func(chunkIndex uint64, resultID flow.Identifier)) *MockChunkStatuses_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkStatuses_Get_Call) Return(_a0 *verification.ChunkStatus, _a1 bool) *MockChunkStatuses_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkStatuses_Get_Call) RunAndReturn(run func(uint64, flow.Identifier) (*verification.ChunkStatus, bool)) *MockChunkStatuses_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: chunkIndex, resultID
func (_m *MockChunkStatuses) Remove(chunkIndex uint64, resultID flow.Identifier) bool {
	ret := _m.Called(chunkIndex, resultID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) bool); ok {
		r0 = rf(chunkIndex, resultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkStatuses_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockChunkStatuses_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - chunkIndex uint64
//   - resultID flow.Identifier
func (_e *MockChunkStatuses_Expecter) Remove(chunkIndex interface{}, resultID interface{}) *MockChunkStatuses_Remove_Call {
	return &MockChunkStatuses_Remove_Call{Call: _e.mock.On("Remove", chunkIndex, resultID)}
}

func (_c *MockChunkStatuses_Remove_Call) Run(run func(chunkIndex uint64, resultID flow.Identifier)) *MockChunkStatuses_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkStatuses_Remove_Call) Return(_a0 bool) *MockChunkStatuses_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkStatuses_Remove_Call) RunAndReturn(run func(uint64, flow.Identifier) bool) *MockChunkStatuses_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockChunkStatuses) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockChunkStatuses_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockChunkStatuses_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockChunkStatuses_Expecter) Size() *MockChunkStatuses_Size_Call {
	return &MockChunkStatuses_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockChunkStatuses_Size_Call) Run(run func()) *MockChunkStatuses_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkStatuses_Size_Call) Return(_a0 uint) *MockChunkStatuses_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkStatuses_Size_Call) RunAndReturn(run func() uint) *MockChunkStatuses_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkStatuses creates a new instance of MockChunkStatuses. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkStatuses(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkStatuses {
	mock := &MockChunkStatuses{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
