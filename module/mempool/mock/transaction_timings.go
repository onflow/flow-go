// Code generated by mockery v2.53.3. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// TransactionTimings is an autogenerated mock type for the TransactionTimings type
type TransactionTimings struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *TransactionTimings) Add(_a0 flow.Identifier, _a1 *flow.TransactionTiming) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, *flow.TransactionTiming) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Adjust provides a mock function with given fields: key, f
func (_m *TransactionTimings) Adjust(key flow.Identifier, f func(*flow.TransactionTiming) *flow.TransactionTiming) (*flow.TransactionTiming, bool) {
	ret := _m.Called(key, f)

	if len(ret) == 0 {
		panic("no return value specified for Adjust")
	}

	var r0 *flow.TransactionTiming
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*flow.TransactionTiming) *flow.TransactionTiming) (*flow.TransactionTiming, bool)); ok {
		return rf(key, f)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*flow.TransactionTiming) *flow.TransactionTiming) *flow.TransactionTiming); ok {
		r0 = rf(key, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionTiming)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, func(*flow.TransactionTiming) *flow.TransactionTiming) bool); ok {
		r1 = rf(key, f)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// All provides a mock function with no fields
func (_m *TransactionTimings) All() map[flow.Identifier]*flow.TransactionTiming {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[flow.Identifier]*flow.TransactionTiming
	if rf, ok := ret.Get(0).(func() map[flow.Identifier]*flow.TransactionTiming); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[flow.Identifier]*flow.TransactionTiming)
		}
	}

	return r0
}

// Clear provides a mock function with no fields
func (_m *TransactionTimings) Clear() {
	_m.Called()
}

// Get provides a mock function with given fields: _a0
func (_m *TransactionTimings) Get(_a0 flow.Identifier) (*flow.TransactionTiming, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *flow.TransactionTiming
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.TransactionTiming, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.TransactionTiming); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionTiming)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: _a0
func (_m *TransactionTimings) Has(_a0 flow.Identifier) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *TransactionTimings) Remove(_a0 flow.Identifier) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with no fields
func (_m *TransactionTimings) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// NewTransactionTimings creates a new instance of TransactionTimings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionTimings(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionTimings {
	mock := &TransactionTimings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
