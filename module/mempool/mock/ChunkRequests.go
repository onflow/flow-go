// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	chunks "github.com/onflow/flow-go/model/chunks"
	flow "github.com/onflow/flow-go/model/flow"

	mempool "github.com/onflow/flow-go/module/mempool"

	mock "github.com/stretchr/testify/mock"

	time "time"

	verification "github.com/onflow/flow-go/model/verification"
)

// MockChunkRequests is an autogenerated mock type for the ChunkRequests type
type MockChunkRequests struct {
	mock.Mock
}

type MockChunkRequests_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkRequests) EXPECT() *MockChunkRequests_Expecter {
	return &MockChunkRequests_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: request
func (_m *MockChunkRequests) Add(request *verification.ChunkDataPackRequest) bool {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*verification.ChunkDataPackRequest) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkRequests_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockChunkRequests_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - request *verification.ChunkDataPackRequest
func (_e *MockChunkRequests_Expecter) Add(request interface{}) *MockChunkRequests_Add_Call {
	return &MockChunkRequests_Add_Call{Call: _e.mock.On("Add", request)}
}

func (_c *MockChunkRequests_Add_Call) Run(run func(request *verification.ChunkDataPackRequest)) *MockChunkRequests_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*verification.ChunkDataPackRequest))
	})
	return _c
}

func (_c *MockChunkRequests_Add_Call) Return(_a0 bool) *MockChunkRequests_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkRequests_Add_Call) RunAndReturn(run func(*verification.ChunkDataPackRequest) bool) *MockChunkRequests_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockChunkRequests) All() verification.ChunkDataPackRequestInfoList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 verification.ChunkDataPackRequestInfoList
	if rf, ok := ret.Get(0).(func() verification.ChunkDataPackRequestInfoList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(verification.ChunkDataPackRequestInfoList)
		}
	}

	return r0
}

// MockChunkRequests_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockChunkRequests_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockChunkRequests_Expecter) All() *MockChunkRequests_All_Call {
	return &MockChunkRequests_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockChunkRequests_All_Call) Run(run func()) *MockChunkRequests_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkRequests_All_Call) Return(_a0 verification.ChunkDataPackRequestInfoList) *MockChunkRequests_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkRequests_All_Call) RunAndReturn(run func() verification.ChunkDataPackRequestInfoList) *MockChunkRequests_All_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementAttempt provides a mock function with given fields: chunkID
func (_m *MockChunkRequests) IncrementAttempt(chunkID flow.Identifier) bool {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementAttempt")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(chunkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkRequests_IncrementAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementAttempt'
type MockChunkRequests_IncrementAttempt_Call struct {
	*mock.Call
}

// IncrementAttempt is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkRequests_Expecter) IncrementAttempt(chunkID interface{}) *MockChunkRequests_IncrementAttempt_Call {
	return &MockChunkRequests_IncrementAttempt_Call{Call: _e.mock.On("IncrementAttempt", chunkID)}
}

func (_c *MockChunkRequests_IncrementAttempt_Call) Run(run func(chunkID flow.Identifier)) *MockChunkRequests_IncrementAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkRequests_IncrementAttempt_Call) Return(_a0 bool) *MockChunkRequests_IncrementAttempt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkRequests_IncrementAttempt_Call) RunAndReturn(run func(flow.Identifier) bool) *MockChunkRequests_IncrementAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// PopAll provides a mock function with given fields: chunkID
func (_m *MockChunkRequests) PopAll(chunkID flow.Identifier) (chunks.LocatorMap, bool) {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for PopAll")
	}

	var r0 chunks.LocatorMap
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (chunks.LocatorMap, bool)); ok {
		return rf(chunkID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) chunks.LocatorMap); ok {
		r0 = rf(chunkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chunks.LocatorMap)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(chunkID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockChunkRequests_PopAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopAll'
type MockChunkRequests_PopAll_Call struct {
	*mock.Call
}

// PopAll is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkRequests_Expecter) PopAll(chunkID interface{}) *MockChunkRequests_PopAll_Call {
	return &MockChunkRequests_PopAll_Call{Call: _e.mock.On("PopAll", chunkID)}
}

func (_c *MockChunkRequests_PopAll_Call) Run(run func(chunkID flow.Identifier)) *MockChunkRequests_PopAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkRequests_PopAll_Call) Return(_a0 chunks.LocatorMap, _a1 bool) *MockChunkRequests_PopAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkRequests_PopAll_Call) RunAndReturn(run func(flow.Identifier) (chunks.LocatorMap, bool)) *MockChunkRequests_PopAll_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: chunkID
func (_m *MockChunkRequests) Remove(chunkID flow.Identifier) bool {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(chunkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkRequests_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockChunkRequests_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkRequests_Expecter) Remove(chunkID interface{}) *MockChunkRequests_Remove_Call {
	return &MockChunkRequests_Remove_Call{Call: _e.mock.On("Remove", chunkID)}
}

func (_c *MockChunkRequests_Remove_Call) Run(run func(chunkID flow.Identifier)) *MockChunkRequests_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkRequests_Remove_Call) Return(_a0 bool) *MockChunkRequests_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkRequests_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockChunkRequests_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RequestHistory provides a mock function with given fields: chunkID
func (_m *MockChunkRequests) RequestHistory(chunkID flow.Identifier) (uint64, time.Time, time.Duration, bool) {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for RequestHistory")
	}

	var r0 uint64
	var r1 time.Time
	var r2 time.Duration
	var r3 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (uint64, time.Time, time.Duration, bool)); ok {
		return rf(chunkID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) uint64); ok {
		r0 = rf(chunkID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) time.Time); ok {
		r1 = rf(chunkID)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(flow.Identifier) time.Duration); ok {
		r2 = rf(chunkID)
	} else {
		r2 = ret.Get(2).(time.Duration)
	}

	if rf, ok := ret.Get(3).(func(flow.Identifier) bool); ok {
		r3 = rf(chunkID)
	} else {
		r3 = ret.Get(3).(bool)
	}

	return r0, r1, r2, r3
}

// MockChunkRequests_RequestHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestHistory'
type MockChunkRequests_RequestHistory_Call struct {
	*mock.Call
}

// RequestHistory is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkRequests_Expecter) RequestHistory(chunkID interface{}) *MockChunkRequests_RequestHistory_Call {
	return &MockChunkRequests_RequestHistory_Call{Call: _e.mock.On("RequestHistory", chunkID)}
}

func (_c *MockChunkRequests_RequestHistory_Call) Run(run func(chunkID flow.Identifier)) *MockChunkRequests_RequestHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkRequests_RequestHistory_Call) Return(_a0 uint64, _a1 time.Time, _a2 time.Duration, _a3 bool) *MockChunkRequests_RequestHistory_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockChunkRequests_RequestHistory_Call) RunAndReturn(run func(flow.Identifier) (uint64, time.Time, time.Duration, bool)) *MockChunkRequests_RequestHistory_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockChunkRequests) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockChunkRequests_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockChunkRequests_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockChunkRequests_Expecter) Size() *MockChunkRequests_Size_Call {
	return &MockChunkRequests_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockChunkRequests_Size_Call) Run(run func()) *MockChunkRequests_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkRequests_Size_Call) Return(_a0 uint) *MockChunkRequests_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkRequests_Size_Call) RunAndReturn(run func() uint) *MockChunkRequests_Size_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRequestHistory provides a mock function with given fields: chunkID, updater
func (_m *MockChunkRequests) UpdateRequestHistory(chunkID flow.Identifier, updater mempool.ChunkRequestHistoryUpdaterFunc) (uint64, time.Time, time.Duration, bool) {
	ret := _m.Called(chunkID, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRequestHistory")
	}

	var r0 uint64
	var r1 time.Time
	var r2 time.Duration
	var r3 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, mempool.ChunkRequestHistoryUpdaterFunc) (uint64, time.Time, time.Duration, bool)); ok {
		return rf(chunkID, updater)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, mempool.ChunkRequestHistoryUpdaterFunc) uint64); ok {
		r0 = rf(chunkID, updater)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, mempool.ChunkRequestHistoryUpdaterFunc) time.Time); ok {
		r1 = rf(chunkID, updater)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(flow.Identifier, mempool.ChunkRequestHistoryUpdaterFunc) time.Duration); ok {
		r2 = rf(chunkID, updater)
	} else {
		r2 = ret.Get(2).(time.Duration)
	}

	if rf, ok := ret.Get(3).(func(flow.Identifier, mempool.ChunkRequestHistoryUpdaterFunc) bool); ok {
		r3 = rf(chunkID, updater)
	} else {
		r3 = ret.Get(3).(bool)
	}

	return r0, r1, r2, r3
}

// MockChunkRequests_UpdateRequestHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRequestHistory'
type MockChunkRequests_UpdateRequestHistory_Call struct {
	*mock.Call
}

// UpdateRequestHistory is a helper method to define mock.On call
//   - chunkID flow.Identifier
//   - updater mempool.ChunkRequestHistoryUpdaterFunc
func (_e *MockChunkRequests_Expecter) UpdateRequestHistory(chunkID interface{}, updater interface{}) *MockChunkRequests_UpdateRequestHistory_Call {
	return &MockChunkRequests_UpdateRequestHistory_Call{Call: _e.mock.On("UpdateRequestHistory", chunkID, updater)}
}

func (_c *MockChunkRequests_UpdateRequestHistory_Call) Run(run func(chunkID flow.Identifier, updater mempool.ChunkRequestHistoryUpdaterFunc)) *MockChunkRequests_UpdateRequestHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(mempool.ChunkRequestHistoryUpdaterFunc))
	})
	return _c
}

func (_c *MockChunkRequests_UpdateRequestHistory_Call) Return(_a0 uint64, _a1 time.Time, _a2 time.Duration, _a3 bool) *MockChunkRequests_UpdateRequestHistory_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockChunkRequests_UpdateRequestHistory_Call) RunAndReturn(run func(flow.Identifier, mempool.ChunkRequestHistoryUpdaterFunc) (uint64, time.Time, time.Duration, bool)) *MockChunkRequests_UpdateRequestHistory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkRequests creates a new instance of MockChunkRequests. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkRequests(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkRequests {
	mock := &MockChunkRequests{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
