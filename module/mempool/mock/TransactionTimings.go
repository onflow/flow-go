// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionTimings is an autogenerated mock type for the TransactionTimings type
type MockTransactionTimings struct {
	mock.Mock
}

type MockTransactionTimings_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionTimings) EXPECT() *MockTransactionTimings_Expecter {
	return &MockTransactionTimings_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: tx
func (_m *MockTransactionTimings) Add(tx *flow.TransactionTiming) bool {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.TransactionTiming) bool); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactionTimings_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockTransactionTimings_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - tx *flow.TransactionTiming
func (_e *MockTransactionTimings_Expecter) Add(tx interface{}) *MockTransactionTimings_Add_Call {
	return &MockTransactionTimings_Add_Call{Call: _e.mock.On("Add", tx)}
}

func (_c *MockTransactionTimings_Add_Call) Run(run func(tx *flow.TransactionTiming)) *MockTransactionTimings_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TransactionTiming))
	})
	return _c
}

func (_c *MockTransactionTimings_Add_Call) Return(_a0 bool) *MockTransactionTimings_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionTimings_Add_Call) RunAndReturn(run func(*flow.TransactionTiming) bool) *MockTransactionTimings_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Adjust provides a mock function with given fields: txID, f
func (_m *MockTransactionTimings) Adjust(txID flow.Identifier, f func(*flow.TransactionTiming) *flow.TransactionTiming) (*flow.TransactionTiming, bool) {
	ret := _m.Called(txID, f)

	if len(ret) == 0 {
		panic("no return value specified for Adjust")
	}

	var r0 *flow.TransactionTiming
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*flow.TransactionTiming) *flow.TransactionTiming) (*flow.TransactionTiming, bool)); ok {
		return rf(txID, f)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*flow.TransactionTiming) *flow.TransactionTiming) *flow.TransactionTiming); ok {
		r0 = rf(txID, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionTiming)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, func(*flow.TransactionTiming) *flow.TransactionTiming) bool); ok {
		r1 = rf(txID, f)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockTransactionTimings_Adjust_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Adjust'
type MockTransactionTimings_Adjust_Call struct {
	*mock.Call
}

// Adjust is a helper method to define mock.On call
//   - txID flow.Identifier
//   - f func(*flow.TransactionTiming) *flow.TransactionTiming
func (_e *MockTransactionTimings_Expecter) Adjust(txID interface{}, f interface{}) *MockTransactionTimings_Adjust_Call {
	return &MockTransactionTimings_Adjust_Call{Call: _e.mock.On("Adjust", txID, f)}
}

func (_c *MockTransactionTimings_Adjust_Call) Run(run func(txID flow.Identifier, f func(*flow.TransactionTiming) *flow.TransactionTiming)) *MockTransactionTimings_Adjust_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(func(*flow.TransactionTiming) *flow.TransactionTiming))
	})
	return _c
}

func (_c *MockTransactionTimings_Adjust_Call) Return(_a0 *flow.TransactionTiming, _a1 bool) *MockTransactionTimings_Adjust_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionTimings_Adjust_Call) RunAndReturn(run func(flow.Identifier, func(*flow.TransactionTiming) *flow.TransactionTiming) (*flow.TransactionTiming, bool)) *MockTransactionTimings_Adjust_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockTransactionTimings) All() []*flow.TransactionTiming {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*flow.TransactionTiming
	if rf, ok := ret.Get(0).(func() []*flow.TransactionTiming); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.TransactionTiming)
		}
	}

	return r0
}

// MockTransactionTimings_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockTransactionTimings_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockTransactionTimings_Expecter) All() *MockTransactionTimings_All_Call {
	return &MockTransactionTimings_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockTransactionTimings_All_Call) Run(run func()) *MockTransactionTimings_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionTimings_All_Call) Return(_a0 []*flow.TransactionTiming) *MockTransactionTimings_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionTimings_All_Call) RunAndReturn(run func() []*flow.TransactionTiming) *MockTransactionTimings_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: txID
func (_m *MockTransactionTimings) ByID(txID flow.Identifier) (*flow.TransactionTiming, bool) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.TransactionTiming
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.TransactionTiming, bool)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.TransactionTiming); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionTiming)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockTransactionTimings_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockTransactionTimings_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockTransactionTimings_Expecter) ByID(txID interface{}) *MockTransactionTimings_ByID_Call {
	return &MockTransactionTimings_ByID_Call{Call: _e.mock.On("ByID", txID)}
}

func (_c *MockTransactionTimings_ByID_Call) Run(run func(txID flow.Identifier)) *MockTransactionTimings_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionTimings_ByID_Call) Return(_a0 *flow.TransactionTiming, _a1 bool) *MockTransactionTimings_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionTimings_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.TransactionTiming, bool)) *MockTransactionTimings_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: txID
func (_m *MockTransactionTimings) Remove(txID flow.Identifier) bool {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(txID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactionTimings_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockTransactionTimings_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockTransactionTimings_Expecter) Remove(txID interface{}) *MockTransactionTimings_Remove_Call {
	return &MockTransactionTimings_Remove_Call{Call: _e.mock.On("Remove", txID)}
}

func (_c *MockTransactionTimings_Remove_Call) Run(run func(txID flow.Identifier)) *MockTransactionTimings_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionTimings_Remove_Call) Return(_a0 bool) *MockTransactionTimings_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionTimings_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockTransactionTimings_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionTimings creates a new instance of MockTransactionTimings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionTimings(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionTimings {
	mock := &MockTransactionTimings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
