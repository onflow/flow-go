// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"
	mempool "github.com/onflow/flow-go/module/mempool"

	mock "github.com/stretchr/testify/mock"
)

// MockExecutionTree is an autogenerated mock type for the ExecutionTree type
type MockExecutionTree struct {
	mock.Mock
}

type MockExecutionTree_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionTree) EXPECT() *MockExecutionTree_Expecter {
	return &MockExecutionTree_Expecter{mock: &_m.Mock}
}

// AddReceipt provides a mock function with given fields: receipt, block
func (_m *MockExecutionTree) AddReceipt(receipt *flow.ExecutionReceipt, block *flow.Header) (bool, error) {
	ret := _m.Called(receipt, block)

	if len(ret) == 0 {
		panic("no return value specified for AddReceipt")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt, *flow.Header) (bool, error)); ok {
		return rf(receipt, block)
	}
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt, *flow.Header) bool); ok {
		r0 = rf(receipt, block)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*flow.ExecutionReceipt, *flow.Header) error); ok {
		r1 = rf(receipt, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionTree_AddReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReceipt'
type MockExecutionTree_AddReceipt_Call struct {
	*mock.Call
}

// AddReceipt is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
//   - block *flow.Header
func (_e *MockExecutionTree_Expecter) AddReceipt(receipt interface{}, block interface{}) *MockExecutionTree_AddReceipt_Call {
	return &MockExecutionTree_AddReceipt_Call{Call: _e.mock.On("AddReceipt", receipt, block)}
}

func (_c *MockExecutionTree_AddReceipt_Call) Run(run func(receipt *flow.ExecutionReceipt, block *flow.Header)) *MockExecutionTree_AddReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockExecutionTree_AddReceipt_Call) Return(_a0 bool, _a1 error) *MockExecutionTree_AddReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionTree_AddReceipt_Call) RunAndReturn(run func(*flow.ExecutionReceipt, *flow.Header) (bool, error)) *MockExecutionTree_AddReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// AddResult provides a mock function with given fields: result, block
func (_m *MockExecutionTree) AddResult(result *flow.ExecutionResult, block *flow.Header) error {
	ret := _m.Called(result, block)

	if len(ret) == 0 {
		panic("no return value specified for AddResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult, *flow.Header) error); ok {
		r0 = rf(result, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionTree_AddResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddResult'
type MockExecutionTree_AddResult_Call struct {
	*mock.Call
}

// AddResult is a helper method to define mock.On call
//   - result *flow.ExecutionResult
//   - block *flow.Header
func (_e *MockExecutionTree_Expecter) AddResult(result interface{}, block interface{}) *MockExecutionTree_AddResult_Call {
	return &MockExecutionTree_AddResult_Call{Call: _e.mock.On("AddResult", result, block)}
}

func (_c *MockExecutionTree_AddResult_Call) Run(run func(result *flow.ExecutionResult, block *flow.Header)) *MockExecutionTree_AddResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionResult), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockExecutionTree_AddResult_Call) Return(_a0 error) *MockExecutionTree_AddResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionTree_AddResult_Call) RunAndReturn(run func(*flow.ExecutionResult, *flow.Header) error) *MockExecutionTree_AddResult_Call {
	_c.Call.Return(run)
	return _c
}

// HasReceipt provides a mock function with given fields: receipt
func (_m *MockExecutionTree) HasReceipt(receipt *flow.ExecutionReceipt) bool {
	ret := _m.Called(receipt)

	if len(ret) == 0 {
		panic("no return value specified for HasReceipt")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt) bool); ok {
		r0 = rf(receipt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecutionTree_HasReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasReceipt'
type MockExecutionTree_HasReceipt_Call struct {
	*mock.Call
}

// HasReceipt is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
func (_e *MockExecutionTree_Expecter) HasReceipt(receipt interface{}) *MockExecutionTree_HasReceipt_Call {
	return &MockExecutionTree_HasReceipt_Call{Call: _e.mock.On("HasReceipt", receipt)}
}

func (_c *MockExecutionTree_HasReceipt_Call) Run(run func(receipt *flow.ExecutionReceipt)) *MockExecutionTree_HasReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt))
	})
	return _c
}

func (_c *MockExecutionTree_HasReceipt_Call) Return(_a0 bool) *MockExecutionTree_HasReceipt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionTree_HasReceipt_Call) RunAndReturn(run func(*flow.ExecutionReceipt) bool) *MockExecutionTree_HasReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// LowestHeight provides a mock function with no fields
func (_m *MockExecutionTree) LowestHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LowestHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockExecutionTree_LowestHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LowestHeight'
type MockExecutionTree_LowestHeight_Call struct {
	*mock.Call
}

// LowestHeight is a helper method to define mock.On call
func (_e *MockExecutionTree_Expecter) LowestHeight() *MockExecutionTree_LowestHeight_Call {
	return &MockExecutionTree_LowestHeight_Call{Call: _e.mock.On("LowestHeight")}
}

func (_c *MockExecutionTree_LowestHeight_Call) Run(run func()) *MockExecutionTree_LowestHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionTree_LowestHeight_Call) Return(_a0 uint64) *MockExecutionTree_LowestHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionTree_LowestHeight_Call) RunAndReturn(run func() uint64) *MockExecutionTree_LowestHeight_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToHeight provides a mock function with given fields: newLowestHeight
func (_m *MockExecutionTree) PruneUpToHeight(newLowestHeight uint64) error {
	ret := _m.Called(newLowestHeight)

	if len(ret) == 0 {
		panic("no return value specified for PruneUpToHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(newLowestHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionTree_PruneUpToHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToHeight'
type MockExecutionTree_PruneUpToHeight_Call struct {
	*mock.Call
}

// PruneUpToHeight is a helper method to define mock.On call
//   - newLowestHeight uint64
func (_e *MockExecutionTree_Expecter) PruneUpToHeight(newLowestHeight interface{}) *MockExecutionTree_PruneUpToHeight_Call {
	return &MockExecutionTree_PruneUpToHeight_Call{Call: _e.mock.On("PruneUpToHeight", newLowestHeight)}
}

func (_c *MockExecutionTree_PruneUpToHeight_Call) Run(run func(newLowestHeight uint64)) *MockExecutionTree_PruneUpToHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionTree_PruneUpToHeight_Call) Return(_a0 error) *MockExecutionTree_PruneUpToHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionTree_PruneUpToHeight_Call) RunAndReturn(run func(uint64) error) *MockExecutionTree_PruneUpToHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ReachableReceipts provides a mock function with given fields: resultID, blockFilter, receiptFilter
func (_m *MockExecutionTree) ReachableReceipts(resultID flow.Identifier, blockFilter mempool.BlockFilter, receiptFilter mempool.ReceiptFilter) ([]*flow.ExecutionReceipt, error) {
	ret := _m.Called(resultID, blockFilter, receiptFilter)

	if len(ret) == 0 {
		panic("no return value specified for ReachableReceipts")
	}

	var r0 []*flow.ExecutionReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, mempool.BlockFilter, mempool.ReceiptFilter) ([]*flow.ExecutionReceipt, error)); ok {
		return rf(resultID, blockFilter, receiptFilter)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, mempool.BlockFilter, mempool.ReceiptFilter) []*flow.ExecutionReceipt); ok {
		r0 = rf(resultID, blockFilter, receiptFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.ExecutionReceipt)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, mempool.BlockFilter, mempool.ReceiptFilter) error); ok {
		r1 = rf(resultID, blockFilter, receiptFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionTree_ReachableReceipts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReachableReceipts'
type MockExecutionTree_ReachableReceipts_Call struct {
	*mock.Call
}

// ReachableReceipts is a helper method to define mock.On call
//   - resultID flow.Identifier
//   - blockFilter mempool.BlockFilter
//   - receiptFilter mempool.ReceiptFilter
func (_e *MockExecutionTree_Expecter) ReachableReceipts(resultID interface{}, blockFilter interface{}, receiptFilter interface{}) *MockExecutionTree_ReachableReceipts_Call {
	return &MockExecutionTree_ReachableReceipts_Call{Call: _e.mock.On("ReachableReceipts", resultID, blockFilter, receiptFilter)}
}

func (_c *MockExecutionTree_ReachableReceipts_Call) Run(run func(resultID flow.Identifier, blockFilter mempool.BlockFilter, receiptFilter mempool.ReceiptFilter)) *MockExecutionTree_ReachableReceipts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(mempool.BlockFilter), args[2].(mempool.ReceiptFilter))
	})
	return _c
}

func (_c *MockExecutionTree_ReachableReceipts_Call) Return(_a0 []*flow.ExecutionReceipt, _a1 error) *MockExecutionTree_ReachableReceipts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionTree_ReachableReceipts_Call) RunAndReturn(run func(flow.Identifier, mempool.BlockFilter, mempool.ReceiptFilter) ([]*flow.ExecutionReceipt, error)) *MockExecutionTree_ReachableReceipts_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockExecutionTree) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockExecutionTree_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockExecutionTree_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockExecutionTree_Expecter) Size() *MockExecutionTree_Size_Call {
	return &MockExecutionTree_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockExecutionTree_Size_Call) Run(run func()) *MockExecutionTree_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionTree_Size_Call) Return(_a0 uint) *MockExecutionTree_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionTree_Size_Call) RunAndReturn(run func() uint) *MockExecutionTree_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionTree creates a new instance of MockExecutionTree. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionTree(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionTree {
	mock := &MockExecutionTree{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
