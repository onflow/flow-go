// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockOnEjection is an autogenerated mock type for the OnEjection type
type MockOnEjection struct {
	mock.Mock
}

type MockOnEjection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnEjection) EXPECT() *MockOnEjection_Expecter {
	return &MockOnEjection_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockOnEjection) Execute(_a0 flow.Entity) {
	_m.Called(_a0)
}

// MockOnEjection_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockOnEjection_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 flow.Entity
func (_e *MockOnEjection_Expecter) Execute(_a0 interface{}) *MockOnEjection_Execute_Call {
	return &MockOnEjection_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockOnEjection_Execute_Call) Run(run func(_a0 flow.Entity)) *MockOnEjection_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Entity))
	})
	return _c
}

func (_c *MockOnEjection_Execute_Call) Return() *MockOnEjection_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOnEjection_Execute_Call) RunAndReturn(run func(flow.Entity)) *MockOnEjection_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockOnEjection creates a new instance of MockOnEjection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnEjection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnEjection {
	mock := &MockOnEjection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
