// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockBackData is an autogenerated mock type for the BackData type
type MockBackData struct {
	mock.Mock
}

type MockBackData_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackData) EXPECT() *MockBackData_Expecter {
	return &MockBackData_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: entityID, entity
func (_m *MockBackData) Add(entityID flow.Identifier, entity flow.Entity) bool {
	ret := _m.Called(entityID, entity)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Entity) bool); ok {
		r0 = rf(entityID, entity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBackData_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockBackData_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - entityID flow.Identifier
//   - entity flow.Entity
func (_e *MockBackData_Expecter) Add(entityID interface{}, entity interface{}) *MockBackData_Add_Call {
	return &MockBackData_Add_Call{Call: _e.mock.On("Add", entityID, entity)}
}

func (_c *MockBackData_Add_Call) Run(run func(entityID flow.Identifier, entity flow.Entity)) *MockBackData_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Entity))
	})
	return _c
}

func (_c *MockBackData_Add_Call) Return(_a0 bool) *MockBackData_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackData_Add_Call) RunAndReturn(run func(flow.Identifier, flow.Entity) bool) *MockBackData_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Adjust provides a mock function with given fields: entityID, f
func (_m *MockBackData) Adjust(entityID flow.Identifier, f func(flow.Entity) flow.Entity) (flow.Entity, bool) {
	ret := _m.Called(entityID, f)

	if len(ret) == 0 {
		panic("no return value specified for Adjust")
	}

	var r0 flow.Entity
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(flow.Entity) flow.Entity) (flow.Entity, bool)); ok {
		return rf(entityID, f)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(flow.Entity) flow.Entity) flow.Entity); ok {
		r0 = rf(entityID, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, func(flow.Entity) flow.Entity) bool); ok {
		r1 = rf(entityID, f)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBackData_Adjust_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Adjust'
type MockBackData_Adjust_Call struct {
	*mock.Call
}

// Adjust is a helper method to define mock.On call
//   - entityID flow.Identifier
//   - f func(flow.Entity) flow.Entity
func (_e *MockBackData_Expecter) Adjust(entityID interface{}, f interface{}) *MockBackData_Adjust_Call {
	return &MockBackData_Adjust_Call{Call: _e.mock.On("Adjust", entityID, f)}
}

func (_c *MockBackData_Adjust_Call) Run(run func(entityID flow.Identifier, f func(flow.Entity) flow.Entity)) *MockBackData_Adjust_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(func(flow.Entity) flow.Entity))
	})
	return _c
}

func (_c *MockBackData_Adjust_Call) Return(_a0 flow.Entity, _a1 bool) *MockBackData_Adjust_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackData_Adjust_Call) RunAndReturn(run func(flow.Identifier, func(flow.Entity) flow.Entity) (flow.Entity, bool)) *MockBackData_Adjust_Call {
	_c.Call.Return(run)
	return _c
}

// AdjustWithInit provides a mock function with given fields: entityID, adjust, init
func (_m *MockBackData) AdjustWithInit(entityID flow.Identifier, adjust func(flow.Entity) flow.Entity, init func() flow.Entity) (flow.Entity, bool) {
	ret := _m.Called(entityID, adjust, init)

	if len(ret) == 0 {
		panic("no return value specified for AdjustWithInit")
	}

	var r0 flow.Entity
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(flow.Entity) flow.Entity, func() flow.Entity) (flow.Entity, bool)); ok {
		return rf(entityID, adjust, init)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(flow.Entity) flow.Entity, func() flow.Entity) flow.Entity); ok {
		r0 = rf(entityID, adjust, init)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, func(flow.Entity) flow.Entity, func() flow.Entity) bool); ok {
		r1 = rf(entityID, adjust, init)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBackData_AdjustWithInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdjustWithInit'
type MockBackData_AdjustWithInit_Call struct {
	*mock.Call
}

// AdjustWithInit is a helper method to define mock.On call
//   - entityID flow.Identifier
//   - adjust func(flow.Entity) flow.Entity
//   - init func() flow.Entity
func (_e *MockBackData_Expecter) AdjustWithInit(entityID interface{}, adjust interface{}, init interface{}) *MockBackData_AdjustWithInit_Call {
	return &MockBackData_AdjustWithInit_Call{Call: _e.mock.On("AdjustWithInit", entityID, adjust, init)}
}

func (_c *MockBackData_AdjustWithInit_Call) Run(run func(entityID flow.Identifier, adjust func(flow.Entity) flow.Entity, init func() flow.Entity)) *MockBackData_AdjustWithInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(func(flow.Entity) flow.Entity), args[2].(func() flow.Entity))
	})
	return _c
}

func (_c *MockBackData_AdjustWithInit_Call) Return(_a0 flow.Entity, _a1 bool) *MockBackData_AdjustWithInit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackData_AdjustWithInit_Call) RunAndReturn(run func(flow.Identifier, func(flow.Entity) flow.Entity, func() flow.Entity) (flow.Entity, bool)) *MockBackData_AdjustWithInit_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockBackData) All() map[flow.Identifier]flow.Entity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[flow.Identifier]flow.Entity
	if rf, ok := ret.Get(0).(func() map[flow.Identifier]flow.Entity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[flow.Identifier]flow.Entity)
		}
	}

	return r0
}

// MockBackData_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockBackData_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockBackData_Expecter) All() *MockBackData_All_Call {
	return &MockBackData_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockBackData_All_Call) Run(run func()) *MockBackData_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBackData_All_Call) Return(_a0 map[flow.Identifier]flow.Entity) *MockBackData_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackData_All_Call) RunAndReturn(run func() map[flow.Identifier]flow.Entity) *MockBackData_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: entityID
func (_m *MockBackData) ByID(entityID flow.Identifier) (flow.Entity, bool) {
	ret := _m.Called(entityID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 flow.Entity
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.Entity, bool)); ok {
		return rf(entityID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.Entity); ok {
		r0 = rf(entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(entityID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBackData_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockBackData_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - entityID flow.Identifier
func (_e *MockBackData_Expecter) ByID(entityID interface{}) *MockBackData_ByID_Call {
	return &MockBackData_ByID_Call{Call: _e.mock.On("ByID", entityID)}
}

func (_c *MockBackData_ByID_Call) Run(run func(entityID flow.Identifier)) *MockBackData_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBackData_ByID_Call) Return(_a0 flow.Entity, _a1 bool) *MockBackData_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackData_ByID_Call) RunAndReturn(run func(flow.Identifier) (flow.Entity, bool)) *MockBackData_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with no fields
func (_m *MockBackData) Clear() {
	_m.Called()
}

// MockBackData_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockBackData_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockBackData_Expecter) Clear() *MockBackData_Clear_Call {
	return &MockBackData_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockBackData_Clear_Call) Run(run func()) *MockBackData_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBackData_Clear_Call) Return() *MockBackData_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBackData_Clear_Call) RunAndReturn(run func()) *MockBackData_Clear_Call {
	_c.Run(run)
	return _c
}

// Entities provides a mock function with no fields
func (_m *MockBackData) Entities() []flow.Entity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entities")
	}

	var r0 []flow.Entity
	if rf, ok := ret.Get(0).(func() []flow.Entity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Entity)
		}
	}

	return r0
}

// MockBackData_Entities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entities'
type MockBackData_Entities_Call struct {
	*mock.Call
}

// Entities is a helper method to define mock.On call
func (_e *MockBackData_Expecter) Entities() *MockBackData_Entities_Call {
	return &MockBackData_Entities_Call{Call: _e.mock.On("Entities")}
}

func (_c *MockBackData_Entities_Call) Run(run func()) *MockBackData_Entities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBackData_Entities_Call) Return(_a0 []flow.Entity) *MockBackData_Entities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackData_Entities_Call) RunAndReturn(run func() []flow.Entity) *MockBackData_Entities_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithInit provides a mock function with given fields: entityID, init
func (_m *MockBackData) GetWithInit(entityID flow.Identifier, init func() flow.Entity) (flow.Entity, bool) {
	ret := _m.Called(entityID, init)

	if len(ret) == 0 {
		panic("no return value specified for GetWithInit")
	}

	var r0 flow.Entity
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, func() flow.Entity) (flow.Entity, bool)); ok {
		return rf(entityID, init)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, func() flow.Entity) flow.Entity); ok {
		r0 = rf(entityID, init)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, func() flow.Entity) bool); ok {
		r1 = rf(entityID, init)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBackData_GetWithInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithInit'
type MockBackData_GetWithInit_Call struct {
	*mock.Call
}

// GetWithInit is a helper method to define mock.On call
//   - entityID flow.Identifier
//   - init func() flow.Entity
func (_e *MockBackData_Expecter) GetWithInit(entityID interface{}, init interface{}) *MockBackData_GetWithInit_Call {
	return &MockBackData_GetWithInit_Call{Call: _e.mock.On("GetWithInit", entityID, init)}
}

func (_c *MockBackData_GetWithInit_Call) Run(run func(entityID flow.Identifier, init func() flow.Entity)) *MockBackData_GetWithInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(func() flow.Entity))
	})
	return _c
}

func (_c *MockBackData_GetWithInit_Call) Return(_a0 flow.Entity, _a1 bool) *MockBackData_GetWithInit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackData_GetWithInit_Call) RunAndReturn(run func(flow.Identifier, func() flow.Entity) (flow.Entity, bool)) *MockBackData_GetWithInit_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: entityID
func (_m *MockBackData) Has(entityID flow.Identifier) bool {
	ret := _m.Called(entityID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(entityID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBackData_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockBackData_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - entityID flow.Identifier
func (_e *MockBackData_Expecter) Has(entityID interface{}) *MockBackData_Has_Call {
	return &MockBackData_Has_Call{Call: _e.mock.On("Has", entityID)}
}

func (_c *MockBackData_Has_Call) Run(run func(entityID flow.Identifier)) *MockBackData_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBackData_Has_Call) Return(_a0 bool) *MockBackData_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackData_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockBackData_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Identifiers provides a mock function with no fields
func (_m *MockBackData) Identifiers() flow.IdentifierList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Identifiers")
	}

	var r0 flow.IdentifierList
	if rf, ok := ret.Get(0).(func() flow.IdentifierList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentifierList)
		}
	}

	return r0
}

// MockBackData_Identifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identifiers'
type MockBackData_Identifiers_Call struct {
	*mock.Call
}

// Identifiers is a helper method to define mock.On call
func (_e *MockBackData_Expecter) Identifiers() *MockBackData_Identifiers_Call {
	return &MockBackData_Identifiers_Call{Call: _e.mock.On("Identifiers")}
}

func (_c *MockBackData_Identifiers_Call) Run(run func()) *MockBackData_Identifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBackData_Identifiers_Call) Return(_a0 flow.IdentifierList) *MockBackData_Identifiers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackData_Identifiers_Call) RunAndReturn(run func() flow.IdentifierList) *MockBackData_Identifiers_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: entityID
func (_m *MockBackData) Remove(entityID flow.Identifier) (flow.Entity, bool) {
	ret := _m.Called(entityID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 flow.Entity
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.Entity, bool)); ok {
		return rf(entityID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.Entity); ok {
		r0 = rf(entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(entityID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBackData_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockBackData_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - entityID flow.Identifier
func (_e *MockBackData_Expecter) Remove(entityID interface{}) *MockBackData_Remove_Call {
	return &MockBackData_Remove_Call{Call: _e.mock.On("Remove", entityID)}
}

func (_c *MockBackData_Remove_Call) Run(run func(entityID flow.Identifier)) *MockBackData_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBackData_Remove_Call) Return(_a0 flow.Entity, _a1 bool) *MockBackData_Remove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackData_Remove_Call) RunAndReturn(run func(flow.Identifier) (flow.Entity, bool)) *MockBackData_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockBackData) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockBackData_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockBackData_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockBackData_Expecter) Size() *MockBackData_Size_Call {
	return &MockBackData_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockBackData_Size_Call) Run(run func()) *MockBackData_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBackData_Size_Call) Return(_a0 uint) *MockBackData_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackData_Size_Call) RunAndReturn(run func() uint) *MockBackData_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBackData creates a new instance of MockBackData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackData {
	mock := &MockBackData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
