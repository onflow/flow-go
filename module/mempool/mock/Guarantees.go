// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockGuarantees is an autogenerated mock type for the Guarantees type
type MockGuarantees struct {
	mock.Mock
}

type MockGuarantees_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGuarantees) EXPECT() *MockGuarantees_Expecter {
	return &MockGuarantees_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: guarantee
func (_m *MockGuarantees) Add(guarantee *flow.CollectionGuarantee) bool {
	ret := _m.Called(guarantee)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.CollectionGuarantee) bool); ok {
		r0 = rf(guarantee)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGuarantees_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockGuarantees_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - guarantee *flow.CollectionGuarantee
func (_e *MockGuarantees_Expecter) Add(guarantee interface{}) *MockGuarantees_Add_Call {
	return &MockGuarantees_Add_Call{Call: _e.mock.On("Add", guarantee)}
}

func (_c *MockGuarantees_Add_Call) Run(run func(guarantee *flow.CollectionGuarantee)) *MockGuarantees_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.CollectionGuarantee))
	})
	return _c
}

func (_c *MockGuarantees_Add_Call) Return(_a0 bool) *MockGuarantees_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGuarantees_Add_Call) RunAndReturn(run func(*flow.CollectionGuarantee) bool) *MockGuarantees_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockGuarantees) All() []*flow.CollectionGuarantee {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*flow.CollectionGuarantee
	if rf, ok := ret.Get(0).(func() []*flow.CollectionGuarantee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.CollectionGuarantee)
		}
	}

	return r0
}

// MockGuarantees_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockGuarantees_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockGuarantees_Expecter) All() *MockGuarantees_All_Call {
	return &MockGuarantees_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockGuarantees_All_Call) Run(run func()) *MockGuarantees_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGuarantees_All_Call) Return(_a0 []*flow.CollectionGuarantee) *MockGuarantees_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGuarantees_All_Call) RunAndReturn(run func() []*flow.CollectionGuarantee) *MockGuarantees_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: collID
func (_m *MockGuarantees) ByID(collID flow.Identifier) (*flow.CollectionGuarantee, bool) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.CollectionGuarantee
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.CollectionGuarantee, bool)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.CollectionGuarantee); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.CollectionGuarantee)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockGuarantees_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockGuarantees_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockGuarantees_Expecter) ByID(collID interface{}) *MockGuarantees_ByID_Call {
	return &MockGuarantees_ByID_Call{Call: _e.mock.On("ByID", collID)}
}

func (_c *MockGuarantees_ByID_Call) Run(run func(collID flow.Identifier)) *MockGuarantees_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockGuarantees_ByID_Call) Return(_a0 *flow.CollectionGuarantee, _a1 bool) *MockGuarantees_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGuarantees_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.CollectionGuarantee, bool)) *MockGuarantees_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: collID
func (_m *MockGuarantees) Has(collID flow.Identifier) bool {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(collID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGuarantees_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockGuarantees_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockGuarantees_Expecter) Has(collID interface{}) *MockGuarantees_Has_Call {
	return &MockGuarantees_Has_Call{Call: _e.mock.On("Has", collID)}
}

func (_c *MockGuarantees_Has_Call) Run(run func(collID flow.Identifier)) *MockGuarantees_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockGuarantees_Has_Call) Return(_a0 bool) *MockGuarantees_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGuarantees_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockGuarantees_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: collID
func (_m *MockGuarantees) Remove(collID flow.Identifier) bool {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(collID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGuarantees_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockGuarantees_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockGuarantees_Expecter) Remove(collID interface{}) *MockGuarantees_Remove_Call {
	return &MockGuarantees_Remove_Call{Call: _e.mock.On("Remove", collID)}
}

func (_c *MockGuarantees_Remove_Call) Run(run func(collID flow.Identifier)) *MockGuarantees_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockGuarantees_Remove_Call) Return(_a0 bool) *MockGuarantees_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGuarantees_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockGuarantees_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockGuarantees) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockGuarantees_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockGuarantees_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockGuarantees_Expecter) Size() *MockGuarantees_Size_Call {
	return &MockGuarantees_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockGuarantees_Size_Call) Run(run func()) *MockGuarantees_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGuarantees_Size_Call) Return(_a0 uint) *MockGuarantees_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGuarantees_Size_Call) RunAndReturn(run func() uint) *MockGuarantees_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGuarantees creates a new instance of MockGuarantees. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGuarantees(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGuarantees {
	mock := &MockGuarantees{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
