// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"
	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"

	mock "github.com/stretchr/testify/mock"
)

// MockExecutionData is an autogenerated mock type for the ExecutionData type
type MockExecutionData struct {
	mock.Mock
}

type MockExecutionData_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionData) EXPECT() *MockExecutionData_Expecter {
	return &MockExecutionData_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0
func (_m *MockExecutionData) Add(_a0 *execution_data.BlockExecutionDataEntity) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*execution_data.BlockExecutionDataEntity) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecutionData_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockExecutionData_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 *execution_data.BlockExecutionDataEntity
func (_e *MockExecutionData_Expecter) Add(_a0 interface{}) *MockExecutionData_Add_Call {
	return &MockExecutionData_Add_Call{Call: _e.mock.On("Add", _a0)}
}

func (_c *MockExecutionData_Add_Call) Run(run func(_a0 *execution_data.BlockExecutionDataEntity)) *MockExecutionData_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*execution_data.BlockExecutionDataEntity))
	})
	return _c
}

func (_c *MockExecutionData_Add_Call) Return(_a0 bool) *MockExecutionData_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionData_Add_Call) RunAndReturn(run func(*execution_data.BlockExecutionDataEntity) bool) *MockExecutionData_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockExecutionData) All() []*execution_data.BlockExecutionDataEntity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*execution_data.BlockExecutionDataEntity
	if rf, ok := ret.Get(0).(func() []*execution_data.BlockExecutionDataEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*execution_data.BlockExecutionDataEntity)
		}
	}

	return r0
}

// MockExecutionData_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockExecutionData_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockExecutionData_Expecter) All() *MockExecutionData_All_Call {
	return &MockExecutionData_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockExecutionData_All_Call) Run(run func()) *MockExecutionData_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionData_All_Call) Return(_a0 []*execution_data.BlockExecutionDataEntity) *MockExecutionData_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionData_All_Call) RunAndReturn(run func() []*execution_data.BlockExecutionDataEntity) *MockExecutionData_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: _a0
func (_m *MockExecutionData) ByID(_a0 flow.Identifier) (*execution_data.BlockExecutionDataEntity, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *execution_data.BlockExecutionDataEntity
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*execution_data.BlockExecutionDataEntity, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *execution_data.BlockExecutionDataEntity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution_data.BlockExecutionDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockExecutionData_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockExecutionData_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockExecutionData_Expecter) ByID(_a0 interface{}) *MockExecutionData_ByID_Call {
	return &MockExecutionData_ByID_Call{Call: _e.mock.On("ByID", _a0)}
}

func (_c *MockExecutionData_ByID_Call) Run(run func(_a0 flow.Identifier)) *MockExecutionData_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionData_ByID_Call) Return(_a0 *execution_data.BlockExecutionDataEntity, _a1 bool) *MockExecutionData_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionData_ByID_Call) RunAndReturn(run func(flow.Identifier) (*execution_data.BlockExecutionDataEntity, bool)) *MockExecutionData_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with no fields
func (_m *MockExecutionData) Clear() {
	_m.Called()
}

// MockExecutionData_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockExecutionData_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockExecutionData_Expecter) Clear() *MockExecutionData_Clear_Call {
	return &MockExecutionData_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockExecutionData_Clear_Call) Run(run func()) *MockExecutionData_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionData_Clear_Call) Return() *MockExecutionData_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionData_Clear_Call) RunAndReturn(run func()) *MockExecutionData_Clear_Call {
	_c.Run(run)
	return _c
}

// Has provides a mock function with given fields: _a0
func (_m *MockExecutionData) Has(_a0 flow.Identifier) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecutionData_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockExecutionData_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockExecutionData_Expecter) Has(_a0 interface{}) *MockExecutionData_Has_Call {
	return &MockExecutionData_Has_Call{Call: _e.mock.On("Has", _a0)}
}

func (_c *MockExecutionData_Has_Call) Run(run func(_a0 flow.Identifier)) *MockExecutionData_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionData_Has_Call) Return(_a0 bool) *MockExecutionData_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionData_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockExecutionData_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: _a0
func (_m *MockExecutionData) Remove(_a0 flow.Identifier) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecutionData_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockExecutionData_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockExecutionData_Expecter) Remove(_a0 interface{}) *MockExecutionData_Remove_Call {
	return &MockExecutionData_Remove_Call{Call: _e.mock.On("Remove", _a0)}
}

func (_c *MockExecutionData_Remove_Call) Run(run func(_a0 flow.Identifier)) *MockExecutionData_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionData_Remove_Call) Return(_a0 bool) *MockExecutionData_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionData_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockExecutionData_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockExecutionData) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockExecutionData_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockExecutionData_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockExecutionData_Expecter) Size() *MockExecutionData_Size_Call {
	return &MockExecutionData_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockExecutionData_Size_Call) Run(run func()) *MockExecutionData_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionData_Size_Call) Return(_a0 uint) *MockExecutionData_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionData_Size_Call) RunAndReturn(run func() uint) *MockExecutionData_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionData creates a new instance of MockExecutionData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionData {
	mock := &MockExecutionData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
