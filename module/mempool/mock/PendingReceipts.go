// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockPendingReceipts is an autogenerated mock type for the PendingReceipts type
type MockPendingReceipts struct {
	mock.Mock
}

type MockPendingReceipts_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPendingReceipts) EXPECT() *MockPendingReceipts_Expecter {
	return &MockPendingReceipts_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: receipt
func (_m *MockPendingReceipts) Add(receipt *flow.ExecutionReceipt) bool {
	ret := _m.Called(receipt)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt) bool); ok {
		r0 = rf(receipt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPendingReceipts_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPendingReceipts_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
func (_e *MockPendingReceipts_Expecter) Add(receipt interface{}) *MockPendingReceipts_Add_Call {
	return &MockPendingReceipts_Add_Call{Call: _e.mock.On("Add", receipt)}
}

func (_c *MockPendingReceipts_Add_Call) Run(run func(receipt *flow.ExecutionReceipt)) *MockPendingReceipts_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt))
	})
	return _c
}

func (_c *MockPendingReceipts_Add_Call) Return(_a0 bool) *MockPendingReceipts_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingReceipts_Add_Call) RunAndReturn(run func(*flow.ExecutionReceipt) bool) *MockPendingReceipts_Add_Call {
	_c.Call.Return(run)
	return _c
}

// ByPreviousResultID provides a mock function with given fields: previousReusltID
func (_m *MockPendingReceipts) ByPreviousResultID(previousReusltID flow.Identifier) []*flow.ExecutionReceipt {
	ret := _m.Called(previousReusltID)

	if len(ret) == 0 {
		panic("no return value specified for ByPreviousResultID")
	}

	var r0 []*flow.ExecutionReceipt
	if rf, ok := ret.Get(0).(func(flow.Identifier) []*flow.ExecutionReceipt); ok {
		r0 = rf(previousReusltID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.ExecutionReceipt)
		}
	}

	return r0
}

// MockPendingReceipts_ByPreviousResultID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByPreviousResultID'
type MockPendingReceipts_ByPreviousResultID_Call struct {
	*mock.Call
}

// ByPreviousResultID is a helper method to define mock.On call
//   - previousReusltID flow.Identifier
func (_e *MockPendingReceipts_Expecter) ByPreviousResultID(previousReusltID interface{}) *MockPendingReceipts_ByPreviousResultID_Call {
	return &MockPendingReceipts_ByPreviousResultID_Call{Call: _e.mock.On("ByPreviousResultID", previousReusltID)}
}

func (_c *MockPendingReceipts_ByPreviousResultID_Call) Run(run func(previousReusltID flow.Identifier)) *MockPendingReceipts_ByPreviousResultID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockPendingReceipts_ByPreviousResultID_Call) Return(_a0 []*flow.ExecutionReceipt) *MockPendingReceipts_ByPreviousResultID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingReceipts_ByPreviousResultID_Call) RunAndReturn(run func(flow.Identifier) []*flow.ExecutionReceipt) *MockPendingReceipts_ByPreviousResultID_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToHeight provides a mock function with given fields: height
func (_m *MockPendingReceipts) PruneUpToHeight(height uint64) error {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for PruneUpToHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPendingReceipts_PruneUpToHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToHeight'
type MockPendingReceipts_PruneUpToHeight_Call struct {
	*mock.Call
}

// PruneUpToHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockPendingReceipts_Expecter) PruneUpToHeight(height interface{}) *MockPendingReceipts_PruneUpToHeight_Call {
	return &MockPendingReceipts_PruneUpToHeight_Call{Call: _e.mock.On("PruneUpToHeight", height)}
}

func (_c *MockPendingReceipts_PruneUpToHeight_Call) Run(run func(height uint64)) *MockPendingReceipts_PruneUpToHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockPendingReceipts_PruneUpToHeight_Call) Return(_a0 error) *MockPendingReceipts_PruneUpToHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingReceipts_PruneUpToHeight_Call) RunAndReturn(run func(uint64) error) *MockPendingReceipts_PruneUpToHeight_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: receiptID
func (_m *MockPendingReceipts) Remove(receiptID flow.Identifier) bool {
	ret := _m.Called(receiptID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(receiptID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPendingReceipts_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockPendingReceipts_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - receiptID flow.Identifier
func (_e *MockPendingReceipts_Expecter) Remove(receiptID interface{}) *MockPendingReceipts_Remove_Call {
	return &MockPendingReceipts_Remove_Call{Call: _e.mock.On("Remove", receiptID)}
}

func (_c *MockPendingReceipts_Remove_Call) Run(run func(receiptID flow.Identifier)) *MockPendingReceipts_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockPendingReceipts_Remove_Call) Return(_a0 bool) *MockPendingReceipts_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingReceipts_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockPendingReceipts_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPendingReceipts creates a new instance of MockPendingReceipts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPendingReceipts(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPendingReceipts {
	mock := &MockPendingReceipts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
