// Code generated by mockery. DO NOT EDIT.

package mock

import (
	chunks "github.com/onflow/flow-go/model/chunks"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// Assignments is an autogenerated mock type for the Assignments type
type Assignments struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *Assignments) Add(_a0 flow.Identifier, _a1 *chunks.Assignment) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, *chunks.Assignment) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Adjust provides a mock function with given fields: key, f
func (_m *Assignments) Adjust(key flow.Identifier, f func(*chunks.Assignment) *chunks.Assignment) (*chunks.Assignment, bool) {
	ret := _m.Called(key, f)

	if len(ret) == 0 {
		panic("no return value specified for Adjust")
	}

	var r0 *chunks.Assignment
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*chunks.Assignment) *chunks.Assignment) (*chunks.Assignment, bool)); ok {
		return rf(key, f)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*chunks.Assignment) *chunks.Assignment) *chunks.Assignment); ok {
		r0 = rf(key, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chunks.Assignment)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, func(*chunks.Assignment) *chunks.Assignment) bool); ok {
		r1 = rf(key, f)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// All provides a mock function with no fields
func (_m *Assignments) All() map[flow.Identifier]*chunks.Assignment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[flow.Identifier]*chunks.Assignment
	if rf, ok := ret.Get(0).(func() map[flow.Identifier]*chunks.Assignment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[flow.Identifier]*chunks.Assignment)
		}
	}

	return r0
}

// Clear provides a mock function with no fields
func (_m *Assignments) Clear() {
	_m.Called()
}

// Get provides a mock function with given fields: _a0
func (_m *Assignments) Get(_a0 flow.Identifier) (*chunks.Assignment, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *chunks.Assignment
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*chunks.Assignment, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *chunks.Assignment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chunks.Assignment)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: _a0
func (_m *Assignments) Has(_a0 flow.Identifier) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *Assignments) Remove(_a0 flow.Identifier) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with no fields
func (_m *Assignments) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Values provides a mock function with no fields
func (_m *Assignments) Values() []*chunks.Assignment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []*chunks.Assignment
	if rf, ok := ret.Get(0).(func() []*chunks.Assignment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chunks.Assignment)
		}
	}

	return r0
}

// NewAssignments creates a new instance of Assignments. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssignments(t interface {
	mock.TestingT
	Cleanup(func())
}) *Assignments {
	mock := &Assignments{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
