// Code generated by mockery v2.43.2. DO NOT EDIT.

package mempool

import (
	chunks "github.com/onflow/flow-go/model/chunks"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// Assignments is an autogenerated mock type for the Assignments type
type Assignments struct {
	mock.Mock
}

// Add provides a mock function with given fields: assignmentFingerprint, assignment
func (_m *Assignments) Add(assignmentFingerprint flow.Identifier, assignment *chunks.Assignment) bool {
	ret := _m.Called(assignmentFingerprint, assignment)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, *chunks.Assignment) bool); ok {
		r0 = rf(assignmentFingerprint, assignment)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *Assignments) All() []*chunks.Assignment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*chunks.Assignment
	if rf, ok := ret.Get(0).(func() []*chunks.Assignment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chunks.Assignment)
		}
	}

	return r0
}

// ByID provides a mock function with given fields: assignmentID
func (_m *Assignments) ByID(assignmentID flow.Identifier) (*chunks.Assignment, bool) {
	ret := _m.Called(assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *chunks.Assignment
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*chunks.Assignment, bool)); ok {
		return rf(assignmentID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *chunks.Assignment); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chunks.Assignment)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(assignmentID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: assignmentID
func (_m *Assignments) Has(assignmentID flow.Identifier) bool {
	ret := _m.Called(assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(assignmentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: assignmentID
func (_m *Assignments) Remove(assignmentID flow.Identifier) bool {
	ret := _m.Called(assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(assignmentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *Assignments) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// NewAssignments creates a new instance of Assignments. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssignments(t interface {
	mock.TestingT
	Cleanup(func())
}) *Assignments {
	mock := &Assignments{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
