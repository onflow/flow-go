// Code generated by mockery v2.21.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// Collections is an autogenerated mock type for the Collections type
type Collections struct {
	mock.Mock
}

// Add provides a mock function with given fields: coll
func (_m *Collections) Add(coll *flow.Collection) bool {
	ret := _m.Called(coll)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.Collection) bool); ok {
		r0 = rf(coll)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *Collections) All() []*flow.Collection {
	ret := _m.Called()

	var r0 []*flow.Collection
	if rf, ok := ret.Get(0).(func() []*flow.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.Collection)
		}
	}

	return r0
}

// ByID provides a mock function with given fields: collID
func (_m *Collections) ByID(collID flow.Identifier) (*flow.Collection, bool) {
	ret := _m.Called(collID)

	var r0 *flow.Collection
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Collection, bool)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Collection); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: collID
func (_m *Collections) Has(collID flow.Identifier) bool {
	ret := _m.Called(collID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(collID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: collID
func (_m *Collections) Remove(collID flow.Identifier) bool {
	ret := _m.Called(collID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(collID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *Collections) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

type mockConstructorTestingTNewCollections interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollections creates a new instance of Collections. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollections(t mockConstructorTestingTNewCollections) *Collections {
	mock := &Collections{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
