// Code generated by mockery v2.53.3. DO NOT EDIT.

package mempool

import mock "github.com/stretchr/testify/mock"

// BackData is an autogenerated mock type for the BackData type
type BackData[K comparable, V interface{}] struct {
	mock.Mock
}

// Add provides a mock function with given fields: key, value
func (_m *BackData[K, V]) Add(key K, value V) bool {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(K, V) bool); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// All provides a mock function with no fields
func (_m *BackData[K, V]) All() map[K]V {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[K]V
	if rf, ok := ret.Get(0).(func() map[K]V); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[K]V)
		}
	}

	return r0
}

// Clear provides a mock function with no fields
func (_m *BackData[K, V]) Clear() {
	_m.Called()
}

// Get provides a mock function with given fields: key
func (_m *BackData[K, V]) Get(key K) (V, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 bool
	if rf, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}

	if rf, ok := ret.Get(1).(func(K) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: key
func (_m *BackData[K, V]) Has(key K) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(K) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Keys provides a mock function with no fields
func (_m *BackData[K, V]) Keys() []K {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 []K
	if rf, ok := ret.Get(0).(func() []K); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]K)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: key
func (_m *BackData[K, V]) Remove(key K) (V, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 V
	var r1 bool
	if rf, ok := ret.Get(0).(func(K) (V, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(K) V); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}

	if rf, ok := ret.Get(1).(func(K) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Size provides a mock function with no fields
func (_m *BackData[K, V]) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Values provides a mock function with no fields
func (_m *BackData[K, V]) Values() []V {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []V
	if rf, ok := ret.Get(0).(func() []V); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]V)
		}
	}

	return r0
}

// NewBackData creates a new instance of BackData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackData[K comparable, V interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *BackData[K, V] {
	mock := &BackData[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
