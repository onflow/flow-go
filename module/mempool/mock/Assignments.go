// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	chunks "github.com/onflow/flow-go/model/chunks"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockAssignments is an autogenerated mock type for the Assignments type
type MockAssignments struct {
	mock.Mock
}

type MockAssignments_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssignments) EXPECT() *MockAssignments_Expecter {
	return &MockAssignments_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: assignmentFingerprint, assignment
func (_m *MockAssignments) Add(assignmentFingerprint flow.Identifier, assignment *chunks.Assignment) bool {
	ret := _m.Called(assignmentFingerprint, assignment)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier, *chunks.Assignment) bool); ok {
		r0 = rf(assignmentFingerprint, assignment)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAssignments_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockAssignments_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - assignmentFingerprint flow.Identifier
//   - assignment *chunks.Assignment
func (_e *MockAssignments_Expecter) Add(assignmentFingerprint interface{}, assignment interface{}) *MockAssignments_Add_Call {
	return &MockAssignments_Add_Call{Call: _e.mock.On("Add", assignmentFingerprint, assignment)}
}

func (_c *MockAssignments_Add_Call) Run(run func(assignmentFingerprint flow.Identifier, assignment *chunks.Assignment)) *MockAssignments_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(*chunks.Assignment))
	})
	return _c
}

func (_c *MockAssignments_Add_Call) Return(_a0 bool) *MockAssignments_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignments_Add_Call) RunAndReturn(run func(flow.Identifier, *chunks.Assignment) bool) *MockAssignments_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockAssignments) All() []*chunks.Assignment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*chunks.Assignment
	if rf, ok := ret.Get(0).(func() []*chunks.Assignment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chunks.Assignment)
		}
	}

	return r0
}

// MockAssignments_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockAssignments_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockAssignments_Expecter) All() *MockAssignments_All_Call {
	return &MockAssignments_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockAssignments_All_Call) Run(run func()) *MockAssignments_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignments_All_Call) Return(_a0 []*chunks.Assignment) *MockAssignments_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignments_All_Call) RunAndReturn(run func() []*chunks.Assignment) *MockAssignments_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: assignmentID
func (_m *MockAssignments) ByID(assignmentID flow.Identifier) (*chunks.Assignment, bool) {
	ret := _m.Called(assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *chunks.Assignment
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*chunks.Assignment, bool)); ok {
		return rf(assignmentID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *chunks.Assignment); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chunks.Assignment)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(assignmentID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockAssignments_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockAssignments_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - assignmentID flow.Identifier
func (_e *MockAssignments_Expecter) ByID(assignmentID interface{}) *MockAssignments_ByID_Call {
	return &MockAssignments_ByID_Call{Call: _e.mock.On("ByID", assignmentID)}
}

func (_c *MockAssignments_ByID_Call) Run(run func(assignmentID flow.Identifier)) *MockAssignments_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockAssignments_ByID_Call) Return(_a0 *chunks.Assignment, _a1 bool) *MockAssignments_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssignments_ByID_Call) RunAndReturn(run func(flow.Identifier) (*chunks.Assignment, bool)) *MockAssignments_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: assignmentID
func (_m *MockAssignments) Has(assignmentID flow.Identifier) bool {
	ret := _m.Called(assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(assignmentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAssignments_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockAssignments_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - assignmentID flow.Identifier
func (_e *MockAssignments_Expecter) Has(assignmentID interface{}) *MockAssignments_Has_Call {
	return &MockAssignments_Has_Call{Call: _e.mock.On("Has", assignmentID)}
}

func (_c *MockAssignments_Has_Call) Run(run func(assignmentID flow.Identifier)) *MockAssignments_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockAssignments_Has_Call) Return(_a0 bool) *MockAssignments_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignments_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockAssignments_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: assignmentID
func (_m *MockAssignments) Remove(assignmentID flow.Identifier) bool {
	ret := _m.Called(assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(assignmentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAssignments_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockAssignments_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - assignmentID flow.Identifier
func (_e *MockAssignments_Expecter) Remove(assignmentID interface{}) *MockAssignments_Remove_Call {
	return &MockAssignments_Remove_Call{Call: _e.mock.On("Remove", assignmentID)}
}

func (_c *MockAssignments_Remove_Call) Run(run func(assignmentID flow.Identifier)) *MockAssignments_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockAssignments_Remove_Call) Return(_a0 bool) *MockAssignments_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignments_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockAssignments_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockAssignments) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockAssignments_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockAssignments_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockAssignments_Expecter) Size() *MockAssignments_Size_Call {
	return &MockAssignments_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockAssignments_Size_Call) Run(run func()) *MockAssignments_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignments_Size_Call) Return(_a0 uint) *MockAssignments_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignments_Size_Call) RunAndReturn(run func() uint) *MockAssignments_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssignments creates a new instance of MockAssignments. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssignments(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssignments {
	mock := &MockAssignments{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
