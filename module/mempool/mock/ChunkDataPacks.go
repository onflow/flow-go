// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockChunkDataPacks is an autogenerated mock type for the ChunkDataPacks type
type MockChunkDataPacks struct {
	mock.Mock
}

type MockChunkDataPacks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkDataPacks) EXPECT() *MockChunkDataPacks_Expecter {
	return &MockChunkDataPacks_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: cdp
func (_m *MockChunkDataPacks) Add(cdp *flow.ChunkDataPack) bool {
	ret := _m.Called(cdp)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.ChunkDataPack) bool); ok {
		r0 = rf(cdp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkDataPacks_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockChunkDataPacks_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - cdp *flow.ChunkDataPack
func (_e *MockChunkDataPacks_Expecter) Add(cdp interface{}) *MockChunkDataPacks_Add_Call {
	return &MockChunkDataPacks_Add_Call{Call: _e.mock.On("Add", cdp)}
}

func (_c *MockChunkDataPacks_Add_Call) Run(run func(cdp *flow.ChunkDataPack)) *MockChunkDataPacks_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ChunkDataPack))
	})
	return _c
}

func (_c *MockChunkDataPacks_Add_Call) Return(_a0 bool) *MockChunkDataPacks_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_Add_Call) RunAndReturn(run func(*flow.ChunkDataPack) bool) *MockChunkDataPacks_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockChunkDataPacks) All() []*flow.ChunkDataPack {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*flow.ChunkDataPack
	if rf, ok := ret.Get(0).(func() []*flow.ChunkDataPack); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.ChunkDataPack)
		}
	}

	return r0
}

// MockChunkDataPacks_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockChunkDataPacks_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockChunkDataPacks_Expecter) All() *MockChunkDataPacks_All_Call {
	return &MockChunkDataPacks_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockChunkDataPacks_All_Call) Run(run func()) *MockChunkDataPacks_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkDataPacks_All_Call) Return(_a0 []*flow.ChunkDataPack) *MockChunkDataPacks_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_All_Call) RunAndReturn(run func() []*flow.ChunkDataPack) *MockChunkDataPacks_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByChunkID provides a mock function with given fields: chunkID
func (_m *MockChunkDataPacks) ByChunkID(chunkID flow.Identifier) (*flow.ChunkDataPack, bool) {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for ByChunkID")
	}

	var r0 *flow.ChunkDataPack
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ChunkDataPack, bool)); ok {
		return rf(chunkID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ChunkDataPack); ok {
		r0 = rf(chunkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ChunkDataPack)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(chunkID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockChunkDataPacks_ByChunkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByChunkID'
type MockChunkDataPacks_ByChunkID_Call struct {
	*mock.Call
}

// ByChunkID is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkDataPacks_Expecter) ByChunkID(chunkID interface{}) *MockChunkDataPacks_ByChunkID_Call {
	return &MockChunkDataPacks_ByChunkID_Call{Call: _e.mock.On("ByChunkID", chunkID)}
}

func (_c *MockChunkDataPacks_ByChunkID_Call) Run(run func(chunkID flow.Identifier)) *MockChunkDataPacks_ByChunkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkDataPacks_ByChunkID_Call) Return(_a0 *flow.ChunkDataPack, _a1 bool) *MockChunkDataPacks_ByChunkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkDataPacks_ByChunkID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ChunkDataPack, bool)) *MockChunkDataPacks_ByChunkID_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: chunkID
func (_m *MockChunkDataPacks) Has(chunkID flow.Identifier) bool {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(chunkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkDataPacks_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockChunkDataPacks_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkDataPacks_Expecter) Has(chunkID interface{}) *MockChunkDataPacks_Has_Call {
	return &MockChunkDataPacks_Has_Call{Call: _e.mock.On("Has", chunkID)}
}

func (_c *MockChunkDataPacks_Has_Call) Run(run func(chunkID flow.Identifier)) *MockChunkDataPacks_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkDataPacks_Has_Call) Return(_a0 bool) *MockChunkDataPacks_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockChunkDataPacks_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: chunkID
func (_m *MockChunkDataPacks) Remove(chunkID flow.Identifier) bool {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(chunkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChunkDataPacks_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockChunkDataPacks_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkDataPacks_Expecter) Remove(chunkID interface{}) *MockChunkDataPacks_Remove_Call {
	return &MockChunkDataPacks_Remove_Call{Call: _e.mock.On("Remove", chunkID)}
}

func (_c *MockChunkDataPacks_Remove_Call) Run(run func(chunkID flow.Identifier)) *MockChunkDataPacks_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkDataPacks_Remove_Call) Return(_a0 bool) *MockChunkDataPacks_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockChunkDataPacks_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockChunkDataPacks) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockChunkDataPacks_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockChunkDataPacks_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockChunkDataPacks_Expecter) Size() *MockChunkDataPacks_Size_Call {
	return &MockChunkDataPacks_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockChunkDataPacks_Size_Call) Run(run func()) *MockChunkDataPacks_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkDataPacks_Size_Call) Return(_a0 uint) *MockChunkDataPacks_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_Size_Call) RunAndReturn(run func() uint) *MockChunkDataPacks_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkDataPacks creates a new instance of MockChunkDataPacks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkDataPacks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkDataPacks {
	mock := &MockChunkDataPacks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
