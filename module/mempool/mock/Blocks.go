// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockBlocks is an autogenerated mock type for the Blocks type
type MockBlocks struct {
	mock.Mock
}

type MockBlocks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlocks) EXPECT() *MockBlocks_Expecter {
	return &MockBlocks_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: block
func (_m *MockBlocks) Add(block *flow.Block) bool {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.Block) bool); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBlocks_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockBlocks_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - block *flow.Block
func (_e *MockBlocks_Expecter) Add(block interface{}) *MockBlocks_Add_Call {
	return &MockBlocks_Add_Call{Call: _e.mock.On("Add", block)}
}

func (_c *MockBlocks_Add_Call) Run(run func(block *flow.Block)) *MockBlocks_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Block))
	})
	return _c
}

func (_c *MockBlocks_Add_Call) Return(_a0 bool) *MockBlocks_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_Add_Call) RunAndReturn(run func(*flow.Block) bool) *MockBlocks_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockBlocks) All() []*flow.Block {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*flow.Block
	if rf, ok := ret.Get(0).(func() []*flow.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.Block)
		}
	}

	return r0
}

// MockBlocks_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockBlocks_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockBlocks_Expecter) All() *MockBlocks_All_Call {
	return &MockBlocks_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockBlocks_All_Call) Run(run func()) *MockBlocks_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlocks_All_Call) Return(_a0 []*flow.Block) *MockBlocks_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_All_Call) RunAndReturn(run func() []*flow.Block) *MockBlocks_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: blockID
func (_m *MockBlocks) ByID(blockID flow.Identifier) (*flow.Block, bool) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.Block
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Block, bool)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Block); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBlocks_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockBlocks_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockBlocks_Expecter) ByID(blockID interface{}) *MockBlocks_ByID_Call {
	return &MockBlocks_ByID_Call{Call: _e.mock.On("ByID", blockID)}
}

func (_c *MockBlocks_ByID_Call) Run(run func(blockID flow.Identifier)) *MockBlocks_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBlocks_ByID_Call) Return(_a0 *flow.Block, _a1 bool) *MockBlocks_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Block, bool)) *MockBlocks_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: blockID
func (_m *MockBlocks) Has(blockID flow.Identifier) bool {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBlocks_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockBlocks_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockBlocks_Expecter) Has(blockID interface{}) *MockBlocks_Has_Call {
	return &MockBlocks_Has_Call{Call: _e.mock.On("Has", blockID)}
}

func (_c *MockBlocks_Has_Call) Run(run func(blockID flow.Identifier)) *MockBlocks_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBlocks_Has_Call) Return(_a0 bool) *MockBlocks_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockBlocks_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with no fields
func (_m *MockBlocks) Hash() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockBlocks_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockBlocks_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *MockBlocks_Expecter) Hash() *MockBlocks_Hash_Call {
	return &MockBlocks_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *MockBlocks_Hash_Call) Run(run func()) *MockBlocks_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlocks_Hash_Call) Return(_a0 flow.Identifier) *MockBlocks_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_Hash_Call) RunAndReturn(run func() flow.Identifier) *MockBlocks_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: blockID
func (_m *MockBlocks) Remove(blockID flow.Identifier) bool {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBlocks_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockBlocks_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockBlocks_Expecter) Remove(blockID interface{}) *MockBlocks_Remove_Call {
	return &MockBlocks_Remove_Call{Call: _e.mock.On("Remove", blockID)}
}

func (_c *MockBlocks_Remove_Call) Run(run func(blockID flow.Identifier)) *MockBlocks_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBlocks_Remove_Call) Return(_a0 bool) *MockBlocks_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockBlocks_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockBlocks) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockBlocks_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockBlocks_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockBlocks_Expecter) Size() *MockBlocks_Size_Call {
	return &MockBlocks_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockBlocks_Size_Call) Run(run func()) *MockBlocks_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlocks_Size_Call) Return(_a0 uint) *MockBlocks_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_Size_Call) RunAndReturn(run func() uint) *MockBlocks_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlocks creates a new instance of MockBlocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlocks {
	mock := &MockBlocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
