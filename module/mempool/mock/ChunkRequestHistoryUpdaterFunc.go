// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockChunkRequestHistoryUpdaterFunc is an autogenerated mock type for the ChunkRequestHistoryUpdaterFunc type
type MockChunkRequestHistoryUpdaterFunc struct {
	mock.Mock
}

type MockChunkRequestHistoryUpdaterFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkRequestHistoryUpdaterFunc) EXPECT() *MockChunkRequestHistoryUpdaterFunc_Expecter {
	return &MockChunkRequestHistoryUpdaterFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockChunkRequestHistoryUpdaterFunc) Execute(_a0 uint64, _a1 time.Duration) (uint64, time.Duration, bool) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 uint64
	var r1 time.Duration
	var r2 bool
	if rf, ok := ret.Get(0).(func(uint64, time.Duration) (uint64, time.Duration, bool)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(uint64, time.Duration) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64, time.Duration) time.Duration); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(uint64, time.Duration) bool); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// MockChunkRequestHistoryUpdaterFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockChunkRequestHistoryUpdaterFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 time.Duration
func (_e *MockChunkRequestHistoryUpdaterFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}) *MockChunkRequestHistoryUpdaterFunc_Execute_Call {
	return &MockChunkRequestHistoryUpdaterFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *MockChunkRequestHistoryUpdaterFunc_Execute_Call) Run(run func(_a0 uint64, _a1 time.Duration)) *MockChunkRequestHistoryUpdaterFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockChunkRequestHistoryUpdaterFunc_Execute_Call) Return(_a0 uint64, _a1 time.Duration, _a2 bool) *MockChunkRequestHistoryUpdaterFunc_Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockChunkRequestHistoryUpdaterFunc_Execute_Call) RunAndReturn(run func(uint64, time.Duration) (uint64, time.Duration, bool)) *MockChunkRequestHistoryUpdaterFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkRequestHistoryUpdaterFunc creates a new instance of MockChunkRequestHistoryUpdaterFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkRequestHistoryUpdaterFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkRequestHistoryUpdaterFunc {
	mock := &MockChunkRequestHistoryUpdaterFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
