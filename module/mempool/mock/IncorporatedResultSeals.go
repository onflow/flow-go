// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockIncorporatedResultSeals is an autogenerated mock type for the IncorporatedResultSeals type
type MockIncorporatedResultSeals struct {
	mock.Mock
}

type MockIncorporatedResultSeals_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIncorporatedResultSeals) EXPECT() *MockIncorporatedResultSeals_Expecter {
	return &MockIncorporatedResultSeals_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: irSeal
func (_m *MockIncorporatedResultSeals) Add(irSeal *flow.IncorporatedResultSeal) (bool, error) {
	ret := _m.Called(irSeal)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.IncorporatedResultSeal) (bool, error)); ok {
		return rf(irSeal)
	}
	if rf, ok := ret.Get(0).(func(*flow.IncorporatedResultSeal) bool); ok {
		r0 = rf(irSeal)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*flow.IncorporatedResultSeal) error); ok {
		r1 = rf(irSeal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIncorporatedResultSeals_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockIncorporatedResultSeals_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - irSeal *flow.IncorporatedResultSeal
func (_e *MockIncorporatedResultSeals_Expecter) Add(irSeal interface{}) *MockIncorporatedResultSeals_Add_Call {
	return &MockIncorporatedResultSeals_Add_Call{Call: _e.mock.On("Add", irSeal)}
}

func (_c *MockIncorporatedResultSeals_Add_Call) Run(run func(irSeal *flow.IncorporatedResultSeal)) *MockIncorporatedResultSeals_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.IncorporatedResultSeal))
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_Add_Call) Return(_a0 bool, _a1 error) *MockIncorporatedResultSeals_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIncorporatedResultSeals_Add_Call) RunAndReturn(run func(*flow.IncorporatedResultSeal) (bool, error)) *MockIncorporatedResultSeals_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockIncorporatedResultSeals) All() []*flow.IncorporatedResultSeal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*flow.IncorporatedResultSeal
	if rf, ok := ret.Get(0).(func() []*flow.IncorporatedResultSeal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.IncorporatedResultSeal)
		}
	}

	return r0
}

// MockIncorporatedResultSeals_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockIncorporatedResultSeals_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockIncorporatedResultSeals_Expecter) All() *MockIncorporatedResultSeals_All_Call {
	return &MockIncorporatedResultSeals_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockIncorporatedResultSeals_All_Call) Run(run func()) *MockIncorporatedResultSeals_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_All_Call) Return(_a0 []*flow.IncorporatedResultSeal) *MockIncorporatedResultSeals_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncorporatedResultSeals_All_Call) RunAndReturn(run func() []*flow.IncorporatedResultSeal) *MockIncorporatedResultSeals_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: _a0
func (_m *MockIncorporatedResultSeals) ByID(_a0 flow.Identifier) (*flow.IncorporatedResultSeal, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.IncorporatedResultSeal
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.IncorporatedResultSeal, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.IncorporatedResultSeal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.IncorporatedResultSeal)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockIncorporatedResultSeals_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockIncorporatedResultSeals_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockIncorporatedResultSeals_Expecter) ByID(_a0 interface{}) *MockIncorporatedResultSeals_ByID_Call {
	return &MockIncorporatedResultSeals_ByID_Call{Call: _e.mock.On("ByID", _a0)}
}

func (_c *MockIncorporatedResultSeals_ByID_Call) Run(run func(_a0 flow.Identifier)) *MockIncorporatedResultSeals_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_ByID_Call) Return(_a0 *flow.IncorporatedResultSeal, _a1 bool) *MockIncorporatedResultSeals_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIncorporatedResultSeals_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.IncorporatedResultSeal, bool)) *MockIncorporatedResultSeals_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with no fields
func (_m *MockIncorporatedResultSeals) Clear() {
	_m.Called()
}

// MockIncorporatedResultSeals_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockIncorporatedResultSeals_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockIncorporatedResultSeals_Expecter) Clear() *MockIncorporatedResultSeals_Clear_Call {
	return &MockIncorporatedResultSeals_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockIncorporatedResultSeals_Clear_Call) Run(run func()) *MockIncorporatedResultSeals_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_Clear_Call) Return() *MockIncorporatedResultSeals_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIncorporatedResultSeals_Clear_Call) RunAndReturn(run func()) *MockIncorporatedResultSeals_Clear_Call {
	_c.Run(run)
	return _c
}

// Limit provides a mock function with no fields
func (_m *MockIncorporatedResultSeals) Limit() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockIncorporatedResultSeals_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type MockIncorporatedResultSeals_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
func (_e *MockIncorporatedResultSeals_Expecter) Limit() *MockIncorporatedResultSeals_Limit_Call {
	return &MockIncorporatedResultSeals_Limit_Call{Call: _e.mock.On("Limit")}
}

func (_c *MockIncorporatedResultSeals_Limit_Call) Run(run func()) *MockIncorporatedResultSeals_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_Limit_Call) Return(_a0 uint) *MockIncorporatedResultSeals_Limit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncorporatedResultSeals_Limit_Call) RunAndReturn(run func() uint) *MockIncorporatedResultSeals_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToHeight provides a mock function with given fields: height
func (_m *MockIncorporatedResultSeals) PruneUpToHeight(height uint64) error {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for PruneUpToHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIncorporatedResultSeals_PruneUpToHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToHeight'
type MockIncorporatedResultSeals_PruneUpToHeight_Call struct {
	*mock.Call
}

// PruneUpToHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockIncorporatedResultSeals_Expecter) PruneUpToHeight(height interface{}) *MockIncorporatedResultSeals_PruneUpToHeight_Call {
	return &MockIncorporatedResultSeals_PruneUpToHeight_Call{Call: _e.mock.On("PruneUpToHeight", height)}
}

func (_c *MockIncorporatedResultSeals_PruneUpToHeight_Call) Run(run func(height uint64)) *MockIncorporatedResultSeals_PruneUpToHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_PruneUpToHeight_Call) Return(_a0 error) *MockIncorporatedResultSeals_PruneUpToHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncorporatedResultSeals_PruneUpToHeight_Call) RunAndReturn(run func(uint64) error) *MockIncorporatedResultSeals_PruneUpToHeight_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: incorporatedResultID
func (_m *MockIncorporatedResultSeals) Remove(incorporatedResultID flow.Identifier) bool {
	ret := _m.Called(incorporatedResultID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(incorporatedResultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIncorporatedResultSeals_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockIncorporatedResultSeals_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - incorporatedResultID flow.Identifier
func (_e *MockIncorporatedResultSeals_Expecter) Remove(incorporatedResultID interface{}) *MockIncorporatedResultSeals_Remove_Call {
	return &MockIncorporatedResultSeals_Remove_Call{Call: _e.mock.On("Remove", incorporatedResultID)}
}

func (_c *MockIncorporatedResultSeals_Remove_Call) Run(run func(incorporatedResultID flow.Identifier)) *MockIncorporatedResultSeals_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_Remove_Call) Return(_a0 bool) *MockIncorporatedResultSeals_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncorporatedResultSeals_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockIncorporatedResultSeals_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockIncorporatedResultSeals) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockIncorporatedResultSeals_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockIncorporatedResultSeals_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockIncorporatedResultSeals_Expecter) Size() *MockIncorporatedResultSeals_Size_Call {
	return &MockIncorporatedResultSeals_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockIncorporatedResultSeals_Size_Call) Run(run func()) *MockIncorporatedResultSeals_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncorporatedResultSeals_Size_Call) Return(_a0 uint) *MockIncorporatedResultSeals_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncorporatedResultSeals_Size_Call) RunAndReturn(run func() uint) *MockIncorporatedResultSeals_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIncorporatedResultSeals creates a new instance of MockIncorporatedResultSeals. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIncorporatedResultSeals(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIncorporatedResultSeals {
	mock := &MockIncorporatedResultSeals{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
