// Code generated by mockery v1.0.0. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	verification "github.com/onflow/flow-go/model/verification"
)

// ResultDataPacks is an autogenerated mock type for the ResultDataPacks type
type ResultDataPacks struct {
	mock.Mock
}

// Add provides a mock function with given fields: result
func (_m *ResultDataPacks) Add(result *verification.ResultDataPack) bool {
	ret := _m.Called(result)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*verification.ResultDataPack) bool); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: resultID
func (_m *ResultDataPacks) Get(resultID flow.Identifier) (*verification.ResultDataPack, bool) {
	ret := _m.Called(resultID)

	var r0 *verification.ResultDataPack
	if rf, ok := ret.Get(0).(func(flow.Identifier) *verification.ResultDataPack); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.ResultDataPack)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(resultID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: resultID
func (_m *ResultDataPacks) Has(resultID flow.Identifier) bool {
	ret := _m.Called(resultID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(resultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Rem provides a mock function with given fields: resultID
func (_m *ResultDataPacks) Rem(resultID flow.Identifier) bool {
	ret := _m.Called(resultID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(resultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *ResultDataPacks) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}
