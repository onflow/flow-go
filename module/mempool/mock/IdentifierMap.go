// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockIdentifierMap is an autogenerated mock type for the IdentifierMap type
type MockIdentifierMap struct {
	mock.Mock
}

type MockIdentifierMap_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentifierMap) EXPECT() *MockIdentifierMap_Expecter {
	return &MockIdentifierMap_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: key, id
func (_m *MockIdentifierMap) Append(key flow.Identifier, id flow.Identifier) error {
	ret := _m.Called(key, id)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(key, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIdentifierMap_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockIdentifierMap_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - key flow.Identifier
//   - id flow.Identifier
func (_e *MockIdentifierMap_Expecter) Append(key interface{}, id interface{}) *MockIdentifierMap_Append_Call {
	return &MockIdentifierMap_Append_Call{Call: _e.mock.On("Append", key, id)}
}

func (_c *MockIdentifierMap_Append_Call) Run(run func(key flow.Identifier, id flow.Identifier)) *MockIdentifierMap_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockIdentifierMap_Append_Call) Return(_a0 error) *MockIdentifierMap_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIdentifierMap_Append_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) error) *MockIdentifierMap_Append_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockIdentifierMap) Get(key flow.Identifier) ([]flow.Identifier, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []flow.Identifier
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]flow.Identifier, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []flow.Identifier); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockIdentifierMap_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIdentifierMap_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key flow.Identifier
func (_e *MockIdentifierMap_Expecter) Get(key interface{}) *MockIdentifierMap_Get_Call {
	return &MockIdentifierMap_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockIdentifierMap_Get_Call) Run(run func(key flow.Identifier)) *MockIdentifierMap_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIdentifierMap_Get_Call) Return(_a0 []flow.Identifier, _a1 bool) *MockIdentifierMap_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIdentifierMap_Get_Call) RunAndReturn(run func(flow.Identifier) ([]flow.Identifier, bool)) *MockIdentifierMap_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key
func (_m *MockIdentifierMap) Has(key flow.Identifier) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIdentifierMap_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockIdentifierMap_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key flow.Identifier
func (_e *MockIdentifierMap_Expecter) Has(key interface{}) *MockIdentifierMap_Has_Call {
	return &MockIdentifierMap_Has_Call{Call: _e.mock.On("Has", key)}
}

func (_c *MockIdentifierMap_Has_Call) Run(run func(key flow.Identifier)) *MockIdentifierMap_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIdentifierMap_Has_Call) Return(_a0 bool) *MockIdentifierMap_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIdentifierMap_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockIdentifierMap_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with no fields
func (_m *MockIdentifierMap) Keys() ([]flow.Identifier, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 []flow.Identifier
	var r1 bool
	if rf, ok := ret.Get(0).(func() ([]flow.Identifier, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockIdentifierMap_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockIdentifierMap_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *MockIdentifierMap_Expecter) Keys() *MockIdentifierMap_Keys_Call {
	return &MockIdentifierMap_Keys_Call{Call: _e.mock.On("Keys")}
}

func (_c *MockIdentifierMap_Keys_Call) Run(run func()) *MockIdentifierMap_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentifierMap_Keys_Call) Return(_a0 []flow.Identifier, _a1 bool) *MockIdentifierMap_Keys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIdentifierMap_Keys_Call) RunAndReturn(run func() ([]flow.Identifier, bool)) *MockIdentifierMap_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: key
func (_m *MockIdentifierMap) Remove(key flow.Identifier) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIdentifierMap_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockIdentifierMap_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - key flow.Identifier
func (_e *MockIdentifierMap_Expecter) Remove(key interface{}) *MockIdentifierMap_Remove_Call {
	return &MockIdentifierMap_Remove_Call{Call: _e.mock.On("Remove", key)}
}

func (_c *MockIdentifierMap_Remove_Call) Run(run func(key flow.Identifier)) *MockIdentifierMap_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIdentifierMap_Remove_Call) Return(_a0 bool) *MockIdentifierMap_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIdentifierMap_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockIdentifierMap_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIdFromKey provides a mock function with given fields: key, id
func (_m *MockIdentifierMap) RemoveIdFromKey(key flow.Identifier, id flow.Identifier) error {
	ret := _m.Called(key, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIdFromKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(key, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIdentifierMap_RemoveIdFromKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIdFromKey'
type MockIdentifierMap_RemoveIdFromKey_Call struct {
	*mock.Call
}

// RemoveIdFromKey is a helper method to define mock.On call
//   - key flow.Identifier
//   - id flow.Identifier
func (_e *MockIdentifierMap_Expecter) RemoveIdFromKey(key interface{}, id interface{}) *MockIdentifierMap_RemoveIdFromKey_Call {
	return &MockIdentifierMap_RemoveIdFromKey_Call{Call: _e.mock.On("RemoveIdFromKey", key, id)}
}

func (_c *MockIdentifierMap_RemoveIdFromKey_Call) Run(run func(key flow.Identifier, id flow.Identifier)) *MockIdentifierMap_RemoveIdFromKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockIdentifierMap_RemoveIdFromKey_Call) Return(_a0 error) *MockIdentifierMap_RemoveIdFromKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIdentifierMap_RemoveIdFromKey_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) error) *MockIdentifierMap_RemoveIdFromKey_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockIdentifierMap) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockIdentifierMap_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockIdentifierMap_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockIdentifierMap_Expecter) Size() *MockIdentifierMap_Size_Call {
	return &MockIdentifierMap_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockIdentifierMap_Size_Call) Run(run func()) *MockIdentifierMap_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentifierMap_Size_Call) Return(_a0 uint) *MockIdentifierMap_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIdentifierMap_Size_Call) RunAndReturn(run func() uint) *MockIdentifierMap_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIdentifierMap creates a new instance of MockIdentifierMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentifierMap(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentifierMap {
	mock := &MockIdentifierMap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
