// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	mempool "github.com/onflow/flow-go/module/mempool"
	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockDNSCache is an autogenerated mock type for the DNSCache type
type MockDNSCache struct {
	mock.Mock
}

type MockDNSCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDNSCache) EXPECT() *MockDNSCache_Expecter {
	return &MockDNSCache_Expecter{mock: &_m.Mock}
}

// GetDomainIp provides a mock function with given fields: _a0
func (_m *MockDNSCache) GetDomainIp(_a0 string) (*mempool.IpRecord, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainIp")
	}

	var r0 *mempool.IpRecord
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*mempool.IpRecord, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *mempool.IpRecord); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mempool.IpRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDNSCache_GetDomainIp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainIp'
type MockDNSCache_GetDomainIp_Call struct {
	*mock.Call
}

// GetDomainIp is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDNSCache_Expecter) GetDomainIp(_a0 interface{}) *MockDNSCache_GetDomainIp_Call {
	return &MockDNSCache_GetDomainIp_Call{Call: _e.mock.On("GetDomainIp", _a0)}
}

func (_c *MockDNSCache_GetDomainIp_Call) Run(run func(_a0 string)) *MockDNSCache_GetDomainIp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDNSCache_GetDomainIp_Call) Return(_a0 *mempool.IpRecord, _a1 bool) *MockDNSCache_GetDomainIp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDNSCache_GetDomainIp_Call) RunAndReturn(run func(string) (*mempool.IpRecord, bool)) *MockDNSCache_GetDomainIp_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxtRecord provides a mock function with given fields: _a0
func (_m *MockDNSCache) GetTxtRecord(_a0 string) (*mempool.TxtRecord, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTxtRecord")
	}

	var r0 *mempool.TxtRecord
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*mempool.TxtRecord, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *mempool.TxtRecord); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mempool.TxtRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDNSCache_GetTxtRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxtRecord'
type MockDNSCache_GetTxtRecord_Call struct {
	*mock.Call
}

// GetTxtRecord is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDNSCache_Expecter) GetTxtRecord(_a0 interface{}) *MockDNSCache_GetTxtRecord_Call {
	return &MockDNSCache_GetTxtRecord_Call{Call: _e.mock.On("GetTxtRecord", _a0)}
}

func (_c *MockDNSCache_GetTxtRecord_Call) Run(run func(_a0 string)) *MockDNSCache_GetTxtRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDNSCache_GetTxtRecord_Call) Return(_a0 *mempool.TxtRecord, _a1 bool) *MockDNSCache_GetTxtRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDNSCache_GetTxtRecord_Call) RunAndReturn(run func(string) (*mempool.TxtRecord, bool)) *MockDNSCache_GetTxtRecord_Call {
	_c.Call.Return(run)
	return _c
}

// LockIPDomain provides a mock function with given fields: _a0
func (_m *MockDNSCache) LockIPDomain(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LockIPDomain")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDNSCache_LockIPDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockIPDomain'
type MockDNSCache_LockIPDomain_Call struct {
	*mock.Call
}

// LockIPDomain is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDNSCache_Expecter) LockIPDomain(_a0 interface{}) *MockDNSCache_LockIPDomain_Call {
	return &MockDNSCache_LockIPDomain_Call{Call: _e.mock.On("LockIPDomain", _a0)}
}

func (_c *MockDNSCache_LockIPDomain_Call) Run(run func(_a0 string)) *MockDNSCache_LockIPDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDNSCache_LockIPDomain_Call) Return(_a0 bool, _a1 error) *MockDNSCache_LockIPDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDNSCache_LockIPDomain_Call) RunAndReturn(run func(string) (bool, error)) *MockDNSCache_LockIPDomain_Call {
	_c.Call.Return(run)
	return _c
}

// LockTxtRecord provides a mock function with given fields: _a0
func (_m *MockDNSCache) LockTxtRecord(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LockTxtRecord")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDNSCache_LockTxtRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockTxtRecord'
type MockDNSCache_LockTxtRecord_Call struct {
	*mock.Call
}

// LockTxtRecord is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDNSCache_Expecter) LockTxtRecord(_a0 interface{}) *MockDNSCache_LockTxtRecord_Call {
	return &MockDNSCache_LockTxtRecord_Call{Call: _e.mock.On("LockTxtRecord", _a0)}
}

func (_c *MockDNSCache_LockTxtRecord_Call) Run(run func(_a0 string)) *MockDNSCache_LockTxtRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDNSCache_LockTxtRecord_Call) Return(_a0 bool, _a1 error) *MockDNSCache_LockTxtRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDNSCache_LockTxtRecord_Call) RunAndReturn(run func(string) (bool, error)) *MockDNSCache_LockTxtRecord_Call {
	_c.Call.Return(run)
	return _c
}

// PutIpDomain provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDNSCache) PutIpDomain(_a0 string, _a1 []net.IPAddr, _a2 int64) bool {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PutIpDomain")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []net.IPAddr, int64) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockDNSCache_PutIpDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutIpDomain'
type MockDNSCache_PutIpDomain_Call struct {
	*mock.Call
}

// PutIpDomain is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []net.IPAddr
//   - _a2 int64
func (_e *MockDNSCache_Expecter) PutIpDomain(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockDNSCache_PutIpDomain_Call {
	return &MockDNSCache_PutIpDomain_Call{Call: _e.mock.On("PutIpDomain", _a0, _a1, _a2)}
}

func (_c *MockDNSCache_PutIpDomain_Call) Run(run func(_a0 string, _a1 []net.IPAddr, _a2 int64)) *MockDNSCache_PutIpDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]net.IPAddr), args[2].(int64))
	})
	return _c
}

func (_c *MockDNSCache_PutIpDomain_Call) Return(_a0 bool) *MockDNSCache_PutIpDomain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSCache_PutIpDomain_Call) RunAndReturn(run func(string, []net.IPAddr, int64) bool) *MockDNSCache_PutIpDomain_Call {
	_c.Call.Return(run)
	return _c
}

// PutTxtRecord provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDNSCache) PutTxtRecord(_a0 string, _a1 []string, _a2 int64) bool {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PutTxtRecord")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []string, int64) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockDNSCache_PutTxtRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTxtRecord'
type MockDNSCache_PutTxtRecord_Call struct {
	*mock.Call
}

// PutTxtRecord is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []string
//   - _a2 int64
func (_e *MockDNSCache_Expecter) PutTxtRecord(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockDNSCache_PutTxtRecord_Call {
	return &MockDNSCache_PutTxtRecord_Call{Call: _e.mock.On("PutTxtRecord", _a0, _a1, _a2)}
}

func (_c *MockDNSCache_PutTxtRecord_Call) Run(run func(_a0 string, _a1 []string, _a2 int64)) *MockDNSCache_PutTxtRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(int64))
	})
	return _c
}

func (_c *MockDNSCache_PutTxtRecord_Call) Return(_a0 bool) *MockDNSCache_PutTxtRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSCache_PutTxtRecord_Call) RunAndReturn(run func(string, []string, int64) bool) *MockDNSCache_PutTxtRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIp provides a mock function with given fields: _a0
func (_m *MockDNSCache) RemoveIp(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIp")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockDNSCache_RemoveIp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIp'
type MockDNSCache_RemoveIp_Call struct {
	*mock.Call
}

// RemoveIp is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDNSCache_Expecter) RemoveIp(_a0 interface{}) *MockDNSCache_RemoveIp_Call {
	return &MockDNSCache_RemoveIp_Call{Call: _e.mock.On("RemoveIp", _a0)}
}

func (_c *MockDNSCache_RemoveIp_Call) Run(run func(_a0 string)) *MockDNSCache_RemoveIp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDNSCache_RemoveIp_Call) Return(_a0 bool) *MockDNSCache_RemoveIp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSCache_RemoveIp_Call) RunAndReturn(run func(string) bool) *MockDNSCache_RemoveIp_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTxt provides a mock function with given fields: _a0
func (_m *MockDNSCache) RemoveTxt(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTxt")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockDNSCache_RemoveTxt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTxt'
type MockDNSCache_RemoveTxt_Call struct {
	*mock.Call
}

// RemoveTxt is a helper method to define mock.On call
//   - _a0 string
func (_e *MockDNSCache_Expecter) RemoveTxt(_a0 interface{}) *MockDNSCache_RemoveTxt_Call {
	return &MockDNSCache_RemoveTxt_Call{Call: _e.mock.On("RemoveTxt", _a0)}
}

func (_c *MockDNSCache_RemoveTxt_Call) Run(run func(_a0 string)) *MockDNSCache_RemoveTxt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDNSCache_RemoveTxt_Call) Return(_a0 bool) *MockDNSCache_RemoveTxt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSCache_RemoveTxt_Call) RunAndReturn(run func(string) bool) *MockDNSCache_RemoveTxt_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockDNSCache) Size() (uint, uint) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	var r1 uint
	if rf, ok := ret.Get(0).(func() (uint, uint)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func() uint); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint)
	}

	return r0, r1
}

// MockDNSCache_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockDNSCache_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockDNSCache_Expecter) Size() *MockDNSCache_Size_Call {
	return &MockDNSCache_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockDNSCache_Size_Call) Run(run func()) *MockDNSCache_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDNSCache_Size_Call) Return(_a0 uint, _a1 uint) *MockDNSCache_Size_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDNSCache_Size_Call) RunAndReturn(run func() (uint, uint)) *MockDNSCache_Size_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIPDomain provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDNSCache) UpdateIPDomain(_a0 string, _a1 []net.IPAddr, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIPDomain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []net.IPAddr, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDNSCache_UpdateIPDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIPDomain'
type MockDNSCache_UpdateIPDomain_Call struct {
	*mock.Call
}

// UpdateIPDomain is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []net.IPAddr
//   - _a2 int64
func (_e *MockDNSCache_Expecter) UpdateIPDomain(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockDNSCache_UpdateIPDomain_Call {
	return &MockDNSCache_UpdateIPDomain_Call{Call: _e.mock.On("UpdateIPDomain", _a0, _a1, _a2)}
}

func (_c *MockDNSCache_UpdateIPDomain_Call) Run(run func(_a0 string, _a1 []net.IPAddr, _a2 int64)) *MockDNSCache_UpdateIPDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]net.IPAddr), args[2].(int64))
	})
	return _c
}

func (_c *MockDNSCache_UpdateIPDomain_Call) Return(_a0 error) *MockDNSCache_UpdateIPDomain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSCache_UpdateIPDomain_Call) RunAndReturn(run func(string, []net.IPAddr, int64) error) *MockDNSCache_UpdateIPDomain_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTxtRecord provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDNSCache) UpdateTxtRecord(_a0 string, _a1 []string, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTxtRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDNSCache_UpdateTxtRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTxtRecord'
type MockDNSCache_UpdateTxtRecord_Call struct {
	*mock.Call
}

// UpdateTxtRecord is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []string
//   - _a2 int64
func (_e *MockDNSCache_Expecter) UpdateTxtRecord(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockDNSCache_UpdateTxtRecord_Call {
	return &MockDNSCache_UpdateTxtRecord_Call{Call: _e.mock.On("UpdateTxtRecord", _a0, _a1, _a2)}
}

func (_c *MockDNSCache_UpdateTxtRecord_Call) Run(run func(_a0 string, _a1 []string, _a2 int64)) *MockDNSCache_UpdateTxtRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(int64))
	})
	return _c
}

func (_c *MockDNSCache_UpdateTxtRecord_Call) Return(_a0 error) *MockDNSCache_UpdateTxtRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSCache_UpdateTxtRecord_Call) RunAndReturn(run func(string, []string, int64) error) *MockDNSCache_UpdateTxtRecord_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDNSCache creates a new instance of MockDNSCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDNSCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDNSCache {
	mock := &MockDNSCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
