// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockBlockFilter is an autogenerated mock type for the BlockFilter type
type MockBlockFilter struct {
	mock.Mock
}

type MockBlockFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockFilter) EXPECT() *MockBlockFilter_Expecter {
	return &MockBlockFilter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: header
func (_m *MockBlockFilter) Execute(header *flow.Header) bool {
	ret := _m.Called(header)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.Header) bool); ok {
		r0 = rf(header)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBlockFilter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockBlockFilter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - header *flow.Header
func (_e *MockBlockFilter_Expecter) Execute(header interface{}) *MockBlockFilter_Execute_Call {
	return &MockBlockFilter_Execute_Call{Call: _e.mock.On("Execute", header)}
}

func (_c *MockBlockFilter_Execute_Call) Run(run func(header *flow.Header)) *MockBlockFilter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header))
	})
	return _c
}

func (_c *MockBlockFilter_Execute_Call) Return(_a0 bool) *MockBlockFilter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockFilter_Execute_Call) RunAndReturn(run func(*flow.Header) bool) *MockBlockFilter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockFilter creates a new instance of MockBlockFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockFilter {
	mock := &MockBlockFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
