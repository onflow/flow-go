// Code generated by mockery v2.53.4. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactions is an autogenerated mock type for the Transactions type
type MockTransactions struct {
	mock.Mock
}

type MockTransactions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactions) EXPECT() *MockTransactions_Expecter {
	return &MockTransactions_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: tx
func (_m *MockTransactions) Add(tx *flow.TransactionBody) bool {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.TransactionBody) bool); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactions_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockTransactions_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - tx *flow.TransactionBody
func (_e *MockTransactions_Expecter) Add(tx interface{}) *MockTransactions_Add_Call {
	return &MockTransactions_Add_Call{Call: _e.mock.On("Add", tx)}
}

func (_c *MockTransactions_Add_Call) Run(run func(tx *flow.TransactionBody)) *MockTransactions_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TransactionBody))
	})
	return _c
}

func (_c *MockTransactions_Add_Call) Return(_a0 bool) *MockTransactions_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactions_Add_Call) RunAndReturn(run func(*flow.TransactionBody) bool) *MockTransactions_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *MockTransactions) All() []*flow.TransactionBody {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*flow.TransactionBody
	if rf, ok := ret.Get(0).(func() []*flow.TransactionBody); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.TransactionBody)
		}
	}

	return r0
}

// MockTransactions_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockTransactions_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockTransactions_Expecter) All() *MockTransactions_All_Call {
	return &MockTransactions_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockTransactions_All_Call) Run(run func()) *MockTransactions_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactions_All_Call) Return(_a0 []*flow.TransactionBody) *MockTransactions_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactions_All_Call) RunAndReturn(run func() []*flow.TransactionBody) *MockTransactions_All_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: txID
func (_m *MockTransactions) ByID(txID flow.Identifier) (*flow.TransactionBody, bool) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.TransactionBody
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.TransactionBody, bool)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.TransactionBody); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockTransactions_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockTransactions_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockTransactions_Expecter) ByID(txID interface{}) *MockTransactions_ByID_Call {
	return &MockTransactions_ByID_Call{Call: _e.mock.On("ByID", txID)}
}

func (_c *MockTransactions_ByID_Call) Run(run func(txID flow.Identifier)) *MockTransactions_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactions_ByID_Call) Return(_a0 *flow.TransactionBody, _a1 bool) *MockTransactions_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactions_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.TransactionBody, bool)) *MockTransactions_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with no fields
func (_m *MockTransactions) Clear() {
	_m.Called()
}

// MockTransactions_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockTransactions_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockTransactions_Expecter) Clear() *MockTransactions_Clear_Call {
	return &MockTransactions_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockTransactions_Clear_Call) Run(run func()) *MockTransactions_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactions_Clear_Call) Return() *MockTransactions_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactions_Clear_Call) RunAndReturn(run func()) *MockTransactions_Clear_Call {
	_c.Run(run)
	return _c
}

// Has provides a mock function with given fields: txID
func (_m *MockTransactions) Has(txID flow.Identifier) bool {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(txID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactions_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockTransactions_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockTransactions_Expecter) Has(txID interface{}) *MockTransactions_Has_Call {
	return &MockTransactions_Has_Call{Call: _e.mock.On("Has", txID)}
}

func (_c *MockTransactions_Has_Call) Run(run func(txID flow.Identifier)) *MockTransactions_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactions_Has_Call) Return(_a0 bool) *MockTransactions_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactions_Has_Call) RunAndReturn(run func(flow.Identifier) bool) *MockTransactions_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: txID
func (_m *MockTransactions) Remove(txID flow.Identifier) bool {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(txID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactions_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockTransactions_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockTransactions_Expecter) Remove(txID interface{}) *MockTransactions_Remove_Call {
	return &MockTransactions_Remove_Call{Call: _e.mock.On("Remove", txID)}
}

func (_c *MockTransactions_Remove_Call) Run(run func(txID flow.Identifier)) *MockTransactions_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactions_Remove_Call) Return(_a0 bool) *MockTransactions_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactions_Remove_Call) RunAndReturn(run func(flow.Identifier) bool) *MockTransactions_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockTransactions) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockTransactions_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockTransactions_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockTransactions_Expecter) Size() *MockTransactions_Size_Call {
	return &MockTransactions_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockTransactions_Size_Call) Run(run func()) *MockTransactions_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactions_Size_Call) Return(_a0 uint) *MockTransactions_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactions_Size_Call) RunAndReturn(run func() uint) *MockTransactions_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactions creates a new instance of MockTransactions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactions {
	mock := &MockTransactions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
