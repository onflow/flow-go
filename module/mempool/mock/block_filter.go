// Code generated by mockery v2.12.1. DO NOT EDIT.

package mempool

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// BlockFilter is an autogenerated mock type for the BlockFilter type
type BlockFilter struct {
	mock.Mock
}

// Execute provides a mock function with given fields: header
func (_m *BlockFilter) Execute(header *flow.Header) bool {
	ret := _m.Called(header)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.Header) bool); ok {
		r0 = rf(header)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewBlockFilter creates a new instance of BlockFilter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlockFilter(t testing.TB) *BlockFilter {
	mock := &BlockFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
