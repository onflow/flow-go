// Code generated by mockery v2.53.4. DO NOT EDIT.

package state_synchronization

import (
	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"
	mock "github.com/stretchr/testify/mock"
)

// MockOnExecutionDataReceivedConsumer is an autogenerated mock type for the OnExecutionDataReceivedConsumer type
type MockOnExecutionDataReceivedConsumer struct {
	mock.Mock
}

type MockOnExecutionDataReceivedConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnExecutionDataReceivedConsumer) EXPECT() *MockOnExecutionDataReceivedConsumer_Expecter {
	return &MockOnExecutionDataReceivedConsumer_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockOnExecutionDataReceivedConsumer) Execute(_a0 *execution_data.BlockExecutionDataEntity) {
	_m.Called(_a0)
}

// MockOnExecutionDataReceivedConsumer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockOnExecutionDataReceivedConsumer_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *execution_data.BlockExecutionDataEntity
func (_e *MockOnExecutionDataReceivedConsumer_Expecter) Execute(_a0 interface{}) *MockOnExecutionDataReceivedConsumer_Execute_Call {
	return &MockOnExecutionDataReceivedConsumer_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockOnExecutionDataReceivedConsumer_Execute_Call) Run(run func(_a0 *execution_data.BlockExecutionDataEntity)) *MockOnExecutionDataReceivedConsumer_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*execution_data.BlockExecutionDataEntity))
	})
	return _c
}

func (_c *MockOnExecutionDataReceivedConsumer_Execute_Call) Return() *MockOnExecutionDataReceivedConsumer_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOnExecutionDataReceivedConsumer_Execute_Call) RunAndReturn(run func(*execution_data.BlockExecutionDataEntity)) *MockOnExecutionDataReceivedConsumer_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockOnExecutionDataReceivedConsumer creates a new instance of MockOnExecutionDataReceivedConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnExecutionDataReceivedConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnExecutionDataReceivedConsumer {
	mock := &MockOnExecutionDataReceivedConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
