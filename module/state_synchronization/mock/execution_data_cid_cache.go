// Code generated by mockery v1.0.0. DO NOT EDIT.

package state_synchronization

import (
	cid "github.com/ipfs/go-cid"
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	state_synchronization "github.com/onflow/flow-go/module/state_synchronization"
)

// ExecutionDataCIDCache is an autogenerated mock type for the ExecutionDataCIDCache type
type ExecutionDataCIDCache struct {
	mock.Mock
}

// BlobRecords provides a mock function with given fields:
func (_m *ExecutionDataCIDCache) BlobRecords() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// BlobTreeRecords provides a mock function with given fields:
func (_m *ExecutionDataCIDCache) BlobTreeRecords() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Get provides a mock function with given fields: c
func (_m *ExecutionDataCIDCache) Get(c cid.Cid) (state_synchronization.BlobRecord, error) {
	ret := _m.Called(c)

	var r0 state_synchronization.BlobRecord
	if rf, ok := ret.Get(0).(func(cid.Cid) state_synchronization.BlobRecord); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(state_synchronization.BlobRecord)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cid.Cid) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: header, blobTree
func (_m *ExecutionDataCIDCache) Insert(header *flow.Header, blobTree state_synchronization.BlobTree) {
	_m.Called(header, blobTree)
}
