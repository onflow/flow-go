// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"
	mock "github.com/stretchr/testify/mock"
)

// MockExecutionDataRequester is an autogenerated mock type for the ExecutionDataRequester type
type MockExecutionDataRequester struct {
	mock.Mock
}

type MockExecutionDataRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionDataRequester) EXPECT() *MockExecutionDataRequester_Expecter {
	return &MockExecutionDataRequester_Expecter{mock: &_m.Mock}
}

// RequestExecutionData provides a mock function with given fields: ctx
func (_m *MockExecutionDataRequester) RequestExecutionData(ctx context.Context) (*execution_data.BlockExecutionData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RequestExecutionData")
	}

	var r0 *execution_data.BlockExecutionData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*execution_data.BlockExecutionData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *execution_data.BlockExecutionData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution_data.BlockExecutionData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionDataRequester_RequestExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestExecutionData'
type MockExecutionDataRequester_RequestExecutionData_Call struct {
	*mock.Call
}

// RequestExecutionData is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockExecutionDataRequester_Expecter) RequestExecutionData(ctx interface{}) *MockExecutionDataRequester_RequestExecutionData_Call {
	return &MockExecutionDataRequester_RequestExecutionData_Call{Call: _e.mock.On("RequestExecutionData", ctx)}
}

func (_c *MockExecutionDataRequester_RequestExecutionData_Call) Run(run func(ctx context.Context)) *MockExecutionDataRequester_RequestExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockExecutionDataRequester_RequestExecutionData_Call) Return(_a0 *execution_data.BlockExecutionData, _a1 error) *MockExecutionDataRequester_RequestExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionDataRequester_RequestExecutionData_Call) RunAndReturn(run func(context.Context) (*execution_data.BlockExecutionData, error)) *MockExecutionDataRequester_RequestExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionDataRequester creates a new instance of MockExecutionDataRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionDataRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionDataRequester {
	mock := &MockExecutionDataRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
