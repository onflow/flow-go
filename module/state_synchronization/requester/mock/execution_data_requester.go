// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"
	mock "github.com/stretchr/testify/mock"
)

// ExecutionDataRequester is an autogenerated mock type for the ExecutionDataRequester type
type ExecutionDataRequester struct {
	mock.Mock
}

// RequestExecutionData provides a mock function with given fields: ctx
func (_m *ExecutionDataRequester) RequestExecutionData(ctx context.Context) (*execution_data.BlockExecutionData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RequestExecutionData")
	}

	var r0 *execution_data.BlockExecutionData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*execution_data.BlockExecutionData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *execution_data.BlockExecutionData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution_data.BlockExecutionData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExecutionDataRequester creates a new instance of ExecutionDataRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionDataRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionDataRequester {
	mock := &ExecutionDataRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
