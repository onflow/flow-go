// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockVertex is an autogenerated mock type for the Vertex type
type MockVertex struct {
	mock.Mock
}

type MockVertex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVertex) EXPECT() *MockVertex_Expecter {
	return &MockVertex_Expecter{mock: &_m.Mock}
}

// Level provides a mock function with no fields
func (_m *MockVertex) Level() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockVertex_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type MockVertex_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *MockVertex_Expecter) Level() *MockVertex_Level_Call {
	return &MockVertex_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *MockVertex_Level_Call) Run(run func()) *MockVertex_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVertex_Level_Call) Return(_a0 uint64) *MockVertex_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVertex_Level_Call) RunAndReturn(run func() uint64) *MockVertex_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Parent provides a mock function with no fields
func (_m *MockVertex) Parent() (flow.Identifier, uint64) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parent")
	}

	var r0 flow.Identifier
	var r1 uint64
	if rf, ok := ret.Get(0).(func() (flow.Identifier, uint64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func() uint64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// MockVertex_Parent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parent'
type MockVertex_Parent_Call struct {
	*mock.Call
}

// Parent is a helper method to define mock.On call
func (_e *MockVertex_Expecter) Parent() *MockVertex_Parent_Call {
	return &MockVertex_Parent_Call{Call: _e.mock.On("Parent")}
}

func (_c *MockVertex_Parent_Call) Run(run func()) *MockVertex_Parent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVertex_Parent_Call) Return(_a0 flow.Identifier, _a1 uint64) *MockVertex_Parent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVertex_Parent_Call) RunAndReturn(run func() (flow.Identifier, uint64)) *MockVertex_Parent_Call {
	_c.Call.Return(run)
	return _c
}

// VertexID provides a mock function with no fields
func (_m *MockVertex) VertexID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VertexID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockVertex_VertexID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VertexID'
type MockVertex_VertexID_Call struct {
	*mock.Call
}

// VertexID is a helper method to define mock.On call
func (_e *MockVertex_Expecter) VertexID() *MockVertex_VertexID_Call {
	return &MockVertex_VertexID_Call{Call: _e.mock.On("VertexID")}
}

func (_c *MockVertex_VertexID_Call) Run(run func()) *MockVertex_VertexID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVertex_VertexID_Call) Return(_a0 flow.Identifier) *MockVertex_VertexID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVertex_VertexID_Call) RunAndReturn(run func() flow.Identifier) *MockVertex_VertexID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVertex creates a new instance of MockVertex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVertex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVertex {
	mock := &MockVertex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
