// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCore is an autogenerated mock type for the Core type
type MockCore struct {
	mock.Mock
}

type MockCore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCore) EXPECT() *MockCore_Expecter {
	return &MockCore_Expecter{mock: &_m.Mock}
}

// Abandon provides a mock function with no fields
func (_m *MockCore) Abandon() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Abandon")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCore_Abandon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abandon'
type MockCore_Abandon_Call struct {
	*mock.Call
}

// Abandon is a helper method to define mock.On call
func (_e *MockCore_Expecter) Abandon() *MockCore_Abandon_Call {
	return &MockCore_Abandon_Call{Call: _e.mock.On("Abandon")}
}

func (_c *MockCore_Abandon_Call) Run(run func()) *MockCore_Abandon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCore_Abandon_Call) Return(_a0 error) *MockCore_Abandon_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCore_Abandon_Call) RunAndReturn(run func() error) *MockCore_Abandon_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: ctx
func (_m *MockCore) Download(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCore_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockCore_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCore_Expecter) Download(ctx interface{}) *MockCore_Download_Call {
	return &MockCore_Download_Call{Call: _e.mock.On("Download", ctx)}
}

func (_c *MockCore_Download_Call) Run(run func(ctx context.Context)) *MockCore_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCore_Download_Call) Return(_a0 error) *MockCore_Download_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCore_Download_Call) RunAndReturn(run func(context.Context) error) *MockCore_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with no fields
func (_m *MockCore) Index() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockCore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
func (_e *MockCore_Expecter) Index() *MockCore_Index_Call {
	return &MockCore_Index_Call{Call: _e.mock.On("Index")}
}

func (_c *MockCore_Index_Call) Run(run func()) *MockCore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCore_Index_Call) Return(_a0 error) *MockCore_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCore_Index_Call) RunAndReturn(run func() error) *MockCore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with no fields
func (_m *MockCore) Persist() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Persist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCore_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type MockCore_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
func (_e *MockCore_Expecter) Persist() *MockCore_Persist_Call {
	return &MockCore_Persist_Call{Call: _e.mock.On("Persist")}
}

func (_c *MockCore_Persist_Call) Run(run func()) *MockCore_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCore_Persist_Call) Return(_a0 error) *MockCore_Persist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCore_Persist_Call) RunAndReturn(run func() error) *MockCore_Persist_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCore creates a new instance of MockCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCore {
	mock := &MockCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
