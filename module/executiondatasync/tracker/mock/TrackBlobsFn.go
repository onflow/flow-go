// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocktracker

import (
	cid "github.com/ipfs/go-cid"
	mock "github.com/stretchr/testify/mock"
)

// MockTrackBlobsFn is an autogenerated mock type for the TrackBlobsFn type
type MockTrackBlobsFn struct {
	mock.Mock
}

type MockTrackBlobsFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrackBlobsFn) EXPECT() *MockTrackBlobsFn_Expecter {
	return &MockTrackBlobsFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: blockHeight, cids
func (_m *MockTrackBlobsFn) Execute(blockHeight uint64, cids ...cid.Cid) error {
	_va := make([]interface{}, len(cids))
	for _i := range cids {
		_va[_i] = cids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, blockHeight)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, ...cid.Cid) error); ok {
		r0 = rf(blockHeight, cids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTrackBlobsFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockTrackBlobsFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - blockHeight uint64
//   - cids ...cid.Cid
func (_e *MockTrackBlobsFn_Expecter) Execute(blockHeight interface{}, cids ...interface{}) *MockTrackBlobsFn_Execute_Call {
	return &MockTrackBlobsFn_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{blockHeight}, cids...)...)}
}

func (_c *MockTrackBlobsFn_Execute_Call) Run(run func(blockHeight uint64, cids ...cid.Cid)) *MockTrackBlobsFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cid.Cid, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(cid.Cid)
			}
		}
		run(args[0].(uint64), variadicArgs...)
	})
	return _c
}

func (_c *MockTrackBlobsFn_Execute_Call) Return(_a0 error) *MockTrackBlobsFn_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrackBlobsFn_Execute_Call) RunAndReturn(run func(uint64, ...cid.Cid) error) *MockTrackBlobsFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrackBlobsFn creates a new instance of MockTrackBlobsFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrackBlobsFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrackBlobsFn {
	mock := &MockTrackBlobsFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
