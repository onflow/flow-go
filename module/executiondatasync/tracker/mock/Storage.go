// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocktracker

import (
	tracker "github.com/onflow/flow-go/module/executiondatasync/tracker"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// GetFulfilledHeight provides a mock function with no fields
func (_m *MockStorage) GetFulfilledHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFulfilledHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetFulfilledHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFulfilledHeight'
type MockStorage_GetFulfilledHeight_Call struct {
	*mock.Call
}

// GetFulfilledHeight is a helper method to define mock.On call
func (_e *MockStorage_Expecter) GetFulfilledHeight() *MockStorage_GetFulfilledHeight_Call {
	return &MockStorage_GetFulfilledHeight_Call{Call: _e.mock.On("GetFulfilledHeight")}
}

func (_c *MockStorage_GetFulfilledHeight_Call) Run(run func()) *MockStorage_GetFulfilledHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_GetFulfilledHeight_Call) Return(_a0 uint64, _a1 error) *MockStorage_GetFulfilledHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetFulfilledHeight_Call) RunAndReturn(run func() (uint64, error)) *MockStorage_GetFulfilledHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrunedHeight provides a mock function with no fields
func (_m *MockStorage) GetPrunedHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrunedHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetPrunedHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrunedHeight'
type MockStorage_GetPrunedHeight_Call struct {
	*mock.Call
}

// GetPrunedHeight is a helper method to define mock.On call
func (_e *MockStorage_Expecter) GetPrunedHeight() *MockStorage_GetPrunedHeight_Call {
	return &MockStorage_GetPrunedHeight_Call{Call: _e.mock.On("GetPrunedHeight")}
}

func (_c *MockStorage_GetPrunedHeight_Call) Run(run func()) *MockStorage_GetPrunedHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_GetPrunedHeight_Call) Return(_a0 uint64, _a1 error) *MockStorage_GetPrunedHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetPrunedHeight_Call) RunAndReturn(run func() (uint64, error)) *MockStorage_GetPrunedHeight_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUpToHeight provides a mock function with given fields: height
func (_m *MockStorage) PruneUpToHeight(height uint64) error {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for PruneUpToHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_PruneUpToHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUpToHeight'
type MockStorage_PruneUpToHeight_Call struct {
	*mock.Call
}

// PruneUpToHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockStorage_Expecter) PruneUpToHeight(height interface{}) *MockStorage_PruneUpToHeight_Call {
	return &MockStorage_PruneUpToHeight_Call{Call: _e.mock.On("PruneUpToHeight", height)}
}

func (_c *MockStorage_PruneUpToHeight_Call) Run(run func(height uint64)) *MockStorage_PruneUpToHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockStorage_PruneUpToHeight_Call) Return(_a0 error) *MockStorage_PruneUpToHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_PruneUpToHeight_Call) RunAndReturn(run func(uint64) error) *MockStorage_PruneUpToHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SetFulfilledHeight provides a mock function with given fields: height
func (_m *MockStorage) SetFulfilledHeight(height uint64) error {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for SetFulfilledHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_SetFulfilledHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFulfilledHeight'
type MockStorage_SetFulfilledHeight_Call struct {
	*mock.Call
}

// SetFulfilledHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockStorage_Expecter) SetFulfilledHeight(height interface{}) *MockStorage_SetFulfilledHeight_Call {
	return &MockStorage_SetFulfilledHeight_Call{Call: _e.mock.On("SetFulfilledHeight", height)}
}

func (_c *MockStorage_SetFulfilledHeight_Call) Run(run func(height uint64)) *MockStorage_SetFulfilledHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockStorage_SetFulfilledHeight_Call) Return(_a0 error) *MockStorage_SetFulfilledHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_SetFulfilledHeight_Call) RunAndReturn(run func(uint64) error) *MockStorage_SetFulfilledHeight_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockStorage) Update(_a0 tracker.UpdateFn) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(tracker.UpdateFn) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 tracker.UpdateFn
func (_e *MockStorage_Expecter) Update(_a0 interface{}) *MockStorage_Update_Call {
	return &MockStorage_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockStorage_Update_Call) Run(run func(_a0 tracker.UpdateFn)) *MockStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tracker.UpdateFn))
	})
	return _c
}

func (_c *MockStorage_Update_Call) Return(_a0 error) *MockStorage_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Update_Call) RunAndReturn(run func(tracker.UpdateFn) error) *MockStorage_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
