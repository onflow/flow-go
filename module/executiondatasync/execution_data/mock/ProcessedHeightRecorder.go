// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"
	mock "github.com/stretchr/testify/mock"
)

// MockProcessedHeightRecorder is an autogenerated mock type for the ProcessedHeightRecorder type
type MockProcessedHeightRecorder struct {
	mock.Mock
}

type MockProcessedHeightRecorder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessedHeightRecorder) EXPECT() *MockProcessedHeightRecorder_Expecter {
	return &MockProcessedHeightRecorder_Expecter{mock: &_m.Mock}
}

// HighestCompleteHeight provides a mock function with no fields
func (_m *MockProcessedHeightRecorder) HighestCompleteHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HighestCompleteHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockProcessedHeightRecorder_HighestCompleteHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HighestCompleteHeight'
type MockProcessedHeightRecorder_HighestCompleteHeight_Call struct {
	*mock.Call
}

// HighestCompleteHeight is a helper method to define mock.On call
func (_e *MockProcessedHeightRecorder_Expecter) HighestCompleteHeight() *MockProcessedHeightRecorder_HighestCompleteHeight_Call {
	return &MockProcessedHeightRecorder_HighestCompleteHeight_Call{Call: _e.mock.On("HighestCompleteHeight")}
}

func (_c *MockProcessedHeightRecorder_HighestCompleteHeight_Call) Run(run func()) *MockProcessedHeightRecorder_HighestCompleteHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcessedHeightRecorder_HighestCompleteHeight_Call) Return(_a0 uint64) *MockProcessedHeightRecorder_HighestCompleteHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcessedHeightRecorder_HighestCompleteHeight_Call) RunAndReturn(run func() uint64) *MockProcessedHeightRecorder_HighestCompleteHeight_Call {
	_c.Call.Return(run)
	return _c
}

// OnBlockProcessed provides a mock function with given fields: _a0
func (_m *MockProcessedHeightRecorder) OnBlockProcessed(_a0 uint64) {
	_m.Called(_a0)
}

// MockProcessedHeightRecorder_OnBlockProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBlockProcessed'
type MockProcessedHeightRecorder_OnBlockProcessed_Call struct {
	*mock.Call
}

// OnBlockProcessed is a helper method to define mock.On call
//   - _a0 uint64
func (_e *MockProcessedHeightRecorder_Expecter) OnBlockProcessed(_a0 interface{}) *MockProcessedHeightRecorder_OnBlockProcessed_Call {
	return &MockProcessedHeightRecorder_OnBlockProcessed_Call{Call: _e.mock.On("OnBlockProcessed", _a0)}
}

func (_c *MockProcessedHeightRecorder_OnBlockProcessed_Call) Run(run func(_a0 uint64)) *MockProcessedHeightRecorder_OnBlockProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockProcessedHeightRecorder_OnBlockProcessed_Call) Return() *MockProcessedHeightRecorder_OnBlockProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessedHeightRecorder_OnBlockProcessed_Call) RunAndReturn(run func(uint64)) *MockProcessedHeightRecorder_OnBlockProcessed_Call {
	_c.Run(run)
	return _c
}

// SetHeightUpdatesConsumer provides a mock function with given fields: _a0
func (_m *MockProcessedHeightRecorder) SetHeightUpdatesConsumer(_a0 execution_data.HeightUpdatesConsumer) {
	_m.Called(_a0)
}

// MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeightUpdatesConsumer'
type MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call struct {
	*mock.Call
}

// SetHeightUpdatesConsumer is a helper method to define mock.On call
//   - _a0 execution_data.HeightUpdatesConsumer
func (_e *MockProcessedHeightRecorder_Expecter) SetHeightUpdatesConsumer(_a0 interface{}) *MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call {
	return &MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call{Call: _e.mock.On("SetHeightUpdatesConsumer", _a0)}
}

func (_c *MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call) Run(run func(_a0 execution_data.HeightUpdatesConsumer)) *MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(execution_data.HeightUpdatesConsumer))
	})
	return _c
}

func (_c *MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call) Return() *MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call) RunAndReturn(run func(execution_data.HeightUpdatesConsumer)) *MockProcessedHeightRecorder_SetHeightUpdatesConsumer_Call {
	_c.Run(run)
	return _c
}

// NewMockProcessedHeightRecorder creates a new instance of MockProcessedHeightRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessedHeightRecorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessedHeightRecorder {
	mock := &MockProcessedHeightRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
