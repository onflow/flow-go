// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockHeightUpdatesConsumer is an autogenerated mock type for the HeightUpdatesConsumer type
type MockHeightUpdatesConsumer struct {
	mock.Mock
}

type MockHeightUpdatesConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeightUpdatesConsumer) EXPECT() *MockHeightUpdatesConsumer_Expecter {
	return &MockHeightUpdatesConsumer_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: height
func (_m *MockHeightUpdatesConsumer) Execute(height uint64) {
	_m.Called(height)
}

// MockHeightUpdatesConsumer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHeightUpdatesConsumer_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - height uint64
func (_e *MockHeightUpdatesConsumer_Expecter) Execute(height interface{}) *MockHeightUpdatesConsumer_Execute_Call {
	return &MockHeightUpdatesConsumer_Execute_Call{Call: _e.mock.On("Execute", height)}
}

func (_c *MockHeightUpdatesConsumer_Execute_Call) Run(run func(height uint64)) *MockHeightUpdatesConsumer_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockHeightUpdatesConsumer_Execute_Call) Return() *MockHeightUpdatesConsumer_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHeightUpdatesConsumer_Execute_Call) RunAndReturn(run func(uint64)) *MockHeightUpdatesConsumer_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockHeightUpdatesConsumer creates a new instance of MockHeightUpdatesConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeightUpdatesConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeightUpdatesConsumer {
	mock := &MockHeightUpdatesConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
