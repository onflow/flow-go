// Code generated by mockery. DO NOT EDIT.

package mock

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Serializer is an autogenerated mock type for the Serializer type
type Serializer struct {
	mock.Mock
}

// Deserialize provides a mock function with given fields: _a0
func (_m *Serializer) Deserialize(_a0 io.Reader) (interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Serialize provides a mock function with given fields: _a0, _a1
func (_m *Serializer) Serialize(_a0 io.Writer, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSerializer creates a new instance of Serializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSerializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Serializer {
	mock := &Serializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
