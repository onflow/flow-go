// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockSerializer is an autogenerated mock type for the Serializer type
type MockSerializer struct {
	mock.Mock
}

type MockSerializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSerializer) EXPECT() *MockSerializer_Expecter {
	return &MockSerializer_Expecter{mock: &_m.Mock}
}

// Deserialize provides a mock function with given fields: _a0
func (_m *MockSerializer) Deserialize(_a0 io.Reader) (interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSerializer_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type MockSerializer_Deserialize_Call struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - _a0 io.Reader
func (_e *MockSerializer_Expecter) Deserialize(_a0 interface{}) *MockSerializer_Deserialize_Call {
	return &MockSerializer_Deserialize_Call{Call: _e.mock.On("Deserialize", _a0)}
}

func (_c *MockSerializer_Deserialize_Call) Run(run func(_a0 io.Reader)) *MockSerializer_Deserialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockSerializer_Deserialize_Call) Return(_a0 interface{}, _a1 error) *MockSerializer_Deserialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSerializer_Deserialize_Call) RunAndReturn(run func(io.Reader) (interface{}, error)) *MockSerializer_Deserialize_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields: _a0, _a1
func (_m *MockSerializer) Serialize(_a0 io.Writer, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSerializer_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockSerializer_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
//   - _a0 io.Writer
//   - _a1 interface{}
func (_e *MockSerializer_Expecter) Serialize(_a0 interface{}, _a1 interface{}) *MockSerializer_Serialize_Call {
	return &MockSerializer_Serialize_Call{Call: _e.mock.On("Serialize", _a0, _a1)}
}

func (_c *MockSerializer_Serialize_Call) Run(run func(_a0 io.Writer, _a1 interface{})) *MockSerializer_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(interface{}))
	})
	return _c
}

func (_c *MockSerializer_Serialize_Call) Return(_a0 error) *MockSerializer_Serialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSerializer_Serialize_Call) RunAndReturn(run func(io.Writer, interface{}) error) *MockSerializer_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSerializer creates a new instance of MockSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSerializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSerializer {
	mock := &MockSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
