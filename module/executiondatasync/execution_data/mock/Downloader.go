// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"

	mock "github.com/stretchr/testify/mock"
)

// MockDownloader is an autogenerated mock type for the Downloader type
type MockDownloader struct {
	mock.Mock
}

type MockDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDownloader) EXPECT() *MockDownloader_Expecter {
	return &MockDownloader_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockDownloader) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockDownloader_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockDownloader_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockDownloader_Expecter) Done() *MockDownloader_Done_Call {
	return &MockDownloader_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockDownloader_Done_Call) Run(run func()) *MockDownloader_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDownloader_Done_Call) Return(_a0 <-chan struct{}) *MockDownloader_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDownloader_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockDownloader_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, rootID
func (_m *MockDownloader) Get(ctx context.Context, rootID flow.Identifier) (*execution_data.BlockExecutionData, error) {
	ret := _m.Called(ctx, rootID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *execution_data.BlockExecutionData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*execution_data.BlockExecutionData, error)); ok {
		return rf(ctx, rootID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *execution_data.BlockExecutionData); ok {
		r0 = rf(ctx, rootID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution_data.BlockExecutionData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, rootID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDownloader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDownloader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - rootID flow.Identifier
func (_e *MockDownloader_Expecter) Get(ctx interface{}, rootID interface{}) *MockDownloader_Get_Call {
	return &MockDownloader_Get_Call{Call: _e.mock.On("Get", ctx, rootID)}
}

func (_c *MockDownloader_Get_Call) Run(run func(ctx context.Context, rootID flow.Identifier)) *MockDownloader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockDownloader_Get_Call) Return(_a0 *execution_data.BlockExecutionData, _a1 error) *MockDownloader_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDownloader_Get_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*execution_data.BlockExecutionData, error)) *MockDownloader_Get_Call {
	_c.Call.Return(run)
	return _c
}

// HighestCompleteHeight provides a mock function with no fields
func (_m *MockDownloader) HighestCompleteHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HighestCompleteHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockDownloader_HighestCompleteHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HighestCompleteHeight'
type MockDownloader_HighestCompleteHeight_Call struct {
	*mock.Call
}

// HighestCompleteHeight is a helper method to define mock.On call
func (_e *MockDownloader_Expecter) HighestCompleteHeight() *MockDownloader_HighestCompleteHeight_Call {
	return &MockDownloader_HighestCompleteHeight_Call{Call: _e.mock.On("HighestCompleteHeight")}
}

func (_c *MockDownloader_HighestCompleteHeight_Call) Run(run func()) *MockDownloader_HighestCompleteHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDownloader_HighestCompleteHeight_Call) Return(_a0 uint64) *MockDownloader_HighestCompleteHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDownloader_HighestCompleteHeight_Call) RunAndReturn(run func() uint64) *MockDownloader_HighestCompleteHeight_Call {
	_c.Call.Return(run)
	return _c
}

// OnBlockProcessed provides a mock function with given fields: _a0
func (_m *MockDownloader) OnBlockProcessed(_a0 uint64) {
	_m.Called(_a0)
}

// MockDownloader_OnBlockProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBlockProcessed'
type MockDownloader_OnBlockProcessed_Call struct {
	*mock.Call
}

// OnBlockProcessed is a helper method to define mock.On call
//   - _a0 uint64
func (_e *MockDownloader_Expecter) OnBlockProcessed(_a0 interface{}) *MockDownloader_OnBlockProcessed_Call {
	return &MockDownloader_OnBlockProcessed_Call{Call: _e.mock.On("OnBlockProcessed", _a0)}
}

func (_c *MockDownloader_OnBlockProcessed_Call) Run(run func(_a0 uint64)) *MockDownloader_OnBlockProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDownloader_OnBlockProcessed_Call) Return() *MockDownloader_OnBlockProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDownloader_OnBlockProcessed_Call) RunAndReturn(run func(uint64)) *MockDownloader_OnBlockProcessed_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockDownloader) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockDownloader_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockDownloader_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockDownloader_Expecter) Ready() *MockDownloader_Ready_Call {
	return &MockDownloader_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockDownloader_Ready_Call) Run(run func()) *MockDownloader_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDownloader_Ready_Call) Return(_a0 <-chan struct{}) *MockDownloader_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDownloader_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockDownloader_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeightUpdatesConsumer provides a mock function with given fields: _a0
func (_m *MockDownloader) SetHeightUpdatesConsumer(_a0 execution_data.HeightUpdatesConsumer) {
	_m.Called(_a0)
}

// MockDownloader_SetHeightUpdatesConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeightUpdatesConsumer'
type MockDownloader_SetHeightUpdatesConsumer_Call struct {
	*mock.Call
}

// SetHeightUpdatesConsumer is a helper method to define mock.On call
//   - _a0 execution_data.HeightUpdatesConsumer
func (_e *MockDownloader_Expecter) SetHeightUpdatesConsumer(_a0 interface{}) *MockDownloader_SetHeightUpdatesConsumer_Call {
	return &MockDownloader_SetHeightUpdatesConsumer_Call{Call: _e.mock.On("SetHeightUpdatesConsumer", _a0)}
}

func (_c *MockDownloader_SetHeightUpdatesConsumer_Call) Run(run func(_a0 execution_data.HeightUpdatesConsumer)) *MockDownloader_SetHeightUpdatesConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(execution_data.HeightUpdatesConsumer))
	})
	return _c
}

func (_c *MockDownloader_SetHeightUpdatesConsumer_Call) Return() *MockDownloader_SetHeightUpdatesConsumer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDownloader_SetHeightUpdatesConsumer_Call) RunAndReturn(run func(execution_data.HeightUpdatesConsumer)) *MockDownloader_SetHeightUpdatesConsumer_Call {
	_c.Run(run)
	return _c
}

// NewMockDownloader creates a new instance of MockDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDownloader {
	mock := &MockDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
