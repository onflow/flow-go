// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
	mock "github.com/stretchr/testify/mock"
)

// Pipeline is an autogenerated mock type for the Pipeline type
type Pipeline struct {
	mock.Mock
}

// Abandon provides a mock function with no fields
func (_m *Pipeline) Abandon() {
	_m.Called()
}

// GetState provides a mock function with no fields
func (_m *Pipeline) GetState() optimistic_sync.State {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 optimistic_sync.State
	if rf, ok := ret.Get(0).(func() optimistic_sync.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(optimistic_sync.State)
	}

	return r0
}

// OnParentStateUpdated provides a mock function with given fields: parentState
func (_m *Pipeline) OnParentStateUpdated(parentState optimistic_sync.State) {
	_m.Called(parentState)
}

// Run provides a mock function with given fields: ctx, core, parentState
func (_m *Pipeline) Run(ctx context.Context, core optimistic_sync.Core, parentState optimistic_sync.State) error {
	ret := _m.Called(ctx, core, parentState)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, optimistic_sync.Core, optimistic_sync.State) error); ok {
		r0 = rf(ctx, core, parentState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSealed provides a mock function with no fields
func (_m *Pipeline) SetSealed() {
	_m.Called()
}

// NewPipeline creates a new instance of Pipeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipeline(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pipeline {
	mock := &Pipeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
