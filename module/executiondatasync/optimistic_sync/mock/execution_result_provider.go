// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
)

// ExecutionResultProvider is an autogenerated mock type for the ExecutionResultProvider type
type ExecutionResultProvider struct {
	mock.Mock
}

// ExecutionResult provides a mock function with given fields: blockID, criteria
func (_m *ExecutionResultProvider) ExecutionResultInfo(blockID flow.Identifier, criteria optimistic_sync.Criteria) (*optimistic_sync.ExecutionResultInfo, error) {
	ret := _m.Called(blockID, criteria)

	if len(ret) == 0 {
		panic("no return value specified for ExecutionResult")
	}

	var r0 *optimistic_sync.ExecutionResultInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, optimistic_sync.Criteria) (*optimistic_sync.ExecutionResultInfo, error)); ok {
		return rf(blockID, criteria)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, optimistic_sync.Criteria) *optimistic_sync.ExecutionResultInfo); ok {
		r0 = rf(blockID, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*optimistic_sync.ExecutionResultInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, optimistic_sync.Criteria) error); ok {
		r1 = rf(blockID, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExecutionResultProvider creates a new instance of ExecutionResultProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionResultProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionResultProvider {
	mock := &ExecutionResultProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
