// Code generated by mockery. DO NOT EDIT.

package mock

import (
	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// Snapshot is an autogenerated mock type for the Snapshot type
type Snapshot struct {
	mock.Mock
}

// BlockExecutionData provides a mock function with no fields
func (_m *Snapshot) BlockExecutionData() optimistic_sync.BlockExecutionDataReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockExecutionData")
	}

	var r0 optimistic_sync.BlockExecutionDataReader
	if rf, ok := ret.Get(0).(func() optimistic_sync.BlockExecutionDataReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(optimistic_sync.BlockExecutionDataReader)
		}
	}

	return r0
}

// Collections provides a mock function with no fields
func (_m *Snapshot) Collections() storage.CollectionsReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Collections")
	}

	var r0 storage.CollectionsReader
	if rf, ok := ret.Get(0).(func() storage.CollectionsReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.CollectionsReader)
		}
	}

	return r0
}

// Events provides a mock function with no fields
func (_m *Snapshot) Events() storage.EventsReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 storage.EventsReader
	if rf, ok := ret.Get(0).(func() storage.EventsReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.EventsReader)
		}
	}

	return r0
}

// LightTransactionResults provides a mock function with no fields
func (_m *Snapshot) LightTransactionResults() storage.LightTransactionResultsReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LightTransactionResults")
	}

	var r0 storage.LightTransactionResultsReader
	if rf, ok := ret.Get(0).(func() storage.LightTransactionResultsReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.LightTransactionResultsReader)
		}
	}

	return r0
}

// Registers provides a mock function with no fields
func (_m *Snapshot) Registers() (storage.RegisterSnapshotReader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Registers")
	}

	var r0 storage.RegisterSnapshotReader
	var r1 error
	if rf, ok := ret.Get(0).(func() (storage.RegisterSnapshotReader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() storage.RegisterSnapshotReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.RegisterSnapshotReader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionResultErrorMessages provides a mock function with no fields
func (_m *Snapshot) TransactionResultErrorMessages() storage.TransactionResultErrorMessagesReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionResultErrorMessages")
	}

	var r0 storage.TransactionResultErrorMessagesReader
	if rf, ok := ret.Get(0).(func() storage.TransactionResultErrorMessagesReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.TransactionResultErrorMessagesReader)
		}
	}

	return r0
}

// Transactions provides a mock function with no fields
func (_m *Snapshot) Transactions() storage.TransactionsReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Transactions")
	}

	var r0 storage.TransactionsReader
	if rf, ok := ret.Get(0).(func() storage.TransactionsReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.TransactionsReader)
		}
	}

	return r0
}

// NewSnapshot creates a new instance of Snapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *Snapshot {
	mock := &Snapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
