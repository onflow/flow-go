// Code generated by mockery. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
)

// CoreFactory is an autogenerated mock type for the CoreFactory type
type CoreFactory struct {
	mock.Mock
}

// NewCore provides a mock function with given fields: result
func (_m *CoreFactory) NewCore(result *flow.ExecutionResult) optimistic_sync.Core {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for NewCore")
	}

	var r0 optimistic_sync.Core
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult) optimistic_sync.Core); ok {
		r0 = rf(result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(optimistic_sync.Core)
		}
	}

	return r0
}

// NewCoreFactory creates a new instance of CoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreFactory {
	mock := &CoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
