// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
)

// PipelineFactory is an autogenerated mock type for the PipelineFactory type
type PipelineFactory struct {
	mock.Mock
}

// NewCompletedPipeline provides a mock function with given fields: result
func (_m *PipelineFactory) NewCompletedPipeline(result *flow.ExecutionResult) optimistic_sync.Pipeline {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for NewCompletedPipeline")
	}

	var r0 optimistic_sync.Pipeline
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult) optimistic_sync.Pipeline); ok {
		r0 = rf(result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(optimistic_sync.Pipeline)
		}
	}

	return r0
}

// NewPipeline provides a mock function with given fields: result, isSealed
func (_m *PipelineFactory) NewPipeline(result *flow.ExecutionResult, isSealed bool) optimistic_sync.Pipeline {
	ret := _m.Called(result, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for NewPipeline")
	}

	var r0 optimistic_sync.Pipeline
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult, bool) optimistic_sync.Pipeline); ok {
		r0 = rf(result, isSealed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(optimistic_sync.Pipeline)
		}
	}

	return r0
}

// NewPipelineFactory creates a new instance of PipelineFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPipelineFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *PipelineFactory {
	mock := &PipelineFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
