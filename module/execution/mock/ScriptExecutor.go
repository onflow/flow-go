// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockScriptExecutor is an autogenerated mock type for the ScriptExecutor type
type MockScriptExecutor struct {
	mock.Mock
}

type MockScriptExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScriptExecutor) EXPECT() *MockScriptExecutor_Expecter {
	return &MockScriptExecutor_Expecter{mock: &_m.Mock}
}

// ExecuteAtBlockHeight provides a mock function with given fields: ctx, script, arguments, height
func (_m *MockScriptExecutor) ExecuteAtBlockHeight(ctx context.Context, script []byte, arguments [][]byte, height uint64) ([]byte, error) {
	ret := _m.Called(ctx, script, arguments, height)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteAtBlockHeight")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, uint64) ([]byte, error)); ok {
		return rf(ctx, script, arguments, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, uint64) []byte); ok {
		r0 = rf(ctx, script, arguments, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, [][]byte, uint64) error); ok {
		r1 = rf(ctx, script, arguments, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_ExecuteAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteAtBlockHeight'
type MockScriptExecutor_ExecuteAtBlockHeight_Call struct {
	*mock.Call
}

// ExecuteAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - script []byte
//   - arguments [][]byte
//   - height uint64
func (_e *MockScriptExecutor_Expecter) ExecuteAtBlockHeight(ctx interface{}, script interface{}, arguments interface{}, height interface{}) *MockScriptExecutor_ExecuteAtBlockHeight_Call {
	return &MockScriptExecutor_ExecuteAtBlockHeight_Call{Call: _e.mock.On("ExecuteAtBlockHeight", ctx, script, arguments, height)}
}

func (_c *MockScriptExecutor_ExecuteAtBlockHeight_Call) Run(run func(ctx context.Context, script []byte, arguments [][]byte, height uint64)) *MockScriptExecutor_ExecuteAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([][]byte), args[3].(uint64))
	})
	return _c
}

func (_c *MockScriptExecutor_ExecuteAtBlockHeight_Call) Return(_a0 []byte, _a1 error) *MockScriptExecutor_ExecuteAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_ExecuteAtBlockHeight_Call) RunAndReturn(run func(context.Context, []byte, [][]byte, uint64) ([]byte, error)) *MockScriptExecutor_ExecuteAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtBlockHeight provides a mock function with given fields: ctx, address, height
func (_m *MockScriptExecutor) GetAccountAtBlockHeight(ctx context.Context, address flow.Address, height uint64) (*flow.Account, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockHeight")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (*flow.Account, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) *flow.Account); ok {
		r0 = rf(ctx, address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_GetAccountAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtBlockHeight'
type MockScriptExecutor_GetAccountAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - height uint64
func (_e *MockScriptExecutor_Expecter) GetAccountAtBlockHeight(ctx interface{}, address interface{}, height interface{}) *MockScriptExecutor_GetAccountAtBlockHeight_Call {
	return &MockScriptExecutor_GetAccountAtBlockHeight_Call{Call: _e.mock.On("GetAccountAtBlockHeight", ctx, address, height)}
}

func (_c *MockScriptExecutor_GetAccountAtBlockHeight_Call) Run(run func(ctx context.Context, address flow.Address, height uint64)) *MockScriptExecutor_GetAccountAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockScriptExecutor_GetAccountAtBlockHeight_Call) Return(_a0 *flow.Account, _a1 error) *MockScriptExecutor_GetAccountAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_GetAccountAtBlockHeight_Call) RunAndReturn(run func(context.Context, flow.Address, uint64) (*flow.Account, error)) *MockScriptExecutor_GetAccountAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAvailableBalance provides a mock function with given fields: ctx, address, height
func (_m *MockScriptExecutor) GetAccountAvailableBalance(ctx context.Context, address flow.Address, height uint64) (uint64, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAvailableBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (uint64, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) uint64); ok {
		r0 = rf(ctx, address, height)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_GetAccountAvailableBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAvailableBalance'
type MockScriptExecutor_GetAccountAvailableBalance_Call struct {
	*mock.Call
}

// GetAccountAvailableBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - height uint64
func (_e *MockScriptExecutor_Expecter) GetAccountAvailableBalance(ctx interface{}, address interface{}, height interface{}) *MockScriptExecutor_GetAccountAvailableBalance_Call {
	return &MockScriptExecutor_GetAccountAvailableBalance_Call{Call: _e.mock.On("GetAccountAvailableBalance", ctx, address, height)}
}

func (_c *MockScriptExecutor_GetAccountAvailableBalance_Call) Run(run func(ctx context.Context, address flow.Address, height uint64)) *MockScriptExecutor_GetAccountAvailableBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockScriptExecutor_GetAccountAvailableBalance_Call) Return(_a0 uint64, _a1 error) *MockScriptExecutor_GetAccountAvailableBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_GetAccountAvailableBalance_Call) RunAndReturn(run func(context.Context, flow.Address, uint64) (uint64, error)) *MockScriptExecutor_GetAccountAvailableBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalance provides a mock function with given fields: ctx, address, height
func (_m *MockScriptExecutor) GetAccountBalance(ctx context.Context, address flow.Address, height uint64) (uint64, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (uint64, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) uint64); ok {
		r0 = rf(ctx, address, height)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type MockScriptExecutor_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - height uint64
func (_e *MockScriptExecutor_Expecter) GetAccountBalance(ctx interface{}, address interface{}, height interface{}) *MockScriptExecutor_GetAccountBalance_Call {
	return &MockScriptExecutor_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", ctx, address, height)}
}

func (_c *MockScriptExecutor_GetAccountBalance_Call) Run(run func(ctx context.Context, address flow.Address, height uint64)) *MockScriptExecutor_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockScriptExecutor_GetAccountBalance_Call) Return(_a0 uint64, _a1 error) *MockScriptExecutor_GetAccountBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_GetAccountBalance_Call) RunAndReturn(run func(context.Context, flow.Address, uint64) (uint64, error)) *MockScriptExecutor_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKey provides a mock function with given fields: ctx, address, keyIndex, height
func (_m *MockScriptExecutor) GetAccountKey(ctx context.Context, address flow.Address, keyIndex uint32, height uint64) (*flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, keyIndex, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKey")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) (*flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, keyIndex, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, keyIndex, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32, uint64) error); ok {
		r1 = rf(ctx, address, keyIndex, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_GetAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKey'
type MockScriptExecutor_GetAccountKey_Call struct {
	*mock.Call
}

// GetAccountKey is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - keyIndex uint32
//   - height uint64
func (_e *MockScriptExecutor_Expecter) GetAccountKey(ctx interface{}, address interface{}, keyIndex interface{}, height interface{}) *MockScriptExecutor_GetAccountKey_Call {
	return &MockScriptExecutor_GetAccountKey_Call{Call: _e.mock.On("GetAccountKey", ctx, address, keyIndex, height)}
}

func (_c *MockScriptExecutor_GetAccountKey_Call) Run(run func(ctx context.Context, address flow.Address, keyIndex uint32, height uint64)) *MockScriptExecutor_GetAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint32), args[3].(uint64))
	})
	return _c
}

func (_c *MockScriptExecutor_GetAccountKey_Call) Return(_a0 *flow.AccountPublicKey, _a1 error) *MockScriptExecutor_GetAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_GetAccountKey_Call) RunAndReturn(run func(context.Context, flow.Address, uint32, uint64) (*flow.AccountPublicKey, error)) *MockScriptExecutor_GetAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeys provides a mock function with given fields: ctx, address, height
func (_m *MockScriptExecutor) GetAccountKeys(ctx context.Context, address flow.Address, height uint64) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeys")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) ([]flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_GetAccountKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeys'
type MockScriptExecutor_GetAccountKeys_Call struct {
	*mock.Call
}

// GetAccountKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - height uint64
func (_e *MockScriptExecutor_Expecter) GetAccountKeys(ctx interface{}, address interface{}, height interface{}) *MockScriptExecutor_GetAccountKeys_Call {
	return &MockScriptExecutor_GetAccountKeys_Call{Call: _e.mock.On("GetAccountKeys", ctx, address, height)}
}

func (_c *MockScriptExecutor_GetAccountKeys_Call) Run(run func(ctx context.Context, address flow.Address, height uint64)) *MockScriptExecutor_GetAccountKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockScriptExecutor_GetAccountKeys_Call) Return(_a0 []flow.AccountPublicKey, _a1 error) *MockScriptExecutor_GetAccountKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_GetAccountKeys_Call) RunAndReturn(run func(context.Context, flow.Address, uint64) ([]flow.AccountPublicKey, error)) *MockScriptExecutor_GetAccountKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScriptExecutor creates a new instance of MockScriptExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScriptExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScriptExecutor {
	mock := &MockScriptExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
