// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockCollectionExecutedMetric is an autogenerated mock type for the CollectionExecutedMetric type
type MockCollectionExecutedMetric struct {
	mock.Mock
}

type MockCollectionExecutedMetric_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionExecutedMetric) EXPECT() *MockCollectionExecutedMetric_Expecter {
	return &MockCollectionExecutedMetric_Expecter{mock: &_m.Mock}
}

// BlockFinalized provides a mock function with given fields: block
func (_m *MockCollectionExecutedMetric) BlockFinalized(block *flow.Block) {
	_m.Called(block)
}

// MockCollectionExecutedMetric_BlockFinalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockFinalized'
type MockCollectionExecutedMetric_BlockFinalized_Call struct {
	*mock.Call
}

// BlockFinalized is a helper method to define mock.On call
//   - block *flow.Block
func (_e *MockCollectionExecutedMetric_Expecter) BlockFinalized(block interface{}) *MockCollectionExecutedMetric_BlockFinalized_Call {
	return &MockCollectionExecutedMetric_BlockFinalized_Call{Call: _e.mock.On("BlockFinalized", block)}
}

func (_c *MockCollectionExecutedMetric_BlockFinalized_Call) Run(run func(block *flow.Block)) *MockCollectionExecutedMetric_BlockFinalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Block))
	})
	return _c
}

func (_c *MockCollectionExecutedMetric_BlockFinalized_Call) Return() *MockCollectionExecutedMetric_BlockFinalized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionExecutedMetric_BlockFinalized_Call) RunAndReturn(run func(*flow.Block)) *MockCollectionExecutedMetric_BlockFinalized_Call {
	_c.Run(run)
	return _c
}

// CollectionExecuted provides a mock function with given fields: light
func (_m *MockCollectionExecutedMetric) CollectionExecuted(light flow.LightCollection) {
	_m.Called(light)
}

// MockCollectionExecutedMetric_CollectionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectionExecuted'
type MockCollectionExecutedMetric_CollectionExecuted_Call struct {
	*mock.Call
}

// CollectionExecuted is a helper method to define mock.On call
//   - light flow.LightCollection
func (_e *MockCollectionExecutedMetric_Expecter) CollectionExecuted(light interface{}) *MockCollectionExecutedMetric_CollectionExecuted_Call {
	return &MockCollectionExecutedMetric_CollectionExecuted_Call{Call: _e.mock.On("CollectionExecuted", light)}
}

func (_c *MockCollectionExecutedMetric_CollectionExecuted_Call) Run(run func(light flow.LightCollection)) *MockCollectionExecutedMetric_CollectionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.LightCollection))
	})
	return _c
}

func (_c *MockCollectionExecutedMetric_CollectionExecuted_Call) Return() *MockCollectionExecutedMetric_CollectionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionExecutedMetric_CollectionExecuted_Call) RunAndReturn(run func(flow.LightCollection)) *MockCollectionExecutedMetric_CollectionExecuted_Call {
	_c.Run(run)
	return _c
}

// CollectionFinalized provides a mock function with given fields: light
func (_m *MockCollectionExecutedMetric) CollectionFinalized(light flow.LightCollection) {
	_m.Called(light)
}

// MockCollectionExecutedMetric_CollectionFinalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectionFinalized'
type MockCollectionExecutedMetric_CollectionFinalized_Call struct {
	*mock.Call
}

// CollectionFinalized is a helper method to define mock.On call
//   - light flow.LightCollection
func (_e *MockCollectionExecutedMetric_Expecter) CollectionFinalized(light interface{}) *MockCollectionExecutedMetric_CollectionFinalized_Call {
	return &MockCollectionExecutedMetric_CollectionFinalized_Call{Call: _e.mock.On("CollectionFinalized", light)}
}

func (_c *MockCollectionExecutedMetric_CollectionFinalized_Call) Run(run func(light flow.LightCollection)) *MockCollectionExecutedMetric_CollectionFinalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.LightCollection))
	})
	return _c
}

func (_c *MockCollectionExecutedMetric_CollectionFinalized_Call) Return() *MockCollectionExecutedMetric_CollectionFinalized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionExecutedMetric_CollectionFinalized_Call) RunAndReturn(run func(flow.LightCollection)) *MockCollectionExecutedMetric_CollectionFinalized_Call {
	_c.Run(run)
	return _c
}

// ExecutionReceiptReceived provides a mock function with given fields: r
func (_m *MockCollectionExecutedMetric) ExecutionReceiptReceived(r *flow.ExecutionReceipt) {
	_m.Called(r)
}

// MockCollectionExecutedMetric_ExecutionReceiptReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionReceiptReceived'
type MockCollectionExecutedMetric_ExecutionReceiptReceived_Call struct {
	*mock.Call
}

// ExecutionReceiptReceived is a helper method to define mock.On call
//   - r *flow.ExecutionReceipt
func (_e *MockCollectionExecutedMetric_Expecter) ExecutionReceiptReceived(r interface{}) *MockCollectionExecutedMetric_ExecutionReceiptReceived_Call {
	return &MockCollectionExecutedMetric_ExecutionReceiptReceived_Call{Call: _e.mock.On("ExecutionReceiptReceived", r)}
}

func (_c *MockCollectionExecutedMetric_ExecutionReceiptReceived_Call) Run(run func(r *flow.ExecutionReceipt)) *MockCollectionExecutedMetric_ExecutionReceiptReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt))
	})
	return _c
}

func (_c *MockCollectionExecutedMetric_ExecutionReceiptReceived_Call) Return() *MockCollectionExecutedMetric_ExecutionReceiptReceived_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionExecutedMetric_ExecutionReceiptReceived_Call) RunAndReturn(run func(*flow.ExecutionReceipt)) *MockCollectionExecutedMetric_ExecutionReceiptReceived_Call {
	_c.Run(run)
	return _c
}

// UpdateLastFullBlockHeight provides a mock function with given fields: height
func (_m *MockCollectionExecutedMetric) UpdateLastFullBlockHeight(height uint64) {
	_m.Called(height)
}

// MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastFullBlockHeight'
type MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call struct {
	*mock.Call
}

// UpdateLastFullBlockHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockCollectionExecutedMetric_Expecter) UpdateLastFullBlockHeight(height interface{}) *MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call {
	return &MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call{Call: _e.mock.On("UpdateLastFullBlockHeight", height)}
}

func (_c *MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call) Run(run func(height uint64)) *MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call) Return() *MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call) RunAndReturn(run func(uint64)) *MockCollectionExecutedMetric_UpdateLastFullBlockHeight_Call {
	_c.Run(run)
	return _c
}

// NewMockCollectionExecutedMetric creates a new instance of MockCollectionExecutedMetric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectionExecutedMetric(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectionExecutedMetric {
	mock := &MockCollectionExecutedMetric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
