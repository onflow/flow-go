// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	moduletrace "github.com/onflow/flow-go/module/trace"

	trace "go.opentelemetry.io/otel/trace"
)

// MockTracer is an autogenerated mock type for the Tracer type
type MockTracer struct {
	mock.Mock
}

type MockTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTracer) EXPECT() *MockTracer_Expecter {
	return &MockTracer_Expecter{mock: &_m.Mock}
}

// BlockRootSpan provides a mock function with given fields: blockID
func (_m *MockTracer) BlockRootSpan(blockID flow.Identifier) trace.Span {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for BlockRootSpan")
	}

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(flow.Identifier) trace.Span); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	return r0
}

// MockTracer_BlockRootSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockRootSpan'
type MockTracer_BlockRootSpan_Call struct {
	*mock.Call
}

// BlockRootSpan is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockTracer_Expecter) BlockRootSpan(blockID interface{}) *MockTracer_BlockRootSpan_Call {
	return &MockTracer_BlockRootSpan_Call{Call: _e.mock.On("BlockRootSpan", blockID)}
}

func (_c *MockTracer_BlockRootSpan_Call) Run(run func(blockID flow.Identifier)) *MockTracer_BlockRootSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTracer_BlockRootSpan_Call) Return(_a0 trace.Span) *MockTracer_BlockRootSpan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_BlockRootSpan_Call) RunAndReturn(run func(flow.Identifier) trace.Span) *MockTracer_BlockRootSpan_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockTracer) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockTracer_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockTracer_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockTracer_Expecter) Done() *MockTracer_Done_Call {
	return &MockTracer_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockTracer_Done_Call) Run(run func()) *MockTracer_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTracer_Done_Call) Return(_a0 <-chan struct{}) *MockTracer_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockTracer_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockTracer) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockTracer_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockTracer_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockTracer_Expecter) Ready() *MockTracer_Ready_Call {
	return &MockTracer_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockTracer_Ready_Call) Run(run func()) *MockTracer_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTracer_Ready_Call) Return(_a0 <-chan struct{}) *MockTracer_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockTracer_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldSample provides a mock function with given fields: entityID
func (_m *MockTracer) ShouldSample(entityID flow.Identifier) bool {
	ret := _m.Called(entityID)

	if len(ret) == 0 {
		panic("no return value specified for ShouldSample")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(entityID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTracer_ShouldSample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldSample'
type MockTracer_ShouldSample_Call struct {
	*mock.Call
}

// ShouldSample is a helper method to define mock.On call
//   - entityID flow.Identifier
func (_e *MockTracer_Expecter) ShouldSample(entityID interface{}) *MockTracer_ShouldSample_Call {
	return &MockTracer_ShouldSample_Call{Call: _e.mock.On("ShouldSample", entityID)}
}

func (_c *MockTracer_ShouldSample_Call) Run(run func(entityID flow.Identifier)) *MockTracer_ShouldSample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTracer_ShouldSample_Call) Return(_a0 bool) *MockTracer_ShouldSample_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_ShouldSample_Call) RunAndReturn(run func(flow.Identifier) bool) *MockTracer_ShouldSample_Call {
	_c.Call.Return(run)
	return _c
}

// StartBlockSpan provides a mock function with given fields: ctx, blockID, spanName, opts
func (_m *MockTracer) StartBlockSpan(ctx context.Context, blockID flow.Identifier, spanName moduletrace.SpanName, opts ...trace.SpanStartOption) (trace.Span, context.Context) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, blockID, spanName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartBlockSpan")
	}

	var r0 trace.Span
	var r1 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) (trace.Span, context.Context)); ok {
		return rf(ctx, blockID, spanName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(ctx, blockID, spanName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) context.Context); ok {
		r1 = rf(ctx, blockID, spanName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// MockTracer_StartBlockSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBlockSpan'
type MockTracer_StartBlockSpan_Call struct {
	*mock.Call
}

// StartBlockSpan is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - spanName moduletrace.SpanName
//   - opts ...trace.SpanStartOption
func (_e *MockTracer_Expecter) StartBlockSpan(ctx interface{}, blockID interface{}, spanName interface{}, opts ...interface{}) *MockTracer_StartBlockSpan_Call {
	return &MockTracer_StartBlockSpan_Call{Call: _e.mock.On("StartBlockSpan",
		append([]interface{}{ctx, blockID, spanName}, opts...)...)}
}

func (_c *MockTracer_StartBlockSpan_Call) Run(run func(ctx context.Context, blockID flow.Identifier, spanName moduletrace.SpanName, opts ...trace.SpanStartOption)) *MockTracer_StartBlockSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanStartOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(moduletrace.SpanName), variadicArgs...)
	})
	return _c
}

func (_c *MockTracer_StartBlockSpan_Call) Return(_a0 trace.Span, _a1 context.Context) *MockTracer_StartBlockSpan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTracer_StartBlockSpan_Call) RunAndReturn(run func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) (trace.Span, context.Context)) *MockTracer_StartBlockSpan_Call {
	_c.Call.Return(run)
	return _c
}

// StartCollectionSpan provides a mock function with given fields: ctx, collectionID, spanName, opts
func (_m *MockTracer) StartCollectionSpan(ctx context.Context, collectionID flow.Identifier, spanName moduletrace.SpanName, opts ...trace.SpanStartOption) (trace.Span, context.Context) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collectionID, spanName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCollectionSpan")
	}

	var r0 trace.Span
	var r1 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) (trace.Span, context.Context)); ok {
		return rf(ctx, collectionID, spanName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(ctx, collectionID, spanName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) context.Context); ok {
		r1 = rf(ctx, collectionID, spanName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// MockTracer_StartCollectionSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartCollectionSpan'
type MockTracer_StartCollectionSpan_Call struct {
	*mock.Call
}

// StartCollectionSpan is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID flow.Identifier
//   - spanName moduletrace.SpanName
//   - opts ...trace.SpanStartOption
func (_e *MockTracer_Expecter) StartCollectionSpan(ctx interface{}, collectionID interface{}, spanName interface{}, opts ...interface{}) *MockTracer_StartCollectionSpan_Call {
	return &MockTracer_StartCollectionSpan_Call{Call: _e.mock.On("StartCollectionSpan",
		append([]interface{}{ctx, collectionID, spanName}, opts...)...)}
}

func (_c *MockTracer_StartCollectionSpan_Call) Run(run func(ctx context.Context, collectionID flow.Identifier, spanName moduletrace.SpanName, opts ...trace.SpanStartOption)) *MockTracer_StartCollectionSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanStartOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(moduletrace.SpanName), variadicArgs...)
	})
	return _c
}

func (_c *MockTracer_StartCollectionSpan_Call) Return(_a0 trace.Span, _a1 context.Context) *MockTracer_StartCollectionSpan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTracer_StartCollectionSpan_Call) RunAndReturn(run func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) (trace.Span, context.Context)) *MockTracer_StartCollectionSpan_Call {
	_c.Call.Return(run)
	return _c
}

// StartSampledSpanFromParent provides a mock function with given fields: parentSpan, entityID, operationName, opts
func (_m *MockTracer) StartSampledSpanFromParent(parentSpan trace.Span, entityID flow.Identifier, operationName moduletrace.SpanName, opts ...trace.SpanStartOption) trace.Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, parentSpan, entityID, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSampledSpanFromParent")
	}

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(trace.Span, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(parentSpan, entityID, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	return r0
}

// MockTracer_StartSampledSpanFromParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSampledSpanFromParent'
type MockTracer_StartSampledSpanFromParent_Call struct {
	*mock.Call
}

// StartSampledSpanFromParent is a helper method to define mock.On call
//   - parentSpan trace.Span
//   - entityID flow.Identifier
//   - operationName moduletrace.SpanName
//   - opts ...trace.SpanStartOption
func (_e *MockTracer_Expecter) StartSampledSpanFromParent(parentSpan interface{}, entityID interface{}, operationName interface{}, opts ...interface{}) *MockTracer_StartSampledSpanFromParent_Call {
	return &MockTracer_StartSampledSpanFromParent_Call{Call: _e.mock.On("StartSampledSpanFromParent",
		append([]interface{}{parentSpan, entityID, operationName}, opts...)...)}
}

func (_c *MockTracer_StartSampledSpanFromParent_Call) Run(run func(parentSpan trace.Span, entityID flow.Identifier, operationName moduletrace.SpanName, opts ...trace.SpanStartOption)) *MockTracer_StartSampledSpanFromParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanStartOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		run(args[0].(trace.Span), args[1].(flow.Identifier), args[2].(moduletrace.SpanName), variadicArgs...)
	})
	return _c
}

func (_c *MockTracer_StartSampledSpanFromParent_Call) Return(_a0 trace.Span) *MockTracer_StartSampledSpanFromParent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_StartSampledSpanFromParent_Call) RunAndReturn(run func(trace.Span, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span) *MockTracer_StartSampledSpanFromParent_Call {
	_c.Call.Return(run)
	return _c
}

// StartSpanFromContext provides a mock function with given fields: ctx, operationName, opts
func (_m *MockTracer) StartSpanFromContext(ctx context.Context, operationName moduletrace.SpanName, opts ...trace.SpanStartOption) (trace.Span, context.Context) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSpanFromContext")
	}

	var r0 trace.Span
	var r1 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, moduletrace.SpanName, ...trace.SpanStartOption) (trace.Span, context.Context)); ok {
		return rf(ctx, operationName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(ctx, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, moduletrace.SpanName, ...trace.SpanStartOption) context.Context); ok {
		r1 = rf(ctx, operationName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// MockTracer_StartSpanFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSpanFromContext'
type MockTracer_StartSpanFromContext_Call struct {
	*mock.Call
}

// StartSpanFromContext is a helper method to define mock.On call
//   - ctx context.Context
//   - operationName moduletrace.SpanName
//   - opts ...trace.SpanStartOption
func (_e *MockTracer_Expecter) StartSpanFromContext(ctx interface{}, operationName interface{}, opts ...interface{}) *MockTracer_StartSpanFromContext_Call {
	return &MockTracer_StartSpanFromContext_Call{Call: _e.mock.On("StartSpanFromContext",
		append([]interface{}{ctx, operationName}, opts...)...)}
}

func (_c *MockTracer_StartSpanFromContext_Call) Run(run func(ctx context.Context, operationName moduletrace.SpanName, opts ...trace.SpanStartOption)) *MockTracer_StartSpanFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanStartOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		run(args[0].(context.Context), args[1].(moduletrace.SpanName), variadicArgs...)
	})
	return _c
}

func (_c *MockTracer_StartSpanFromContext_Call) Return(_a0 trace.Span, _a1 context.Context) *MockTracer_StartSpanFromContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTracer_StartSpanFromContext_Call) RunAndReturn(run func(context.Context, moduletrace.SpanName, ...trace.SpanStartOption) (trace.Span, context.Context)) *MockTracer_StartSpanFromContext_Call {
	_c.Call.Return(run)
	return _c
}

// StartSpanFromParent provides a mock function with given fields: parentSpan, operationName, opts
func (_m *MockTracer) StartSpanFromParent(parentSpan trace.Span, operationName moduletrace.SpanName, opts ...trace.SpanStartOption) trace.Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, parentSpan, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSpanFromParent")
	}

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(trace.Span, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(parentSpan, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	return r0
}

// MockTracer_StartSpanFromParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSpanFromParent'
type MockTracer_StartSpanFromParent_Call struct {
	*mock.Call
}

// StartSpanFromParent is a helper method to define mock.On call
//   - parentSpan trace.Span
//   - operationName moduletrace.SpanName
//   - opts ...trace.SpanStartOption
func (_e *MockTracer_Expecter) StartSpanFromParent(parentSpan interface{}, operationName interface{}, opts ...interface{}) *MockTracer_StartSpanFromParent_Call {
	return &MockTracer_StartSpanFromParent_Call{Call: _e.mock.On("StartSpanFromParent",
		append([]interface{}{parentSpan, operationName}, opts...)...)}
}

func (_c *MockTracer_StartSpanFromParent_Call) Run(run func(parentSpan trace.Span, operationName moduletrace.SpanName, opts ...trace.SpanStartOption)) *MockTracer_StartSpanFromParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanStartOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		run(args[0].(trace.Span), args[1].(moduletrace.SpanName), variadicArgs...)
	})
	return _c
}

func (_c *MockTracer_StartSpanFromParent_Call) Return(_a0 trace.Span) *MockTracer_StartSpanFromParent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_StartSpanFromParent_Call) RunAndReturn(run func(trace.Span, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span) *MockTracer_StartSpanFromParent_Call {
	_c.Call.Return(run)
	return _c
}

// WithSpanFromContext provides a mock function with given fields: ctx, operationName, f, opts
func (_m *MockTracer) WithSpanFromContext(ctx context.Context, operationName moduletrace.SpanName, f func(), opts ...trace.SpanStartOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, operationName, f)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockTracer_WithSpanFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithSpanFromContext'
type MockTracer_WithSpanFromContext_Call struct {
	*mock.Call
}

// WithSpanFromContext is a helper method to define mock.On call
//   - ctx context.Context
//   - operationName moduletrace.SpanName
//   - f func()
//   - opts ...trace.SpanStartOption
func (_e *MockTracer_Expecter) WithSpanFromContext(ctx interface{}, operationName interface{}, f interface{}, opts ...interface{}) *MockTracer_WithSpanFromContext_Call {
	return &MockTracer_WithSpanFromContext_Call{Call: _e.mock.On("WithSpanFromContext",
		append([]interface{}{ctx, operationName, f}, opts...)...)}
}

func (_c *MockTracer_WithSpanFromContext_Call) Run(run func(ctx context.Context, operationName moduletrace.SpanName, f func(), opts ...trace.SpanStartOption)) *MockTracer_WithSpanFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanStartOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		run(args[0].(context.Context), args[1].(moduletrace.SpanName), args[2].(func()), variadicArgs...)
	})
	return _c
}

func (_c *MockTracer_WithSpanFromContext_Call) Return() *MockTracer_WithSpanFromContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracer_WithSpanFromContext_Call) RunAndReturn(run func(context.Context, moduletrace.SpanName, func(), ...trace.SpanStartOption)) *MockTracer_WithSpanFromContext_Call {
	_c.Run(run)
	return _c
}

// NewMockTracer creates a new instance of MockTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTracer {
	mock := &MockTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
