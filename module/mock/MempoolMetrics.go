// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	module "github.com/onflow/flow-go/module"
	mock "github.com/stretchr/testify/mock"
)

// MockMempoolMetrics is an autogenerated mock type for the MempoolMetrics type
type MockMempoolMetrics struct {
	mock.Mock
}

type MockMempoolMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMempoolMetrics) EXPECT() *MockMempoolMetrics_Expecter {
	return &MockMempoolMetrics_Expecter{mock: &_m.Mock}
}

// MempoolEntries provides a mock function with given fields: resource, entries
func (_m *MockMempoolMetrics) MempoolEntries(resource string, entries uint) {
	_m.Called(resource, entries)
}

// MockMempoolMetrics_MempoolEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MempoolEntries'
type MockMempoolMetrics_MempoolEntries_Call struct {
	*mock.Call
}

// MempoolEntries is a helper method to define mock.On call
//   - resource string
//   - entries uint
func (_e *MockMempoolMetrics_Expecter) MempoolEntries(resource interface{}, entries interface{}) *MockMempoolMetrics_MempoolEntries_Call {
	return &MockMempoolMetrics_MempoolEntries_Call{Call: _e.mock.On("MempoolEntries", resource, entries)}
}

func (_c *MockMempoolMetrics_MempoolEntries_Call) Run(run func(resource string, entries uint)) *MockMempoolMetrics_MempoolEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint))
	})
	return _c
}

func (_c *MockMempoolMetrics_MempoolEntries_Call) Return() *MockMempoolMetrics_MempoolEntries_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMempoolMetrics_MempoolEntries_Call) RunAndReturn(run func(string, uint)) *MockMempoolMetrics_MempoolEntries_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function with given fields: resource, entriesFunc
func (_m *MockMempoolMetrics) Register(resource string, entriesFunc module.EntriesFunc) error {
	ret := _m.Called(resource, entriesFunc)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, module.EntriesFunc) error); ok {
		r0 = rf(resource, entriesFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMempoolMetrics_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockMempoolMetrics_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - resource string
//   - entriesFunc module.EntriesFunc
func (_e *MockMempoolMetrics_Expecter) Register(resource interface{}, entriesFunc interface{}) *MockMempoolMetrics_Register_Call {
	return &MockMempoolMetrics_Register_Call{Call: _e.mock.On("Register", resource, entriesFunc)}
}

func (_c *MockMempoolMetrics_Register_Call) Run(run func(resource string, entriesFunc module.EntriesFunc)) *MockMempoolMetrics_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(module.EntriesFunc))
	})
	return _c
}

func (_c *MockMempoolMetrics_Register_Call) Return(_a0 error) *MockMempoolMetrics_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMempoolMetrics_Register_Call) RunAndReturn(run func(string, module.EntriesFunc) error) *MockMempoolMetrics_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMempoolMetrics creates a new instance of MockMempoolMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMempoolMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMempoolMetrics {
	mock := &MockMempoolMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
