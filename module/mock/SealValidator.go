// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockSealValidator is an autogenerated mock type for the SealValidator type
type MockSealValidator struct {
	mock.Mock
}

type MockSealValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSealValidator) EXPECT() *MockSealValidator_Expecter {
	return &MockSealValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: candidate
func (_m *MockSealValidator) Validate(candidate *flow.Block) (*flow.Seal, error) {
	ret := _m.Called(candidate)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *flow.Seal
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.Block) (*flow.Seal, error)); ok {
		return rf(candidate)
	}
	if rf, ok := ret.Get(0).(func(*flow.Block) *flow.Seal); ok {
		r0 = rf(candidate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Seal)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.Block) error); ok {
		r1 = rf(candidate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSealValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockSealValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - candidate *flow.Block
func (_e *MockSealValidator_Expecter) Validate(candidate interface{}) *MockSealValidator_Validate_Call {
	return &MockSealValidator_Validate_Call{Call: _e.mock.On("Validate", candidate)}
}

func (_c *MockSealValidator_Validate_Call) Run(run func(candidate *flow.Block)) *MockSealValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Block))
	})
	return _c
}

func (_c *MockSealValidator_Validate_Call) Return(_a0 *flow.Seal, _a1 error) *MockSealValidator_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSealValidator_Validate_Call) RunAndReturn(run func(*flow.Block) (*flow.Seal, error)) *MockSealValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSealValidator creates a new instance of MockSealValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSealValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSealValidator {
	mock := &MockSealValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
