// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	module "github.com/onflow/flow-go/module"
)

// MockDKGControllerFactory is an autogenerated mock type for the DKGControllerFactory type
type MockDKGControllerFactory struct {
	mock.Mock
}

type MockDKGControllerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDKGControllerFactory) EXPECT() *MockDKGControllerFactory_Expecter {
	return &MockDKGControllerFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: dkgInstanceID, participants, seed
func (_m *MockDKGControllerFactory) Create(dkgInstanceID string, participants flow.GenericIdentityList[flow.IdentitySkeleton], seed []byte) (module.DKGController, error) {
	ret := _m.Called(dkgInstanceID, participants, seed)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 module.DKGController
	var r1 error
	if rf, ok := ret.Get(0).(func(string, flow.GenericIdentityList[flow.IdentitySkeleton], []byte) (module.DKGController, error)); ok {
		return rf(dkgInstanceID, participants, seed)
	}
	if rf, ok := ret.Get(0).(func(string, flow.GenericIdentityList[flow.IdentitySkeleton], []byte) module.DKGController); ok {
		r0 = rf(dkgInstanceID, participants, seed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module.DKGController)
		}
	}

	if rf, ok := ret.Get(1).(func(string, flow.GenericIdentityList[flow.IdentitySkeleton], []byte) error); ok {
		r1 = rf(dkgInstanceID, participants, seed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKGControllerFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDKGControllerFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - dkgInstanceID string
//   - participants flow.GenericIdentityList[flow.IdentitySkeleton]
//   - seed []byte
func (_e *MockDKGControllerFactory_Expecter) Create(dkgInstanceID interface{}, participants interface{}, seed interface{}) *MockDKGControllerFactory_Create_Call {
	return &MockDKGControllerFactory_Create_Call{Call: _e.mock.On("Create", dkgInstanceID, participants, seed)}
}

func (_c *MockDKGControllerFactory_Create_Call) Run(run func(dkgInstanceID string, participants flow.GenericIdentityList[flow.IdentitySkeleton], seed []byte)) *MockDKGControllerFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(flow.GenericIdentityList[flow.IdentitySkeleton]), args[2].([]byte))
	})
	return _c
}

func (_c *MockDKGControllerFactory_Create_Call) Return(_a0 module.DKGController, _a1 error) *MockDKGControllerFactory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKGControllerFactory_Create_Call) RunAndReturn(run func(string, flow.GenericIdentityList[flow.IdentitySkeleton], []byte) (module.DKGController, error)) *MockDKGControllerFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDKGControllerFactory creates a new instance of MockDKGControllerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDKGControllerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDKGControllerFactory {
	mock := &MockDKGControllerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
