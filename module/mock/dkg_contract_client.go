// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	messages "github.com/onflow/flow-go/model/messages"
	mock "github.com/stretchr/testify/mock"
)

// DKGContractClient is an autogenerated mock type for the DKGContractClient type
type DKGContractClient struct {
	mock.Mock
}

// Broadcast provides a mock function with given fields: msg
func (_m *DKGContractClient) Broadcast(msg messages.DKGMessage) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(messages.DKGMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadBroadcast provides a mock function with given fields: epochCounter, phase
func (_m *DKGContractClient) ReadBroadcast(epochCounter uint64, phase int) ([]messages.DKGMessage, error) {
	ret := _m.Called(epochCounter, phase)

	var r0 []messages.DKGMessage
	if rf, ok := ret.Get(0).(func(uint64, int) []messages.DKGMessage); ok {
		r0 = rf(epochCounter, phase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.DKGMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, int) error); ok {
		r1 = rf(epochCounter, phase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitResult provides a mock function with given fields: epochCounter, result
func (_m *DKGContractClient) SubmitResult(epochCounter uint64, result []byte) error {
	ret := _m.Called(epochCounter, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []byte) error); ok {
		r0 = rf(epochCounter, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
