// Code generated by mockery. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	hash "github.com/onflow/crypto/hash"

	mock "github.com/stretchr/testify/mock"
)

// PrivateKey is an autogenerated mock type for the PrivateKey type
type PrivateKey struct {
	mock.Mock
}

// Algorithm provides a mock function with no fields
func (_m *PrivateKey) Algorithm() crypto.SigningAlgorithm {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Algorithm")
	}

	var r0 crypto.SigningAlgorithm
	if rf, ok := ret.Get(0).(func() crypto.SigningAlgorithm); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(crypto.SigningAlgorithm)
	}

	return r0
}

// Encode provides a mock function with no fields
func (_m *PrivateKey) Encode() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Equals provides a mock function with given fields: _a0
func (_m *PrivateKey) Equals(_a0 crypto.PrivateKey) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Equals")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(crypto.PrivateKey) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PublicKey provides a mock function with no fields
func (_m *PrivateKey) PublicKey() crypto.PublicKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 crypto.PublicKey
	if rf, ok := ret.Get(0).(func() crypto.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	return r0
}

// Sign provides a mock function with given fields: _a0, _a1
func (_m *PrivateKey) Sign(_a0 []byte, _a1 hash.Hasher) (crypto.Signature, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, hash.Hasher) (crypto.Signature, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func([]byte, hash.Hasher) crypto.Signature); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, hash.Hasher) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Size provides a mock function with no fields
func (_m *PrivateKey) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *PrivateKey) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewPrivateKey creates a new instance of PrivateKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrivateKey(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrivateKey {
	mock := &PrivateKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
