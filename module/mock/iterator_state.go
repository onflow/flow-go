// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// IteratorState is an autogenerated mock type for the IteratorState type
type IteratorState struct {
	mock.Mock
}

// LoadState provides a mock function with given fields:
func (_m *IteratorState) LoadState() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadState")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveState provides a mock function with given fields: _a0
func (_m *IteratorState) SaveState(_a0 uint64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIteratorState creates a new instance of IteratorState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIteratorState(t interface {
	mock.TestingT
	Cleanup(func())
}) *IteratorState {
	mock := &IteratorState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
