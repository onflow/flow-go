// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockDKGController is an autogenerated mock type for the DKGController type
type MockDKGController struct {
	mock.Mock
}

type MockDKGController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDKGController) EXPECT() *MockDKGController_Expecter {
	return &MockDKGController_Expecter{mock: &_m.Mock}
}

// End provides a mock function with no fields
func (_m *MockDKGController) End() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for End")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGController_End_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'End'
type MockDKGController_End_Call struct {
	*mock.Call
}

// End is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) End() *MockDKGController_End_Call {
	return &MockDKGController_End_Call{Call: _e.mock.On("End")}
}

func (_c *MockDKGController_End_Call) Run(run func()) *MockDKGController_End_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_End_Call) Return(_a0 error) *MockDKGController_End_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGController_End_Call) RunAndReturn(run func() error) *MockDKGController_End_Call {
	_c.Call.Return(run)
	return _c
}

// EndPhase1 provides a mock function with no fields
func (_m *MockDKGController) EndPhase1() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndPhase1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGController_EndPhase1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndPhase1'
type MockDKGController_EndPhase1_Call struct {
	*mock.Call
}

// EndPhase1 is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) EndPhase1() *MockDKGController_EndPhase1_Call {
	return &MockDKGController_EndPhase1_Call{Call: _e.mock.On("EndPhase1")}
}

func (_c *MockDKGController_EndPhase1_Call) Run(run func()) *MockDKGController_EndPhase1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_EndPhase1_Call) Return(_a0 error) *MockDKGController_EndPhase1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGController_EndPhase1_Call) RunAndReturn(run func() error) *MockDKGController_EndPhase1_Call {
	_c.Call.Return(run)
	return _c
}

// EndPhase2 provides a mock function with no fields
func (_m *MockDKGController) EndPhase2() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndPhase2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGController_EndPhase2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndPhase2'
type MockDKGController_EndPhase2_Call struct {
	*mock.Call
}

// EndPhase2 is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) EndPhase2() *MockDKGController_EndPhase2_Call {
	return &MockDKGController_EndPhase2_Call{Call: _e.mock.On("EndPhase2")}
}

func (_c *MockDKGController_EndPhase2_Call) Run(run func()) *MockDKGController_EndPhase2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_EndPhase2_Call) Return(_a0 error) *MockDKGController_EndPhase2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGController_EndPhase2_Call) RunAndReturn(run func() error) *MockDKGController_EndPhase2_Call {
	_c.Call.Return(run)
	return _c
}

// GetArtifacts provides a mock function with no fields
func (_m *MockDKGController) GetArtifacts() (crypto.PrivateKey, crypto.PublicKey, []crypto.PublicKey) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArtifacts")
	}

	var r0 crypto.PrivateKey
	var r1 crypto.PublicKey
	var r2 []crypto.PublicKey
	if rf, ok := ret.Get(0).(func() (crypto.PrivateKey, crypto.PublicKey, []crypto.PublicKey)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() crypto.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func() crypto.PublicKey); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(crypto.PublicKey)
		}
	}

	if rf, ok := ret.Get(2).(func() []crypto.PublicKey); ok {
		r2 = rf()
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]crypto.PublicKey)
		}
	}

	return r0, r1, r2
}

// MockDKGController_GetArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifacts'
type MockDKGController_GetArtifacts_Call struct {
	*mock.Call
}

// GetArtifacts is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) GetArtifacts() *MockDKGController_GetArtifacts_Call {
	return &MockDKGController_GetArtifacts_Call{Call: _e.mock.On("GetArtifacts")}
}

func (_c *MockDKGController_GetArtifacts_Call) Run(run func()) *MockDKGController_GetArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_GetArtifacts_Call) Return(_a0 crypto.PrivateKey, _a1 crypto.PublicKey, _a2 []crypto.PublicKey) *MockDKGController_GetArtifacts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDKGController_GetArtifacts_Call) RunAndReturn(run func() (crypto.PrivateKey, crypto.PublicKey, []crypto.PublicKey)) *MockDKGController_GetArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndex provides a mock function with no fields
func (_m *MockDKGController) GetIndex() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockDKGController_GetIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndex'
type MockDKGController_GetIndex_Call struct {
	*mock.Call
}

// GetIndex is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) GetIndex() *MockDKGController_GetIndex_Call {
	return &MockDKGController_GetIndex_Call{Call: _e.mock.On("GetIndex")}
}

func (_c *MockDKGController_GetIndex_Call) Run(run func()) *MockDKGController_GetIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_GetIndex_Call) Return(_a0 int) *MockDKGController_GetIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGController_GetIndex_Call) RunAndReturn(run func() int) *MockDKGController_GetIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields: blockReference
func (_m *MockDKGController) Poll(blockReference flow.Identifier) error {
	ret := _m.Called(blockReference)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(blockReference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGController_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type MockDKGController_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - blockReference flow.Identifier
func (_e *MockDKGController_Expecter) Poll(blockReference interface{}) *MockDKGController_Poll_Call {
	return &MockDKGController_Poll_Call{Call: _e.mock.On("Poll", blockReference)}
}

func (_c *MockDKGController_Poll_Call) Run(run func(blockReference flow.Identifier)) *MockDKGController_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockDKGController_Poll_Call) Return(_a0 error) *MockDKGController_Poll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGController_Poll_Call) RunAndReturn(run func(flow.Identifier) error) *MockDKGController_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *MockDKGController) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGController_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockDKGController_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) Run() *MockDKGController_Run_Call {
	return &MockDKGController_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockDKGController_Run_Call) Run(run func()) *MockDKGController_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_Run_Call) Return(_a0 error) *MockDKGController_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGController_Run_Call) RunAndReturn(run func() error) *MockDKGController_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *MockDKGController) Shutdown() {
	_m.Called()
}

// MockDKGController_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockDKGController_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) Shutdown() *MockDKGController_Shutdown_Call {
	return &MockDKGController_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockDKGController_Shutdown_Call) Run(run func()) *MockDKGController_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_Shutdown_Call) Return() *MockDKGController_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDKGController_Shutdown_Call) RunAndReturn(run func()) *MockDKGController_Shutdown_Call {
	_c.Run(run)
	return _c
}

// SubmitResult provides a mock function with no fields
func (_m *MockDKGController) SubmitResult() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubmitResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGController_SubmitResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitResult'
type MockDKGController_SubmitResult_Call struct {
	*mock.Call
}

// SubmitResult is a helper method to define mock.On call
func (_e *MockDKGController_Expecter) SubmitResult() *MockDKGController_SubmitResult_Call {
	return &MockDKGController_SubmitResult_Call{Call: _e.mock.On("SubmitResult")}
}

func (_c *MockDKGController_SubmitResult_Call) Run(run func()) *MockDKGController_SubmitResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGController_SubmitResult_Call) Return(_a0 error) *MockDKGController_SubmitResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGController_SubmitResult_Call) RunAndReturn(run func() error) *MockDKGController_SubmitResult_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDKGController creates a new instance of MockDKGController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDKGController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDKGController {
	mock := &MockDKGController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
