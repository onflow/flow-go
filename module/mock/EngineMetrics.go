// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockEngineMetrics is an autogenerated mock type for the EngineMetrics type
type MockEngineMetrics struct {
	mock.Mock
}

type MockEngineMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngineMetrics) EXPECT() *MockEngineMetrics_Expecter {
	return &MockEngineMetrics_Expecter{mock: &_m.Mock}
}

// InboundMessageDropped provides a mock function with given fields: engine, messages
func (_m *MockEngineMetrics) InboundMessageDropped(engine string, messages string) {
	_m.Called(engine, messages)
}

// MockEngineMetrics_InboundMessageDropped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InboundMessageDropped'
type MockEngineMetrics_InboundMessageDropped_Call struct {
	*mock.Call
}

// InboundMessageDropped is a helper method to define mock.On call
//   - engine string
//   - messages string
func (_e *MockEngineMetrics_Expecter) InboundMessageDropped(engine interface{}, messages interface{}) *MockEngineMetrics_InboundMessageDropped_Call {
	return &MockEngineMetrics_InboundMessageDropped_Call{Call: _e.mock.On("InboundMessageDropped", engine, messages)}
}

func (_c *MockEngineMetrics_InboundMessageDropped_Call) Run(run func(engine string, messages string)) *MockEngineMetrics_InboundMessageDropped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEngineMetrics_InboundMessageDropped_Call) Return() *MockEngineMetrics_InboundMessageDropped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngineMetrics_InboundMessageDropped_Call) RunAndReturn(run func(string, string)) *MockEngineMetrics_InboundMessageDropped_Call {
	_c.Run(run)
	return _c
}

// MessageHandled provides a mock function with given fields: engine, messages
func (_m *MockEngineMetrics) MessageHandled(engine string, messages string) {
	_m.Called(engine, messages)
}

// MockEngineMetrics_MessageHandled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageHandled'
type MockEngineMetrics_MessageHandled_Call struct {
	*mock.Call
}

// MessageHandled is a helper method to define mock.On call
//   - engine string
//   - messages string
func (_e *MockEngineMetrics_Expecter) MessageHandled(engine interface{}, messages interface{}) *MockEngineMetrics_MessageHandled_Call {
	return &MockEngineMetrics_MessageHandled_Call{Call: _e.mock.On("MessageHandled", engine, messages)}
}

func (_c *MockEngineMetrics_MessageHandled_Call) Run(run func(engine string, messages string)) *MockEngineMetrics_MessageHandled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEngineMetrics_MessageHandled_Call) Return() *MockEngineMetrics_MessageHandled_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngineMetrics_MessageHandled_Call) RunAndReturn(run func(string, string)) *MockEngineMetrics_MessageHandled_Call {
	_c.Run(run)
	return _c
}

// MessageReceived provides a mock function with given fields: engine, message
func (_m *MockEngineMetrics) MessageReceived(engine string, message string) {
	_m.Called(engine, message)
}

// MockEngineMetrics_MessageReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageReceived'
type MockEngineMetrics_MessageReceived_Call struct {
	*mock.Call
}

// MessageReceived is a helper method to define mock.On call
//   - engine string
//   - message string
func (_e *MockEngineMetrics_Expecter) MessageReceived(engine interface{}, message interface{}) *MockEngineMetrics_MessageReceived_Call {
	return &MockEngineMetrics_MessageReceived_Call{Call: _e.mock.On("MessageReceived", engine, message)}
}

func (_c *MockEngineMetrics_MessageReceived_Call) Run(run func(engine string, message string)) *MockEngineMetrics_MessageReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEngineMetrics_MessageReceived_Call) Return() *MockEngineMetrics_MessageReceived_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngineMetrics_MessageReceived_Call) RunAndReturn(run func(string, string)) *MockEngineMetrics_MessageReceived_Call {
	_c.Run(run)
	return _c
}

// MessageSent provides a mock function with given fields: engine, message
func (_m *MockEngineMetrics) MessageSent(engine string, message string) {
	_m.Called(engine, message)
}

// MockEngineMetrics_MessageSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageSent'
type MockEngineMetrics_MessageSent_Call struct {
	*mock.Call
}

// MessageSent is a helper method to define mock.On call
//   - engine string
//   - message string
func (_e *MockEngineMetrics_Expecter) MessageSent(engine interface{}, message interface{}) *MockEngineMetrics_MessageSent_Call {
	return &MockEngineMetrics_MessageSent_Call{Call: _e.mock.On("MessageSent", engine, message)}
}

func (_c *MockEngineMetrics_MessageSent_Call) Run(run func(engine string, message string)) *MockEngineMetrics_MessageSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEngineMetrics_MessageSent_Call) Return() *MockEngineMetrics_MessageSent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngineMetrics_MessageSent_Call) RunAndReturn(run func(string, string)) *MockEngineMetrics_MessageSent_Call {
	_c.Run(run)
	return _c
}

// OutboundMessageDropped provides a mock function with given fields: engine, messages
func (_m *MockEngineMetrics) OutboundMessageDropped(engine string, messages string) {
	_m.Called(engine, messages)
}

// MockEngineMetrics_OutboundMessageDropped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutboundMessageDropped'
type MockEngineMetrics_OutboundMessageDropped_Call struct {
	*mock.Call
}

// OutboundMessageDropped is a helper method to define mock.On call
//   - engine string
//   - messages string
func (_e *MockEngineMetrics_Expecter) OutboundMessageDropped(engine interface{}, messages interface{}) *MockEngineMetrics_OutboundMessageDropped_Call {
	return &MockEngineMetrics_OutboundMessageDropped_Call{Call: _e.mock.On("OutboundMessageDropped", engine, messages)}
}

func (_c *MockEngineMetrics_OutboundMessageDropped_Call) Run(run func(engine string, messages string)) *MockEngineMetrics_OutboundMessageDropped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEngineMetrics_OutboundMessageDropped_Call) Return() *MockEngineMetrics_OutboundMessageDropped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEngineMetrics_OutboundMessageDropped_Call) RunAndReturn(run func(string, string)) *MockEngineMetrics_OutboundMessageDropped_Call {
	_c.Run(run)
	return _c
}

// NewMockEngineMetrics creates a new instance of MockEngineMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngineMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngineMetrics {
	mock := &MockEngineMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
