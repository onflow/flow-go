// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	coldstuff "github.com/onflow/flow-go/model/coldstuff"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// ColdStuff is an autogenerated mock type for the ColdStuff type
type ColdStuff struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *ColdStuff) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *ColdStuff) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// SubmitCommit provides a mock function with given fields: commit
func (_m *ColdStuff) SubmitCommit(commit *coldstuff.Commit) {
	_m.Called(commit)
}

// SubmitProposal provides a mock function with given fields: proposal, parentView
func (_m *ColdStuff) SubmitProposal(proposal *flow.Header, parentView uint64) {
	_m.Called(proposal, parentView)
}

// SubmitVote provides a mock function with given fields: originID, blockID, view, sigData
func (_m *ColdStuff) SubmitVote(originID flow.Identifier, blockID flow.Identifier, view uint64, sigData []byte) {
	_m.Called(originID, blockID, view, sigData)
}
