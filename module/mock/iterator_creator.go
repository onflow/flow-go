// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	module "github.com/onflow/flow-go/module"
	mock "github.com/stretchr/testify/mock"
)

// IteratorCreator is an autogenerated mock type for the IteratorCreator type
type IteratorCreator struct {
	mock.Mock
}

// Create provides a mock function with given fields:
func (_m *IteratorCreator) Create() (module.BlockIterator, bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 module.BlockIterator
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func() (module.BlockIterator, bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() module.BlockIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module.BlockIterator)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IteratorState provides a mock function with given fields:
func (_m *IteratorCreator) IteratorState() module.IteratorStateReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IteratorState")
	}

	var r0 module.IteratorStateReader
	if rf, ok := ret.Get(0).(func() module.IteratorStateReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module.IteratorStateReader)
		}
	}

	return r0
}

// NewIteratorCreator creates a new instance of IteratorCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIteratorCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *IteratorCreator {
	mock := &IteratorCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
