// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	messages "github.com/onflow/flow-go/model/messages"

	mock "github.com/stretchr/testify/mock"
)

// MockDKGBroker is an autogenerated mock type for the DKGBroker type
type MockDKGBroker struct {
	mock.Mock
}

type MockDKGBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDKGBroker) EXPECT() *MockDKGBroker_Expecter {
	return &MockDKGBroker_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function with given fields: data
func (_m *MockDKGBroker) Broadcast(data []byte) {
	_m.Called(data)
}

// MockDKGBroker_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockDKGBroker_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - data []byte
func (_e *MockDKGBroker_Expecter) Broadcast(data interface{}) *MockDKGBroker_Broadcast_Call {
	return &MockDKGBroker_Broadcast_Call{Call: _e.mock.On("Broadcast", data)}
}

func (_c *MockDKGBroker_Broadcast_Call) Run(run func(data []byte)) *MockDKGBroker_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockDKGBroker_Broadcast_Call) Return() *MockDKGBroker_Broadcast_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDKGBroker_Broadcast_Call) RunAndReturn(run func([]byte)) *MockDKGBroker_Broadcast_Call {
	_c.Run(run)
	return _c
}

// Disqualify provides a mock function with given fields: index, log
func (_m *MockDKGBroker) Disqualify(index int, log string) {
	_m.Called(index, log)
}

// MockDKGBroker_Disqualify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disqualify'
type MockDKGBroker_Disqualify_Call struct {
	*mock.Call
}

// Disqualify is a helper method to define mock.On call
//   - index int
//   - log string
func (_e *MockDKGBroker_Expecter) Disqualify(index interface{}, log interface{}) *MockDKGBroker_Disqualify_Call {
	return &MockDKGBroker_Disqualify_Call{Call: _e.mock.On("Disqualify", index, log)}
}

func (_c *MockDKGBroker_Disqualify_Call) Run(run func(index int, log string)) *MockDKGBroker_Disqualify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockDKGBroker_Disqualify_Call) Return() *MockDKGBroker_Disqualify_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDKGBroker_Disqualify_Call) RunAndReturn(run func(int, string)) *MockDKGBroker_Disqualify_Call {
	_c.Run(run)
	return _c
}

// FlagMisbehavior provides a mock function with given fields: index, log
func (_m *MockDKGBroker) FlagMisbehavior(index int, log string) {
	_m.Called(index, log)
}

// MockDKGBroker_FlagMisbehavior_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlagMisbehavior'
type MockDKGBroker_FlagMisbehavior_Call struct {
	*mock.Call
}

// FlagMisbehavior is a helper method to define mock.On call
//   - index int
//   - log string
func (_e *MockDKGBroker_Expecter) FlagMisbehavior(index interface{}, log interface{}) *MockDKGBroker_FlagMisbehavior_Call {
	return &MockDKGBroker_FlagMisbehavior_Call{Call: _e.mock.On("FlagMisbehavior", index, log)}
}

func (_c *MockDKGBroker_FlagMisbehavior_Call) Run(run func(index int, log string)) *MockDKGBroker_FlagMisbehavior_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockDKGBroker_FlagMisbehavior_Call) Return() *MockDKGBroker_FlagMisbehavior_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDKGBroker_FlagMisbehavior_Call) RunAndReturn(run func(int, string)) *MockDKGBroker_FlagMisbehavior_Call {
	_c.Run(run)
	return _c
}

// GetBroadcastMsgCh provides a mock function with no fields
func (_m *MockDKGBroker) GetBroadcastMsgCh() <-chan messages.BroadcastDKGMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBroadcastMsgCh")
	}

	var r0 <-chan messages.BroadcastDKGMessage
	if rf, ok := ret.Get(0).(func() <-chan messages.BroadcastDKGMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan messages.BroadcastDKGMessage)
		}
	}

	return r0
}

// MockDKGBroker_GetBroadcastMsgCh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBroadcastMsgCh'
type MockDKGBroker_GetBroadcastMsgCh_Call struct {
	*mock.Call
}

// GetBroadcastMsgCh is a helper method to define mock.On call
func (_e *MockDKGBroker_Expecter) GetBroadcastMsgCh() *MockDKGBroker_GetBroadcastMsgCh_Call {
	return &MockDKGBroker_GetBroadcastMsgCh_Call{Call: _e.mock.On("GetBroadcastMsgCh")}
}

func (_c *MockDKGBroker_GetBroadcastMsgCh_Call) Run(run func()) *MockDKGBroker_GetBroadcastMsgCh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGBroker_GetBroadcastMsgCh_Call) Return(_a0 <-chan messages.BroadcastDKGMessage) *MockDKGBroker_GetBroadcastMsgCh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGBroker_GetBroadcastMsgCh_Call) RunAndReturn(run func() <-chan messages.BroadcastDKGMessage) *MockDKGBroker_GetBroadcastMsgCh_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndex provides a mock function with no fields
func (_m *MockDKGBroker) GetIndex() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockDKGBroker_GetIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndex'
type MockDKGBroker_GetIndex_Call struct {
	*mock.Call
}

// GetIndex is a helper method to define mock.On call
func (_e *MockDKGBroker_Expecter) GetIndex() *MockDKGBroker_GetIndex_Call {
	return &MockDKGBroker_GetIndex_Call{Call: _e.mock.On("GetIndex")}
}

func (_c *MockDKGBroker_GetIndex_Call) Run(run func()) *MockDKGBroker_GetIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGBroker_GetIndex_Call) Return(_a0 int) *MockDKGBroker_GetIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGBroker_GetIndex_Call) RunAndReturn(run func() int) *MockDKGBroker_GetIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateMsgCh provides a mock function with no fields
func (_m *MockDKGBroker) GetPrivateMsgCh() <-chan messages.PrivDKGMessageIn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateMsgCh")
	}

	var r0 <-chan messages.PrivDKGMessageIn
	if rf, ok := ret.Get(0).(func() <-chan messages.PrivDKGMessageIn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan messages.PrivDKGMessageIn)
		}
	}

	return r0
}

// MockDKGBroker_GetPrivateMsgCh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateMsgCh'
type MockDKGBroker_GetPrivateMsgCh_Call struct {
	*mock.Call
}

// GetPrivateMsgCh is a helper method to define mock.On call
func (_e *MockDKGBroker_Expecter) GetPrivateMsgCh() *MockDKGBroker_GetPrivateMsgCh_Call {
	return &MockDKGBroker_GetPrivateMsgCh_Call{Call: _e.mock.On("GetPrivateMsgCh")}
}

func (_c *MockDKGBroker_GetPrivateMsgCh_Call) Run(run func()) *MockDKGBroker_GetPrivateMsgCh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGBroker_GetPrivateMsgCh_Call) Return(_a0 <-chan messages.PrivDKGMessageIn) *MockDKGBroker_GetPrivateMsgCh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGBroker_GetPrivateMsgCh_Call) RunAndReturn(run func() <-chan messages.PrivDKGMessageIn) *MockDKGBroker_GetPrivateMsgCh_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields: referenceBlock
func (_m *MockDKGBroker) Poll(referenceBlock flow.Identifier) error {
	ret := _m.Called(referenceBlock)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(referenceBlock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGBroker_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type MockDKGBroker_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - referenceBlock flow.Identifier
func (_e *MockDKGBroker_Expecter) Poll(referenceBlock interface{}) *MockDKGBroker_Poll_Call {
	return &MockDKGBroker_Poll_Call{Call: _e.mock.On("Poll", referenceBlock)}
}

func (_c *MockDKGBroker_Poll_Call) Run(run func(referenceBlock flow.Identifier)) *MockDKGBroker_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockDKGBroker_Poll_Call) Return(_a0 error) *MockDKGBroker_Poll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGBroker_Poll_Call) RunAndReturn(run func(flow.Identifier) error) *MockDKGBroker_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateSend provides a mock function with given fields: dest, data
func (_m *MockDKGBroker) PrivateSend(dest int, data []byte) {
	_m.Called(dest, data)
}

// MockDKGBroker_PrivateSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateSend'
type MockDKGBroker_PrivateSend_Call struct {
	*mock.Call
}

// PrivateSend is a helper method to define mock.On call
//   - dest int
//   - data []byte
func (_e *MockDKGBroker_Expecter) PrivateSend(dest interface{}, data interface{}) *MockDKGBroker_PrivateSend_Call {
	return &MockDKGBroker_PrivateSend_Call{Call: _e.mock.On("PrivateSend", dest, data)}
}

func (_c *MockDKGBroker_PrivateSend_Call) Run(run func(dest int, data []byte)) *MockDKGBroker_PrivateSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *MockDKGBroker_PrivateSend_Call) Return() *MockDKGBroker_PrivateSend_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDKGBroker_PrivateSend_Call) RunAndReturn(run func(int, []byte)) *MockDKGBroker_PrivateSend_Call {
	_c.Run(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *MockDKGBroker) Shutdown() {
	_m.Called()
}

// MockDKGBroker_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockDKGBroker_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockDKGBroker_Expecter) Shutdown() *MockDKGBroker_Shutdown_Call {
	return &MockDKGBroker_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockDKGBroker_Shutdown_Call) Run(run func()) *MockDKGBroker_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGBroker_Shutdown_Call) Return() *MockDKGBroker_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDKGBroker_Shutdown_Call) RunAndReturn(run func()) *MockDKGBroker_Shutdown_Call {
	_c.Run(run)
	return _c
}

// SubmitResult provides a mock function with given fields: _a0, _a1
func (_m *MockDKGBroker) SubmitResult(_a0 crypto.PublicKey, _a1 []crypto.PublicKey) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubmitResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(crypto.PublicKey, []crypto.PublicKey) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGBroker_SubmitResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitResult'
type MockDKGBroker_SubmitResult_Call struct {
	*mock.Call
}

// SubmitResult is a helper method to define mock.On call
//   - _a0 crypto.PublicKey
//   - _a1 []crypto.PublicKey
func (_e *MockDKGBroker_Expecter) SubmitResult(_a0 interface{}, _a1 interface{}) *MockDKGBroker_SubmitResult_Call {
	return &MockDKGBroker_SubmitResult_Call{Call: _e.mock.On("SubmitResult", _a0, _a1)}
}

func (_c *MockDKGBroker_SubmitResult_Call) Run(run func(_a0 crypto.PublicKey, _a1 []crypto.PublicKey)) *MockDKGBroker_SubmitResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(crypto.PublicKey), args[1].([]crypto.PublicKey))
	})
	return _c
}

func (_c *MockDKGBroker_SubmitResult_Call) Return(_a0 error) *MockDKGBroker_SubmitResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGBroker_SubmitResult_Call) RunAndReturn(run func(crypto.PublicKey, []crypto.PublicKey) error) *MockDKGBroker_SubmitResult_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDKGBroker creates a new instance of MockDKGBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDKGBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDKGBroker {
	mock := &MockDKGBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
