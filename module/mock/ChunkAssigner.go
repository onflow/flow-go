// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	chunks "github.com/onflow/flow-go/model/chunks"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockChunkAssigner is an autogenerated mock type for the ChunkAssigner type
type MockChunkAssigner struct {
	mock.Mock
}

type MockChunkAssigner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkAssigner) EXPECT() *MockChunkAssigner_Expecter {
	return &MockChunkAssigner_Expecter{mock: &_m.Mock}
}

// Assign provides a mock function with given fields: result, blockID
func (_m *MockChunkAssigner) Assign(result *flow.ExecutionResult, blockID flow.Identifier) (*chunks.Assignment, error) {
	ret := _m.Called(result, blockID)

	if len(ret) == 0 {
		panic("no return value specified for Assign")
	}

	var r0 *chunks.Assignment
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult, flow.Identifier) (*chunks.Assignment, error)); ok {
		return rf(result, blockID)
	}
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult, flow.Identifier) *chunks.Assignment); ok {
		r0 = rf(result, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chunks.Assignment)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.ExecutionResult, flow.Identifier) error); ok {
		r1 = rf(result, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkAssigner_Assign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assign'
type MockChunkAssigner_Assign_Call struct {
	*mock.Call
}

// Assign is a helper method to define mock.On call
//   - result *flow.ExecutionResult
//   - blockID flow.Identifier
func (_e *MockChunkAssigner_Expecter) Assign(result interface{}, blockID interface{}) *MockChunkAssigner_Assign_Call {
	return &MockChunkAssigner_Assign_Call{Call: _e.mock.On("Assign", result, blockID)}
}

func (_c *MockChunkAssigner_Assign_Call) Run(run func(result *flow.ExecutionResult, blockID flow.Identifier)) *MockChunkAssigner_Assign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionResult), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkAssigner_Assign_Call) Return(_a0 *chunks.Assignment, _a1 error) *MockChunkAssigner_Assign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkAssigner_Assign_Call) RunAndReturn(run func(*flow.ExecutionResult, flow.Identifier) (*chunks.Assignment, error)) *MockChunkAssigner_Assign_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkAssigner creates a new instance of MockChunkAssigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkAssigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkAssigner {
	mock := &MockChunkAssigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
