// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockRequester is an autogenerated mock type for the Requester type
type MockRequester struct {
	mock.Mock
}

type MockRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequester) EXPECT() *MockRequester_Expecter {
	return &MockRequester_Expecter{mock: &_m.Mock}
}

// EntityByID provides a mock function with given fields: entityID, selector
func (_m *MockRequester) EntityByID(entityID flow.Identifier, selector flow.IdentityFilter[flow.Identity]) {
	_m.Called(entityID, selector)
}

// MockRequester_EntityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntityByID'
type MockRequester_EntityByID_Call struct {
	*mock.Call
}

// EntityByID is a helper method to define mock.On call
//   - entityID flow.Identifier
//   - selector flow.IdentityFilter[flow.Identity]
func (_e *MockRequester_Expecter) EntityByID(entityID interface{}, selector interface{}) *MockRequester_EntityByID_Call {
	return &MockRequester_EntityByID_Call{Call: _e.mock.On("EntityByID", entityID, selector)}
}

func (_c *MockRequester_EntityByID_Call) Run(run func(entityID flow.Identifier, selector flow.IdentityFilter[flow.Identity])) *MockRequester_EntityByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.IdentityFilter[flow.Identity]))
	})
	return _c
}

func (_c *MockRequester_EntityByID_Call) Return() *MockRequester_EntityByID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequester_EntityByID_Call) RunAndReturn(run func(flow.Identifier, flow.IdentityFilter[flow.Identity])) *MockRequester_EntityByID_Call {
	_c.Run(run)
	return _c
}

// Force provides a mock function with no fields
func (_m *MockRequester) Force() {
	_m.Called()
}

// MockRequester_Force_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Force'
type MockRequester_Force_Call struct {
	*mock.Call
}

// Force is a helper method to define mock.On call
func (_e *MockRequester_Expecter) Force() *MockRequester_Force_Call {
	return &MockRequester_Force_Call{Call: _e.mock.On("Force")}
}

func (_c *MockRequester_Force_Call) Run(run func()) *MockRequester_Force_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequester_Force_Call) Return() *MockRequester_Force_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequester_Force_Call) RunAndReturn(run func()) *MockRequester_Force_Call {
	_c.Run(run)
	return _c
}

// Query provides a mock function with given fields: key, selector
func (_m *MockRequester) Query(key flow.Identifier, selector flow.IdentityFilter[flow.Identity]) {
	_m.Called(key, selector)
}

// MockRequester_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockRequester_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - key flow.Identifier
//   - selector flow.IdentityFilter[flow.Identity]
func (_e *MockRequester_Expecter) Query(key interface{}, selector interface{}) *MockRequester_Query_Call {
	return &MockRequester_Query_Call{Call: _e.mock.On("Query", key, selector)}
}

func (_c *MockRequester_Query_Call) Run(run func(key flow.Identifier, selector flow.IdentityFilter[flow.Identity])) *MockRequester_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.IdentityFilter[flow.Identity]))
	})
	return _c
}

func (_c *MockRequester_Query_Call) Return() *MockRequester_Query_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequester_Query_Call) RunAndReturn(run func(flow.Identifier, flow.IdentityFilter[flow.Identity])) *MockRequester_Query_Call {
	_c.Run(run)
	return _c
}

// NewMockRequester creates a new instance of MockRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequester {
	mock := &MockRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
