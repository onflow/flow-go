// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// BlockIterator is an autogenerated mock type for the BlockIterator type
type BlockIterator struct {
	mock.Mock
}

// Checkpoint provides a mock function with given fields:
func (_m *BlockIterator) Checkpoint() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Checkpoint")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Next provides a mock function with given fields:
func (_m *BlockIterator) Next() (flow.Identifier, bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 flow.Identifier
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func() (flow.Identifier, bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewBlockIterator creates a new instance of BlockIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockIterator {
	mock := &BlockIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
