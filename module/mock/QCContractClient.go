// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
	mock "github.com/stretchr/testify/mock"
)

// MockQCContractClient is an autogenerated mock type for the QCContractClient type
type MockQCContractClient struct {
	mock.Mock
}

type MockQCContractClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQCContractClient) EXPECT() *MockQCContractClient_Expecter {
	return &MockQCContractClient_Expecter{mock: &_m.Mock}
}

// SubmitVote provides a mock function with given fields: ctx, vote
func (_m *MockQCContractClient) SubmitVote(ctx context.Context, vote *model.Vote) error {
	ret := _m.Called(ctx, vote)

	if len(ret) == 0 {
		panic("no return value specified for SubmitVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Vote) error); ok {
		r0 = rf(ctx, vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQCContractClient_SubmitVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitVote'
type MockQCContractClient_SubmitVote_Call struct {
	*mock.Call
}

// SubmitVote is a helper method to define mock.On call
//   - ctx context.Context
//   - vote *model.Vote
func (_e *MockQCContractClient_Expecter) SubmitVote(ctx interface{}, vote interface{}) *MockQCContractClient_SubmitVote_Call {
	return &MockQCContractClient_SubmitVote_Call{Call: _e.mock.On("SubmitVote", ctx, vote)}
}

func (_c *MockQCContractClient_SubmitVote_Call) Run(run func(ctx context.Context, vote *model.Vote)) *MockQCContractClient_SubmitVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Vote))
	})
	return _c
}

func (_c *MockQCContractClient_SubmitVote_Call) Return(_a0 error) *MockQCContractClient_SubmitVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQCContractClient_SubmitVote_Call) RunAndReturn(run func(context.Context, *model.Vote) error) *MockQCContractClient_SubmitVote_Call {
	_c.Call.Return(run)
	return _c
}

// Voted provides a mock function with given fields: ctx
func (_m *MockQCContractClient) Voted(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Voted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQCContractClient_Voted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Voted'
type MockQCContractClient_Voted_Call struct {
	*mock.Call
}

// Voted is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQCContractClient_Expecter) Voted(ctx interface{}) *MockQCContractClient_Voted_Call {
	return &MockQCContractClient_Voted_Call{Call: _e.mock.On("Voted", ctx)}
}

func (_c *MockQCContractClient_Voted_Call) Run(run func(ctx context.Context)) *MockQCContractClient_Voted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQCContractClient_Voted_Call) Return(_a0 bool, _a1 error) *MockQCContractClient_Voted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQCContractClient_Voted_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockQCContractClient_Voted_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQCContractClient creates a new instance of MockQCContractClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQCContractClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQCContractClient {
	mock := &MockQCContractClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
