// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockIteratorState is an autogenerated mock type for the IteratorState type
type MockIteratorState struct {
	mock.Mock
}

type MockIteratorState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIteratorState) EXPECT() *MockIteratorState_Expecter {
	return &MockIteratorState_Expecter{mock: &_m.Mock}
}

// LoadState provides a mock function with no fields
func (_m *MockIteratorState) LoadState() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadState")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIteratorState_LoadState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadState'
type MockIteratorState_LoadState_Call struct {
	*mock.Call
}

// LoadState is a helper method to define mock.On call
func (_e *MockIteratorState_Expecter) LoadState() *MockIteratorState_LoadState_Call {
	return &MockIteratorState_LoadState_Call{Call: _e.mock.On("LoadState")}
}

func (_c *MockIteratorState_LoadState_Call) Run(run func()) *MockIteratorState_LoadState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIteratorState_LoadState_Call) Return(progress uint64, exception error) *MockIteratorState_LoadState_Call {
	_c.Call.Return(progress, exception)
	return _c
}

func (_c *MockIteratorState_LoadState_Call) RunAndReturn(run func() (uint64, error)) *MockIteratorState_LoadState_Call {
	_c.Call.Return(run)
	return _c
}

// SaveState provides a mock function with given fields: _a0
func (_m *MockIteratorState) SaveState(_a0 uint64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIteratorState_SaveState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveState'
type MockIteratorState_SaveState_Call struct {
	*mock.Call
}

// SaveState is a helper method to define mock.On call
//   - _a0 uint64
func (_e *MockIteratorState_Expecter) SaveState(_a0 interface{}) *MockIteratorState_SaveState_Call {
	return &MockIteratorState_SaveState_Call{Call: _e.mock.On("SaveState", _a0)}
}

func (_c *MockIteratorState_SaveState_Call) Run(run func(_a0 uint64)) *MockIteratorState_SaveState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockIteratorState_SaveState_Call) Return(exception error) *MockIteratorState_SaveState_Call {
	_c.Call.Return(exception)
	return _c
}

func (_c *MockIteratorState_SaveState_Call) RunAndReturn(run func(uint64) error) *MockIteratorState_SaveState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIteratorState creates a new instance of MockIteratorState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIteratorState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIteratorState {
	mock := &MockIteratorState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
