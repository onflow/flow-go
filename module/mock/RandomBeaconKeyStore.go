// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	mock "github.com/stretchr/testify/mock"
)

// MockRandomBeaconKeyStore is an autogenerated mock type for the RandomBeaconKeyStore type
type MockRandomBeaconKeyStore struct {
	mock.Mock
}

type MockRandomBeaconKeyStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRandomBeaconKeyStore) EXPECT() *MockRandomBeaconKeyStore_Expecter {
	return &MockRandomBeaconKeyStore_Expecter{mock: &_m.Mock}
}

// ByView provides a mock function with given fields: view
func (_m *MockRandomBeaconKeyStore) ByView(view uint64) (crypto.PrivateKey, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for ByView")
	}

	var r0 crypto.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (crypto.PrivateKey, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) crypto.PrivateKey); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRandomBeaconKeyStore_ByView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByView'
type MockRandomBeaconKeyStore_ByView_Call struct {
	*mock.Call
}

// ByView is a helper method to define mock.On call
//   - view uint64
func (_e *MockRandomBeaconKeyStore_Expecter) ByView(view interface{}) *MockRandomBeaconKeyStore_ByView_Call {
	return &MockRandomBeaconKeyStore_ByView_Call{Call: _e.mock.On("ByView", view)}
}

func (_c *MockRandomBeaconKeyStore_ByView_Call) Run(run func(view uint64)) *MockRandomBeaconKeyStore_ByView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockRandomBeaconKeyStore_ByView_Call) Return(_a0 crypto.PrivateKey, _a1 error) *MockRandomBeaconKeyStore_ByView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRandomBeaconKeyStore_ByView_Call) RunAndReturn(run func(uint64) (crypto.PrivateKey, error)) *MockRandomBeaconKeyStore_ByView_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRandomBeaconKeyStore creates a new instance of MockRandomBeaconKeyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRandomBeaconKeyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRandomBeaconKeyStore {
	mock := &MockRandomBeaconKeyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
