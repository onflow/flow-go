// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	messages "github.com/onflow/flow-go/model/messages"

	mock "github.com/stretchr/testify/mock"
)

// MockDKGContractClient is an autogenerated mock type for the DKGContractClient type
type MockDKGContractClient struct {
	mock.Mock
}

type MockDKGContractClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDKGContractClient) EXPECT() *MockDKGContractClient_Expecter {
	return &MockDKGContractClient_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function with given fields: msg
func (_m *MockDKGContractClient) Broadcast(msg messages.BroadcastDKGMessage) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Broadcast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(messages.BroadcastDKGMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGContractClient_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockDKGContractClient_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - msg messages.BroadcastDKGMessage
func (_e *MockDKGContractClient_Expecter) Broadcast(msg interface{}) *MockDKGContractClient_Broadcast_Call {
	return &MockDKGContractClient_Broadcast_Call{Call: _e.mock.On("Broadcast", msg)}
}

func (_c *MockDKGContractClient_Broadcast_Call) Run(run func(msg messages.BroadcastDKGMessage)) *MockDKGContractClient_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(messages.BroadcastDKGMessage))
	})
	return _c
}

func (_c *MockDKGContractClient_Broadcast_Call) Return(_a0 error) *MockDKGContractClient_Broadcast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGContractClient_Broadcast_Call) RunAndReturn(run func(messages.BroadcastDKGMessage) error) *MockDKGContractClient_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBroadcast provides a mock function with given fields: fromIndex, referenceBlock
func (_m *MockDKGContractClient) ReadBroadcast(fromIndex uint, referenceBlock flow.Identifier) ([]messages.BroadcastDKGMessage, error) {
	ret := _m.Called(fromIndex, referenceBlock)

	if len(ret) == 0 {
		panic("no return value specified for ReadBroadcast")
	}

	var r0 []messages.BroadcastDKGMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, flow.Identifier) ([]messages.BroadcastDKGMessage, error)); ok {
		return rf(fromIndex, referenceBlock)
	}
	if rf, ok := ret.Get(0).(func(uint, flow.Identifier) []messages.BroadcastDKGMessage); ok {
		r0 = rf(fromIndex, referenceBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.BroadcastDKGMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, flow.Identifier) error); ok {
		r1 = rf(fromIndex, referenceBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKGContractClient_ReadBroadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBroadcast'
type MockDKGContractClient_ReadBroadcast_Call struct {
	*mock.Call
}

// ReadBroadcast is a helper method to define mock.On call
//   - fromIndex uint
//   - referenceBlock flow.Identifier
func (_e *MockDKGContractClient_Expecter) ReadBroadcast(fromIndex interface{}, referenceBlock interface{}) *MockDKGContractClient_ReadBroadcast_Call {
	return &MockDKGContractClient_ReadBroadcast_Call{Call: _e.mock.On("ReadBroadcast", fromIndex, referenceBlock)}
}

func (_c *MockDKGContractClient_ReadBroadcast_Call) Run(run func(fromIndex uint, referenceBlock flow.Identifier)) *MockDKGContractClient_ReadBroadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockDKGContractClient_ReadBroadcast_Call) Return(_a0 []messages.BroadcastDKGMessage, _a1 error) *MockDKGContractClient_ReadBroadcast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKGContractClient_ReadBroadcast_Call) RunAndReturn(run func(uint, flow.Identifier) ([]messages.BroadcastDKGMessage, error)) *MockDKGContractClient_ReadBroadcast_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitEmptyResult provides a mock function with no fields
func (_m *MockDKGContractClient) SubmitEmptyResult() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubmitEmptyResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGContractClient_SubmitEmptyResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitEmptyResult'
type MockDKGContractClient_SubmitEmptyResult_Call struct {
	*mock.Call
}

// SubmitEmptyResult is a helper method to define mock.On call
func (_e *MockDKGContractClient_Expecter) SubmitEmptyResult() *MockDKGContractClient_SubmitEmptyResult_Call {
	return &MockDKGContractClient_SubmitEmptyResult_Call{Call: _e.mock.On("SubmitEmptyResult")}
}

func (_c *MockDKGContractClient_SubmitEmptyResult_Call) Run(run func()) *MockDKGContractClient_SubmitEmptyResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKGContractClient_SubmitEmptyResult_Call) Return(_a0 error) *MockDKGContractClient_SubmitEmptyResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGContractClient_SubmitEmptyResult_Call) RunAndReturn(run func() error) *MockDKGContractClient_SubmitEmptyResult_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitParametersAndResult provides a mock function with given fields: indexMap, groupPublicKey, publicKeys
func (_m *MockDKGContractClient) SubmitParametersAndResult(indexMap flow.DKGIndexMap, groupPublicKey crypto.PublicKey, publicKeys []crypto.PublicKey) error {
	ret := _m.Called(indexMap, groupPublicKey, publicKeys)

	if len(ret) == 0 {
		panic("no return value specified for SubmitParametersAndResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.DKGIndexMap, crypto.PublicKey, []crypto.PublicKey) error); ok {
		r0 = rf(indexMap, groupPublicKey, publicKeys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGContractClient_SubmitParametersAndResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitParametersAndResult'
type MockDKGContractClient_SubmitParametersAndResult_Call struct {
	*mock.Call
}

// SubmitParametersAndResult is a helper method to define mock.On call
//   - indexMap flow.DKGIndexMap
//   - groupPublicKey crypto.PublicKey
//   - publicKeys []crypto.PublicKey
func (_e *MockDKGContractClient_Expecter) SubmitParametersAndResult(indexMap interface{}, groupPublicKey interface{}, publicKeys interface{}) *MockDKGContractClient_SubmitParametersAndResult_Call {
	return &MockDKGContractClient_SubmitParametersAndResult_Call{Call: _e.mock.On("SubmitParametersAndResult", indexMap, groupPublicKey, publicKeys)}
}

func (_c *MockDKGContractClient_SubmitParametersAndResult_Call) Run(run func(indexMap flow.DKGIndexMap, groupPublicKey crypto.PublicKey, publicKeys []crypto.PublicKey)) *MockDKGContractClient_SubmitParametersAndResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.DKGIndexMap), args[1].(crypto.PublicKey), args[2].([]crypto.PublicKey))
	})
	return _c
}

func (_c *MockDKGContractClient_SubmitParametersAndResult_Call) Return(_a0 error) *MockDKGContractClient_SubmitParametersAndResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGContractClient_SubmitParametersAndResult_Call) RunAndReturn(run func(flow.DKGIndexMap, crypto.PublicKey, []crypto.PublicKey) error) *MockDKGContractClient_SubmitParametersAndResult_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDKGContractClient creates a new instance of MockDKGContractClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDKGContractClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDKGContractClient {
	mock := &MockDKGContractClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
