// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockPendingBlockBuffer is an autogenerated mock type for the PendingBlockBuffer type
type MockPendingBlockBuffer struct {
	mock.Mock
}

type MockPendingBlockBuffer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPendingBlockBuffer) EXPECT() *MockPendingBlockBuffer_Expecter {
	return &MockPendingBlockBuffer_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: block
func (_m *MockPendingBlockBuffer) Add(block flow.Slashable[*flow.Block]) bool {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Slashable[*flow.Block]) bool); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPendingBlockBuffer_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPendingBlockBuffer_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - block flow.Slashable[*flow.Block]
func (_e *MockPendingBlockBuffer_Expecter) Add(block interface{}) *MockPendingBlockBuffer_Add_Call {
	return &MockPendingBlockBuffer_Add_Call{Call: _e.mock.On("Add", block)}
}

func (_c *MockPendingBlockBuffer_Add_Call) Run(run func(block flow.Slashable[*flow.Block])) *MockPendingBlockBuffer_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Slashable[*flow.Block]))
	})
	return _c
}

func (_c *MockPendingBlockBuffer_Add_Call) Return(_a0 bool) *MockPendingBlockBuffer_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingBlockBuffer_Add_Call) RunAndReturn(run func(flow.Slashable[*flow.Block]) bool) *MockPendingBlockBuffer_Add_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: blockID
func (_m *MockPendingBlockBuffer) ByID(blockID flow.Identifier) (flow.Slashable[*flow.Block], bool) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 flow.Slashable[*flow.Block]
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.Slashable[*flow.Block], bool)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.Slashable[*flow.Block]); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Get(0).(flow.Slashable[*flow.Block])
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPendingBlockBuffer_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockPendingBlockBuffer_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockPendingBlockBuffer_Expecter) ByID(blockID interface{}) *MockPendingBlockBuffer_ByID_Call {
	return &MockPendingBlockBuffer_ByID_Call{Call: _e.mock.On("ByID", blockID)}
}

func (_c *MockPendingBlockBuffer_ByID_Call) Run(run func(blockID flow.Identifier)) *MockPendingBlockBuffer_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockPendingBlockBuffer_ByID_Call) Return(_a0 flow.Slashable[*flow.Block], _a1 bool) *MockPendingBlockBuffer_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPendingBlockBuffer_ByID_Call) RunAndReturn(run func(flow.Identifier) (flow.Slashable[*flow.Block], bool)) *MockPendingBlockBuffer_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// ByParentID provides a mock function with given fields: parentID
func (_m *MockPendingBlockBuffer) ByParentID(parentID flow.Identifier) ([]flow.Slashable[*flow.Block], bool) {
	ret := _m.Called(parentID)

	if len(ret) == 0 {
		panic("no return value specified for ByParentID")
	}

	var r0 []flow.Slashable[*flow.Block]
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]flow.Slashable[*flow.Block], bool)); ok {
		return rf(parentID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []flow.Slashable[*flow.Block]); ok {
		r0 = rf(parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Slashable[*flow.Block])
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(parentID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPendingBlockBuffer_ByParentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByParentID'
type MockPendingBlockBuffer_ByParentID_Call struct {
	*mock.Call
}

// ByParentID is a helper method to define mock.On call
//   - parentID flow.Identifier
func (_e *MockPendingBlockBuffer_Expecter) ByParentID(parentID interface{}) *MockPendingBlockBuffer_ByParentID_Call {
	return &MockPendingBlockBuffer_ByParentID_Call{Call: _e.mock.On("ByParentID", parentID)}
}

func (_c *MockPendingBlockBuffer_ByParentID_Call) Run(run func(parentID flow.Identifier)) *MockPendingBlockBuffer_ByParentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockPendingBlockBuffer_ByParentID_Call) Return(_a0 []flow.Slashable[*flow.Block], _a1 bool) *MockPendingBlockBuffer_ByParentID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPendingBlockBuffer_ByParentID_Call) RunAndReturn(run func(flow.Identifier) ([]flow.Slashable[*flow.Block], bool)) *MockPendingBlockBuffer_ByParentID_Call {
	_c.Call.Return(run)
	return _c
}

// DropForParent provides a mock function with given fields: parentID
func (_m *MockPendingBlockBuffer) DropForParent(parentID flow.Identifier) {
	_m.Called(parentID)
}

// MockPendingBlockBuffer_DropForParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropForParent'
type MockPendingBlockBuffer_DropForParent_Call struct {
	*mock.Call
}

// DropForParent is a helper method to define mock.On call
//   - parentID flow.Identifier
func (_e *MockPendingBlockBuffer_Expecter) DropForParent(parentID interface{}) *MockPendingBlockBuffer_DropForParent_Call {
	return &MockPendingBlockBuffer_DropForParent_Call{Call: _e.mock.On("DropForParent", parentID)}
}

func (_c *MockPendingBlockBuffer_DropForParent_Call) Run(run func(parentID flow.Identifier)) *MockPendingBlockBuffer_DropForParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockPendingBlockBuffer_DropForParent_Call) Return() *MockPendingBlockBuffer_DropForParent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPendingBlockBuffer_DropForParent_Call) RunAndReturn(run func(flow.Identifier)) *MockPendingBlockBuffer_DropForParent_Call {
	_c.Run(run)
	return _c
}

// PruneByView provides a mock function with given fields: view
func (_m *MockPendingBlockBuffer) PruneByView(view uint64) {
	_m.Called(view)
}

// MockPendingBlockBuffer_PruneByView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneByView'
type MockPendingBlockBuffer_PruneByView_Call struct {
	*mock.Call
}

// PruneByView is a helper method to define mock.On call
//   - view uint64
func (_e *MockPendingBlockBuffer_Expecter) PruneByView(view interface{}) *MockPendingBlockBuffer_PruneByView_Call {
	return &MockPendingBlockBuffer_PruneByView_Call{Call: _e.mock.On("PruneByView", view)}
}

func (_c *MockPendingBlockBuffer_PruneByView_Call) Run(run func(view uint64)) *MockPendingBlockBuffer_PruneByView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockPendingBlockBuffer_PruneByView_Call) Return() *MockPendingBlockBuffer_PruneByView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPendingBlockBuffer_PruneByView_Call) RunAndReturn(run func(uint64)) *MockPendingBlockBuffer_PruneByView_Call {
	_c.Run(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockPendingBlockBuffer) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockPendingBlockBuffer_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockPendingBlockBuffer_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockPendingBlockBuffer_Expecter) Size() *MockPendingBlockBuffer_Size_Call {
	return &MockPendingBlockBuffer_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockPendingBlockBuffer_Size_Call) Run(run func()) *MockPendingBlockBuffer_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPendingBlockBuffer_Size_Call) Return(_a0 uint) *MockPendingBlockBuffer_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPendingBlockBuffer_Size_Call) RunAndReturn(run func() uint) *MockPendingBlockBuffer_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPendingBlockBuffer creates a new instance of MockPendingBlockBuffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPendingBlockBuffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPendingBlockBuffer {
	mock := &MockPendingBlockBuffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
