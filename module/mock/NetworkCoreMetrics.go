// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	time "time"
)

// MockNetworkCoreMetrics is an autogenerated mock type for the NetworkCoreMetrics type
type MockNetworkCoreMetrics struct {
	mock.Mock
}

type MockNetworkCoreMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkCoreMetrics) EXPECT() *MockNetworkCoreMetrics_Expecter {
	return &MockNetworkCoreMetrics_Expecter{mock: &_m.Mock}
}

// DuplicateInboundMessagesDropped provides a mock function with given fields: topic, protocol, messageType
func (_m *MockNetworkCoreMetrics) DuplicateInboundMessagesDropped(topic string, protocol string, messageType string) {
	_m.Called(topic, protocol, messageType)
}

// MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DuplicateInboundMessagesDropped'
type MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call struct {
	*mock.Call
}

// DuplicateInboundMessagesDropped is a helper method to define mock.On call
//   - topic string
//   - protocol string
//   - messageType string
func (_e *MockNetworkCoreMetrics_Expecter) DuplicateInboundMessagesDropped(topic interface{}, protocol interface{}, messageType interface{}) *MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call {
	return &MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call{Call: _e.mock.On("DuplicateInboundMessagesDropped", topic, protocol, messageType)}
}

func (_c *MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call) Run(run func(topic string, protocol string, messageType string)) *MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call) Return() *MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call) RunAndReturn(run func(string, string, string)) *MockNetworkCoreMetrics_DuplicateInboundMessagesDropped_Call {
	_c.Run(run)
	return _c
}

// InboundMessageReceived provides a mock function with given fields: sizeBytes, topic, protocol, messageType
func (_m *MockNetworkCoreMetrics) InboundMessageReceived(sizeBytes int, topic string, protocol string, messageType string) {
	_m.Called(sizeBytes, topic, protocol, messageType)
}

// MockNetworkCoreMetrics_InboundMessageReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InboundMessageReceived'
type MockNetworkCoreMetrics_InboundMessageReceived_Call struct {
	*mock.Call
}

// InboundMessageReceived is a helper method to define mock.On call
//   - sizeBytes int
//   - topic string
//   - protocol string
//   - messageType string
func (_e *MockNetworkCoreMetrics_Expecter) InboundMessageReceived(sizeBytes interface{}, topic interface{}, protocol interface{}, messageType interface{}) *MockNetworkCoreMetrics_InboundMessageReceived_Call {
	return &MockNetworkCoreMetrics_InboundMessageReceived_Call{Call: _e.mock.On("InboundMessageReceived", sizeBytes, topic, protocol, messageType)}
}

func (_c *MockNetworkCoreMetrics_InboundMessageReceived_Call) Run(run func(sizeBytes int, topic string, protocol string, messageType string)) *MockNetworkCoreMetrics_InboundMessageReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_InboundMessageReceived_Call) Return() *MockNetworkCoreMetrics_InboundMessageReceived_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_InboundMessageReceived_Call) RunAndReturn(run func(int, string, string, string)) *MockNetworkCoreMetrics_InboundMessageReceived_Call {
	_c.Run(run)
	return _c
}

// MessageAdded provides a mock function with given fields: priority
func (_m *MockNetworkCoreMetrics) MessageAdded(priority int) {
	_m.Called(priority)
}

// MockNetworkCoreMetrics_MessageAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageAdded'
type MockNetworkCoreMetrics_MessageAdded_Call struct {
	*mock.Call
}

// MessageAdded is a helper method to define mock.On call
//   - priority int
func (_e *MockNetworkCoreMetrics_Expecter) MessageAdded(priority interface{}) *MockNetworkCoreMetrics_MessageAdded_Call {
	return &MockNetworkCoreMetrics_MessageAdded_Call{Call: _e.mock.On("MessageAdded", priority)}
}

func (_c *MockNetworkCoreMetrics_MessageAdded_Call) Run(run func(priority int)) *MockNetworkCoreMetrics_MessageAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageAdded_Call) Return() *MockNetworkCoreMetrics_MessageAdded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageAdded_Call) RunAndReturn(run func(int)) *MockNetworkCoreMetrics_MessageAdded_Call {
	_c.Run(run)
	return _c
}

// MessageProcessingFinished provides a mock function with given fields: topic, duration
func (_m *MockNetworkCoreMetrics) MessageProcessingFinished(topic string, duration time.Duration) {
	_m.Called(topic, duration)
}

// MockNetworkCoreMetrics_MessageProcessingFinished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageProcessingFinished'
type MockNetworkCoreMetrics_MessageProcessingFinished_Call struct {
	*mock.Call
}

// MessageProcessingFinished is a helper method to define mock.On call
//   - topic string
//   - duration time.Duration
func (_e *MockNetworkCoreMetrics_Expecter) MessageProcessingFinished(topic interface{}, duration interface{}) *MockNetworkCoreMetrics_MessageProcessingFinished_Call {
	return &MockNetworkCoreMetrics_MessageProcessingFinished_Call{Call: _e.mock.On("MessageProcessingFinished", topic, duration)}
}

func (_c *MockNetworkCoreMetrics_MessageProcessingFinished_Call) Run(run func(topic string, duration time.Duration)) *MockNetworkCoreMetrics_MessageProcessingFinished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageProcessingFinished_Call) Return() *MockNetworkCoreMetrics_MessageProcessingFinished_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageProcessingFinished_Call) RunAndReturn(run func(string, time.Duration)) *MockNetworkCoreMetrics_MessageProcessingFinished_Call {
	_c.Run(run)
	return _c
}

// MessageProcessingStarted provides a mock function with given fields: topic
func (_m *MockNetworkCoreMetrics) MessageProcessingStarted(topic string) {
	_m.Called(topic)
}

// MockNetworkCoreMetrics_MessageProcessingStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageProcessingStarted'
type MockNetworkCoreMetrics_MessageProcessingStarted_Call struct {
	*mock.Call
}

// MessageProcessingStarted is a helper method to define mock.On call
//   - topic string
func (_e *MockNetworkCoreMetrics_Expecter) MessageProcessingStarted(topic interface{}) *MockNetworkCoreMetrics_MessageProcessingStarted_Call {
	return &MockNetworkCoreMetrics_MessageProcessingStarted_Call{Call: _e.mock.On("MessageProcessingStarted", topic)}
}

func (_c *MockNetworkCoreMetrics_MessageProcessingStarted_Call) Run(run func(topic string)) *MockNetworkCoreMetrics_MessageProcessingStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageProcessingStarted_Call) Return() *MockNetworkCoreMetrics_MessageProcessingStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageProcessingStarted_Call) RunAndReturn(run func(string)) *MockNetworkCoreMetrics_MessageProcessingStarted_Call {
	_c.Run(run)
	return _c
}

// MessageRemoved provides a mock function with given fields: priority
func (_m *MockNetworkCoreMetrics) MessageRemoved(priority int) {
	_m.Called(priority)
}

// MockNetworkCoreMetrics_MessageRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageRemoved'
type MockNetworkCoreMetrics_MessageRemoved_Call struct {
	*mock.Call
}

// MessageRemoved is a helper method to define mock.On call
//   - priority int
func (_e *MockNetworkCoreMetrics_Expecter) MessageRemoved(priority interface{}) *MockNetworkCoreMetrics_MessageRemoved_Call {
	return &MockNetworkCoreMetrics_MessageRemoved_Call{Call: _e.mock.On("MessageRemoved", priority)}
}

func (_c *MockNetworkCoreMetrics_MessageRemoved_Call) Run(run func(priority int)) *MockNetworkCoreMetrics_MessageRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageRemoved_Call) Return() *MockNetworkCoreMetrics_MessageRemoved_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_MessageRemoved_Call) RunAndReturn(run func(int)) *MockNetworkCoreMetrics_MessageRemoved_Call {
	_c.Run(run)
	return _c
}

// OnMisbehaviorReported provides a mock function with given fields: channel, misbehaviorType
func (_m *MockNetworkCoreMetrics) OnMisbehaviorReported(channel string, misbehaviorType string) {
	_m.Called(channel, misbehaviorType)
}

// MockNetworkCoreMetrics_OnMisbehaviorReported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnMisbehaviorReported'
type MockNetworkCoreMetrics_OnMisbehaviorReported_Call struct {
	*mock.Call
}

// OnMisbehaviorReported is a helper method to define mock.On call
//   - channel string
//   - misbehaviorType string
func (_e *MockNetworkCoreMetrics_Expecter) OnMisbehaviorReported(channel interface{}, misbehaviorType interface{}) *MockNetworkCoreMetrics_OnMisbehaviorReported_Call {
	return &MockNetworkCoreMetrics_OnMisbehaviorReported_Call{Call: _e.mock.On("OnMisbehaviorReported", channel, misbehaviorType)}
}

func (_c *MockNetworkCoreMetrics_OnMisbehaviorReported_Call) Run(run func(channel string, misbehaviorType string)) *MockNetworkCoreMetrics_OnMisbehaviorReported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_OnMisbehaviorReported_Call) Return() *MockNetworkCoreMetrics_OnMisbehaviorReported_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_OnMisbehaviorReported_Call) RunAndReturn(run func(string, string)) *MockNetworkCoreMetrics_OnMisbehaviorReported_Call {
	_c.Run(run)
	return _c
}

// OnRateLimitedPeer provides a mock function with given fields: pid, role, msgType, topic, reason
func (_m *MockNetworkCoreMetrics) OnRateLimitedPeer(pid peer.ID, role string, msgType string, topic string, reason string) {
	_m.Called(pid, role, msgType, topic, reason)
}

// MockNetworkCoreMetrics_OnRateLimitedPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRateLimitedPeer'
type MockNetworkCoreMetrics_OnRateLimitedPeer_Call struct {
	*mock.Call
}

// OnRateLimitedPeer is a helper method to define mock.On call
//   - pid peer.ID
//   - role string
//   - msgType string
//   - topic string
//   - reason string
func (_e *MockNetworkCoreMetrics_Expecter) OnRateLimitedPeer(pid interface{}, role interface{}, msgType interface{}, topic interface{}, reason interface{}) *MockNetworkCoreMetrics_OnRateLimitedPeer_Call {
	return &MockNetworkCoreMetrics_OnRateLimitedPeer_Call{Call: _e.mock.On("OnRateLimitedPeer", pid, role, msgType, topic, reason)}
}

func (_c *MockNetworkCoreMetrics_OnRateLimitedPeer_Call) Run(run func(pid peer.ID, role string, msgType string, topic string, reason string)) *MockNetworkCoreMetrics_OnRateLimitedPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_OnRateLimitedPeer_Call) Return() *MockNetworkCoreMetrics_OnRateLimitedPeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_OnRateLimitedPeer_Call) RunAndReturn(run func(peer.ID, string, string, string, string)) *MockNetworkCoreMetrics_OnRateLimitedPeer_Call {
	_c.Run(run)
	return _c
}

// OnUnauthorizedMessage provides a mock function with given fields: role, msgType, topic, offense
func (_m *MockNetworkCoreMetrics) OnUnauthorizedMessage(role string, msgType string, topic string, offense string) {
	_m.Called(role, msgType, topic, offense)
}

// MockNetworkCoreMetrics_OnUnauthorizedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnUnauthorizedMessage'
type MockNetworkCoreMetrics_OnUnauthorizedMessage_Call struct {
	*mock.Call
}

// OnUnauthorizedMessage is a helper method to define mock.On call
//   - role string
//   - msgType string
//   - topic string
//   - offense string
func (_e *MockNetworkCoreMetrics_Expecter) OnUnauthorizedMessage(role interface{}, msgType interface{}, topic interface{}, offense interface{}) *MockNetworkCoreMetrics_OnUnauthorizedMessage_Call {
	return &MockNetworkCoreMetrics_OnUnauthorizedMessage_Call{Call: _e.mock.On("OnUnauthorizedMessage", role, msgType, topic, offense)}
}

func (_c *MockNetworkCoreMetrics_OnUnauthorizedMessage_Call) Run(run func(role string, msgType string, topic string, offense string)) *MockNetworkCoreMetrics_OnUnauthorizedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_OnUnauthorizedMessage_Call) Return() *MockNetworkCoreMetrics_OnUnauthorizedMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_OnUnauthorizedMessage_Call) RunAndReturn(run func(string, string, string, string)) *MockNetworkCoreMetrics_OnUnauthorizedMessage_Call {
	_c.Run(run)
	return _c
}

// OnViolationReportSkipped provides a mock function with no fields
func (_m *MockNetworkCoreMetrics) OnViolationReportSkipped() {
	_m.Called()
}

// MockNetworkCoreMetrics_OnViolationReportSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnViolationReportSkipped'
type MockNetworkCoreMetrics_OnViolationReportSkipped_Call struct {
	*mock.Call
}

// OnViolationReportSkipped is a helper method to define mock.On call
func (_e *MockNetworkCoreMetrics_Expecter) OnViolationReportSkipped() *MockNetworkCoreMetrics_OnViolationReportSkipped_Call {
	return &MockNetworkCoreMetrics_OnViolationReportSkipped_Call{Call: _e.mock.On("OnViolationReportSkipped")}
}

func (_c *MockNetworkCoreMetrics_OnViolationReportSkipped_Call) Run(run func()) *MockNetworkCoreMetrics_OnViolationReportSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_OnViolationReportSkipped_Call) Return() *MockNetworkCoreMetrics_OnViolationReportSkipped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_OnViolationReportSkipped_Call) RunAndReturn(run func()) *MockNetworkCoreMetrics_OnViolationReportSkipped_Call {
	_c.Run(run)
	return _c
}

// OutboundMessageSent provides a mock function with given fields: sizeBytes, topic, protocol, messageType
func (_m *MockNetworkCoreMetrics) OutboundMessageSent(sizeBytes int, topic string, protocol string, messageType string) {
	_m.Called(sizeBytes, topic, protocol, messageType)
}

// MockNetworkCoreMetrics_OutboundMessageSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutboundMessageSent'
type MockNetworkCoreMetrics_OutboundMessageSent_Call struct {
	*mock.Call
}

// OutboundMessageSent is a helper method to define mock.On call
//   - sizeBytes int
//   - topic string
//   - protocol string
//   - messageType string
func (_e *MockNetworkCoreMetrics_Expecter) OutboundMessageSent(sizeBytes interface{}, topic interface{}, protocol interface{}, messageType interface{}) *MockNetworkCoreMetrics_OutboundMessageSent_Call {
	return &MockNetworkCoreMetrics_OutboundMessageSent_Call{Call: _e.mock.On("OutboundMessageSent", sizeBytes, topic, protocol, messageType)}
}

func (_c *MockNetworkCoreMetrics_OutboundMessageSent_Call) Run(run func(sizeBytes int, topic string, protocol string, messageType string)) *MockNetworkCoreMetrics_OutboundMessageSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_OutboundMessageSent_Call) Return() *MockNetworkCoreMetrics_OutboundMessageSent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_OutboundMessageSent_Call) RunAndReturn(run func(int, string, string, string)) *MockNetworkCoreMetrics_OutboundMessageSent_Call {
	_c.Run(run)
	return _c
}

// QueueDuration provides a mock function with given fields: duration, priority
func (_m *MockNetworkCoreMetrics) QueueDuration(duration time.Duration, priority int) {
	_m.Called(duration, priority)
}

// MockNetworkCoreMetrics_QueueDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueDuration'
type MockNetworkCoreMetrics_QueueDuration_Call struct {
	*mock.Call
}

// QueueDuration is a helper method to define mock.On call
//   - duration time.Duration
//   - priority int
func (_e *MockNetworkCoreMetrics_Expecter) QueueDuration(duration interface{}, priority interface{}) *MockNetworkCoreMetrics_QueueDuration_Call {
	return &MockNetworkCoreMetrics_QueueDuration_Call{Call: _e.mock.On("QueueDuration", duration, priority)}
}

func (_c *MockNetworkCoreMetrics_QueueDuration_Call) Run(run func(duration time.Duration, priority int)) *MockNetworkCoreMetrics_QueueDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(int))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_QueueDuration_Call) Return() *MockNetworkCoreMetrics_QueueDuration_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_QueueDuration_Call) RunAndReturn(run func(time.Duration, int)) *MockNetworkCoreMetrics_QueueDuration_Call {
	_c.Run(run)
	return _c
}

// UnicastMessageSendingCompleted provides a mock function with given fields: topic
func (_m *MockNetworkCoreMetrics) UnicastMessageSendingCompleted(topic string) {
	_m.Called(topic)
}

// MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnicastMessageSendingCompleted'
type MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call struct {
	*mock.Call
}

// UnicastMessageSendingCompleted is a helper method to define mock.On call
//   - topic string
func (_e *MockNetworkCoreMetrics_Expecter) UnicastMessageSendingCompleted(topic interface{}) *MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call {
	return &MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call{Call: _e.mock.On("UnicastMessageSendingCompleted", topic)}
}

func (_c *MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call) Run(run func(topic string)) *MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call) Return() *MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call) RunAndReturn(run func(string)) *MockNetworkCoreMetrics_UnicastMessageSendingCompleted_Call {
	_c.Run(run)
	return _c
}

// UnicastMessageSendingStarted provides a mock function with given fields: topic
func (_m *MockNetworkCoreMetrics) UnicastMessageSendingStarted(topic string) {
	_m.Called(topic)
}

// MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnicastMessageSendingStarted'
type MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call struct {
	*mock.Call
}

// UnicastMessageSendingStarted is a helper method to define mock.On call
//   - topic string
func (_e *MockNetworkCoreMetrics_Expecter) UnicastMessageSendingStarted(topic interface{}) *MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call {
	return &MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call{Call: _e.mock.On("UnicastMessageSendingStarted", topic)}
}

func (_c *MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call) Run(run func(topic string)) *MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call) Return() *MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call) RunAndReturn(run func(string)) *MockNetworkCoreMetrics_UnicastMessageSendingStarted_Call {
	_c.Run(run)
	return _c
}

// NewMockNetworkCoreMetrics creates a new instance of MockNetworkCoreMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkCoreMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkCoreMetrics {
	mock := &MockNetworkCoreMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
