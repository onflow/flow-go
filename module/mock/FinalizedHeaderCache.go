// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockFinalizedHeaderCache is an autogenerated mock type for the FinalizedHeaderCache type
type MockFinalizedHeaderCache struct {
	mock.Mock
}

type MockFinalizedHeaderCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFinalizedHeaderCache) EXPECT() *MockFinalizedHeaderCache_Expecter {
	return &MockFinalizedHeaderCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with no fields
func (_m *MockFinalizedHeaderCache) Get() *flow.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// MockFinalizedHeaderCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFinalizedHeaderCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockFinalizedHeaderCache_Expecter) Get() *MockFinalizedHeaderCache_Get_Call {
	return &MockFinalizedHeaderCache_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockFinalizedHeaderCache_Get_Call) Run(run func()) *MockFinalizedHeaderCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFinalizedHeaderCache_Get_Call) Return(_a0 *flow.Header) *MockFinalizedHeaderCache_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFinalizedHeaderCache_Get_Call) RunAndReturn(run func() *flow.Header) *MockFinalizedHeaderCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFinalizedHeaderCache creates a new instance of MockFinalizedHeaderCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinalizedHeaderCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinalizedHeaderCache {
	mock := &MockFinalizedHeaderCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
