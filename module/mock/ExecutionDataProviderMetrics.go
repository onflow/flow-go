// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockExecutionDataProviderMetrics is an autogenerated mock type for the ExecutionDataProviderMetrics type
type MockExecutionDataProviderMetrics struct {
	mock.Mock
}

type MockExecutionDataProviderMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionDataProviderMetrics) EXPECT() *MockExecutionDataProviderMetrics_Expecter {
	return &MockExecutionDataProviderMetrics_Expecter{mock: &_m.Mock}
}

// AddBlobsFailed provides a mock function with no fields
func (_m *MockExecutionDataProviderMetrics) AddBlobsFailed() {
	_m.Called()
}

// MockExecutionDataProviderMetrics_AddBlobsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlobsFailed'
type MockExecutionDataProviderMetrics_AddBlobsFailed_Call struct {
	*mock.Call
}

// AddBlobsFailed is a helper method to define mock.On call
func (_e *MockExecutionDataProviderMetrics_Expecter) AddBlobsFailed() *MockExecutionDataProviderMetrics_AddBlobsFailed_Call {
	return &MockExecutionDataProviderMetrics_AddBlobsFailed_Call{Call: _e.mock.On("AddBlobsFailed")}
}

func (_c *MockExecutionDataProviderMetrics_AddBlobsFailed_Call) Run(run func()) *MockExecutionDataProviderMetrics_AddBlobsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionDataProviderMetrics_AddBlobsFailed_Call) Return() *MockExecutionDataProviderMetrics_AddBlobsFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataProviderMetrics_AddBlobsFailed_Call) RunAndReturn(run func()) *MockExecutionDataProviderMetrics_AddBlobsFailed_Call {
	_c.Run(run)
	return _c
}

// AddBlobsSucceeded provides a mock function with given fields: duration, totalSize
func (_m *MockExecutionDataProviderMetrics) AddBlobsSucceeded(duration time.Duration, totalSize uint64) {
	_m.Called(duration, totalSize)
}

// MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlobsSucceeded'
type MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call struct {
	*mock.Call
}

// AddBlobsSucceeded is a helper method to define mock.On call
//   - duration time.Duration
//   - totalSize uint64
func (_e *MockExecutionDataProviderMetrics_Expecter) AddBlobsSucceeded(duration interface{}, totalSize interface{}) *MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call {
	return &MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call{Call: _e.mock.On("AddBlobsSucceeded", duration, totalSize)}
}

func (_c *MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call) Run(run func(duration time.Duration, totalSize uint64)) *MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(uint64))
	})
	return _c
}

func (_c *MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call) Return() *MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call) RunAndReturn(run func(time.Duration, uint64)) *MockExecutionDataProviderMetrics_AddBlobsSucceeded_Call {
	_c.Run(run)
	return _c
}

// RootIDComputed provides a mock function with given fields: duration, numberOfChunks
func (_m *MockExecutionDataProviderMetrics) RootIDComputed(duration time.Duration, numberOfChunks int) {
	_m.Called(duration, numberOfChunks)
}

// MockExecutionDataProviderMetrics_RootIDComputed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootIDComputed'
type MockExecutionDataProviderMetrics_RootIDComputed_Call struct {
	*mock.Call
}

// RootIDComputed is a helper method to define mock.On call
//   - duration time.Duration
//   - numberOfChunks int
func (_e *MockExecutionDataProviderMetrics_Expecter) RootIDComputed(duration interface{}, numberOfChunks interface{}) *MockExecutionDataProviderMetrics_RootIDComputed_Call {
	return &MockExecutionDataProviderMetrics_RootIDComputed_Call{Call: _e.mock.On("RootIDComputed", duration, numberOfChunks)}
}

func (_c *MockExecutionDataProviderMetrics_RootIDComputed_Call) Run(run func(duration time.Duration, numberOfChunks int)) *MockExecutionDataProviderMetrics_RootIDComputed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(int))
	})
	return _c
}

func (_c *MockExecutionDataProviderMetrics_RootIDComputed_Call) Return() *MockExecutionDataProviderMetrics_RootIDComputed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataProviderMetrics_RootIDComputed_Call) RunAndReturn(run func(time.Duration, int)) *MockExecutionDataProviderMetrics_RootIDComputed_Call {
	_c.Run(run)
	return _c
}

// NewMockExecutionDataProviderMetrics creates a new instance of MockExecutionDataProviderMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionDataProviderMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionDataProviderMetrics {
	mock := &MockExecutionDataProviderMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
