// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"

	model "github.com/onflow/flow-go/consensus/hotstuff/model"
)

// MockHotStuffFollower is an autogenerated mock type for the HotStuffFollower type
type MockHotStuffFollower struct {
	mock.Mock
}

type MockHotStuffFollower_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHotStuffFollower) EXPECT() *MockHotStuffFollower_Expecter {
	return &MockHotStuffFollower_Expecter{mock: &_m.Mock}
}

// AddCertifiedBlock provides a mock function with given fields: certifiedBlock
func (_m *MockHotStuffFollower) AddCertifiedBlock(certifiedBlock *model.CertifiedBlock) {
	_m.Called(certifiedBlock)
}

// MockHotStuffFollower_AddCertifiedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCertifiedBlock'
type MockHotStuffFollower_AddCertifiedBlock_Call struct {
	*mock.Call
}

// AddCertifiedBlock is a helper method to define mock.On call
//   - certifiedBlock *model.CertifiedBlock
func (_e *MockHotStuffFollower_Expecter) AddCertifiedBlock(certifiedBlock interface{}) *MockHotStuffFollower_AddCertifiedBlock_Call {
	return &MockHotStuffFollower_AddCertifiedBlock_Call{Call: _e.mock.On("AddCertifiedBlock", certifiedBlock)}
}

func (_c *MockHotStuffFollower_AddCertifiedBlock_Call) Run(run func(certifiedBlock *model.CertifiedBlock)) *MockHotStuffFollower_AddCertifiedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.CertifiedBlock))
	})
	return _c
}

func (_c *MockHotStuffFollower_AddCertifiedBlock_Call) Return() *MockHotStuffFollower_AddCertifiedBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHotStuffFollower_AddCertifiedBlock_Call) RunAndReturn(run func(*model.CertifiedBlock)) *MockHotStuffFollower_AddCertifiedBlock_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockHotStuffFollower) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockHotStuffFollower_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockHotStuffFollower_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockHotStuffFollower_Expecter) Done() *MockHotStuffFollower_Done_Call {
	return &MockHotStuffFollower_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockHotStuffFollower_Done_Call) Run(run func()) *MockHotStuffFollower_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHotStuffFollower_Done_Call) Return(_a0 <-chan struct{}) *MockHotStuffFollower_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHotStuffFollower_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockHotStuffFollower_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockHotStuffFollower) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockHotStuffFollower_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockHotStuffFollower_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockHotStuffFollower_Expecter) Ready() *MockHotStuffFollower_Ready_Call {
	return &MockHotStuffFollower_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockHotStuffFollower_Ready_Call) Run(run func()) *MockHotStuffFollower_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHotStuffFollower_Ready_Call) Return(_a0 <-chan struct{}) *MockHotStuffFollower_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHotStuffFollower_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockHotStuffFollower_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockHotStuffFollower) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockHotStuffFollower_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockHotStuffFollower_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockHotStuffFollower_Expecter) Start(_a0 interface{}) *MockHotStuffFollower_Start_Call {
	return &MockHotStuffFollower_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockHotStuffFollower_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockHotStuffFollower_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockHotStuffFollower_Start_Call) Return() *MockHotStuffFollower_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHotStuffFollower_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockHotStuffFollower_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockHotStuffFollower creates a new instance of MockHotStuffFollower. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHotStuffFollower(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHotStuffFollower {
	mock := &MockHotStuffFollower{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
