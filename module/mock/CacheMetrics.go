// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockCacheMetrics is an autogenerated mock type for the CacheMetrics type
type MockCacheMetrics struct {
	mock.Mock
}

type MockCacheMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheMetrics) EXPECT() *MockCacheMetrics_Expecter {
	return &MockCacheMetrics_Expecter{mock: &_m.Mock}
}

// CacheEntries provides a mock function with given fields: resource, entries
func (_m *MockCacheMetrics) CacheEntries(resource string, entries uint) {
	_m.Called(resource, entries)
}

// MockCacheMetrics_CacheEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheEntries'
type MockCacheMetrics_CacheEntries_Call struct {
	*mock.Call
}

// CacheEntries is a helper method to define mock.On call
//   - resource string
//   - entries uint
func (_e *MockCacheMetrics_Expecter) CacheEntries(resource interface{}, entries interface{}) *MockCacheMetrics_CacheEntries_Call {
	return &MockCacheMetrics_CacheEntries_Call{Call: _e.mock.On("CacheEntries", resource, entries)}
}

func (_c *MockCacheMetrics_CacheEntries_Call) Run(run func(resource string, entries uint)) *MockCacheMetrics_CacheEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint))
	})
	return _c
}

func (_c *MockCacheMetrics_CacheEntries_Call) Return() *MockCacheMetrics_CacheEntries_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheMetrics_CacheEntries_Call) RunAndReturn(run func(string, uint)) *MockCacheMetrics_CacheEntries_Call {
	_c.Run(run)
	return _c
}

// CacheHit provides a mock function with given fields: resource
func (_m *MockCacheMetrics) CacheHit(resource string) {
	_m.Called(resource)
}

// MockCacheMetrics_CacheHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheHit'
type MockCacheMetrics_CacheHit_Call struct {
	*mock.Call
}

// CacheHit is a helper method to define mock.On call
//   - resource string
func (_e *MockCacheMetrics_Expecter) CacheHit(resource interface{}) *MockCacheMetrics_CacheHit_Call {
	return &MockCacheMetrics_CacheHit_Call{Call: _e.mock.On("CacheHit", resource)}
}

func (_c *MockCacheMetrics_CacheHit_Call) Run(run func(resource string)) *MockCacheMetrics_CacheHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheMetrics_CacheHit_Call) Return() *MockCacheMetrics_CacheHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheMetrics_CacheHit_Call) RunAndReturn(run func(string)) *MockCacheMetrics_CacheHit_Call {
	_c.Run(run)
	return _c
}

// CacheMiss provides a mock function with given fields: resource
func (_m *MockCacheMetrics) CacheMiss(resource string) {
	_m.Called(resource)
}

// MockCacheMetrics_CacheMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheMiss'
type MockCacheMetrics_CacheMiss_Call struct {
	*mock.Call
}

// CacheMiss is a helper method to define mock.On call
//   - resource string
func (_e *MockCacheMetrics_Expecter) CacheMiss(resource interface{}) *MockCacheMetrics_CacheMiss_Call {
	return &MockCacheMetrics_CacheMiss_Call{Call: _e.mock.On("CacheMiss", resource)}
}

func (_c *MockCacheMetrics_CacheMiss_Call) Run(run func(resource string)) *MockCacheMetrics_CacheMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheMetrics_CacheMiss_Call) Return() *MockCacheMetrics_CacheMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheMetrics_CacheMiss_Call) RunAndReturn(run func(string)) *MockCacheMetrics_CacheMiss_Call {
	_c.Run(run)
	return _c
}

// CacheNotFound provides a mock function with given fields: resource
func (_m *MockCacheMetrics) CacheNotFound(resource string) {
	_m.Called(resource)
}

// MockCacheMetrics_CacheNotFound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheNotFound'
type MockCacheMetrics_CacheNotFound_Call struct {
	*mock.Call
}

// CacheNotFound is a helper method to define mock.On call
//   - resource string
func (_e *MockCacheMetrics_Expecter) CacheNotFound(resource interface{}) *MockCacheMetrics_CacheNotFound_Call {
	return &MockCacheMetrics_CacheNotFound_Call{Call: _e.mock.On("CacheNotFound", resource)}
}

func (_c *MockCacheMetrics_CacheNotFound_Call) Run(run func(resource string)) *MockCacheMetrics_CacheNotFound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheMetrics_CacheNotFound_Call) Return() *MockCacheMetrics_CacheNotFound_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheMetrics_CacheNotFound_Call) RunAndReturn(run func(string)) *MockCacheMetrics_CacheNotFound_Call {
	_c.Run(run)
	return _c
}

// NewMockCacheMetrics creates a new instance of MockCacheMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheMetrics {
	mock := &MockCacheMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
