// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/flow-go/crypto"
	mock "github.com/stretchr/testify/mock"
)

// Merger is an autogenerated mock type for the Merger type
type Merger struct {
	mock.Mock
}

// Join provides a mock function with given fields: sig1, sig2
func (_m *Merger) Join(sig1 crypto.Signature, sig2 crypto.Signature) ([]byte, error) {
	ret := _m.Called(sig1, sig2)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(crypto.Signature, crypto.Signature) []byte); ok {
		r0 = rf(sig1, sig2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(crypto.Signature, crypto.Signature) error); ok {
		r1 = rf(sig1, sig2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Split provides a mock function with given fields: combined
func (_m *Merger) Split(combined []byte) (crypto.Signature, crypto.Signature, error) {
	ret := _m.Called(combined)

	var r0 crypto.Signature
	if rf, ok := ret.Get(0).(func([]byte) crypto.Signature); ok {
		r0 = rf(combined)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	var r1 crypto.Signature
	if rf, ok := ret.Get(1).(func([]byte) crypto.Signature); ok {
		r1 = rf(combined)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(crypto.Signature)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(combined)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
