// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/flow-go/crypto"
	mock "github.com/stretchr/testify/mock"
)

// Merger is an autogenerated mock type for the Merger type
type Merger struct {
	mock.Mock
}

// Join provides a mock function with given fields: sigs
func (_m *Merger) Join(sigs ...crypto.Signature) ([]byte, error) {
	_va := make([]interface{}, len(sigs))
	for _i := range sigs {
		_va[_i] = sigs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(...crypto.Signature) []byte); ok {
		r0 = rf(sigs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...crypto.Signature) error); ok {
		r1 = rf(sigs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Split provides a mock function with given fields: combined
func (_m *Merger) Split(combined []byte) ([]crypto.Signature, error) {
	ret := _m.Called(combined)

	var r0 []crypto.Signature
	if rf, ok := ret.Get(0).(func([]byte) []crypto.Signature); ok {
		r0 = rf(combined)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crypto.Signature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(combined)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
