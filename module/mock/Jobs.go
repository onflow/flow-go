// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	module "github.com/onflow/flow-go/module"
	mock "github.com/stretchr/testify/mock"
)

// MockJobs is an autogenerated mock type for the Jobs type
type MockJobs struct {
	mock.Mock
}

type MockJobs_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobs) EXPECT() *MockJobs_Expecter {
	return &MockJobs_Expecter{mock: &_m.Mock}
}

// AtIndex provides a mock function with given fields: index
func (_m *MockJobs) AtIndex(index uint64) (module.Job, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for AtIndex")
	}

	var r0 module.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (module.Job, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) module.Job); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobs_AtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AtIndex'
type MockJobs_AtIndex_Call struct {
	*mock.Call
}

// AtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *MockJobs_Expecter) AtIndex(index interface{}) *MockJobs_AtIndex_Call {
	return &MockJobs_AtIndex_Call{Call: _e.mock.On("AtIndex", index)}
}

func (_c *MockJobs_AtIndex_Call) Run(run func(index uint64)) *MockJobs_AtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockJobs_AtIndex_Call) Return(_a0 module.Job, _a1 error) *MockJobs_AtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobs_AtIndex_Call) RunAndReturn(run func(uint64) (module.Job, error)) *MockJobs_AtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function with no fields
func (_m *MockJobs) Head() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobs_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type MockJobs_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
func (_e *MockJobs_Expecter) Head() *MockJobs_Head_Call {
	return &MockJobs_Head_Call{Call: _e.mock.On("Head")}
}

func (_c *MockJobs_Head_Call) Run(run func()) *MockJobs_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobs_Head_Call) Return(_a0 uint64, _a1 error) *MockJobs_Head_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobs_Head_Call) RunAndReturn(run func() (uint64, error)) *MockJobs_Head_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobs creates a new instance of MockJobs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobs(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobs {
	mock := &MockJobs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
