// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockTransactionMetrics is an autogenerated mock type for the TransactionMetrics type
type MockTransactionMetrics struct {
	mock.Mock
}

type MockTransactionMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionMetrics) EXPECT() *MockTransactionMetrics_Expecter {
	return &MockTransactionMetrics_Expecter{mock: &_m.Mock}
}

// TransactionExecuted provides a mock function with given fields: txID, when
func (_m *MockTransactionMetrics) TransactionExecuted(txID flow.Identifier, when time.Time) {
	_m.Called(txID, when)
}

// MockTransactionMetrics_TransactionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionExecuted'
type MockTransactionMetrics_TransactionExecuted_Call struct {
	*mock.Call
}

// TransactionExecuted is a helper method to define mock.On call
//   - txID flow.Identifier
//   - when time.Time
func (_e *MockTransactionMetrics_Expecter) TransactionExecuted(txID interface{}, when interface{}) *MockTransactionMetrics_TransactionExecuted_Call {
	return &MockTransactionMetrics_TransactionExecuted_Call{Call: _e.mock.On("TransactionExecuted", txID, when)}
}

func (_c *MockTransactionMetrics_TransactionExecuted_Call) Run(run func(txID flow.Identifier, when time.Time)) *MockTransactionMetrics_TransactionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(time.Time))
	})
	return _c
}

func (_c *MockTransactionMetrics_TransactionExecuted_Call) Return() *MockTransactionMetrics_TransactionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionMetrics_TransactionExecuted_Call) RunAndReturn(run func(flow.Identifier, time.Time)) *MockTransactionMetrics_TransactionExecuted_Call {
	_c.Run(run)
	return _c
}

// TransactionExpired provides a mock function with given fields: txID
func (_m *MockTransactionMetrics) TransactionExpired(txID flow.Identifier) {
	_m.Called(txID)
}

// MockTransactionMetrics_TransactionExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionExpired'
type MockTransactionMetrics_TransactionExpired_Call struct {
	*mock.Call
}

// TransactionExpired is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockTransactionMetrics_Expecter) TransactionExpired(txID interface{}) *MockTransactionMetrics_TransactionExpired_Call {
	return &MockTransactionMetrics_TransactionExpired_Call{Call: _e.mock.On("TransactionExpired", txID)}
}

func (_c *MockTransactionMetrics_TransactionExpired_Call) Run(run func(txID flow.Identifier)) *MockTransactionMetrics_TransactionExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionMetrics_TransactionExpired_Call) Return() *MockTransactionMetrics_TransactionExpired_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionMetrics_TransactionExpired_Call) RunAndReturn(run func(flow.Identifier)) *MockTransactionMetrics_TransactionExpired_Call {
	_c.Run(run)
	return _c
}

// TransactionFinalized provides a mock function with given fields: txID, when
func (_m *MockTransactionMetrics) TransactionFinalized(txID flow.Identifier, when time.Time) {
	_m.Called(txID, when)
}

// MockTransactionMetrics_TransactionFinalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionFinalized'
type MockTransactionMetrics_TransactionFinalized_Call struct {
	*mock.Call
}

// TransactionFinalized is a helper method to define mock.On call
//   - txID flow.Identifier
//   - when time.Time
func (_e *MockTransactionMetrics_Expecter) TransactionFinalized(txID interface{}, when interface{}) *MockTransactionMetrics_TransactionFinalized_Call {
	return &MockTransactionMetrics_TransactionFinalized_Call{Call: _e.mock.On("TransactionFinalized", txID, when)}
}

func (_c *MockTransactionMetrics_TransactionFinalized_Call) Run(run func(txID flow.Identifier, when time.Time)) *MockTransactionMetrics_TransactionFinalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(time.Time))
	})
	return _c
}

func (_c *MockTransactionMetrics_TransactionFinalized_Call) Return() *MockTransactionMetrics_TransactionFinalized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionMetrics_TransactionFinalized_Call) RunAndReturn(run func(flow.Identifier, time.Time)) *MockTransactionMetrics_TransactionFinalized_Call {
	_c.Run(run)
	return _c
}

// TransactionReceived provides a mock function with given fields: txID, when
func (_m *MockTransactionMetrics) TransactionReceived(txID flow.Identifier, when time.Time) {
	_m.Called(txID, when)
}

// MockTransactionMetrics_TransactionReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionReceived'
type MockTransactionMetrics_TransactionReceived_Call struct {
	*mock.Call
}

// TransactionReceived is a helper method to define mock.On call
//   - txID flow.Identifier
//   - when time.Time
func (_e *MockTransactionMetrics_Expecter) TransactionReceived(txID interface{}, when interface{}) *MockTransactionMetrics_TransactionReceived_Call {
	return &MockTransactionMetrics_TransactionReceived_Call{Call: _e.mock.On("TransactionReceived", txID, when)}
}

func (_c *MockTransactionMetrics_TransactionReceived_Call) Run(run func(txID flow.Identifier, when time.Time)) *MockTransactionMetrics_TransactionReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(time.Time))
	})
	return _c
}

func (_c *MockTransactionMetrics_TransactionReceived_Call) Return() *MockTransactionMetrics_TransactionReceived_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionMetrics_TransactionReceived_Call) RunAndReturn(run func(flow.Identifier, time.Time)) *MockTransactionMetrics_TransactionReceived_Call {
	_c.Run(run)
	return _c
}

// TransactionResultFetched provides a mock function with given fields: dur, size
func (_m *MockTransactionMetrics) TransactionResultFetched(dur time.Duration, size int) {
	_m.Called(dur, size)
}

// MockTransactionMetrics_TransactionResultFetched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionResultFetched'
type MockTransactionMetrics_TransactionResultFetched_Call struct {
	*mock.Call
}

// TransactionResultFetched is a helper method to define mock.On call
//   - dur time.Duration
//   - size int
func (_e *MockTransactionMetrics_Expecter) TransactionResultFetched(dur interface{}, size interface{}) *MockTransactionMetrics_TransactionResultFetched_Call {
	return &MockTransactionMetrics_TransactionResultFetched_Call{Call: _e.mock.On("TransactionResultFetched", dur, size)}
}

func (_c *MockTransactionMetrics_TransactionResultFetched_Call) Run(run func(dur time.Duration, size int)) *MockTransactionMetrics_TransactionResultFetched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(int))
	})
	return _c
}

func (_c *MockTransactionMetrics_TransactionResultFetched_Call) Return() *MockTransactionMetrics_TransactionResultFetched_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionMetrics_TransactionResultFetched_Call) RunAndReturn(run func(time.Duration, int)) *MockTransactionMetrics_TransactionResultFetched_Call {
	_c.Run(run)
	return _c
}

// TransactionSealed provides a mock function with given fields: txID, when
func (_m *MockTransactionMetrics) TransactionSealed(txID flow.Identifier, when time.Time) {
	_m.Called(txID, when)
}

// MockTransactionMetrics_TransactionSealed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionSealed'
type MockTransactionMetrics_TransactionSealed_Call struct {
	*mock.Call
}

// TransactionSealed is a helper method to define mock.On call
//   - txID flow.Identifier
//   - when time.Time
func (_e *MockTransactionMetrics_Expecter) TransactionSealed(txID interface{}, when interface{}) *MockTransactionMetrics_TransactionSealed_Call {
	return &MockTransactionMetrics_TransactionSealed_Call{Call: _e.mock.On("TransactionSealed", txID, when)}
}

func (_c *MockTransactionMetrics_TransactionSealed_Call) Run(run func(txID flow.Identifier, when time.Time)) *MockTransactionMetrics_TransactionSealed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(time.Time))
	})
	return _c
}

func (_c *MockTransactionMetrics_TransactionSealed_Call) Return() *MockTransactionMetrics_TransactionSealed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionMetrics_TransactionSealed_Call) RunAndReturn(run func(flow.Identifier, time.Time)) *MockTransactionMetrics_TransactionSealed_Call {
	_c.Run(run)
	return _c
}

// TransactionSubmissionFailed provides a mock function with no fields
func (_m *MockTransactionMetrics) TransactionSubmissionFailed() {
	_m.Called()
}

// MockTransactionMetrics_TransactionSubmissionFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionSubmissionFailed'
type MockTransactionMetrics_TransactionSubmissionFailed_Call struct {
	*mock.Call
}

// TransactionSubmissionFailed is a helper method to define mock.On call
func (_e *MockTransactionMetrics_Expecter) TransactionSubmissionFailed() *MockTransactionMetrics_TransactionSubmissionFailed_Call {
	return &MockTransactionMetrics_TransactionSubmissionFailed_Call{Call: _e.mock.On("TransactionSubmissionFailed")}
}

func (_c *MockTransactionMetrics_TransactionSubmissionFailed_Call) Run(run func()) *MockTransactionMetrics_TransactionSubmissionFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionMetrics_TransactionSubmissionFailed_Call) Return() *MockTransactionMetrics_TransactionSubmissionFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionMetrics_TransactionSubmissionFailed_Call) RunAndReturn(run func()) *MockTransactionMetrics_TransactionSubmissionFailed_Call {
	_c.Run(run)
	return _c
}

// NewMockTransactionMetrics creates a new instance of MockTransactionMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionMetrics {
	mock := &MockTransactionMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
