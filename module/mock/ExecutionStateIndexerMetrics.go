// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockExecutionStateIndexerMetrics is an autogenerated mock type for the ExecutionStateIndexerMetrics type
type MockExecutionStateIndexerMetrics struct {
	mock.Mock
}

type MockExecutionStateIndexerMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionStateIndexerMetrics) EXPECT() *MockExecutionStateIndexerMetrics_Expecter {
	return &MockExecutionStateIndexerMetrics_Expecter{mock: &_m.Mock}
}

// BlockIndexed provides a mock function with given fields: height, duration, events, registers, transactionResults
func (_m *MockExecutionStateIndexerMetrics) BlockIndexed(height uint64, duration time.Duration, events int, registers int, transactionResults int) {
	_m.Called(height, duration, events, registers, transactionResults)
}

// MockExecutionStateIndexerMetrics_BlockIndexed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockIndexed'
type MockExecutionStateIndexerMetrics_BlockIndexed_Call struct {
	*mock.Call
}

// BlockIndexed is a helper method to define mock.On call
//   - height uint64
//   - duration time.Duration
//   - events int
//   - registers int
//   - transactionResults int
func (_e *MockExecutionStateIndexerMetrics_Expecter) BlockIndexed(height interface{}, duration interface{}, events interface{}, registers interface{}, transactionResults interface{}) *MockExecutionStateIndexerMetrics_BlockIndexed_Call {
	return &MockExecutionStateIndexerMetrics_BlockIndexed_Call{Call: _e.mock.On("BlockIndexed", height, duration, events, registers, transactionResults)}
}

func (_c *MockExecutionStateIndexerMetrics_BlockIndexed_Call) Run(run func(height uint64, duration time.Duration, events int, registers int, transactionResults int)) *MockExecutionStateIndexerMetrics_BlockIndexed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(time.Duration), args[2].(int), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockExecutionStateIndexerMetrics_BlockIndexed_Call) Return() *MockExecutionStateIndexerMetrics_BlockIndexed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionStateIndexerMetrics_BlockIndexed_Call) RunAndReturn(run func(uint64, time.Duration, int, int, int)) *MockExecutionStateIndexerMetrics_BlockIndexed_Call {
	_c.Run(run)
	return _c
}

// BlockReindexed provides a mock function with no fields
func (_m *MockExecutionStateIndexerMetrics) BlockReindexed() {
	_m.Called()
}

// MockExecutionStateIndexerMetrics_BlockReindexed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockReindexed'
type MockExecutionStateIndexerMetrics_BlockReindexed_Call struct {
	*mock.Call
}

// BlockReindexed is a helper method to define mock.On call
func (_e *MockExecutionStateIndexerMetrics_Expecter) BlockReindexed() *MockExecutionStateIndexerMetrics_BlockReindexed_Call {
	return &MockExecutionStateIndexerMetrics_BlockReindexed_Call{Call: _e.mock.On("BlockReindexed")}
}

func (_c *MockExecutionStateIndexerMetrics_BlockReindexed_Call) Run(run func()) *MockExecutionStateIndexerMetrics_BlockReindexed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionStateIndexerMetrics_BlockReindexed_Call) Return() *MockExecutionStateIndexerMetrics_BlockReindexed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionStateIndexerMetrics_BlockReindexed_Call) RunAndReturn(run func()) *MockExecutionStateIndexerMetrics_BlockReindexed_Call {
	_c.Run(run)
	return _c
}

// InitializeLatestHeight provides a mock function with given fields: height
func (_m *MockExecutionStateIndexerMetrics) InitializeLatestHeight(height uint64) {
	_m.Called(height)
}

// MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeLatestHeight'
type MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call struct {
	*mock.Call
}

// InitializeLatestHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockExecutionStateIndexerMetrics_Expecter) InitializeLatestHeight(height interface{}) *MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call {
	return &MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call{Call: _e.mock.On("InitializeLatestHeight", height)}
}

func (_c *MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call) Run(run func(height uint64)) *MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call) Return() *MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call) RunAndReturn(run func(uint64)) *MockExecutionStateIndexerMetrics_InitializeLatestHeight_Call {
	_c.Run(run)
	return _c
}

// NewMockExecutionStateIndexerMetrics creates a new instance of MockExecutionStateIndexerMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionStateIndexerMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionStateIndexerMetrics {
	mock := &MockExecutionStateIndexerMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
