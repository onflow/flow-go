// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockEpochLookup is an autogenerated mock type for the EpochLookup type
type MockEpochLookup struct {
	mock.Mock
}

type MockEpochLookup_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpochLookup) EXPECT() *MockEpochLookup_Expecter {
	return &MockEpochLookup_Expecter{mock: &_m.Mock}
}

// EpochForView provides a mock function with given fields: view
func (_m *MockEpochLookup) EpochForView(view uint64) (uint64, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for EpochForView")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochLookup_EpochForView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochForView'
type MockEpochLookup_EpochForView_Call struct {
	*mock.Call
}

// EpochForView is a helper method to define mock.On call
//   - view uint64
func (_e *MockEpochLookup_Expecter) EpochForView(view interface{}) *MockEpochLookup_EpochForView_Call {
	return &MockEpochLookup_EpochForView_Call{Call: _e.mock.On("EpochForView", view)}
}

func (_c *MockEpochLookup_EpochForView_Call) Run(run func(view uint64)) *MockEpochLookup_EpochForView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockEpochLookup_EpochForView_Call) Return(epochCounter uint64, err error) *MockEpochLookup_EpochForView_Call {
	_c.Call.Return(epochCounter, err)
	return _c
}

func (_c *MockEpochLookup_EpochForView_Call) RunAndReturn(run func(uint64) (uint64, error)) *MockEpochLookup_EpochForView_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEpochLookup creates a new instance of MockEpochLookup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpochLookup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpochLookup {
	mock := &MockEpochLookup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
