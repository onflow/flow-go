// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	module "github.com/onflow/flow-go/module"
	mock "github.com/stretchr/testify/mock"
)

// MockJobConsumer is an autogenerated mock type for the JobConsumer type
type MockJobConsumer struct {
	mock.Mock
}

type MockJobConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobConsumer) EXPECT() *MockJobConsumer_Expecter {
	return &MockJobConsumer_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with no fields
func (_m *MockJobConsumer) Check() {
	_m.Called()
}

// MockJobConsumer_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockJobConsumer_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
func (_e *MockJobConsumer_Expecter) Check() *MockJobConsumer_Check_Call {
	return &MockJobConsumer_Check_Call{Call: _e.mock.On("Check")}
}

func (_c *MockJobConsumer_Check_Call) Run(run func()) *MockJobConsumer_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobConsumer_Check_Call) Return() *MockJobConsumer_Check_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockJobConsumer_Check_Call) RunAndReturn(run func()) *MockJobConsumer_Check_Call {
	_c.Run(run)
	return _c
}

// LastProcessedIndex provides a mock function with no fields
func (_m *MockJobConsumer) LastProcessedIndex() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastProcessedIndex")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockJobConsumer_LastProcessedIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastProcessedIndex'
type MockJobConsumer_LastProcessedIndex_Call struct {
	*mock.Call
}

// LastProcessedIndex is a helper method to define mock.On call
func (_e *MockJobConsumer_Expecter) LastProcessedIndex() *MockJobConsumer_LastProcessedIndex_Call {
	return &MockJobConsumer_LastProcessedIndex_Call{Call: _e.mock.On("LastProcessedIndex")}
}

func (_c *MockJobConsumer_LastProcessedIndex_Call) Run(run func()) *MockJobConsumer_LastProcessedIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobConsumer_LastProcessedIndex_Call) Return(_a0 uint64) *MockJobConsumer_LastProcessedIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobConsumer_LastProcessedIndex_Call) RunAndReturn(run func() uint64) *MockJobConsumer_LastProcessedIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyJobIsDone provides a mock function with given fields: _a0
func (_m *MockJobConsumer) NotifyJobIsDone(_a0 module.JobID) uint64 {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NotifyJobIsDone")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(module.JobID) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockJobConsumer_NotifyJobIsDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyJobIsDone'
type MockJobConsumer_NotifyJobIsDone_Call struct {
	*mock.Call
}

// NotifyJobIsDone is a helper method to define mock.On call
//   - _a0 module.JobID
func (_e *MockJobConsumer_Expecter) NotifyJobIsDone(_a0 interface{}) *MockJobConsumer_NotifyJobIsDone_Call {
	return &MockJobConsumer_NotifyJobIsDone_Call{Call: _e.mock.On("NotifyJobIsDone", _a0)}
}

func (_c *MockJobConsumer_NotifyJobIsDone_Call) Run(run func(_a0 module.JobID)) *MockJobConsumer_NotifyJobIsDone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(module.JobID))
	})
	return _c
}

func (_c *MockJobConsumer_NotifyJobIsDone_Call) Return(_a0 uint64) *MockJobConsumer_NotifyJobIsDone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobConsumer_NotifyJobIsDone_Call) RunAndReturn(run func(module.JobID) uint64) *MockJobConsumer_NotifyJobIsDone_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockJobConsumer) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockJobConsumer_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockJobConsumer_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockJobConsumer_Expecter) Size() *MockJobConsumer_Size_Call {
	return &MockJobConsumer_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockJobConsumer_Size_Call) Run(run func()) *MockJobConsumer_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobConsumer_Size_Call) Return(_a0 uint) *MockJobConsumer_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobConsumer_Size_Call) RunAndReturn(run func() uint) *MockJobConsumer_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockJobConsumer) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobConsumer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockJobConsumer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockJobConsumer_Expecter) Start() *MockJobConsumer_Start_Call {
	return &MockJobConsumer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockJobConsumer_Start_Call) Run(run func()) *MockJobConsumer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobConsumer_Start_Call) Return(_a0 error) *MockJobConsumer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobConsumer_Start_Call) RunAndReturn(run func() error) *MockJobConsumer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockJobConsumer) Stop() {
	_m.Called()
}

// MockJobConsumer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockJobConsumer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockJobConsumer_Expecter) Stop() *MockJobConsumer_Stop_Call {
	return &MockJobConsumer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockJobConsumer_Stop_Call) Run(run func()) *MockJobConsumer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobConsumer_Stop_Call) Return() *MockJobConsumer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockJobConsumer_Stop_Call) RunAndReturn(run func()) *MockJobConsumer_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockJobConsumer creates a new instance of MockJobConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobConsumer {
	mock := &MockJobConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
