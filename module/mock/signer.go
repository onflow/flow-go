// Code generated by mockery. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	mock "github.com/stretchr/testify/mock"
)

// signer is an autogenerated mock type for the signer type
type signer struct {
	mock.Mock
}

// decodePrivateKey provides a mock function with given fields: _a0
func (_m *signer) decodePrivateKey(_a0 []byte) (crypto.PrivateKey, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for decodePrivateKey")
	}

	var r0 crypto.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (crypto.PrivateKey, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) crypto.PrivateKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// decodePublicKey provides a mock function with given fields: _a0
func (_m *signer) decodePublicKey(_a0 []byte) (crypto.PublicKey, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for decodePublicKey")
	}

	var r0 crypto.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (crypto.PublicKey, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) crypto.PublicKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// decodePublicKeyCompressed provides a mock function with given fields: _a0
func (_m *signer) decodePublicKeyCompressed(_a0 []byte) (crypto.PublicKey, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for decodePublicKeyCompressed")
	}

	var r0 crypto.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (crypto.PublicKey, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) crypto.PublicKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// generatePrivateKey provides a mock function with given fields: _a0
func (_m *signer) generatePrivateKey(_a0 []byte) (crypto.PrivateKey, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for generatePrivateKey")
	}

	var r0 crypto.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (crypto.PrivateKey, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) crypto.PrivateKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newSigner creates a new instance of signer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *signer {
	mock := &signer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
