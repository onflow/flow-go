// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	chainsync "github.com/onflow/flow-go/model/chainsync"
	mock "github.com/stretchr/testify/mock"
)

// MockChainSyncMetrics is an autogenerated mock type for the ChainSyncMetrics type
type MockChainSyncMetrics struct {
	mock.Mock
}

type MockChainSyncMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChainSyncMetrics) EXPECT() *MockChainSyncMetrics_Expecter {
	return &MockChainSyncMetrics_Expecter{mock: &_m.Mock}
}

// BatchRequested provides a mock function with given fields: batch
func (_m *MockChainSyncMetrics) BatchRequested(batch chainsync.Batch) {
	_m.Called(batch)
}

// MockChainSyncMetrics_BatchRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRequested'
type MockChainSyncMetrics_BatchRequested_Call struct {
	*mock.Call
}

// BatchRequested is a helper method to define mock.On call
//   - batch chainsync.Batch
func (_e *MockChainSyncMetrics_Expecter) BatchRequested(batch interface{}) *MockChainSyncMetrics_BatchRequested_Call {
	return &MockChainSyncMetrics_BatchRequested_Call{Call: _e.mock.On("BatchRequested", batch)}
}

func (_c *MockChainSyncMetrics_BatchRequested_Call) Run(run func(batch chainsync.Batch)) *MockChainSyncMetrics_BatchRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chainsync.Batch))
	})
	return _c
}

func (_c *MockChainSyncMetrics_BatchRequested_Call) Return() *MockChainSyncMetrics_BatchRequested_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChainSyncMetrics_BatchRequested_Call) RunAndReturn(run func(chainsync.Batch)) *MockChainSyncMetrics_BatchRequested_Call {
	_c.Run(run)
	return _c
}

// PrunedBlockByHeight provides a mock function with given fields: status
func (_m *MockChainSyncMetrics) PrunedBlockByHeight(status *chainsync.Status) {
	_m.Called(status)
}

// MockChainSyncMetrics_PrunedBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrunedBlockByHeight'
type MockChainSyncMetrics_PrunedBlockByHeight_Call struct {
	*mock.Call
}

// PrunedBlockByHeight is a helper method to define mock.On call
//   - status *chainsync.Status
func (_e *MockChainSyncMetrics_Expecter) PrunedBlockByHeight(status interface{}) *MockChainSyncMetrics_PrunedBlockByHeight_Call {
	return &MockChainSyncMetrics_PrunedBlockByHeight_Call{Call: _e.mock.On("PrunedBlockByHeight", status)}
}

func (_c *MockChainSyncMetrics_PrunedBlockByHeight_Call) Run(run func(status *chainsync.Status)) *MockChainSyncMetrics_PrunedBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*chainsync.Status))
	})
	return _c
}

func (_c *MockChainSyncMetrics_PrunedBlockByHeight_Call) Return() *MockChainSyncMetrics_PrunedBlockByHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChainSyncMetrics_PrunedBlockByHeight_Call) RunAndReturn(run func(*chainsync.Status)) *MockChainSyncMetrics_PrunedBlockByHeight_Call {
	_c.Run(run)
	return _c
}

// PrunedBlockById provides a mock function with given fields: status
func (_m *MockChainSyncMetrics) PrunedBlockById(status *chainsync.Status) {
	_m.Called(status)
}

// MockChainSyncMetrics_PrunedBlockById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrunedBlockById'
type MockChainSyncMetrics_PrunedBlockById_Call struct {
	*mock.Call
}

// PrunedBlockById is a helper method to define mock.On call
//   - status *chainsync.Status
func (_e *MockChainSyncMetrics_Expecter) PrunedBlockById(status interface{}) *MockChainSyncMetrics_PrunedBlockById_Call {
	return &MockChainSyncMetrics_PrunedBlockById_Call{Call: _e.mock.On("PrunedBlockById", status)}
}

func (_c *MockChainSyncMetrics_PrunedBlockById_Call) Run(run func(status *chainsync.Status)) *MockChainSyncMetrics_PrunedBlockById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*chainsync.Status))
	})
	return _c
}

func (_c *MockChainSyncMetrics_PrunedBlockById_Call) Return() *MockChainSyncMetrics_PrunedBlockById_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChainSyncMetrics_PrunedBlockById_Call) RunAndReturn(run func(*chainsync.Status)) *MockChainSyncMetrics_PrunedBlockById_Call {
	_c.Run(run)
	return _c
}

// PrunedBlocks provides a mock function with given fields: totalByHeight, totalById, storedByHeight, storedById
func (_m *MockChainSyncMetrics) PrunedBlocks(totalByHeight int, totalById int, storedByHeight int, storedById int) {
	_m.Called(totalByHeight, totalById, storedByHeight, storedById)
}

// MockChainSyncMetrics_PrunedBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrunedBlocks'
type MockChainSyncMetrics_PrunedBlocks_Call struct {
	*mock.Call
}

// PrunedBlocks is a helper method to define mock.On call
//   - totalByHeight int
//   - totalById int
//   - storedByHeight int
//   - storedById int
func (_e *MockChainSyncMetrics_Expecter) PrunedBlocks(totalByHeight interface{}, totalById interface{}, storedByHeight interface{}, storedById interface{}) *MockChainSyncMetrics_PrunedBlocks_Call {
	return &MockChainSyncMetrics_PrunedBlocks_Call{Call: _e.mock.On("PrunedBlocks", totalByHeight, totalById, storedByHeight, storedById)}
}

func (_c *MockChainSyncMetrics_PrunedBlocks_Call) Run(run func(totalByHeight int, totalById int, storedByHeight int, storedById int)) *MockChainSyncMetrics_PrunedBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockChainSyncMetrics_PrunedBlocks_Call) Return() *MockChainSyncMetrics_PrunedBlocks_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChainSyncMetrics_PrunedBlocks_Call) RunAndReturn(run func(int, int, int, int)) *MockChainSyncMetrics_PrunedBlocks_Call {
	_c.Run(run)
	return _c
}

// RangeRequested provides a mock function with given fields: ran
func (_m *MockChainSyncMetrics) RangeRequested(ran chainsync.Range) {
	_m.Called(ran)
}

// MockChainSyncMetrics_RangeRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeRequested'
type MockChainSyncMetrics_RangeRequested_Call struct {
	*mock.Call
}

// RangeRequested is a helper method to define mock.On call
//   - ran chainsync.Range
func (_e *MockChainSyncMetrics_Expecter) RangeRequested(ran interface{}) *MockChainSyncMetrics_RangeRequested_Call {
	return &MockChainSyncMetrics_RangeRequested_Call{Call: _e.mock.On("RangeRequested", ran)}
}

func (_c *MockChainSyncMetrics_RangeRequested_Call) Run(run func(ran chainsync.Range)) *MockChainSyncMetrics_RangeRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chainsync.Range))
	})
	return _c
}

func (_c *MockChainSyncMetrics_RangeRequested_Call) Return() *MockChainSyncMetrics_RangeRequested_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChainSyncMetrics_RangeRequested_Call) RunAndReturn(run func(chainsync.Range)) *MockChainSyncMetrics_RangeRequested_Call {
	_c.Run(run)
	return _c
}

// NewMockChainSyncMetrics creates a new instance of MockChainSyncMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChainSyncMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChainSyncMetrics {
	mock := &MockChainSyncMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
