// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockReceiptValidator is an autogenerated mock type for the ReceiptValidator type
type MockReceiptValidator struct {
	mock.Mock
}

type MockReceiptValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceiptValidator) EXPECT() *MockReceiptValidator_Expecter {
	return &MockReceiptValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: receipt
func (_m *MockReceiptValidator) Validate(receipt *flow.ExecutionReceipt) error {
	ret := _m.Called(receipt)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt) error); ok {
		r0 = rf(receipt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReceiptValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockReceiptValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
func (_e *MockReceiptValidator_Expecter) Validate(receipt interface{}) *MockReceiptValidator_Validate_Call {
	return &MockReceiptValidator_Validate_Call{Call: _e.mock.On("Validate", receipt)}
}

func (_c *MockReceiptValidator_Validate_Call) Run(run func(receipt *flow.ExecutionReceipt)) *MockReceiptValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt))
	})
	return _c
}

func (_c *MockReceiptValidator_Validate_Call) Return(_a0 error) *MockReceiptValidator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReceiptValidator_Validate_Call) RunAndReturn(run func(*flow.ExecutionReceipt) error) *MockReceiptValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePayload provides a mock function with given fields: candidate
func (_m *MockReceiptValidator) ValidatePayload(candidate *flow.Block) error {
	ret := _m.Called(candidate)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePayload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Block) error); ok {
		r0 = rf(candidate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReceiptValidator_ValidatePayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePayload'
type MockReceiptValidator_ValidatePayload_Call struct {
	*mock.Call
}

// ValidatePayload is a helper method to define mock.On call
//   - candidate *flow.Block
func (_e *MockReceiptValidator_Expecter) ValidatePayload(candidate interface{}) *MockReceiptValidator_ValidatePayload_Call {
	return &MockReceiptValidator_ValidatePayload_Call{Call: _e.mock.On("ValidatePayload", candidate)}
}

func (_c *MockReceiptValidator_ValidatePayload_Call) Run(run func(candidate *flow.Block)) *MockReceiptValidator_ValidatePayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Block))
	})
	return _c
}

func (_c *MockReceiptValidator_ValidatePayload_Call) Return(_a0 error) *MockReceiptValidator_ValidatePayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReceiptValidator_ValidatePayload_Call) RunAndReturn(run func(*flow.Block) error) *MockReceiptValidator_ValidatePayload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceiptValidator creates a new instance of MockReceiptValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceiptValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceiptValidator {
	mock := &MockReceiptValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
