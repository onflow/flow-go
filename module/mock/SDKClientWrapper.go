// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	cadence "github.com/onflow/cadence"

	flow "github.com/onflow/flow-go-sdk"

	mock "github.com/stretchr/testify/mock"
)

// MockSDKClientWrapper is an autogenerated mock type for the SDKClientWrapper type
type MockSDKClientWrapper struct {
	mock.Mock
}

type MockSDKClientWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSDKClientWrapper) EXPECT() *MockSDKClientWrapper_Expecter {
	return &MockSDKClientWrapper_Expecter{mock: &_m.Mock}
}

// ExecuteScriptAtBlockID provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockSDKClientWrapper) ExecuteScriptAtBlockID(_a0 context.Context, _a1 flow.Identifier, _a2 []byte, _a3 []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, []cadence.Value) (cadence.Value, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, []cadence.Value) cadence.Value); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, []byte, []cadence.Value) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSDKClientWrapper_ExecuteScriptAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockID'
type MockSDKClientWrapper_ExecuteScriptAtBlockID_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 flow.Identifier
//   - _a2 []byte
//   - _a3 []cadence.Value
func (_e *MockSDKClientWrapper_Expecter) ExecuteScriptAtBlockID(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockSDKClientWrapper_ExecuteScriptAtBlockID_Call {
	return &MockSDKClientWrapper_ExecuteScriptAtBlockID_Call{Call: _e.mock.On("ExecuteScriptAtBlockID", _a0, _a1, _a2, _a3)}
}

func (_c *MockSDKClientWrapper_ExecuteScriptAtBlockID_Call) Run(run func(_a0 context.Context, _a1 flow.Identifier, _a2 []byte, _a3 []cadence.Value)) *MockSDKClientWrapper_ExecuteScriptAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].([]byte), args[3].([]cadence.Value))
	})
	return _c
}

func (_c *MockSDKClientWrapper_ExecuteScriptAtBlockID_Call) Return(_a0 cadence.Value, _a1 error) *MockSDKClientWrapper_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSDKClientWrapper_ExecuteScriptAtBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, []byte, []cadence.Value) (cadence.Value, error)) *MockSDKClientWrapper_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptAtLatestBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSDKClientWrapper) ExecuteScriptAtLatestBlock(_a0 context.Context, _a1 []byte, _a2 []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtLatestBlock")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []cadence.Value) (cadence.Value, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []cadence.Value) cadence.Value); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []cadence.Value) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtLatestBlock'
type MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call struct {
	*mock.Call
}

// ExecuteScriptAtLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []byte
//   - _a2 []cadence.Value
func (_e *MockSDKClientWrapper_Expecter) ExecuteScriptAtLatestBlock(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call {
	return &MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call{Call: _e.mock.On("ExecuteScriptAtLatestBlock", _a0, _a1, _a2)}
}

func (_c *MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call) Run(run func(_a0 context.Context, _a1 []byte, _a2 []cadence.Value)) *MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]cadence.Value))
	})
	return _c
}

func (_c *MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call) Return(_a0 cadence.Value, _a1 error) *MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call) RunAndReturn(run func(context.Context, []byte, []cadence.Value) (cadence.Value, error)) *MockSDKClientWrapper_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: _a0, _a1
func (_m *MockSDKClientWrapper) GetAccount(_a0 context.Context, _a1 flow.Address) (*flow.Account, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (*flow.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) *flow.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSDKClientWrapper_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockSDKClientWrapper_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 flow.Address
func (_e *MockSDKClientWrapper_Expecter) GetAccount(_a0 interface{}, _a1 interface{}) *MockSDKClientWrapper_GetAccount_Call {
	return &MockSDKClientWrapper_GetAccount_Call{Call: _e.mock.On("GetAccount", _a0, _a1)}
}

func (_c *MockSDKClientWrapper_GetAccount_Call) Run(run func(_a0 context.Context, _a1 flow.Address)) *MockSDKClientWrapper_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address))
	})
	return _c
}

func (_c *MockSDKClientWrapper_GetAccount_Call) Return(_a0 *flow.Account, _a1 error) *MockSDKClientWrapper_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSDKClientWrapper_GetAccount_Call) RunAndReturn(run func(context.Context, flow.Address) (*flow.Account, error)) *MockSDKClientWrapper_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockSDKClientWrapper) GetAccountAtLatestBlock(_a0 context.Context, _a1 flow.Address) (*flow.Account, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtLatestBlock")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (*flow.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) *flow.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSDKClientWrapper_GetAccountAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtLatestBlock'
type MockSDKClientWrapper_GetAccountAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountAtLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 flow.Address
func (_e *MockSDKClientWrapper_Expecter) GetAccountAtLatestBlock(_a0 interface{}, _a1 interface{}) *MockSDKClientWrapper_GetAccountAtLatestBlock_Call {
	return &MockSDKClientWrapper_GetAccountAtLatestBlock_Call{Call: _e.mock.On("GetAccountAtLatestBlock", _a0, _a1)}
}

func (_c *MockSDKClientWrapper_GetAccountAtLatestBlock_Call) Run(run func(_a0 context.Context, _a1 flow.Address)) *MockSDKClientWrapper_GetAccountAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address))
	})
	return _c
}

func (_c *MockSDKClientWrapper_GetAccountAtLatestBlock_Call) Return(_a0 *flow.Account, _a1 error) *MockSDKClientWrapper_GetAccountAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSDKClientWrapper_GetAccountAtLatestBlock_Call) RunAndReturn(run func(context.Context, flow.Address) (*flow.Account, error)) *MockSDKClientWrapper_GetAccountAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockSDKClientWrapper) GetLatestBlock(_a0 context.Context, _a1 bool) (*flow.Block, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*flow.Block, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *flow.Block); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSDKClientWrapper_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockSDKClientWrapper_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 bool
func (_e *MockSDKClientWrapper_Expecter) GetLatestBlock(_a0 interface{}, _a1 interface{}) *MockSDKClientWrapper_GetLatestBlock_Call {
	return &MockSDKClientWrapper_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", _a0, _a1)}
}

func (_c *MockSDKClientWrapper_GetLatestBlock_Call) Run(run func(_a0 context.Context, _a1 bool)) *MockSDKClientWrapper_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockSDKClientWrapper_GetLatestBlock_Call) Return(_a0 *flow.Block, _a1 error) *MockSDKClientWrapper_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSDKClientWrapper_GetLatestBlock_Call) RunAndReturn(run func(context.Context, bool) (*flow.Block, error)) *MockSDKClientWrapper_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResult provides a mock function with given fields: _a0, _a1
func (_m *MockSDKClientWrapper) GetTransactionResult(_a0 context.Context, _a1 flow.Identifier) (*flow.TransactionResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.TransactionResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.TransactionResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSDKClientWrapper_GetTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResult'
type MockSDKClientWrapper_GetTransactionResult_Call struct {
	*mock.Call
}

// GetTransactionResult is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 flow.Identifier
func (_e *MockSDKClientWrapper_Expecter) GetTransactionResult(_a0 interface{}, _a1 interface{}) *MockSDKClientWrapper_GetTransactionResult_Call {
	return &MockSDKClientWrapper_GetTransactionResult_Call{Call: _e.mock.On("GetTransactionResult", _a0, _a1)}
}

func (_c *MockSDKClientWrapper_GetTransactionResult_Call) Run(run func(_a0 context.Context, _a1 flow.Identifier)) *MockSDKClientWrapper_GetTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockSDKClientWrapper_GetTransactionResult_Call) Return(_a0 *flow.TransactionResult, _a1 error) *MockSDKClientWrapper_GetTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSDKClientWrapper_GetTransactionResult_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.TransactionResult, error)) *MockSDKClientWrapper_GetTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockSDKClientWrapper) SendTransaction(_a0 context.Context, _a1 flow.Transaction) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Transaction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSDKClientWrapper_SendTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransaction'
type MockSDKClientWrapper_SendTransaction_Call struct {
	*mock.Call
}

// SendTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 flow.Transaction
func (_e *MockSDKClientWrapper_Expecter) SendTransaction(_a0 interface{}, _a1 interface{}) *MockSDKClientWrapper_SendTransaction_Call {
	return &MockSDKClientWrapper_SendTransaction_Call{Call: _e.mock.On("SendTransaction", _a0, _a1)}
}

func (_c *MockSDKClientWrapper_SendTransaction_Call) Run(run func(_a0 context.Context, _a1 flow.Transaction)) *MockSDKClientWrapper_SendTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Transaction))
	})
	return _c
}

func (_c *MockSDKClientWrapper_SendTransaction_Call) Return(_a0 error) *MockSDKClientWrapper_SendTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSDKClientWrapper_SendTransaction_Call) RunAndReturn(run func(context.Context, flow.Transaction) error) *MockSDKClientWrapper_SendTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSDKClientWrapper creates a new instance of MockSDKClientWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSDKClientWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSDKClientWrapper {
	mock := &MockSDKClientWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
