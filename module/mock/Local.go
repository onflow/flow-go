// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	hash "github.com/onflow/crypto/hash"

	mock "github.com/stretchr/testify/mock"
)

// MockLocal is an autogenerated mock type for the Local type
type MockLocal struct {
	mock.Mock
}

type MockLocal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocal) EXPECT() *MockLocal_Expecter {
	return &MockLocal_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with no fields
func (_m *MockLocal) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLocal_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockLocal_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockLocal_Expecter) Address() *MockLocal_Address_Call {
	return &MockLocal_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockLocal_Address_Call) Run(run func()) *MockLocal_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLocal_Address_Call) Return(_a0 string) *MockLocal_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLocal_Address_Call) RunAndReturn(run func() string) *MockLocal_Address_Call {
	_c.Call.Return(run)
	return _c
}

// NodeID provides a mock function with no fields
func (_m *MockLocal) NodeID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockLocal_NodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeID'
type MockLocal_NodeID_Call struct {
	*mock.Call
}

// NodeID is a helper method to define mock.On call
func (_e *MockLocal_Expecter) NodeID() *MockLocal_NodeID_Call {
	return &MockLocal_NodeID_Call{Call: _e.mock.On("NodeID")}
}

func (_c *MockLocal_NodeID_Call) Run(run func()) *MockLocal_NodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLocal_NodeID_Call) Return(_a0 flow.Identifier) *MockLocal_NodeID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLocal_NodeID_Call) RunAndReturn(run func() flow.Identifier) *MockLocal_NodeID_Call {
	_c.Call.Return(run)
	return _c
}

// NotMeFilter provides a mock function with no fields
func (_m *MockLocal) NotMeFilter() flow.IdentityFilter[flow.Identity] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotMeFilter")
	}

	var r0 flow.IdentityFilter[flow.Identity]
	if rf, ok := ret.Get(0).(func() flow.IdentityFilter[flow.Identity]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentityFilter[flow.Identity])
		}
	}

	return r0
}

// MockLocal_NotMeFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotMeFilter'
type MockLocal_NotMeFilter_Call struct {
	*mock.Call
}

// NotMeFilter is a helper method to define mock.On call
func (_e *MockLocal_Expecter) NotMeFilter() *MockLocal_NotMeFilter_Call {
	return &MockLocal_NotMeFilter_Call{Call: _e.mock.On("NotMeFilter")}
}

func (_c *MockLocal_NotMeFilter_Call) Run(run func()) *MockLocal_NotMeFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLocal_NotMeFilter_Call) Return(_a0 flow.IdentityFilter[flow.Identity]) *MockLocal_NotMeFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLocal_NotMeFilter_Call) RunAndReturn(run func() flow.IdentityFilter[flow.Identity]) *MockLocal_NotMeFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: _a0, _a1
func (_m *MockLocal) Sign(_a0 []byte, _a1 hash.Hasher) (crypto.Signature, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, hash.Hasher) (crypto.Signature, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func([]byte, hash.Hasher) crypto.Signature); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, hash.Hasher) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocal_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockLocal_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 hash.Hasher
func (_e *MockLocal_Expecter) Sign(_a0 interface{}, _a1 interface{}) *MockLocal_Sign_Call {
	return &MockLocal_Sign_Call{Call: _e.mock.On("Sign", _a0, _a1)}
}

func (_c *MockLocal_Sign_Call) Run(run func(_a0 []byte, _a1 hash.Hasher)) *MockLocal_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(hash.Hasher))
	})
	return _c
}

func (_c *MockLocal_Sign_Call) Return(_a0 crypto.Signature, _a1 error) *MockLocal_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocal_Sign_Call) RunAndReturn(run func([]byte, hash.Hasher) (crypto.Signature, error)) *MockLocal_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// SignFunc provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLocal) SignFunc(_a0 []byte, _a1 hash.Hasher, _a2 func(crypto.PrivateKey, []byte, hash.Hasher) (crypto.Signature, error)) (crypto.Signature, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SignFunc")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, hash.Hasher, func(crypto.PrivateKey, []byte, hash.Hasher) (crypto.Signature, error)) (crypto.Signature, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func([]byte, hash.Hasher, func(crypto.PrivateKey, []byte, hash.Hasher) (crypto.Signature, error)) crypto.Signature); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, hash.Hasher, func(crypto.PrivateKey, []byte, hash.Hasher) (crypto.Signature, error)) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocal_SignFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignFunc'
type MockLocal_SignFunc_Call struct {
	*mock.Call
}

// SignFunc is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 hash.Hasher
//   - _a2 func(crypto.PrivateKey , []byte , hash.Hasher)(crypto.Signature , error)
func (_e *MockLocal_Expecter) SignFunc(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockLocal_SignFunc_Call {
	return &MockLocal_SignFunc_Call{Call: _e.mock.On("SignFunc", _a0, _a1, _a2)}
}

func (_c *MockLocal_SignFunc_Call) Run(run func(_a0 []byte, _a1 hash.Hasher, _a2 func(crypto.PrivateKey, []byte, hash.Hasher) (crypto.Signature, error))) *MockLocal_SignFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(hash.Hasher), args[2].(func(crypto.PrivateKey, []byte, hash.Hasher) (crypto.Signature, error)))
	})
	return _c
}

func (_c *MockLocal_SignFunc_Call) Return(_a0 crypto.Signature, _a1 error) *MockLocal_SignFunc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocal_SignFunc_Call) RunAndReturn(run func([]byte, hash.Hasher, func(crypto.PrivateKey, []byte, hash.Hasher) (crypto.Signature, error)) (crypto.Signature, error)) *MockLocal_SignFunc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocal creates a new instance of MockLocal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocal {
	mock := &MockLocal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
