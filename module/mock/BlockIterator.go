// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockBlockIterator is an autogenerated mock type for the BlockIterator type
type MockBlockIterator struct {
	mock.Mock
}

type MockBlockIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockIterator) EXPECT() *MockBlockIterator_Expecter {
	return &MockBlockIterator_Expecter{mock: &_m.Mock}
}

// Checkpoint provides a mock function with no fields
func (_m *MockBlockIterator) Checkpoint() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Checkpoint")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockIterator_Checkpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Checkpoint'
type MockBlockIterator_Checkpoint_Call struct {
	*mock.Call
}

// Checkpoint is a helper method to define mock.On call
func (_e *MockBlockIterator_Expecter) Checkpoint() *MockBlockIterator_Checkpoint_Call {
	return &MockBlockIterator_Checkpoint_Call{Call: _e.mock.On("Checkpoint")}
}

func (_c *MockBlockIterator_Checkpoint_Call) Run(run func()) *MockBlockIterator_Checkpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockIterator_Checkpoint_Call) Return(savedIndex uint64, exception error) *MockBlockIterator_Checkpoint_Call {
	_c.Call.Return(savedIndex, exception)
	return _c
}

func (_c *MockBlockIterator_Checkpoint_Call) RunAndReturn(run func() (uint64, error)) *MockBlockIterator_Checkpoint_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockBlockIterator) Next() (flow.Identifier, bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 flow.Identifier
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func() (flow.Identifier, bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBlockIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockBlockIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockBlockIterator_Expecter) Next() *MockBlockIterator_Next_Call {
	return &MockBlockIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockBlockIterator_Next_Call) Run(run func()) *MockBlockIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockIterator_Next_Call) Return(blockID flow.Identifier, hasNext bool, exception error) *MockBlockIterator_Next_Call {
	_c.Call.Return(blockID, hasNext, exception)
	return _c
}

func (_c *MockBlockIterator_Next_Call) RunAndReturn(run func() (flow.Identifier, bool, error)) *MockBlockIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Progress provides a mock function with no fields
func (_m *MockBlockIterator) Progress() (uint64, uint64, uint64) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 uint64
	var r1 uint64
	var r2 uint64
	if rf, ok := ret.Get(0).(func() (uint64, uint64, uint64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() uint64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func() uint64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(uint64)
	}

	return r0, r1, r2
}

// MockBlockIterator_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type MockBlockIterator_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
func (_e *MockBlockIterator_Expecter) Progress() *MockBlockIterator_Progress_Call {
	return &MockBlockIterator_Progress_Call{Call: _e.mock.On("Progress")}
}

func (_c *MockBlockIterator_Progress_Call) Run(run func()) *MockBlockIterator_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockIterator_Progress_Call) Return(start uint64, end uint64, next uint64) *MockBlockIterator_Progress_Call {
	_c.Call.Return(start, end, next)
	return _c
}

func (_c *MockBlockIterator_Progress_Call) RunAndReturn(run func() (uint64, uint64, uint64)) *MockBlockIterator_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockIterator creates a new instance of MockBlockIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockIterator {
	mock := &MockBlockIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
