// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	module "github.com/onflow/flow-go/module"

	time "time"
)

// MockExecutionMetrics is an autogenerated mock type for the ExecutionMetrics type
type MockExecutionMetrics struct {
	mock.Mock
}

type MockExecutionMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionMetrics) EXPECT() *MockExecutionMetrics_Expecter {
	return &MockExecutionMetrics_Expecter{mock: &_m.Mock}
}

// ChunkDataPackRequestProcessed provides a mock function with no fields
func (_m *MockExecutionMetrics) ChunkDataPackRequestProcessed() {
	_m.Called()
}

// MockExecutionMetrics_ChunkDataPackRequestProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChunkDataPackRequestProcessed'
type MockExecutionMetrics_ChunkDataPackRequestProcessed_Call struct {
	*mock.Call
}

// ChunkDataPackRequestProcessed is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) ChunkDataPackRequestProcessed() *MockExecutionMetrics_ChunkDataPackRequestProcessed_Call {
	return &MockExecutionMetrics_ChunkDataPackRequestProcessed_Call{Call: _e.mock.On("ChunkDataPackRequestProcessed")}
}

func (_c *MockExecutionMetrics_ChunkDataPackRequestProcessed_Call) Run(run func()) *MockExecutionMetrics_ChunkDataPackRequestProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_ChunkDataPackRequestProcessed_Call) Return() *MockExecutionMetrics_ChunkDataPackRequestProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ChunkDataPackRequestProcessed_Call) RunAndReturn(run func()) *MockExecutionMetrics_ChunkDataPackRequestProcessed_Call {
	_c.Run(run)
	return _c
}

// EVMBlockExecuted provides a mock function with given fields: txCount, totalGasUsed, totalSupplyInFlow
func (_m *MockExecutionMetrics) EVMBlockExecuted(txCount int, totalGasUsed uint64, totalSupplyInFlow float64) {
	_m.Called(txCount, totalGasUsed, totalSupplyInFlow)
}

// MockExecutionMetrics_EVMBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMBlockExecuted'
type MockExecutionMetrics_EVMBlockExecuted_Call struct {
	*mock.Call
}

// EVMBlockExecuted is a helper method to define mock.On call
//   - txCount int
//   - totalGasUsed uint64
//   - totalSupplyInFlow float64
func (_e *MockExecutionMetrics_Expecter) EVMBlockExecuted(txCount interface{}, totalGasUsed interface{}, totalSupplyInFlow interface{}) *MockExecutionMetrics_EVMBlockExecuted_Call {
	return &MockExecutionMetrics_EVMBlockExecuted_Call{Call: _e.mock.On("EVMBlockExecuted", txCount, totalGasUsed, totalSupplyInFlow)}
}

func (_c *MockExecutionMetrics_EVMBlockExecuted_Call) Run(run func(txCount int, totalGasUsed uint64, totalSupplyInFlow float64)) *MockExecutionMetrics_EVMBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(uint64), args[2].(float64))
	})
	return _c
}

func (_c *MockExecutionMetrics_EVMBlockExecuted_Call) Return() *MockExecutionMetrics_EVMBlockExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_EVMBlockExecuted_Call) RunAndReturn(run func(int, uint64, float64)) *MockExecutionMetrics_EVMBlockExecuted_Call {
	_c.Run(run)
	return _c
}

// EVMTransactionExecuted provides a mock function with given fields: gasUsed, isDirectCall, failed
func (_m *MockExecutionMetrics) EVMTransactionExecuted(gasUsed uint64, isDirectCall bool, failed bool) {
	_m.Called(gasUsed, isDirectCall, failed)
}

// MockExecutionMetrics_EVMTransactionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMTransactionExecuted'
type MockExecutionMetrics_EVMTransactionExecuted_Call struct {
	*mock.Call
}

// EVMTransactionExecuted is a helper method to define mock.On call
//   - gasUsed uint64
//   - isDirectCall bool
//   - failed bool
func (_e *MockExecutionMetrics_Expecter) EVMTransactionExecuted(gasUsed interface{}, isDirectCall interface{}, failed interface{}) *MockExecutionMetrics_EVMTransactionExecuted_Call {
	return &MockExecutionMetrics_EVMTransactionExecuted_Call{Call: _e.mock.On("EVMTransactionExecuted", gasUsed, isDirectCall, failed)}
}

func (_c *MockExecutionMetrics_EVMTransactionExecuted_Call) Run(run func(gasUsed uint64, isDirectCall bool, failed bool)) *MockExecutionMetrics_EVMTransactionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *MockExecutionMetrics_EVMTransactionExecuted_Call) Return() *MockExecutionMetrics_EVMTransactionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_EVMTransactionExecuted_Call) RunAndReturn(run func(uint64, bool, bool)) *MockExecutionMetrics_EVMTransactionExecuted_Call {
	_c.Run(run)
	return _c
}

// ExecutionBlockCachedPrograms provides a mock function with given fields: programs
func (_m *MockExecutionMetrics) ExecutionBlockCachedPrograms(programs int) {
	_m.Called(programs)
}

// MockExecutionMetrics_ExecutionBlockCachedPrograms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionBlockCachedPrograms'
type MockExecutionMetrics_ExecutionBlockCachedPrograms_Call struct {
	*mock.Call
}

// ExecutionBlockCachedPrograms is a helper method to define mock.On call
//   - programs int
func (_e *MockExecutionMetrics_Expecter) ExecutionBlockCachedPrograms(programs interface{}) *MockExecutionMetrics_ExecutionBlockCachedPrograms_Call {
	return &MockExecutionMetrics_ExecutionBlockCachedPrograms_Call{Call: _e.mock.On("ExecutionBlockCachedPrograms", programs)}
}

func (_c *MockExecutionMetrics_ExecutionBlockCachedPrograms_Call) Run(run func(programs int)) *MockExecutionMetrics_ExecutionBlockCachedPrograms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockCachedPrograms_Call) Return() *MockExecutionMetrics_ExecutionBlockCachedPrograms_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockCachedPrograms_Call) RunAndReturn(run func(int)) *MockExecutionMetrics_ExecutionBlockCachedPrograms_Call {
	_c.Run(run)
	return _c
}

// ExecutionBlockDataUploadFinished provides a mock function with given fields: dur
func (_m *MockExecutionMetrics) ExecutionBlockDataUploadFinished(dur time.Duration) {
	_m.Called(dur)
}

// MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionBlockDataUploadFinished'
type MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call struct {
	*mock.Call
}

// ExecutionBlockDataUploadFinished is a helper method to define mock.On call
//   - dur time.Duration
func (_e *MockExecutionMetrics_Expecter) ExecutionBlockDataUploadFinished(dur interface{}) *MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call {
	return &MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call{Call: _e.mock.On("ExecutionBlockDataUploadFinished", dur)}
}

func (_c *MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call) Run(run func(dur time.Duration)) *MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call) Return() *MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_ExecutionBlockDataUploadFinished_Call {
	_c.Run(run)
	return _c
}

// ExecutionBlockDataUploadStarted provides a mock function with no fields
func (_m *MockExecutionMetrics) ExecutionBlockDataUploadStarted() {
	_m.Called()
}

// MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionBlockDataUploadStarted'
type MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call struct {
	*mock.Call
}

// ExecutionBlockDataUploadStarted is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) ExecutionBlockDataUploadStarted() *MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call {
	return &MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call{Call: _e.mock.On("ExecutionBlockDataUploadStarted")}
}

func (_c *MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call) Run(run func()) *MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call) Return() *MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call) RunAndReturn(run func()) *MockExecutionMetrics_ExecutionBlockDataUploadStarted_Call {
	_c.Run(run)
	return _c
}

// ExecutionBlockExecuted provides a mock function with given fields: dur, stats
func (_m *MockExecutionMetrics) ExecutionBlockExecuted(dur time.Duration, stats module.BlockExecutionResultStats) {
	_m.Called(dur, stats)
}

// MockExecutionMetrics_ExecutionBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionBlockExecuted'
type MockExecutionMetrics_ExecutionBlockExecuted_Call struct {
	*mock.Call
}

// ExecutionBlockExecuted is a helper method to define mock.On call
//   - dur time.Duration
//   - stats module.BlockExecutionResultStats
func (_e *MockExecutionMetrics_Expecter) ExecutionBlockExecuted(dur interface{}, stats interface{}) *MockExecutionMetrics_ExecutionBlockExecuted_Call {
	return &MockExecutionMetrics_ExecutionBlockExecuted_Call{Call: _e.mock.On("ExecutionBlockExecuted", dur, stats)}
}

func (_c *MockExecutionMetrics_ExecutionBlockExecuted_Call) Run(run func(dur time.Duration, stats module.BlockExecutionResultStats)) *MockExecutionMetrics_ExecutionBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(module.BlockExecutionResultStats))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockExecuted_Call) Return() *MockExecutionMetrics_ExecutionBlockExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockExecuted_Call) RunAndReturn(run func(time.Duration, module.BlockExecutionResultStats)) *MockExecutionMetrics_ExecutionBlockExecuted_Call {
	_c.Run(run)
	return _c
}

// ExecutionBlockExecutionEffortVectorComponent provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionMetrics) ExecutionBlockExecutionEffortVectorComponent(_a0 string, _a1 uint64) {
	_m.Called(_a0, _a1)
}

// MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionBlockExecutionEffortVectorComponent'
type MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call struct {
	*mock.Call
}

// ExecutionBlockExecutionEffortVectorComponent is a helper method to define mock.On call
//   - _a0 string
//   - _a1 uint64
func (_e *MockExecutionMetrics_Expecter) ExecutionBlockExecutionEffortVectorComponent(_a0 interface{}, _a1 interface{}) *MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call {
	return &MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call{Call: _e.mock.On("ExecutionBlockExecutionEffortVectorComponent", _a0, _a1)}
}

func (_c *MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call) Run(run func(_a0 string, _a1 uint64)) *MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call) Return() *MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call) RunAndReturn(run func(string, uint64)) *MockExecutionMetrics_ExecutionBlockExecutionEffortVectorComponent_Call {
	_c.Run(run)
	return _c
}

// ExecutionCheckpointSize provides a mock function with given fields: bytes
func (_m *MockExecutionMetrics) ExecutionCheckpointSize(bytes uint64) {
	_m.Called(bytes)
}

// MockExecutionMetrics_ExecutionCheckpointSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionCheckpointSize'
type MockExecutionMetrics_ExecutionCheckpointSize_Call struct {
	*mock.Call
}

// ExecutionCheckpointSize is a helper method to define mock.On call
//   - bytes uint64
func (_e *MockExecutionMetrics_Expecter) ExecutionCheckpointSize(bytes interface{}) *MockExecutionMetrics_ExecutionCheckpointSize_Call {
	return &MockExecutionMetrics_ExecutionCheckpointSize_Call{Call: _e.mock.On("ExecutionCheckpointSize", bytes)}
}

func (_c *MockExecutionMetrics_ExecutionCheckpointSize_Call) Run(run func(bytes uint64)) *MockExecutionMetrics_ExecutionCheckpointSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionCheckpointSize_Call) Return() *MockExecutionMetrics_ExecutionCheckpointSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionCheckpointSize_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ExecutionCheckpointSize_Call {
	_c.Run(run)
	return _c
}

// ExecutionChunkDataPackGenerated provides a mock function with given fields: proofSize, numberOfTransactions
func (_m *MockExecutionMetrics) ExecutionChunkDataPackGenerated(proofSize int, numberOfTransactions int) {
	_m.Called(proofSize, numberOfTransactions)
}

// MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionChunkDataPackGenerated'
type MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call struct {
	*mock.Call
}

// ExecutionChunkDataPackGenerated is a helper method to define mock.On call
//   - proofSize int
//   - numberOfTransactions int
func (_e *MockExecutionMetrics_Expecter) ExecutionChunkDataPackGenerated(proofSize interface{}, numberOfTransactions interface{}) *MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call {
	return &MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call{Call: _e.mock.On("ExecutionChunkDataPackGenerated", proofSize, numberOfTransactions)}
}

func (_c *MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call) Run(run func(proofSize int, numberOfTransactions int)) *MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call) Return() *MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call) RunAndReturn(run func(int, int)) *MockExecutionMetrics_ExecutionChunkDataPackGenerated_Call {
	_c.Run(run)
	return _c
}

// ExecutionCollectionExecuted provides a mock function with given fields: dur, stats
func (_m *MockExecutionMetrics) ExecutionCollectionExecuted(dur time.Duration, stats module.CollectionExecutionResultStats) {
	_m.Called(dur, stats)
}

// MockExecutionMetrics_ExecutionCollectionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionCollectionExecuted'
type MockExecutionMetrics_ExecutionCollectionExecuted_Call struct {
	*mock.Call
}

// ExecutionCollectionExecuted is a helper method to define mock.On call
//   - dur time.Duration
//   - stats module.CollectionExecutionResultStats
func (_e *MockExecutionMetrics_Expecter) ExecutionCollectionExecuted(dur interface{}, stats interface{}) *MockExecutionMetrics_ExecutionCollectionExecuted_Call {
	return &MockExecutionMetrics_ExecutionCollectionExecuted_Call{Call: _e.mock.On("ExecutionCollectionExecuted", dur, stats)}
}

func (_c *MockExecutionMetrics_ExecutionCollectionExecuted_Call) Run(run func(dur time.Duration, stats module.CollectionExecutionResultStats)) *MockExecutionMetrics_ExecutionCollectionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(module.CollectionExecutionResultStats))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionCollectionExecuted_Call) Return() *MockExecutionMetrics_ExecutionCollectionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionCollectionExecuted_Call) RunAndReturn(run func(time.Duration, module.CollectionExecutionResultStats)) *MockExecutionMetrics_ExecutionCollectionExecuted_Call {
	_c.Run(run)
	return _c
}

// ExecutionCollectionRequestSent provides a mock function with no fields
func (_m *MockExecutionMetrics) ExecutionCollectionRequestSent() {
	_m.Called()
}

// MockExecutionMetrics_ExecutionCollectionRequestSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionCollectionRequestSent'
type MockExecutionMetrics_ExecutionCollectionRequestSent_Call struct {
	*mock.Call
}

// ExecutionCollectionRequestSent is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) ExecutionCollectionRequestSent() *MockExecutionMetrics_ExecutionCollectionRequestSent_Call {
	return &MockExecutionMetrics_ExecutionCollectionRequestSent_Call{Call: _e.mock.On("ExecutionCollectionRequestSent")}
}

func (_c *MockExecutionMetrics_ExecutionCollectionRequestSent_Call) Run(run func()) *MockExecutionMetrics_ExecutionCollectionRequestSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionCollectionRequestSent_Call) Return() *MockExecutionMetrics_ExecutionCollectionRequestSent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionCollectionRequestSent_Call) RunAndReturn(run func()) *MockExecutionMetrics_ExecutionCollectionRequestSent_Call {
	_c.Run(run)
	return _c
}

// ExecutionComputationResultUploadRetried provides a mock function with no fields
func (_m *MockExecutionMetrics) ExecutionComputationResultUploadRetried() {
	_m.Called()
}

// MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionComputationResultUploadRetried'
type MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call struct {
	*mock.Call
}

// ExecutionComputationResultUploadRetried is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) ExecutionComputationResultUploadRetried() *MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call {
	return &MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call{Call: _e.mock.On("ExecutionComputationResultUploadRetried")}
}

func (_c *MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call) Run(run func()) *MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call) Return() *MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call) RunAndReturn(run func()) *MockExecutionMetrics_ExecutionComputationResultUploadRetried_Call {
	_c.Run(run)
	return _c
}

// ExecutionComputationResultUploaded provides a mock function with no fields
func (_m *MockExecutionMetrics) ExecutionComputationResultUploaded() {
	_m.Called()
}

// MockExecutionMetrics_ExecutionComputationResultUploaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionComputationResultUploaded'
type MockExecutionMetrics_ExecutionComputationResultUploaded_Call struct {
	*mock.Call
}

// ExecutionComputationResultUploaded is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) ExecutionComputationResultUploaded() *MockExecutionMetrics_ExecutionComputationResultUploaded_Call {
	return &MockExecutionMetrics_ExecutionComputationResultUploaded_Call{Call: _e.mock.On("ExecutionComputationResultUploaded")}
}

func (_c *MockExecutionMetrics_ExecutionComputationResultUploaded_Call) Run(run func()) *MockExecutionMetrics_ExecutionComputationResultUploaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionComputationResultUploaded_Call) Return() *MockExecutionMetrics_ExecutionComputationResultUploaded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionComputationResultUploaded_Call) RunAndReturn(run func()) *MockExecutionMetrics_ExecutionComputationResultUploaded_Call {
	_c.Run(run)
	return _c
}

// ExecutionLastChunkDataPackPrunedHeight provides a mock function with given fields: height
func (_m *MockExecutionMetrics) ExecutionLastChunkDataPackPrunedHeight(height uint64) {
	_m.Called(height)
}

// MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionLastChunkDataPackPrunedHeight'
type MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call struct {
	*mock.Call
}

// ExecutionLastChunkDataPackPrunedHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockExecutionMetrics_Expecter) ExecutionLastChunkDataPackPrunedHeight(height interface{}) *MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call {
	return &MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call{Call: _e.mock.On("ExecutionLastChunkDataPackPrunedHeight", height)}
}

func (_c *MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call) Run(run func(height uint64)) *MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call) Return() *MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ExecutionLastChunkDataPackPrunedHeight_Call {
	_c.Run(run)
	return _c
}

// ExecutionLastExecutedBlockHeight provides a mock function with given fields: height
func (_m *MockExecutionMetrics) ExecutionLastExecutedBlockHeight(height uint64) {
	_m.Called(height)
}

// MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionLastExecutedBlockHeight'
type MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call struct {
	*mock.Call
}

// ExecutionLastExecutedBlockHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockExecutionMetrics_Expecter) ExecutionLastExecutedBlockHeight(height interface{}) *MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call {
	return &MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call{Call: _e.mock.On("ExecutionLastExecutedBlockHeight", height)}
}

func (_c *MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call) Run(run func(height uint64)) *MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call) Return() *MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ExecutionLastExecutedBlockHeight_Call {
	_c.Run(run)
	return _c
}

// ExecutionLastFinalizedExecutedBlockHeight provides a mock function with given fields: height
func (_m *MockExecutionMetrics) ExecutionLastFinalizedExecutedBlockHeight(height uint64) {
	_m.Called(height)
}

// MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionLastFinalizedExecutedBlockHeight'
type MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call struct {
	*mock.Call
}

// ExecutionLastFinalizedExecutedBlockHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockExecutionMetrics_Expecter) ExecutionLastFinalizedExecutedBlockHeight(height interface{}) *MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call {
	return &MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call{Call: _e.mock.On("ExecutionLastFinalizedExecutedBlockHeight", height)}
}

func (_c *MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call) Run(run func(height uint64)) *MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call) Return() *MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ExecutionLastFinalizedExecutedBlockHeight_Call {
	_c.Run(run)
	return _c
}

// ExecutionScriptExecuted provides a mock function with given fields: dur, compUsed, memoryUsed, memoryEstimate
func (_m *MockExecutionMetrics) ExecutionScriptExecuted(dur time.Duration, compUsed uint64, memoryUsed uint64, memoryEstimate uint64) {
	_m.Called(dur, compUsed, memoryUsed, memoryEstimate)
}

// MockExecutionMetrics_ExecutionScriptExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionScriptExecuted'
type MockExecutionMetrics_ExecutionScriptExecuted_Call struct {
	*mock.Call
}

// ExecutionScriptExecuted is a helper method to define mock.On call
//   - dur time.Duration
//   - compUsed uint64
//   - memoryUsed uint64
//   - memoryEstimate uint64
func (_e *MockExecutionMetrics_Expecter) ExecutionScriptExecuted(dur interface{}, compUsed interface{}, memoryUsed interface{}, memoryEstimate interface{}) *MockExecutionMetrics_ExecutionScriptExecuted_Call {
	return &MockExecutionMetrics_ExecutionScriptExecuted_Call{Call: _e.mock.On("ExecutionScriptExecuted", dur, compUsed, memoryUsed, memoryEstimate)}
}

func (_c *MockExecutionMetrics_ExecutionScriptExecuted_Call) Run(run func(dur time.Duration, compUsed uint64, memoryUsed uint64, memoryEstimate uint64)) *MockExecutionMetrics_ExecutionScriptExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(uint64), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionScriptExecuted_Call) Return() *MockExecutionMetrics_ExecutionScriptExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionScriptExecuted_Call) RunAndReturn(run func(time.Duration, uint64, uint64, uint64)) *MockExecutionMetrics_ExecutionScriptExecuted_Call {
	_c.Run(run)
	return _c
}

// ExecutionStorageStateCommitment provides a mock function with given fields: bytes
func (_m *MockExecutionMetrics) ExecutionStorageStateCommitment(bytes int64) {
	_m.Called(bytes)
}

// MockExecutionMetrics_ExecutionStorageStateCommitment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionStorageStateCommitment'
type MockExecutionMetrics_ExecutionStorageStateCommitment_Call struct {
	*mock.Call
}

// ExecutionStorageStateCommitment is a helper method to define mock.On call
//   - bytes int64
func (_e *MockExecutionMetrics_Expecter) ExecutionStorageStateCommitment(bytes interface{}) *MockExecutionMetrics_ExecutionStorageStateCommitment_Call {
	return &MockExecutionMetrics_ExecutionStorageStateCommitment_Call{Call: _e.mock.On("ExecutionStorageStateCommitment", bytes)}
}

func (_c *MockExecutionMetrics_ExecutionStorageStateCommitment_Call) Run(run func(bytes int64)) *MockExecutionMetrics_ExecutionStorageStateCommitment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionStorageStateCommitment_Call) Return() *MockExecutionMetrics_ExecutionStorageStateCommitment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionStorageStateCommitment_Call) RunAndReturn(run func(int64)) *MockExecutionMetrics_ExecutionStorageStateCommitment_Call {
	_c.Run(run)
	return _c
}

// ExecutionSync provides a mock function with given fields: syncing
func (_m *MockExecutionMetrics) ExecutionSync(syncing bool) {
	_m.Called(syncing)
}

// MockExecutionMetrics_ExecutionSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionSync'
type MockExecutionMetrics_ExecutionSync_Call struct {
	*mock.Call
}

// ExecutionSync is a helper method to define mock.On call
//   - syncing bool
func (_e *MockExecutionMetrics_Expecter) ExecutionSync(syncing interface{}) *MockExecutionMetrics_ExecutionSync_Call {
	return &MockExecutionMetrics_ExecutionSync_Call{Call: _e.mock.On("ExecutionSync", syncing)}
}

func (_c *MockExecutionMetrics_ExecutionSync_Call) Run(run func(syncing bool)) *MockExecutionMetrics_ExecutionSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionSync_Call) Return() *MockExecutionMetrics_ExecutionSync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionSync_Call) RunAndReturn(run func(bool)) *MockExecutionMetrics_ExecutionSync_Call {
	_c.Run(run)
	return _c
}

// ExecutionTargetChunkDataPackPrunedHeight provides a mock function with given fields: height
func (_m *MockExecutionMetrics) ExecutionTargetChunkDataPackPrunedHeight(height uint64) {
	_m.Called(height)
}

// MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionTargetChunkDataPackPrunedHeight'
type MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call struct {
	*mock.Call
}

// ExecutionTargetChunkDataPackPrunedHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockExecutionMetrics_Expecter) ExecutionTargetChunkDataPackPrunedHeight(height interface{}) *MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call {
	return &MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call{Call: _e.mock.On("ExecutionTargetChunkDataPackPrunedHeight", height)}
}

func (_c *MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call) Run(run func(height uint64)) *MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call) Return() *MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ExecutionTargetChunkDataPackPrunedHeight_Call {
	_c.Run(run)
	return _c
}

// ExecutionTransactionExecuted provides a mock function with given fields: dur, stats, info
func (_m *MockExecutionMetrics) ExecutionTransactionExecuted(dur time.Duration, stats module.TransactionExecutionResultStats, info module.TransactionExecutionResultInfo) {
	_m.Called(dur, stats, info)
}

// MockExecutionMetrics_ExecutionTransactionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionTransactionExecuted'
type MockExecutionMetrics_ExecutionTransactionExecuted_Call struct {
	*mock.Call
}

// ExecutionTransactionExecuted is a helper method to define mock.On call
//   - dur time.Duration
//   - stats module.TransactionExecutionResultStats
//   - info module.TransactionExecutionResultInfo
func (_e *MockExecutionMetrics_Expecter) ExecutionTransactionExecuted(dur interface{}, stats interface{}, info interface{}) *MockExecutionMetrics_ExecutionTransactionExecuted_Call {
	return &MockExecutionMetrics_ExecutionTransactionExecuted_Call{Call: _e.mock.On("ExecutionTransactionExecuted", dur, stats, info)}
}

func (_c *MockExecutionMetrics_ExecutionTransactionExecuted_Call) Run(run func(dur time.Duration, stats module.TransactionExecutionResultStats, info module.TransactionExecutionResultInfo)) *MockExecutionMetrics_ExecutionTransactionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(module.TransactionExecutionResultStats), args[2].(module.TransactionExecutionResultInfo))
	})
	return _c
}

func (_c *MockExecutionMetrics_ExecutionTransactionExecuted_Call) Return() *MockExecutionMetrics_ExecutionTransactionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ExecutionTransactionExecuted_Call) RunAndReturn(run func(time.Duration, module.TransactionExecutionResultStats, module.TransactionExecutionResultInfo)) *MockExecutionMetrics_ExecutionTransactionExecuted_Call {
	_c.Run(run)
	return _c
}

// FinishBlockReceivedToExecuted provides a mock function with given fields: blockID
func (_m *MockExecutionMetrics) FinishBlockReceivedToExecuted(blockID flow.Identifier) {
	_m.Called(blockID)
}

// MockExecutionMetrics_FinishBlockReceivedToExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishBlockReceivedToExecuted'
type MockExecutionMetrics_FinishBlockReceivedToExecuted_Call struct {
	*mock.Call
}

// FinishBlockReceivedToExecuted is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockExecutionMetrics_Expecter) FinishBlockReceivedToExecuted(blockID interface{}) *MockExecutionMetrics_FinishBlockReceivedToExecuted_Call {
	return &MockExecutionMetrics_FinishBlockReceivedToExecuted_Call{Call: _e.mock.On("FinishBlockReceivedToExecuted", blockID)}
}

func (_c *MockExecutionMetrics_FinishBlockReceivedToExecuted_Call) Run(run func(blockID flow.Identifier)) *MockExecutionMetrics_FinishBlockReceivedToExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionMetrics_FinishBlockReceivedToExecuted_Call) Return() *MockExecutionMetrics_FinishBlockReceivedToExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_FinishBlockReceivedToExecuted_Call) RunAndReturn(run func(flow.Identifier)) *MockExecutionMetrics_FinishBlockReceivedToExecuted_Call {
	_c.Run(run)
	return _c
}

// ForestApproxMemorySize provides a mock function with given fields: bytes
func (_m *MockExecutionMetrics) ForestApproxMemorySize(bytes uint64) {
	_m.Called(bytes)
}

// MockExecutionMetrics_ForestApproxMemorySize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForestApproxMemorySize'
type MockExecutionMetrics_ForestApproxMemorySize_Call struct {
	*mock.Call
}

// ForestApproxMemorySize is a helper method to define mock.On call
//   - bytes uint64
func (_e *MockExecutionMetrics_Expecter) ForestApproxMemorySize(bytes interface{}) *MockExecutionMetrics_ForestApproxMemorySize_Call {
	return &MockExecutionMetrics_ForestApproxMemorySize_Call{Call: _e.mock.On("ForestApproxMemorySize", bytes)}
}

func (_c *MockExecutionMetrics_ForestApproxMemorySize_Call) Run(run func(bytes uint64)) *MockExecutionMetrics_ForestApproxMemorySize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ForestApproxMemorySize_Call) Return() *MockExecutionMetrics_ForestApproxMemorySize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ForestApproxMemorySize_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ForestApproxMemorySize_Call {
	_c.Run(run)
	return _c
}

// ForestNumberOfTrees provides a mock function with given fields: number
func (_m *MockExecutionMetrics) ForestNumberOfTrees(number uint64) {
	_m.Called(number)
}

// MockExecutionMetrics_ForestNumberOfTrees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForestNumberOfTrees'
type MockExecutionMetrics_ForestNumberOfTrees_Call struct {
	*mock.Call
}

// ForestNumberOfTrees is a helper method to define mock.On call
//   - number uint64
func (_e *MockExecutionMetrics_Expecter) ForestNumberOfTrees(number interface{}) *MockExecutionMetrics_ForestNumberOfTrees_Call {
	return &MockExecutionMetrics_ForestNumberOfTrees_Call{Call: _e.mock.On("ForestNumberOfTrees", number)}
}

func (_c *MockExecutionMetrics_ForestNumberOfTrees_Call) Run(run func(number uint64)) *MockExecutionMetrics_ForestNumberOfTrees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ForestNumberOfTrees_Call) Return() *MockExecutionMetrics_ForestNumberOfTrees_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ForestNumberOfTrees_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ForestNumberOfTrees_Call {
	_c.Run(run)
	return _c
}

// LatestTrieMaxDepthTouched provides a mock function with given fields: maxDepth
func (_m *MockExecutionMetrics) LatestTrieMaxDepthTouched(maxDepth uint16) {
	_m.Called(maxDepth)
}

// MockExecutionMetrics_LatestTrieMaxDepthTouched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestTrieMaxDepthTouched'
type MockExecutionMetrics_LatestTrieMaxDepthTouched_Call struct {
	*mock.Call
}

// LatestTrieMaxDepthTouched is a helper method to define mock.On call
//   - maxDepth uint16
func (_e *MockExecutionMetrics_Expecter) LatestTrieMaxDepthTouched(maxDepth interface{}) *MockExecutionMetrics_LatestTrieMaxDepthTouched_Call {
	return &MockExecutionMetrics_LatestTrieMaxDepthTouched_Call{Call: _e.mock.On("LatestTrieMaxDepthTouched", maxDepth)}
}

func (_c *MockExecutionMetrics_LatestTrieMaxDepthTouched_Call) Run(run func(maxDepth uint16)) *MockExecutionMetrics_LatestTrieMaxDepthTouched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16))
	})
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieMaxDepthTouched_Call) Return() *MockExecutionMetrics_LatestTrieMaxDepthTouched_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieMaxDepthTouched_Call) RunAndReturn(run func(uint16)) *MockExecutionMetrics_LatestTrieMaxDepthTouched_Call {
	_c.Run(run)
	return _c
}

// LatestTrieRegCount provides a mock function with given fields: number
func (_m *MockExecutionMetrics) LatestTrieRegCount(number uint64) {
	_m.Called(number)
}

// MockExecutionMetrics_LatestTrieRegCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestTrieRegCount'
type MockExecutionMetrics_LatestTrieRegCount_Call struct {
	*mock.Call
}

// LatestTrieRegCount is a helper method to define mock.On call
//   - number uint64
func (_e *MockExecutionMetrics_Expecter) LatestTrieRegCount(number interface{}) *MockExecutionMetrics_LatestTrieRegCount_Call {
	return &MockExecutionMetrics_LatestTrieRegCount_Call{Call: _e.mock.On("LatestTrieRegCount", number)}
}

func (_c *MockExecutionMetrics_LatestTrieRegCount_Call) Run(run func(number uint64)) *MockExecutionMetrics_LatestTrieRegCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegCount_Call) Return() *MockExecutionMetrics_LatestTrieRegCount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegCount_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_LatestTrieRegCount_Call {
	_c.Run(run)
	return _c
}

// LatestTrieRegCountDiff provides a mock function with given fields: number
func (_m *MockExecutionMetrics) LatestTrieRegCountDiff(number int64) {
	_m.Called(number)
}

// MockExecutionMetrics_LatestTrieRegCountDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestTrieRegCountDiff'
type MockExecutionMetrics_LatestTrieRegCountDiff_Call struct {
	*mock.Call
}

// LatestTrieRegCountDiff is a helper method to define mock.On call
//   - number int64
func (_e *MockExecutionMetrics_Expecter) LatestTrieRegCountDiff(number interface{}) *MockExecutionMetrics_LatestTrieRegCountDiff_Call {
	return &MockExecutionMetrics_LatestTrieRegCountDiff_Call{Call: _e.mock.On("LatestTrieRegCountDiff", number)}
}

func (_c *MockExecutionMetrics_LatestTrieRegCountDiff_Call) Run(run func(number int64)) *MockExecutionMetrics_LatestTrieRegCountDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegCountDiff_Call) Return() *MockExecutionMetrics_LatestTrieRegCountDiff_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegCountDiff_Call) RunAndReturn(run func(int64)) *MockExecutionMetrics_LatestTrieRegCountDiff_Call {
	_c.Run(run)
	return _c
}

// LatestTrieRegSize provides a mock function with given fields: size
func (_m *MockExecutionMetrics) LatestTrieRegSize(size uint64) {
	_m.Called(size)
}

// MockExecutionMetrics_LatestTrieRegSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestTrieRegSize'
type MockExecutionMetrics_LatestTrieRegSize_Call struct {
	*mock.Call
}

// LatestTrieRegSize is a helper method to define mock.On call
//   - size uint64
func (_e *MockExecutionMetrics_Expecter) LatestTrieRegSize(size interface{}) *MockExecutionMetrics_LatestTrieRegSize_Call {
	return &MockExecutionMetrics_LatestTrieRegSize_Call{Call: _e.mock.On("LatestTrieRegSize", size)}
}

func (_c *MockExecutionMetrics_LatestTrieRegSize_Call) Run(run func(size uint64)) *MockExecutionMetrics_LatestTrieRegSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegSize_Call) Return() *MockExecutionMetrics_LatestTrieRegSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegSize_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_LatestTrieRegSize_Call {
	_c.Run(run)
	return _c
}

// LatestTrieRegSizeDiff provides a mock function with given fields: size
func (_m *MockExecutionMetrics) LatestTrieRegSizeDiff(size int64) {
	_m.Called(size)
}

// MockExecutionMetrics_LatestTrieRegSizeDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestTrieRegSizeDiff'
type MockExecutionMetrics_LatestTrieRegSizeDiff_Call struct {
	*mock.Call
}

// LatestTrieRegSizeDiff is a helper method to define mock.On call
//   - size int64
func (_e *MockExecutionMetrics_Expecter) LatestTrieRegSizeDiff(size interface{}) *MockExecutionMetrics_LatestTrieRegSizeDiff_Call {
	return &MockExecutionMetrics_LatestTrieRegSizeDiff_Call{Call: _e.mock.On("LatestTrieRegSizeDiff", size)}
}

func (_c *MockExecutionMetrics_LatestTrieRegSizeDiff_Call) Run(run func(size int64)) *MockExecutionMetrics_LatestTrieRegSizeDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegSizeDiff_Call) Return() *MockExecutionMetrics_LatestTrieRegSizeDiff_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_LatestTrieRegSizeDiff_Call) RunAndReturn(run func(int64)) *MockExecutionMetrics_LatestTrieRegSizeDiff_Call {
	_c.Run(run)
	return _c
}

// ProofSize provides a mock function with given fields: bytes
func (_m *MockExecutionMetrics) ProofSize(bytes uint32) {
	_m.Called(bytes)
}

// MockExecutionMetrics_ProofSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProofSize'
type MockExecutionMetrics_ProofSize_Call struct {
	*mock.Call
}

// ProofSize is a helper method to define mock.On call
//   - bytes uint32
func (_e *MockExecutionMetrics_Expecter) ProofSize(bytes interface{}) *MockExecutionMetrics_ProofSize_Call {
	return &MockExecutionMetrics_ProofSize_Call{Call: _e.mock.On("ProofSize", bytes)}
}

func (_c *MockExecutionMetrics_ProofSize_Call) Run(run func(bytes uint32)) *MockExecutionMetrics_ProofSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *MockExecutionMetrics_ProofSize_Call) Return() *MockExecutionMetrics_ProofSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ProofSize_Call) RunAndReturn(run func(uint32)) *MockExecutionMetrics_ProofSize_Call {
	_c.Run(run)
	return _c
}

// ReadDuration provides a mock function with given fields: duration
func (_m *MockExecutionMetrics) ReadDuration(duration time.Duration) {
	_m.Called(duration)
}

// MockExecutionMetrics_ReadDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDuration'
type MockExecutionMetrics_ReadDuration_Call struct {
	*mock.Call
}

// ReadDuration is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockExecutionMetrics_Expecter) ReadDuration(duration interface{}) *MockExecutionMetrics_ReadDuration_Call {
	return &MockExecutionMetrics_ReadDuration_Call{Call: _e.mock.On("ReadDuration", duration)}
}

func (_c *MockExecutionMetrics_ReadDuration_Call) Run(run func(duration time.Duration)) *MockExecutionMetrics_ReadDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_ReadDuration_Call) Return() *MockExecutionMetrics_ReadDuration_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ReadDuration_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_ReadDuration_Call {
	_c.Run(run)
	return _c
}

// ReadDurationPerItem provides a mock function with given fields: duration
func (_m *MockExecutionMetrics) ReadDurationPerItem(duration time.Duration) {
	_m.Called(duration)
}

// MockExecutionMetrics_ReadDurationPerItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDurationPerItem'
type MockExecutionMetrics_ReadDurationPerItem_Call struct {
	*mock.Call
}

// ReadDurationPerItem is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockExecutionMetrics_Expecter) ReadDurationPerItem(duration interface{}) *MockExecutionMetrics_ReadDurationPerItem_Call {
	return &MockExecutionMetrics_ReadDurationPerItem_Call{Call: _e.mock.On("ReadDurationPerItem", duration)}
}

func (_c *MockExecutionMetrics_ReadDurationPerItem_Call) Run(run func(duration time.Duration)) *MockExecutionMetrics_ReadDurationPerItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_ReadDurationPerItem_Call) Return() *MockExecutionMetrics_ReadDurationPerItem_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ReadDurationPerItem_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_ReadDurationPerItem_Call {
	_c.Run(run)
	return _c
}

// ReadValuesNumber provides a mock function with given fields: number
func (_m *MockExecutionMetrics) ReadValuesNumber(number uint64) {
	_m.Called(number)
}

// MockExecutionMetrics_ReadValuesNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadValuesNumber'
type MockExecutionMetrics_ReadValuesNumber_Call struct {
	*mock.Call
}

// ReadValuesNumber is a helper method to define mock.On call
//   - number uint64
func (_e *MockExecutionMetrics_Expecter) ReadValuesNumber(number interface{}) *MockExecutionMetrics_ReadValuesNumber_Call {
	return &MockExecutionMetrics_ReadValuesNumber_Call{Call: _e.mock.On("ReadValuesNumber", number)}
}

func (_c *MockExecutionMetrics_ReadValuesNumber_Call) Run(run func(number uint64)) *MockExecutionMetrics_ReadValuesNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ReadValuesNumber_Call) Return() *MockExecutionMetrics_ReadValuesNumber_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ReadValuesNumber_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ReadValuesNumber_Call {
	_c.Run(run)
	return _c
}

// ReadValuesSize provides a mock function with given fields: byte
func (_m *MockExecutionMetrics) ReadValuesSize(byte uint64) {
	_m.Called(byte)
}

// MockExecutionMetrics_ReadValuesSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadValuesSize'
type MockExecutionMetrics_ReadValuesSize_Call struct {
	*mock.Call
}

// ReadValuesSize is a helper method to define mock.On call
//   - byte uint64
func (_e *MockExecutionMetrics_Expecter) ReadValuesSize(byte interface{}) *MockExecutionMetrics_ReadValuesSize_Call {
	return &MockExecutionMetrics_ReadValuesSize_Call{Call: _e.mock.On("ReadValuesSize", byte)}
}

func (_c *MockExecutionMetrics_ReadValuesSize_Call) Run(run func(byte uint64)) *MockExecutionMetrics_ReadValuesSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_ReadValuesSize_Call) Return() *MockExecutionMetrics_ReadValuesSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_ReadValuesSize_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_ReadValuesSize_Call {
	_c.Run(run)
	return _c
}

// RuntimeSetNumberOfAccounts provides a mock function with given fields: count
func (_m *MockExecutionMetrics) RuntimeSetNumberOfAccounts(count uint64) {
	_m.Called(count)
}

// MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeSetNumberOfAccounts'
type MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call struct {
	*mock.Call
}

// RuntimeSetNumberOfAccounts is a helper method to define mock.On call
//   - count uint64
func (_e *MockExecutionMetrics_Expecter) RuntimeSetNumberOfAccounts(count interface{}) *MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call {
	return &MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call{Call: _e.mock.On("RuntimeSetNumberOfAccounts", count)}
}

func (_c *MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call) Run(run func(count uint64)) *MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call) Return() *MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_RuntimeSetNumberOfAccounts_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionChecked provides a mock function with given fields: dur
func (_m *MockExecutionMetrics) RuntimeTransactionChecked(dur time.Duration) {
	_m.Called(dur)
}

// MockExecutionMetrics_RuntimeTransactionChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionChecked'
type MockExecutionMetrics_RuntimeTransactionChecked_Call struct {
	*mock.Call
}

// RuntimeTransactionChecked is a helper method to define mock.On call
//   - dur time.Duration
func (_e *MockExecutionMetrics_Expecter) RuntimeTransactionChecked(dur interface{}) *MockExecutionMetrics_RuntimeTransactionChecked_Call {
	return &MockExecutionMetrics_RuntimeTransactionChecked_Call{Call: _e.mock.On("RuntimeTransactionChecked", dur)}
}

func (_c *MockExecutionMetrics_RuntimeTransactionChecked_Call) Run(run func(dur time.Duration)) *MockExecutionMetrics_RuntimeTransactionChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionChecked_Call) Return() *MockExecutionMetrics_RuntimeTransactionChecked_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionChecked_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_RuntimeTransactionChecked_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionInterpreted provides a mock function with given fields: dur
func (_m *MockExecutionMetrics) RuntimeTransactionInterpreted(dur time.Duration) {
	_m.Called(dur)
}

// MockExecutionMetrics_RuntimeTransactionInterpreted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionInterpreted'
type MockExecutionMetrics_RuntimeTransactionInterpreted_Call struct {
	*mock.Call
}

// RuntimeTransactionInterpreted is a helper method to define mock.On call
//   - dur time.Duration
func (_e *MockExecutionMetrics_Expecter) RuntimeTransactionInterpreted(dur interface{}) *MockExecutionMetrics_RuntimeTransactionInterpreted_Call {
	return &MockExecutionMetrics_RuntimeTransactionInterpreted_Call{Call: _e.mock.On("RuntimeTransactionInterpreted", dur)}
}

func (_c *MockExecutionMetrics_RuntimeTransactionInterpreted_Call) Run(run func(dur time.Duration)) *MockExecutionMetrics_RuntimeTransactionInterpreted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionInterpreted_Call) Return() *MockExecutionMetrics_RuntimeTransactionInterpreted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionInterpreted_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_RuntimeTransactionInterpreted_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionParsed provides a mock function with given fields: dur
func (_m *MockExecutionMetrics) RuntimeTransactionParsed(dur time.Duration) {
	_m.Called(dur)
}

// MockExecutionMetrics_RuntimeTransactionParsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionParsed'
type MockExecutionMetrics_RuntimeTransactionParsed_Call struct {
	*mock.Call
}

// RuntimeTransactionParsed is a helper method to define mock.On call
//   - dur time.Duration
func (_e *MockExecutionMetrics_Expecter) RuntimeTransactionParsed(dur interface{}) *MockExecutionMetrics_RuntimeTransactionParsed_Call {
	return &MockExecutionMetrics_RuntimeTransactionParsed_Call{Call: _e.mock.On("RuntimeTransactionParsed", dur)}
}

func (_c *MockExecutionMetrics_RuntimeTransactionParsed_Call) Run(run func(dur time.Duration)) *MockExecutionMetrics_RuntimeTransactionParsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionParsed_Call) Return() *MockExecutionMetrics_RuntimeTransactionParsed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionParsed_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_RuntimeTransactionParsed_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheHit provides a mock function with no fields
func (_m *MockExecutionMetrics) RuntimeTransactionProgramsCacheHit() {
	_m.Called()
}

// MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheHit'
type MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheHit is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) RuntimeTransactionProgramsCacheHit() *MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call {
	return &MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheHit")}
}

func (_c *MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call) Run(run func()) *MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call) Return() *MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call) RunAndReturn(run func()) *MockExecutionMetrics_RuntimeTransactionProgramsCacheHit_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheMiss provides a mock function with no fields
func (_m *MockExecutionMetrics) RuntimeTransactionProgramsCacheMiss() {
	_m.Called()
}

// MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheMiss'
type MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheMiss is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) RuntimeTransactionProgramsCacheMiss() *MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call {
	return &MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheMiss")}
}

func (_c *MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call) Run(run func()) *MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call) Return() *MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call) RunAndReturn(run func()) *MockExecutionMetrics_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Run(run)
	return _c
}

// SetNumberOfDeployedCOAs provides a mock function with given fields: count
func (_m *MockExecutionMetrics) SetNumberOfDeployedCOAs(count uint64) {
	_m.Called(count)
}

// MockExecutionMetrics_SetNumberOfDeployedCOAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNumberOfDeployedCOAs'
type MockExecutionMetrics_SetNumberOfDeployedCOAs_Call struct {
	*mock.Call
}

// SetNumberOfDeployedCOAs is a helper method to define mock.On call
//   - count uint64
func (_e *MockExecutionMetrics_Expecter) SetNumberOfDeployedCOAs(count interface{}) *MockExecutionMetrics_SetNumberOfDeployedCOAs_Call {
	return &MockExecutionMetrics_SetNumberOfDeployedCOAs_Call{Call: _e.mock.On("SetNumberOfDeployedCOAs", count)}
}

func (_c *MockExecutionMetrics_SetNumberOfDeployedCOAs_Call) Run(run func(count uint64)) *MockExecutionMetrics_SetNumberOfDeployedCOAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_SetNumberOfDeployedCOAs_Call) Return() *MockExecutionMetrics_SetNumberOfDeployedCOAs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_SetNumberOfDeployedCOAs_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_SetNumberOfDeployedCOAs_Call {
	_c.Run(run)
	return _c
}

// StartBlockReceivedToExecuted provides a mock function with given fields: blockID
func (_m *MockExecutionMetrics) StartBlockReceivedToExecuted(blockID flow.Identifier) {
	_m.Called(blockID)
}

// MockExecutionMetrics_StartBlockReceivedToExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBlockReceivedToExecuted'
type MockExecutionMetrics_StartBlockReceivedToExecuted_Call struct {
	*mock.Call
}

// StartBlockReceivedToExecuted is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockExecutionMetrics_Expecter) StartBlockReceivedToExecuted(blockID interface{}) *MockExecutionMetrics_StartBlockReceivedToExecuted_Call {
	return &MockExecutionMetrics_StartBlockReceivedToExecuted_Call{Call: _e.mock.On("StartBlockReceivedToExecuted", blockID)}
}

func (_c *MockExecutionMetrics_StartBlockReceivedToExecuted_Call) Run(run func(blockID flow.Identifier)) *MockExecutionMetrics_StartBlockReceivedToExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionMetrics_StartBlockReceivedToExecuted_Call) Return() *MockExecutionMetrics_StartBlockReceivedToExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_StartBlockReceivedToExecuted_Call) RunAndReturn(run func(flow.Identifier)) *MockExecutionMetrics_StartBlockReceivedToExecuted_Call {
	_c.Run(run)
	return _c
}

// UpdateCollectionMaxHeight provides a mock function with given fields: height
func (_m *MockExecutionMetrics) UpdateCollectionMaxHeight(height uint64) {
	_m.Called(height)
}

// MockExecutionMetrics_UpdateCollectionMaxHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCollectionMaxHeight'
type MockExecutionMetrics_UpdateCollectionMaxHeight_Call struct {
	*mock.Call
}

// UpdateCollectionMaxHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockExecutionMetrics_Expecter) UpdateCollectionMaxHeight(height interface{}) *MockExecutionMetrics_UpdateCollectionMaxHeight_Call {
	return &MockExecutionMetrics_UpdateCollectionMaxHeight_Call{Call: _e.mock.On("UpdateCollectionMaxHeight", height)}
}

func (_c *MockExecutionMetrics_UpdateCollectionMaxHeight_Call) Run(run func(height uint64)) *MockExecutionMetrics_UpdateCollectionMaxHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_UpdateCollectionMaxHeight_Call) Return() *MockExecutionMetrics_UpdateCollectionMaxHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_UpdateCollectionMaxHeight_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_UpdateCollectionMaxHeight_Call {
	_c.Run(run)
	return _c
}

// UpdateCount provides a mock function with no fields
func (_m *MockExecutionMetrics) UpdateCount() {
	_m.Called()
}

// MockExecutionMetrics_UpdateCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCount'
type MockExecutionMetrics_UpdateCount_Call struct {
	*mock.Call
}

// UpdateCount is a helper method to define mock.On call
func (_e *MockExecutionMetrics_Expecter) UpdateCount() *MockExecutionMetrics_UpdateCount_Call {
	return &MockExecutionMetrics_UpdateCount_Call{Call: _e.mock.On("UpdateCount")}
}

func (_c *MockExecutionMetrics_UpdateCount_Call) Run(run func()) *MockExecutionMetrics_UpdateCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionMetrics_UpdateCount_Call) Return() *MockExecutionMetrics_UpdateCount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_UpdateCount_Call) RunAndReturn(run func()) *MockExecutionMetrics_UpdateCount_Call {
	_c.Run(run)
	return _c
}

// UpdateDuration provides a mock function with given fields: duration
func (_m *MockExecutionMetrics) UpdateDuration(duration time.Duration) {
	_m.Called(duration)
}

// MockExecutionMetrics_UpdateDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDuration'
type MockExecutionMetrics_UpdateDuration_Call struct {
	*mock.Call
}

// UpdateDuration is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockExecutionMetrics_Expecter) UpdateDuration(duration interface{}) *MockExecutionMetrics_UpdateDuration_Call {
	return &MockExecutionMetrics_UpdateDuration_Call{Call: _e.mock.On("UpdateDuration", duration)}
}

func (_c *MockExecutionMetrics_UpdateDuration_Call) Run(run func(duration time.Duration)) *MockExecutionMetrics_UpdateDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_UpdateDuration_Call) Return() *MockExecutionMetrics_UpdateDuration_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_UpdateDuration_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_UpdateDuration_Call {
	_c.Run(run)
	return _c
}

// UpdateDurationPerItem provides a mock function with given fields: duration
func (_m *MockExecutionMetrics) UpdateDurationPerItem(duration time.Duration) {
	_m.Called(duration)
}

// MockExecutionMetrics_UpdateDurationPerItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDurationPerItem'
type MockExecutionMetrics_UpdateDurationPerItem_Call struct {
	*mock.Call
}

// UpdateDurationPerItem is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockExecutionMetrics_Expecter) UpdateDurationPerItem(duration interface{}) *MockExecutionMetrics_UpdateDurationPerItem_Call {
	return &MockExecutionMetrics_UpdateDurationPerItem_Call{Call: _e.mock.On("UpdateDurationPerItem", duration)}
}

func (_c *MockExecutionMetrics_UpdateDurationPerItem_Call) Run(run func(duration time.Duration)) *MockExecutionMetrics_UpdateDurationPerItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionMetrics_UpdateDurationPerItem_Call) Return() *MockExecutionMetrics_UpdateDurationPerItem_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_UpdateDurationPerItem_Call) RunAndReturn(run func(time.Duration)) *MockExecutionMetrics_UpdateDurationPerItem_Call {
	_c.Run(run)
	return _c
}

// UpdateValuesNumber provides a mock function with given fields: number
func (_m *MockExecutionMetrics) UpdateValuesNumber(number uint64) {
	_m.Called(number)
}

// MockExecutionMetrics_UpdateValuesNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateValuesNumber'
type MockExecutionMetrics_UpdateValuesNumber_Call struct {
	*mock.Call
}

// UpdateValuesNumber is a helper method to define mock.On call
//   - number uint64
func (_e *MockExecutionMetrics_Expecter) UpdateValuesNumber(number interface{}) *MockExecutionMetrics_UpdateValuesNumber_Call {
	return &MockExecutionMetrics_UpdateValuesNumber_Call{Call: _e.mock.On("UpdateValuesNumber", number)}
}

func (_c *MockExecutionMetrics_UpdateValuesNumber_Call) Run(run func(number uint64)) *MockExecutionMetrics_UpdateValuesNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_UpdateValuesNumber_Call) Return() *MockExecutionMetrics_UpdateValuesNumber_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_UpdateValuesNumber_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_UpdateValuesNumber_Call {
	_c.Run(run)
	return _c
}

// UpdateValuesSize provides a mock function with given fields: byte
func (_m *MockExecutionMetrics) UpdateValuesSize(byte uint64) {
	_m.Called(byte)
}

// MockExecutionMetrics_UpdateValuesSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateValuesSize'
type MockExecutionMetrics_UpdateValuesSize_Call struct {
	*mock.Call
}

// UpdateValuesSize is a helper method to define mock.On call
//   - byte uint64
func (_e *MockExecutionMetrics_Expecter) UpdateValuesSize(byte interface{}) *MockExecutionMetrics_UpdateValuesSize_Call {
	return &MockExecutionMetrics_UpdateValuesSize_Call{Call: _e.mock.On("UpdateValuesSize", byte)}
}

func (_c *MockExecutionMetrics_UpdateValuesSize_Call) Run(run func(byte uint64)) *MockExecutionMetrics_UpdateValuesSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionMetrics_UpdateValuesSize_Call) Return() *MockExecutionMetrics_UpdateValuesSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionMetrics_UpdateValuesSize_Call) RunAndReturn(run func(uint64)) *MockExecutionMetrics_UpdateValuesSize_Call {
	_c.Run(run)
	return _c
}

// NewMockExecutionMetrics creates a new instance of MockExecutionMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionMetrics {
	mock := &MockExecutionMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
