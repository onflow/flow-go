// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockIteratorStateReader is an autogenerated mock type for the IteratorStateReader type
type MockIteratorStateReader struct {
	mock.Mock
}

type MockIteratorStateReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIteratorStateReader) EXPECT() *MockIteratorStateReader_Expecter {
	return &MockIteratorStateReader_Expecter{mock: &_m.Mock}
}

// LoadState provides a mock function with no fields
func (_m *MockIteratorStateReader) LoadState() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadState")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIteratorStateReader_LoadState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadState'
type MockIteratorStateReader_LoadState_Call struct {
	*mock.Call
}

// LoadState is a helper method to define mock.On call
func (_e *MockIteratorStateReader_Expecter) LoadState() *MockIteratorStateReader_LoadState_Call {
	return &MockIteratorStateReader_LoadState_Call{Call: _e.mock.On("LoadState")}
}

func (_c *MockIteratorStateReader_LoadState_Call) Run(run func()) *MockIteratorStateReader_LoadState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIteratorStateReader_LoadState_Call) Return(progress uint64, exception error) *MockIteratorStateReader_LoadState_Call {
	_c.Call.Return(progress, exception)
	return _c
}

func (_c *MockIteratorStateReader_LoadState_Call) RunAndReturn(run func() (uint64, error)) *MockIteratorStateReader_LoadState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIteratorStateReader creates a new instance of MockIteratorStateReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIteratorStateReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIteratorStateReader {
	mock := &MockIteratorStateReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
