// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// SealingConfigsSetter is an autogenerated mock type for the SealingConfigsSetter type
type SealingConfigsSetter struct {
	mock.Mock
}

// ApprovalRequestsThresholdConst provides a mock function with given fields:
func (_m *SealingConfigsSetter) ApprovalRequestsThresholdConst() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ChunkAlphaConst provides a mock function with given fields:
func (_m *SealingConfigsSetter) ChunkAlphaConst() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// EmergencySealingActiveConst provides a mock function with given fields:
func (_m *SealingConfigsSetter) EmergencySealingActiveConst() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RequireApprovalsForSealConstructionDynamicValue provides a mock function with given fields:
func (_m *SealingConfigsSetter) RequireApprovalsForSealConstructionDynamicValue() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// RequireApprovalsForSealVerificationConst provides a mock function with given fields:
func (_m *SealingConfigsSetter) RequireApprovalsForSealVerificationConst() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// SetRequiredApprovalsForSealingConstruction provides a mock function with given fields: newVal
func (_m *SealingConfigsSetter) SetRequiredApprovalsForSealingConstruction(newVal uint) error {
	ret := _m.Called(newVal)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(newVal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSealingConfigsSetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewSealingConfigsSetter creates a new instance of SealingConfigsSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSealingConfigsSetter(t mockConstructorTestingTNewSealingConfigsSetter) *SealingConfigsSetter {
	mock := &SealingConfigsSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
