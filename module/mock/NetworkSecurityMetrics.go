// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockNetworkSecurityMetrics is an autogenerated mock type for the NetworkSecurityMetrics type
type MockNetworkSecurityMetrics struct {
	mock.Mock
}

type MockNetworkSecurityMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkSecurityMetrics) EXPECT() *MockNetworkSecurityMetrics_Expecter {
	return &MockNetworkSecurityMetrics_Expecter{mock: &_m.Mock}
}

// OnRateLimitedPeer provides a mock function with given fields: pid, role, msgType, topic, reason
func (_m *MockNetworkSecurityMetrics) OnRateLimitedPeer(pid peer.ID, role string, msgType string, topic string, reason string) {
	_m.Called(pid, role, msgType, topic, reason)
}

// MockNetworkSecurityMetrics_OnRateLimitedPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRateLimitedPeer'
type MockNetworkSecurityMetrics_OnRateLimitedPeer_Call struct {
	*mock.Call
}

// OnRateLimitedPeer is a helper method to define mock.On call
//   - pid peer.ID
//   - role string
//   - msgType string
//   - topic string
//   - reason string
func (_e *MockNetworkSecurityMetrics_Expecter) OnRateLimitedPeer(pid interface{}, role interface{}, msgType interface{}, topic interface{}, reason interface{}) *MockNetworkSecurityMetrics_OnRateLimitedPeer_Call {
	return &MockNetworkSecurityMetrics_OnRateLimitedPeer_Call{Call: _e.mock.On("OnRateLimitedPeer", pid, role, msgType, topic, reason)}
}

func (_c *MockNetworkSecurityMetrics_OnRateLimitedPeer_Call) Run(run func(pid peer.ID, role string, msgType string, topic string, reason string)) *MockNetworkSecurityMetrics_OnRateLimitedPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockNetworkSecurityMetrics_OnRateLimitedPeer_Call) Return() *MockNetworkSecurityMetrics_OnRateLimitedPeer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkSecurityMetrics_OnRateLimitedPeer_Call) RunAndReturn(run func(peer.ID, string, string, string, string)) *MockNetworkSecurityMetrics_OnRateLimitedPeer_Call {
	_c.Run(run)
	return _c
}

// OnUnauthorizedMessage provides a mock function with given fields: role, msgType, topic, offense
func (_m *MockNetworkSecurityMetrics) OnUnauthorizedMessage(role string, msgType string, topic string, offense string) {
	_m.Called(role, msgType, topic, offense)
}

// MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnUnauthorizedMessage'
type MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call struct {
	*mock.Call
}

// OnUnauthorizedMessage is a helper method to define mock.On call
//   - role string
//   - msgType string
//   - topic string
//   - offense string
func (_e *MockNetworkSecurityMetrics_Expecter) OnUnauthorizedMessage(role interface{}, msgType interface{}, topic interface{}, offense interface{}) *MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call {
	return &MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call{Call: _e.mock.On("OnUnauthorizedMessage", role, msgType, topic, offense)}
}

func (_c *MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call) Run(run func(role string, msgType string, topic string, offense string)) *MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call) Return() *MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call) RunAndReturn(run func(string, string, string, string)) *MockNetworkSecurityMetrics_OnUnauthorizedMessage_Call {
	_c.Run(run)
	return _c
}

// OnViolationReportSkipped provides a mock function with no fields
func (_m *MockNetworkSecurityMetrics) OnViolationReportSkipped() {
	_m.Called()
}

// MockNetworkSecurityMetrics_OnViolationReportSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnViolationReportSkipped'
type MockNetworkSecurityMetrics_OnViolationReportSkipped_Call struct {
	*mock.Call
}

// OnViolationReportSkipped is a helper method to define mock.On call
func (_e *MockNetworkSecurityMetrics_Expecter) OnViolationReportSkipped() *MockNetworkSecurityMetrics_OnViolationReportSkipped_Call {
	return &MockNetworkSecurityMetrics_OnViolationReportSkipped_Call{Call: _e.mock.On("OnViolationReportSkipped")}
}

func (_c *MockNetworkSecurityMetrics_OnViolationReportSkipped_Call) Run(run func()) *MockNetworkSecurityMetrics_OnViolationReportSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkSecurityMetrics_OnViolationReportSkipped_Call) Return() *MockNetworkSecurityMetrics_OnViolationReportSkipped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetworkSecurityMetrics_OnViolationReportSkipped_Call) RunAndReturn(run func()) *MockNetworkSecurityMetrics_OnViolationReportSkipped_Call {
	_c.Run(run)
	return _c
}

// NewMockNetworkSecurityMetrics creates a new instance of MockNetworkSecurityMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkSecurityMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkSecurityMetrics {
	mock := &MockNetworkSecurityMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
