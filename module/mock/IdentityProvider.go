// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockIdentityProvider is an autogenerated mock type for the IdentityProvider type
type MockIdentityProvider struct {
	mock.Mock
}

type MockIdentityProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentityProvider) EXPECT() *MockIdentityProvider_Expecter {
	return &MockIdentityProvider_Expecter{mock: &_m.Mock}
}

// ByNodeID provides a mock function with given fields: _a0
func (_m *MockIdentityProvider) ByNodeID(_a0 flow.Identifier) (*flow.Identity, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ByNodeID")
	}

	var r0 *flow.Identity
	var r1 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Identity, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Identity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockIdentityProvider_ByNodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByNodeID'
type MockIdentityProvider_ByNodeID_Call struct {
	*mock.Call
}

// ByNodeID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockIdentityProvider_Expecter) ByNodeID(_a0 interface{}) *MockIdentityProvider_ByNodeID_Call {
	return &MockIdentityProvider_ByNodeID_Call{Call: _e.mock.On("ByNodeID", _a0)}
}

func (_c *MockIdentityProvider_ByNodeID_Call) Run(run func(_a0 flow.Identifier)) *MockIdentityProvider_ByNodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIdentityProvider_ByNodeID_Call) Return(_a0 *flow.Identity, _a1 bool) *MockIdentityProvider_ByNodeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIdentityProvider_ByNodeID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Identity, bool)) *MockIdentityProvider_ByNodeID_Call {
	_c.Call.Return(run)
	return _c
}

// ByPeerID provides a mock function with given fields: _a0
func (_m *MockIdentityProvider) ByPeerID(_a0 peer.ID) (*flow.Identity, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ByPeerID")
	}

	var r0 *flow.Identity
	var r1 bool
	if rf, ok := ret.Get(0).(func(peer.ID) (*flow.Identity, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) *flow.Identity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockIdentityProvider_ByPeerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByPeerID'
type MockIdentityProvider_ByPeerID_Call struct {
	*mock.Call
}

// ByPeerID is a helper method to define mock.On call
//   - _a0 peer.ID
func (_e *MockIdentityProvider_Expecter) ByPeerID(_a0 interface{}) *MockIdentityProvider_ByPeerID_Call {
	return &MockIdentityProvider_ByPeerID_Call{Call: _e.mock.On("ByPeerID", _a0)}
}

func (_c *MockIdentityProvider_ByPeerID_Call) Run(run func(_a0 peer.ID)) *MockIdentityProvider_ByPeerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *MockIdentityProvider_ByPeerID_Call) Return(_a0 *flow.Identity, _a1 bool) *MockIdentityProvider_ByPeerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIdentityProvider_ByPeerID_Call) RunAndReturn(run func(peer.ID) (*flow.Identity, bool)) *MockIdentityProvider_ByPeerID_Call {
	_c.Call.Return(run)
	return _c
}

// Identities provides a mock function with given fields: _a0
func (_m *MockIdentityProvider) Identities(_a0 flow.IdentityFilter[flow.Identity]) flow.GenericIdentityList[flow.Identity] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Identities")
	}

	var r0 flow.GenericIdentityList[flow.Identity]
	if rf, ok := ret.Get(0).(func(flow.IdentityFilter[flow.Identity]) flow.GenericIdentityList[flow.Identity]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.Identity])
		}
	}

	return r0
}

// MockIdentityProvider_Identities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identities'
type MockIdentityProvider_Identities_Call struct {
	*mock.Call
}

// Identities is a helper method to define mock.On call
//   - _a0 flow.IdentityFilter[flow.Identity]
func (_e *MockIdentityProvider_Expecter) Identities(_a0 interface{}) *MockIdentityProvider_Identities_Call {
	return &MockIdentityProvider_Identities_Call{Call: _e.mock.On("Identities", _a0)}
}

func (_c *MockIdentityProvider_Identities_Call) Run(run func(_a0 flow.IdentityFilter[flow.Identity])) *MockIdentityProvider_Identities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.IdentityFilter[flow.Identity]))
	})
	return _c
}

func (_c *MockIdentityProvider_Identities_Call) Return(_a0 flow.GenericIdentityList[flow.Identity]) *MockIdentityProvider_Identities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIdentityProvider_Identities_Call) RunAndReturn(run func(flow.IdentityFilter[flow.Identity]) flow.GenericIdentityList[flow.Identity]) *MockIdentityProvider_Identities_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIdentityProvider creates a new instance of MockIdentityProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentityProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentityProvider {
	mock := &MockIdentityProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
