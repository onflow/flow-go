// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	moduletrace "github.com/onflow/flow-go/module/trace"

	trace "go.opentelemetry.io/otel/trace"
)

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

// BlockRootSpan provides a mock function with given fields: blockID
func (_m *Tracer) BlockRootSpan(blockID flow.Identifier) trace.Span {
	ret := _m.Called(blockID)

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(flow.Identifier) trace.Span); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	return r0
}

// Done provides a mock function with given fields:
func (_m *Tracer) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *Tracer) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// ShouldSample provides a mock function with given fields: entityID
func (_m *Tracer) ShouldSample(entityID flow.Identifier) bool {
	ret := _m.Called(entityID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(entityID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StartBlockSpan provides a mock function with given fields: ctx, blockID, spanName, opts
func (_m *Tracer) StartBlockSpan(ctx context.Context, blockID flow.Identifier, spanName moduletrace.SpanName, opts ...trace.SpanStartOption) (trace.Span, context.Context) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, blockID, spanName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(ctx, blockID, spanName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	var r1 context.Context
	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) context.Context); ok {
		r1 = rf(ctx, blockID, spanName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// StartCollectionSpan provides a mock function with given fields: ctx, collectionID, spanName, opts
func (_m *Tracer) StartCollectionSpan(ctx context.Context, collectionID flow.Identifier, spanName moduletrace.SpanName, opts ...trace.SpanStartOption) (trace.Span, context.Context) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collectionID, spanName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(ctx, collectionID, spanName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	var r1 context.Context
	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) context.Context); ok {
		r1 = rf(ctx, collectionID, spanName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// StartSampledSpanFromParent provides a mock function with given fields: parentSpan, entityID, operationName, opts
func (_m *Tracer) StartSampledSpanFromParent(parentSpan trace.Span, entityID flow.Identifier, operationName moduletrace.SpanName, opts ...trace.SpanStartOption) trace.Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, parentSpan, entityID, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(trace.Span, flow.Identifier, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(parentSpan, entityID, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	return r0
}

// StartSpanFromContext provides a mock function with given fields: ctx, operationName, opts
func (_m *Tracer) StartSpanFromContext(ctx context.Context, operationName moduletrace.SpanName, opts ...trace.SpanStartOption) (trace.Span, context.Context) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(context.Context, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(ctx, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	var r1 context.Context
	if rf, ok := ret.Get(1).(func(context.Context, moduletrace.SpanName, ...trace.SpanStartOption) context.Context); ok {
		r1 = rf(ctx, operationName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// StartSpanFromParent provides a mock function with given fields: parentSpan, operationName, opts
func (_m *Tracer) StartSpanFromParent(parentSpan trace.Span, operationName moduletrace.SpanName, opts ...trace.SpanStartOption) trace.Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, parentSpan, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func(trace.Span, moduletrace.SpanName, ...trace.SpanStartOption) trace.Span); ok {
		r0 = rf(parentSpan, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	return r0
}

// WithSpanFromContext provides a mock function with given fields: ctx, operationName, f, opts
func (_m *Tracer) WithSpanFromContext(ctx context.Context, operationName moduletrace.SpanName, f func(), opts ...trace.SpanStartOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, operationName, f)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewTracer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTracer creates a new instance of Tracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTracer(t mockConstructorTestingTNewTracer) *Tracer {
	mock := &Tracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
