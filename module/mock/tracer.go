// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	opentracing "github.com/opentracing/opentracing-go"

	time "time"

	trace "github.com/onflow/flow-go/module/trace"
)

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *Tracer) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// FinishSpan provides a mock function with given fields: entity, spanName
func (_m *Tracer) FinishSpan(entity flow.Identifier, spanName trace.SpanName) {
	_m.Called(entity, spanName)
}

// GetSpan provides a mock function with given fields: entity, spanName
func (_m *Tracer) GetSpan(entity flow.Identifier, spanName trace.SpanName) (opentracing.Span, bool) {
	ret := _m.Called(entity, spanName)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(flow.Identifier, trace.SpanName) opentracing.Span); ok {
		r0 = rf(entity, spanName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(flow.Identifier, trace.SpanName) bool); ok {
		r1 = rf(entity, spanName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Ready provides a mock function with given fields:
func (_m *Tracer) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// RecordSpanFromParent provides a mock function with given fields: span, operationName, duration, logs, opts
func (_m *Tracer) RecordSpanFromParent(span opentracing.Span, operationName trace.SpanName, duration time.Duration, logs []opentracing.LogRecord, opts ...opentracing.StartSpanOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, span, operationName, duration, logs)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// StartSpan provides a mock function with given fields: entity, spanName, opts
func (_m *Tracer) StartSpan(entity flow.Identifier, spanName trace.SpanName, opts ...opentracing.StartSpanOption) opentracing.Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, entity, spanName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(flow.Identifier, trace.SpanName, ...opentracing.StartSpanOption) opentracing.Span); ok {
		r0 = rf(entity, spanName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	return r0
}

// StartSpanFromContext provides a mock function with given fields: ctx, operationName, opts
func (_m *Tracer) StartSpanFromContext(ctx context.Context, operationName trace.SpanName, opts ...opentracing.StartSpanOption) (opentracing.Span, context.Context) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(context.Context, trace.SpanName, ...opentracing.StartSpanOption) opentracing.Span); ok {
		r0 = rf(ctx, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	var r1 context.Context
	if rf, ok := ret.Get(1).(func(context.Context, trace.SpanName, ...opentracing.StartSpanOption) context.Context); ok {
		r1 = rf(ctx, operationName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	return r0, r1
}

// StartSpanFromParent provides a mock function with given fields: span, operationName, opts
func (_m *Tracer) StartSpanFromParent(span opentracing.Span, operationName trace.SpanName, opts ...opentracing.StartSpanOption) opentracing.Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, span, operationName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(opentracing.Span, trace.SpanName, ...opentracing.StartSpanOption) opentracing.Span); ok {
		r0 = rf(span, operationName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	return r0
}

// WithSpanFromContext provides a mock function with given fields: ctx, operationName, f, opts
func (_m *Tracer) WithSpanFromContext(ctx context.Context, operationName trace.SpanName, f func(), opts ...opentracing.StartSpanOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, operationName, f)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}
