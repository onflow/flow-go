// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockProcessingNotifier is an autogenerated mock type for the ProcessingNotifier type
type MockProcessingNotifier struct {
	mock.Mock
}

type MockProcessingNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessingNotifier) EXPECT() *MockProcessingNotifier_Expecter {
	return &MockProcessingNotifier_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: entityID
func (_m *MockProcessingNotifier) Notify(entityID flow.Identifier) {
	_m.Called(entityID)
}

// MockProcessingNotifier_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type MockProcessingNotifier_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - entityID flow.Identifier
func (_e *MockProcessingNotifier_Expecter) Notify(entityID interface{}) *MockProcessingNotifier_Notify_Call {
	return &MockProcessingNotifier_Notify_Call{Call: _e.mock.On("Notify", entityID)}
}

func (_c *MockProcessingNotifier_Notify_Call) Run(run func(entityID flow.Identifier)) *MockProcessingNotifier_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockProcessingNotifier_Notify_Call) Return() *MockProcessingNotifier_Notify_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessingNotifier_Notify_Call) RunAndReturn(run func(flow.Identifier)) *MockProcessingNotifier_Notify_Call {
	_c.Run(run)
	return _c
}

// NewMockProcessingNotifier creates a new instance of MockProcessingNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessingNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessingNotifier {
	mock := &MockProcessingNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
