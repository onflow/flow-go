// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockExecutionDataPrunerMetrics is an autogenerated mock type for the ExecutionDataPrunerMetrics type
type MockExecutionDataPrunerMetrics struct {
	mock.Mock
}

type MockExecutionDataPrunerMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionDataPrunerMetrics) EXPECT() *MockExecutionDataPrunerMetrics_Expecter {
	return &MockExecutionDataPrunerMetrics_Expecter{mock: &_m.Mock}
}

// Pruned provides a mock function with given fields: height, duration
func (_m *MockExecutionDataPrunerMetrics) Pruned(height uint64, duration time.Duration) {
	_m.Called(height, duration)
}

// MockExecutionDataPrunerMetrics_Pruned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pruned'
type MockExecutionDataPrunerMetrics_Pruned_Call struct {
	*mock.Call
}

// Pruned is a helper method to define mock.On call
//   - height uint64
//   - duration time.Duration
func (_e *MockExecutionDataPrunerMetrics_Expecter) Pruned(height interface{}, duration interface{}) *MockExecutionDataPrunerMetrics_Pruned_Call {
	return &MockExecutionDataPrunerMetrics_Pruned_Call{Call: _e.mock.On("Pruned", height, duration)}
}

func (_c *MockExecutionDataPrunerMetrics_Pruned_Call) Run(run func(height uint64, duration time.Duration)) *MockExecutionDataPrunerMetrics_Pruned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockExecutionDataPrunerMetrics_Pruned_Call) Return() *MockExecutionDataPrunerMetrics_Pruned_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataPrunerMetrics_Pruned_Call) RunAndReturn(run func(uint64, time.Duration)) *MockExecutionDataPrunerMetrics_Pruned_Call {
	_c.Run(run)
	return _c
}

// NewMockExecutionDataPrunerMetrics creates a new instance of MockExecutionDataPrunerMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionDataPrunerMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionDataPrunerMetrics {
	mock := &MockExecutionDataPrunerMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
