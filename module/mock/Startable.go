// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"
)

// MockStartable is an autogenerated mock type for the Startable type
type MockStartable struct {
	mock.Mock
}

type MockStartable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStartable) EXPECT() *MockStartable_Expecter {
	return &MockStartable_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: _a0
func (_m *MockStartable) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockStartable_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockStartable_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockStartable_Expecter) Start(_a0 interface{}) *MockStartable_Start_Call {
	return &MockStartable_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockStartable_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockStartable_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockStartable_Start_Call) Return() *MockStartable_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStartable_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockStartable_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockStartable creates a new instance of MockStartable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStartable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStartable {
	mock := &MockStartable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
