// Code generated by mockery. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	mock "github.com/stretchr/testify/mock"
)

// ThresholdSignatureParticipant is an autogenerated mock type for the ThresholdSignatureParticipant type
type ThresholdSignatureParticipant struct {
	mock.Mock
}

// EnoughShares provides a mock function with no fields
func (_m *ThresholdSignatureParticipant) EnoughShares() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnoughShares")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasShare provides a mock function with given fields: index
func (_m *ThresholdSignatureParticipant) HasShare(index int) (bool, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for HasShare")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignShare provides a mock function with no fields
func (_m *ThresholdSignatureParticipant) SignShare() (crypto.Signature, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SignShare")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func() (crypto.Signature, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() crypto.Signature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThresholdSignature provides a mock function with no fields
func (_m *ThresholdSignatureParticipant) ThresholdSignature() (crypto.Signature, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ThresholdSignature")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func() (crypto.Signature, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() crypto.Signature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrustedAdd provides a mock function with given fields: index, share
func (_m *ThresholdSignatureParticipant) TrustedAdd(index int, share crypto.Signature) (bool, error) {
	ret := _m.Called(index, share)

	if len(ret) == 0 {
		panic("no return value specified for TrustedAdd")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) (bool, error)); ok {
		return rf(index, share)
	}
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) bool); ok {
		r0 = rf(index, share)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, crypto.Signature) error); ok {
		r1 = rf(index, share)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyAndAdd provides a mock function with given fields: index, share
func (_m *ThresholdSignatureParticipant) VerifyAndAdd(index int, share crypto.Signature) (bool, bool, error) {
	ret := _m.Called(index, share)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAndAdd")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) (bool, bool, error)); ok {
		return rf(index, share)
	}
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) bool); ok {
		r0 = rf(index, share)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, crypto.Signature) bool); ok {
		r1 = rf(index, share)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(int, crypto.Signature) error); ok {
		r2 = rf(index, share)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VerifyShare provides a mock function with given fields: index, share
func (_m *ThresholdSignatureParticipant) VerifyShare(index int, share crypto.Signature) (bool, error) {
	ret := _m.Called(index, share)

	if len(ret) == 0 {
		panic("no return value specified for VerifyShare")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) (bool, error)); ok {
		return rf(index, share)
	}
	if rf, ok := ret.Get(0).(func(int, crypto.Signature) bool); ok {
		r0 = rf(index, share)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, crypto.Signature) error); ok {
		r1 = rf(index, share)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyThresholdSignature provides a mock function with given fields: thresholdSignature
func (_m *ThresholdSignatureParticipant) VerifyThresholdSignature(thresholdSignature crypto.Signature) (bool, error) {
	ret := _m.Called(thresholdSignature)

	if len(ret) == 0 {
		panic("no return value specified for VerifyThresholdSignature")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(crypto.Signature) (bool, error)); ok {
		return rf(thresholdSignature)
	}
	if rf, ok := ret.Get(0).(func(crypto.Signature) bool); ok {
		r0 = rf(thresholdSignature)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(crypto.Signature) error); ok {
		r1 = rf(thresholdSignature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewThresholdSignatureParticipant creates a new instance of ThresholdSignatureParticipant. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThresholdSignatureParticipant(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThresholdSignatureParticipant {
	mock := &ThresholdSignatureParticipant{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
