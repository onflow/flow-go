// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	chainsync "github.com/onflow/flow-go/model/chainsync"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockSyncCore is an autogenerated mock type for the SyncCore type
type MockSyncCore struct {
	mock.Mock
}

type MockSyncCore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncCore) EXPECT() *MockSyncCore_Expecter {
	return &MockSyncCore_Expecter{mock: &_m.Mock}
}

// BatchRequested provides a mock function with given fields: batch
func (_m *MockSyncCore) BatchRequested(batch chainsync.Batch) {
	_m.Called(batch)
}

// MockSyncCore_BatchRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRequested'
type MockSyncCore_BatchRequested_Call struct {
	*mock.Call
}

// BatchRequested is a helper method to define mock.On call
//   - batch chainsync.Batch
func (_e *MockSyncCore_Expecter) BatchRequested(batch interface{}) *MockSyncCore_BatchRequested_Call {
	return &MockSyncCore_BatchRequested_Call{Call: _e.mock.On("BatchRequested", batch)}
}

func (_c *MockSyncCore_BatchRequested_Call) Run(run func(batch chainsync.Batch)) *MockSyncCore_BatchRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chainsync.Batch))
	})
	return _c
}

func (_c *MockSyncCore_BatchRequested_Call) Return() *MockSyncCore_BatchRequested_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSyncCore_BatchRequested_Call) RunAndReturn(run func(chainsync.Batch)) *MockSyncCore_BatchRequested_Call {
	_c.Run(run)
	return _c
}

// HandleBlock provides a mock function with given fields: header
func (_m *MockSyncCore) HandleBlock(header *flow.Header) bool {
	ret := _m.Called(header)

	if len(ret) == 0 {
		panic("no return value specified for HandleBlock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.Header) bool); ok {
		r0 = rf(header)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSyncCore_HandleBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleBlock'
type MockSyncCore_HandleBlock_Call struct {
	*mock.Call
}

// HandleBlock is a helper method to define mock.On call
//   - header *flow.Header
func (_e *MockSyncCore_Expecter) HandleBlock(header interface{}) *MockSyncCore_HandleBlock_Call {
	return &MockSyncCore_HandleBlock_Call{Call: _e.mock.On("HandleBlock", header)}
}

func (_c *MockSyncCore_HandleBlock_Call) Run(run func(header *flow.Header)) *MockSyncCore_HandleBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header))
	})
	return _c
}

func (_c *MockSyncCore_HandleBlock_Call) Return(_a0 bool) *MockSyncCore_HandleBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncCore_HandleBlock_Call) RunAndReturn(run func(*flow.Header) bool) *MockSyncCore_HandleBlock_Call {
	_c.Call.Return(run)
	return _c
}

// HandleHeight provides a mock function with given fields: final, height
func (_m *MockSyncCore) HandleHeight(final *flow.Header, height uint64) {
	_m.Called(final, height)
}

// MockSyncCore_HandleHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleHeight'
type MockSyncCore_HandleHeight_Call struct {
	*mock.Call
}

// HandleHeight is a helper method to define mock.On call
//   - final *flow.Header
//   - height uint64
func (_e *MockSyncCore_Expecter) HandleHeight(final interface{}, height interface{}) *MockSyncCore_HandleHeight_Call {
	return &MockSyncCore_HandleHeight_Call{Call: _e.mock.On("HandleHeight", final, height)}
}

func (_c *MockSyncCore_HandleHeight_Call) Run(run func(final *flow.Header, height uint64)) *MockSyncCore_HandleHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header), args[1].(uint64))
	})
	return _c
}

func (_c *MockSyncCore_HandleHeight_Call) Return() *MockSyncCore_HandleHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSyncCore_HandleHeight_Call) RunAndReturn(run func(*flow.Header, uint64)) *MockSyncCore_HandleHeight_Call {
	_c.Run(run)
	return _c
}

// RangeRequested provides a mock function with given fields: ran
func (_m *MockSyncCore) RangeRequested(ran chainsync.Range) {
	_m.Called(ran)
}

// MockSyncCore_RangeRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeRequested'
type MockSyncCore_RangeRequested_Call struct {
	*mock.Call
}

// RangeRequested is a helper method to define mock.On call
//   - ran chainsync.Range
func (_e *MockSyncCore_Expecter) RangeRequested(ran interface{}) *MockSyncCore_RangeRequested_Call {
	return &MockSyncCore_RangeRequested_Call{Call: _e.mock.On("RangeRequested", ran)}
}

func (_c *MockSyncCore_RangeRequested_Call) Run(run func(ran chainsync.Range)) *MockSyncCore_RangeRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chainsync.Range))
	})
	return _c
}

func (_c *MockSyncCore_RangeRequested_Call) Return() *MockSyncCore_RangeRequested_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSyncCore_RangeRequested_Call) RunAndReturn(run func(chainsync.Range)) *MockSyncCore_RangeRequested_Call {
	_c.Run(run)
	return _c
}

// ScanPending provides a mock function with given fields: final
func (_m *MockSyncCore) ScanPending(final *flow.Header) ([]chainsync.Range, []chainsync.Batch) {
	ret := _m.Called(final)

	if len(ret) == 0 {
		panic("no return value specified for ScanPending")
	}

	var r0 []chainsync.Range
	var r1 []chainsync.Batch
	if rf, ok := ret.Get(0).(func(*flow.Header) ([]chainsync.Range, []chainsync.Batch)); ok {
		return rf(final)
	}
	if rf, ok := ret.Get(0).(func(*flow.Header) []chainsync.Range); ok {
		r0 = rf(final)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chainsync.Range)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.Header) []chainsync.Batch); ok {
		r1 = rf(final)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]chainsync.Batch)
		}
	}

	return r0, r1
}

// MockSyncCore_ScanPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanPending'
type MockSyncCore_ScanPending_Call struct {
	*mock.Call
}

// ScanPending is a helper method to define mock.On call
//   - final *flow.Header
func (_e *MockSyncCore_Expecter) ScanPending(final interface{}) *MockSyncCore_ScanPending_Call {
	return &MockSyncCore_ScanPending_Call{Call: _e.mock.On("ScanPending", final)}
}

func (_c *MockSyncCore_ScanPending_Call) Run(run func(final *flow.Header)) *MockSyncCore_ScanPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header))
	})
	return _c
}

func (_c *MockSyncCore_ScanPending_Call) Return(_a0 []chainsync.Range, _a1 []chainsync.Batch) *MockSyncCore_ScanPending_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncCore_ScanPending_Call) RunAndReturn(run func(*flow.Header) ([]chainsync.Range, []chainsync.Batch)) *MockSyncCore_ScanPending_Call {
	_c.Call.Return(run)
	return _c
}

// WithinTolerance provides a mock function with given fields: final, height
func (_m *MockSyncCore) WithinTolerance(final *flow.Header, height uint64) bool {
	ret := _m.Called(final, height)

	if len(ret) == 0 {
		panic("no return value specified for WithinTolerance")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.Header, uint64) bool); ok {
		r0 = rf(final, height)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSyncCore_WithinTolerance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTolerance'
type MockSyncCore_WithinTolerance_Call struct {
	*mock.Call
}

// WithinTolerance is a helper method to define mock.On call
//   - final *flow.Header
//   - height uint64
func (_e *MockSyncCore_Expecter) WithinTolerance(final interface{}, height interface{}) *MockSyncCore_WithinTolerance_Call {
	return &MockSyncCore_WithinTolerance_Call{Call: _e.mock.On("WithinTolerance", final, height)}
}

func (_c *MockSyncCore_WithinTolerance_Call) Run(run func(final *flow.Header, height uint64)) *MockSyncCore_WithinTolerance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header), args[1].(uint64))
	})
	return _c
}

func (_c *MockSyncCore_WithinTolerance_Call) Return(_a0 bool) *MockSyncCore_WithinTolerance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncCore_WithinTolerance_Call) RunAndReturn(run func(*flow.Header, uint64) bool) *MockSyncCore_WithinTolerance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyncCore creates a new instance of MockSyncCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncCore {
	mock := &MockSyncCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
