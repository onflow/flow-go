// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockEVMMetrics is an autogenerated mock type for the EVMMetrics type
type MockEVMMetrics struct {
	mock.Mock
}

type MockEVMMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEVMMetrics) EXPECT() *MockEVMMetrics_Expecter {
	return &MockEVMMetrics_Expecter{mock: &_m.Mock}
}

// EVMBlockExecuted provides a mock function with given fields: txCount, totalGasUsed, totalSupplyInFlow
func (_m *MockEVMMetrics) EVMBlockExecuted(txCount int, totalGasUsed uint64, totalSupplyInFlow float64) {
	_m.Called(txCount, totalGasUsed, totalSupplyInFlow)
}

// MockEVMMetrics_EVMBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMBlockExecuted'
type MockEVMMetrics_EVMBlockExecuted_Call struct {
	*mock.Call
}

// EVMBlockExecuted is a helper method to define mock.On call
//   - txCount int
//   - totalGasUsed uint64
//   - totalSupplyInFlow float64
func (_e *MockEVMMetrics_Expecter) EVMBlockExecuted(txCount interface{}, totalGasUsed interface{}, totalSupplyInFlow interface{}) *MockEVMMetrics_EVMBlockExecuted_Call {
	return &MockEVMMetrics_EVMBlockExecuted_Call{Call: _e.mock.On("EVMBlockExecuted", txCount, totalGasUsed, totalSupplyInFlow)}
}

func (_c *MockEVMMetrics_EVMBlockExecuted_Call) Run(run func(txCount int, totalGasUsed uint64, totalSupplyInFlow float64)) *MockEVMMetrics_EVMBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(uint64), args[2].(float64))
	})
	return _c
}

func (_c *MockEVMMetrics_EVMBlockExecuted_Call) Return() *MockEVMMetrics_EVMBlockExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEVMMetrics_EVMBlockExecuted_Call) RunAndReturn(run func(int, uint64, float64)) *MockEVMMetrics_EVMBlockExecuted_Call {
	_c.Run(run)
	return _c
}

// EVMTransactionExecuted provides a mock function with given fields: gasUsed, isDirectCall, failed
func (_m *MockEVMMetrics) EVMTransactionExecuted(gasUsed uint64, isDirectCall bool, failed bool) {
	_m.Called(gasUsed, isDirectCall, failed)
}

// MockEVMMetrics_EVMTransactionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMTransactionExecuted'
type MockEVMMetrics_EVMTransactionExecuted_Call struct {
	*mock.Call
}

// EVMTransactionExecuted is a helper method to define mock.On call
//   - gasUsed uint64
//   - isDirectCall bool
//   - failed bool
func (_e *MockEVMMetrics_Expecter) EVMTransactionExecuted(gasUsed interface{}, isDirectCall interface{}, failed interface{}) *MockEVMMetrics_EVMTransactionExecuted_Call {
	return &MockEVMMetrics_EVMTransactionExecuted_Call{Call: _e.mock.On("EVMTransactionExecuted", gasUsed, isDirectCall, failed)}
}

func (_c *MockEVMMetrics_EVMTransactionExecuted_Call) Run(run func(gasUsed uint64, isDirectCall bool, failed bool)) *MockEVMMetrics_EVMTransactionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *MockEVMMetrics_EVMTransactionExecuted_Call) Return() *MockEVMMetrics_EVMTransactionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEVMMetrics_EVMTransactionExecuted_Call) RunAndReturn(run func(uint64, bool, bool)) *MockEVMMetrics_EVMTransactionExecuted_Call {
	_c.Run(run)
	return _c
}

// SetNumberOfDeployedCOAs provides a mock function with given fields: count
func (_m *MockEVMMetrics) SetNumberOfDeployedCOAs(count uint64) {
	_m.Called(count)
}

// MockEVMMetrics_SetNumberOfDeployedCOAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNumberOfDeployedCOAs'
type MockEVMMetrics_SetNumberOfDeployedCOAs_Call struct {
	*mock.Call
}

// SetNumberOfDeployedCOAs is a helper method to define mock.On call
//   - count uint64
func (_e *MockEVMMetrics_Expecter) SetNumberOfDeployedCOAs(count interface{}) *MockEVMMetrics_SetNumberOfDeployedCOAs_Call {
	return &MockEVMMetrics_SetNumberOfDeployedCOAs_Call{Call: _e.mock.On("SetNumberOfDeployedCOAs", count)}
}

func (_c *MockEVMMetrics_SetNumberOfDeployedCOAs_Call) Run(run func(count uint64)) *MockEVMMetrics_SetNumberOfDeployedCOAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockEVMMetrics_SetNumberOfDeployedCOAs_Call) Return() *MockEVMMetrics_SetNumberOfDeployedCOAs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEVMMetrics_SetNumberOfDeployedCOAs_Call) RunAndReturn(run func(uint64)) *MockEVMMetrics_SetNumberOfDeployedCOAs_Call {
	_c.Run(run)
	return _c
}

// NewMockEVMMetrics creates a new instance of MockEVMMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEVMMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEVMMetrics {
	mock := &MockEVMMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
