// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockExecutionDataRequesterV2Metrics is an autogenerated mock type for the ExecutionDataRequesterV2Metrics type
type MockExecutionDataRequesterV2Metrics struct {
	mock.Mock
}

type MockExecutionDataRequesterV2Metrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionDataRequesterV2Metrics) EXPECT() *MockExecutionDataRequesterV2Metrics_Expecter {
	return &MockExecutionDataRequesterV2Metrics_Expecter{mock: &_m.Mock}
}

// FulfilledHeight provides a mock function with given fields: blockHeight
func (_m *MockExecutionDataRequesterV2Metrics) FulfilledHeight(blockHeight uint64) {
	_m.Called(blockHeight)
}

// MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FulfilledHeight'
type MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call struct {
	*mock.Call
}

// FulfilledHeight is a helper method to define mock.On call
//   - blockHeight uint64
func (_e *MockExecutionDataRequesterV2Metrics_Expecter) FulfilledHeight(blockHeight interface{}) *MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call {
	return &MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call{Call: _e.mock.On("FulfilledHeight", blockHeight)}
}

func (_c *MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call) Run(run func(blockHeight uint64)) *MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call) Return() *MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call) RunAndReturn(run func(uint64)) *MockExecutionDataRequesterV2Metrics_FulfilledHeight_Call {
	_c.Run(run)
	return _c
}

// ReceiptSkipped provides a mock function with no fields
func (_m *MockExecutionDataRequesterV2Metrics) ReceiptSkipped() {
	_m.Called()
}

// MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiptSkipped'
type MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call struct {
	*mock.Call
}

// ReceiptSkipped is a helper method to define mock.On call
func (_e *MockExecutionDataRequesterV2Metrics_Expecter) ReceiptSkipped() *MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call {
	return &MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call{Call: _e.mock.On("ReceiptSkipped")}
}

func (_c *MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call) Run(run func()) *MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call) Return() *MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call) RunAndReturn(run func()) *MockExecutionDataRequesterV2Metrics_ReceiptSkipped_Call {
	_c.Run(run)
	return _c
}

// RequestCanceled provides a mock function with no fields
func (_m *MockExecutionDataRequesterV2Metrics) RequestCanceled() {
	_m.Called()
}

// MockExecutionDataRequesterV2Metrics_RequestCanceled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestCanceled'
type MockExecutionDataRequesterV2Metrics_RequestCanceled_Call struct {
	*mock.Call
}

// RequestCanceled is a helper method to define mock.On call
func (_e *MockExecutionDataRequesterV2Metrics_Expecter) RequestCanceled() *MockExecutionDataRequesterV2Metrics_RequestCanceled_Call {
	return &MockExecutionDataRequesterV2Metrics_RequestCanceled_Call{Call: _e.mock.On("RequestCanceled")}
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestCanceled_Call) Run(run func()) *MockExecutionDataRequesterV2Metrics_RequestCanceled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestCanceled_Call) Return() *MockExecutionDataRequesterV2Metrics_RequestCanceled_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestCanceled_Call) RunAndReturn(run func()) *MockExecutionDataRequesterV2Metrics_RequestCanceled_Call {
	_c.Run(run)
	return _c
}

// RequestFailed provides a mock function with given fields: duration, retryable
func (_m *MockExecutionDataRequesterV2Metrics) RequestFailed(duration time.Duration, retryable bool) {
	_m.Called(duration, retryable)
}

// MockExecutionDataRequesterV2Metrics_RequestFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestFailed'
type MockExecutionDataRequesterV2Metrics_RequestFailed_Call struct {
	*mock.Call
}

// RequestFailed is a helper method to define mock.On call
//   - duration time.Duration
//   - retryable bool
func (_e *MockExecutionDataRequesterV2Metrics_Expecter) RequestFailed(duration interface{}, retryable interface{}) *MockExecutionDataRequesterV2Metrics_RequestFailed_Call {
	return &MockExecutionDataRequesterV2Metrics_RequestFailed_Call{Call: _e.mock.On("RequestFailed", duration, retryable)}
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestFailed_Call) Run(run func(duration time.Duration, retryable bool)) *MockExecutionDataRequesterV2Metrics_RequestFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(bool))
	})
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestFailed_Call) Return() *MockExecutionDataRequesterV2Metrics_RequestFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestFailed_Call) RunAndReturn(run func(time.Duration, bool)) *MockExecutionDataRequesterV2Metrics_RequestFailed_Call {
	_c.Run(run)
	return _c
}

// RequestSucceeded provides a mock function with given fields: blockHeight, duration, totalSize, numberOfAttempts
func (_m *MockExecutionDataRequesterV2Metrics) RequestSucceeded(blockHeight uint64, duration time.Duration, totalSize uint64, numberOfAttempts int) {
	_m.Called(blockHeight, duration, totalSize, numberOfAttempts)
}

// MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestSucceeded'
type MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call struct {
	*mock.Call
}

// RequestSucceeded is a helper method to define mock.On call
//   - blockHeight uint64
//   - duration time.Duration
//   - totalSize uint64
//   - numberOfAttempts int
func (_e *MockExecutionDataRequesterV2Metrics_Expecter) RequestSucceeded(blockHeight interface{}, duration interface{}, totalSize interface{}, numberOfAttempts interface{}) *MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call {
	return &MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call{Call: _e.mock.On("RequestSucceeded", blockHeight, duration, totalSize, numberOfAttempts)}
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call) Run(run func(blockHeight uint64, duration time.Duration, totalSize uint64, numberOfAttempts int)) *MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(time.Duration), args[2].(uint64), args[3].(int))
	})
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call) Return() *MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call) RunAndReturn(run func(uint64, time.Duration, uint64, int)) *MockExecutionDataRequesterV2Metrics_RequestSucceeded_Call {
	_c.Run(run)
	return _c
}

// ResponseDropped provides a mock function with no fields
func (_m *MockExecutionDataRequesterV2Metrics) ResponseDropped() {
	_m.Called()
}

// MockExecutionDataRequesterV2Metrics_ResponseDropped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseDropped'
type MockExecutionDataRequesterV2Metrics_ResponseDropped_Call struct {
	*mock.Call
}

// ResponseDropped is a helper method to define mock.On call
func (_e *MockExecutionDataRequesterV2Metrics_Expecter) ResponseDropped() *MockExecutionDataRequesterV2Metrics_ResponseDropped_Call {
	return &MockExecutionDataRequesterV2Metrics_ResponseDropped_Call{Call: _e.mock.On("ResponseDropped")}
}

func (_c *MockExecutionDataRequesterV2Metrics_ResponseDropped_Call) Run(run func()) *MockExecutionDataRequesterV2Metrics_ResponseDropped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_ResponseDropped_Call) Return() *MockExecutionDataRequesterV2Metrics_ResponseDropped_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataRequesterV2Metrics_ResponseDropped_Call) RunAndReturn(run func()) *MockExecutionDataRequesterV2Metrics_ResponseDropped_Call {
	_c.Run(run)
	return _c
}

// NewMockExecutionDataRequesterV2Metrics creates a new instance of MockExecutionDataRequesterV2Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionDataRequesterV2Metrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionDataRequesterV2Metrics {
	mock := &MockExecutionDataRequesterV2Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
