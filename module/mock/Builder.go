// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

type MockBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilder) EXPECT() *MockBuilder_Expecter {
	return &MockBuilder_Expecter{mock: &_m.Mock}
}

// BuildOn provides a mock function with given fields: parentID, setter, sign
func (_m *MockBuilder) BuildOn(parentID flow.Identifier, setter func(*flow.Header) error, sign func(*flow.Header) error) (*flow.Header, error) {
	ret := _m.Called(parentID, setter, sign)

	if len(ret) == 0 {
		panic("no return value specified for BuildOn")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*flow.Header) error, func(*flow.Header) error) (*flow.Header, error)); ok {
		return rf(parentID, setter, sign)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, func(*flow.Header) error, func(*flow.Header) error) *flow.Header); ok {
		r0 = rf(parentID, setter, sign)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, func(*flow.Header) error, func(*flow.Header) error) error); ok {
		r1 = rf(parentID, setter, sign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuilder_BuildOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildOn'
type MockBuilder_BuildOn_Call struct {
	*mock.Call
}

// BuildOn is a helper method to define mock.On call
//   - parentID flow.Identifier
//   - setter func(*flow.Header) error
//   - sign func(*flow.Header) error
func (_e *MockBuilder_Expecter) BuildOn(parentID interface{}, setter interface{}, sign interface{}) *MockBuilder_BuildOn_Call {
	return &MockBuilder_BuildOn_Call{Call: _e.mock.On("BuildOn", parentID, setter, sign)}
}

func (_c *MockBuilder_BuildOn_Call) Run(run func(parentID flow.Identifier, setter func(*flow.Header) error, sign func(*flow.Header) error)) *MockBuilder_BuildOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(func(*flow.Header) error), args[2].(func(*flow.Header) error))
	})
	return _c
}

func (_c *MockBuilder_BuildOn_Call) Return(_a0 *flow.Header, _a1 error) *MockBuilder_BuildOn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuilder_BuildOn_Call) RunAndReturn(run func(flow.Identifier, func(*flow.Header) error, func(*flow.Header) error) (*flow.Header, error)) *MockBuilder_BuildOn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuilder creates a new instance of MockBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilder {
	mock := &MockBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
