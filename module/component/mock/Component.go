// Code generated by mockery v2.53.4. DO NOT EDIT.

package component

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	mock "github.com/stretchr/testify/mock"
)

// MockComponent is an autogenerated mock type for the Component type
type MockComponent struct {
	mock.Mock
}

type MockComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponent) EXPECT() *MockComponent_Expecter {
	return &MockComponent_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockComponent) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockComponent_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockComponent_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Done() *MockComponent_Done_Call {
	return &MockComponent_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockComponent_Done_Call) Run(run func()) *MockComponent_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Done_Call) Return(_a0 <-chan struct{}) *MockComponent_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockComponent_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockComponent) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockComponent_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockComponent_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Ready() *MockComponent_Ready_Call {
	return &MockComponent_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockComponent_Ready_Call) Run(run func()) *MockComponent_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Ready_Call) Return(_a0 <-chan struct{}) *MockComponent_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockComponent_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockComponent) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockComponent_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockComponent_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockComponent_Expecter) Start(_a0 interface{}) *MockComponent_Start_Call {
	return &MockComponent_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockComponent_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockComponent_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockComponent_Start_Call) Return() *MockComponent_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockComponent_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockComponent_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockComponent creates a new instance of MockComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponent {
	mock := &MockComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
