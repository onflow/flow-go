// Code generated by mockery v2.53.4. DO NOT EDIT.

package component

import (
	component "github.com/onflow/flow-go/module/component"
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"
)

// MockComponentWorker is an autogenerated mock type for the ComponentWorker type
type MockComponentWorker struct {
	mock.Mock
}

type MockComponentWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentWorker) EXPECT() *MockComponentWorker_Expecter {
	return &MockComponentWorker_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, ready
func (_m *MockComponentWorker) Execute(ctx irrecoverable.SignalerContext, ready component.ReadyFunc) {
	_m.Called(ctx, ready)
}

// MockComponentWorker_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockComponentWorker_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx irrecoverable.SignalerContext
//   - ready component.ReadyFunc
func (_e *MockComponentWorker_Expecter) Execute(ctx interface{}, ready interface{}) *MockComponentWorker_Execute_Call {
	return &MockComponentWorker_Execute_Call{Call: _e.mock.On("Execute", ctx, ready)}
}

func (_c *MockComponentWorker_Execute_Call) Run(run func(ctx irrecoverable.SignalerContext, ready component.ReadyFunc)) *MockComponentWorker_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext), args[1].(component.ReadyFunc))
	})
	return _c
}

func (_c *MockComponentWorker_Execute_Call) Return() *MockComponentWorker_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockComponentWorker_Execute_Call) RunAndReturn(run func(irrecoverable.SignalerContext, component.ReadyFunc)) *MockComponentWorker_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockComponentWorker creates a new instance of MockComponentWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentWorker {
	mock := &MockComponentWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
