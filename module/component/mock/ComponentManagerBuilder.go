// Code generated by mockery v2.53.4. DO NOT EDIT.

package component

import (
	component "github.com/onflow/flow-go/module/component"
	mock "github.com/stretchr/testify/mock"
)

// MockComponentManagerBuilder is an autogenerated mock type for the ComponentManagerBuilder type
type MockComponentManagerBuilder struct {
	mock.Mock
}

type MockComponentManagerBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentManagerBuilder) EXPECT() *MockComponentManagerBuilder_Expecter {
	return &MockComponentManagerBuilder_Expecter{mock: &_m.Mock}
}

// AddWorker provides a mock function with given fields: _a0
func (_m *MockComponentManagerBuilder) AddWorker(_a0 component.ComponentWorker) component.ComponentManagerBuilder {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddWorker")
	}

	var r0 component.ComponentManagerBuilder
	if rf, ok := ret.Get(0).(func(component.ComponentWorker) component.ComponentManagerBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.ComponentManagerBuilder)
		}
	}

	return r0
}

// MockComponentManagerBuilder_AddWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorker'
type MockComponentManagerBuilder_AddWorker_Call struct {
	*mock.Call
}

// AddWorker is a helper method to define mock.On call
//   - _a0 component.ComponentWorker
func (_e *MockComponentManagerBuilder_Expecter) AddWorker(_a0 interface{}) *MockComponentManagerBuilder_AddWorker_Call {
	return &MockComponentManagerBuilder_AddWorker_Call{Call: _e.mock.On("AddWorker", _a0)}
}

func (_c *MockComponentManagerBuilder_AddWorker_Call) Run(run func(_a0 component.ComponentWorker)) *MockComponentManagerBuilder_AddWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(component.ComponentWorker))
	})
	return _c
}

func (_c *MockComponentManagerBuilder_AddWorker_Call) Return(_a0 component.ComponentManagerBuilder) *MockComponentManagerBuilder_AddWorker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentManagerBuilder_AddWorker_Call) RunAndReturn(run func(component.ComponentWorker) component.ComponentManagerBuilder) *MockComponentManagerBuilder_AddWorker_Call {
	_c.Call.Return(run)
	return _c
}

// Build provides a mock function with no fields
func (_m *MockComponentManagerBuilder) Build() *component.ComponentManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *component.ComponentManager
	if rf, ok := ret.Get(0).(func() *component.ComponentManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*component.ComponentManager)
		}
	}

	return r0
}

// MockComponentManagerBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockComponentManagerBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *MockComponentManagerBuilder_Expecter) Build() *MockComponentManagerBuilder_Build_Call {
	return &MockComponentManagerBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *MockComponentManagerBuilder_Build_Call) Run(run func()) *MockComponentManagerBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponentManagerBuilder_Build_Call) Return(_a0 *component.ComponentManager) *MockComponentManagerBuilder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentManagerBuilder_Build_Call) RunAndReturn(run func() *component.ComponentManager) *MockComponentManagerBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponentManagerBuilder creates a new instance of MockComponentManagerBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentManagerBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentManagerBuilder {
	mock := &MockComponentManagerBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
