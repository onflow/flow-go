// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onflow/flow-emulator/emulator (interfaces: EmulatorStorage)
//
// Generated by this command:
//
//	mockgen -destination=emulator/mocks/emulatorStorage.go -package=mocks github.com/onflow/flow-emulator/emulator EmulatorStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"
	"github.com/onflow/flow-go/integration/internal/emulator"
	flow "github.com/onflow/flow-go/model/flow"
)

// MockEmulatorStorage is a mock of EmulatorStorage interface.
type MockEmulatorStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEmulatorStorageMockRecorder
	isgomock struct{}
}

// MockEmulatorStorageMockRecorder is the mock recorder for MockEmulatorStorage.
type MockEmulatorStorageMockRecorder struct {
	mock *MockEmulatorStorage
}

// NewMockEmulatorStorage creates a new mock instance.
func NewMockEmulatorStorage(ctrl *gomock.Controller) *MockEmulatorStorage {
	mock := &MockEmulatorStorage{ctrl: ctrl}
	mock.recorder = &MockEmulatorStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmulatorStorage) EXPECT() *MockEmulatorStorageMockRecorder {
	return m.recorder
}

// BlockByHeight mocks base method.
func (m *MockEmulatorStorage) BlockByHeight(ctx context.Context, height uint64) (*flow.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHeight", ctx, height)
	ret0, _ := ret[0].(*flow.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHeight indicates an expected call of BlockByHeight.
func (mr *MockEmulatorStorageMockRecorder) BlockByHeight(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHeight", reflect.TypeOf((*MockEmulatorStorage)(nil).BlockByHeight), ctx, height)
}

// BlockByID mocks base method.
func (m *MockEmulatorStorage) BlockByID(ctx context.Context, blockID flow.Identifier) (*flow.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByID", ctx, blockID)
	ret0, _ := ret[0].(*flow.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByID indicates an expected call of BlockByID.
func (mr *MockEmulatorStorageMockRecorder) BlockByID(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByID", reflect.TypeOf((*MockEmulatorStorage)(nil).BlockByID), ctx, blockID)
}

// ByHeightFrom mocks base method.
func (m *MockEmulatorStorage) ByHeightFrom(height uint64, header *flow.Header) (*flow.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHeightFrom", height, header)
	ret0, _ := ret[0].(*flow.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHeightFrom indicates an expected call of ByHeightFrom.
func (mr *MockEmulatorStorageMockRecorder) ByHeightFrom(height, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHeightFrom", reflect.TypeOf((*MockEmulatorStorage)(nil).ByHeightFrom), height, header)
}

// CollectionByID mocks base method.
func (m *MockEmulatorStorage) CollectionByID(ctx context.Context, collectionID flow.Identifier) (flow.LightCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionByID", ctx, collectionID)
	ret0, _ := ret[0].(flow.LightCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionByID indicates an expected call of CollectionByID.
func (mr *MockEmulatorStorageMockRecorder) CollectionByID(ctx, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionByID", reflect.TypeOf((*MockEmulatorStorage)(nil).CollectionByID), ctx, collectionID)
}

// CommitBlock mocks base method.
func (m *MockEmulatorStorage) CommitBlock(ctx context.Context, block flow.Block, collections []*flow.LightCollection, transactions map[flow.Identifier]*flow.TransactionBody, transactionResults map[flow.Identifier]*emulator.StorableTransactionResult, executionSnapshot *snapshot.ExecutionSnapshot, events []flow.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBlock", ctx, block, collections, transactions, transactionResults, executionSnapshot, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitBlock indicates an expected call of CommitBlock.
func (mr *MockEmulatorStorageMockRecorder) CommitBlock(ctx, block, collections, transactions, transactionResults, executionSnapshot, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBlock", reflect.TypeOf((*MockEmulatorStorage)(nil).CommitBlock), ctx, block, collections, transactions, transactionResults, executionSnapshot, events)
}

// EventsByHeight mocks base method.
func (m *MockEmulatorStorage) EventsByHeight(ctx context.Context, blockHeight uint64, eventType string) ([]flow.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsByHeight", ctx, blockHeight, eventType)
	ret0, _ := ret[0].([]flow.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsByHeight indicates an expected call of EventsByHeight.
func (mr *MockEmulatorStorageMockRecorder) EventsByHeight(ctx, blockHeight, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsByHeight", reflect.TypeOf((*MockEmulatorStorage)(nil).EventsByHeight), ctx, blockHeight, eventType)
}

// FinalizedHeader mocks base method.
func (m *MockEmulatorStorage) FinalizedHeader() (*flow.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizedHeader")
	ret0, _ := ret[0].(*flow.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizedHeader indicates an expected call of FinalizedHeader.
func (mr *MockEmulatorStorageMockRecorder) FinalizedHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizedHeader", reflect.TypeOf((*MockEmulatorStorage)(nil).FinalizedHeader))
}

// FullCollectionByID mocks base method.
func (m *MockEmulatorStorage) FullCollectionByID(ctx context.Context, collectionID flow.Identifier) (flow.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullCollectionByID", ctx, collectionID)
	ret0, _ := ret[0].(flow.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullCollectionByID indicates an expected call of FullCollectionByID.
func (mr *MockEmulatorStorageMockRecorder) FullCollectionByID(ctx, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullCollectionByID", reflect.TypeOf((*MockEmulatorStorage)(nil).FullCollectionByID), ctx, collectionID)
}

// HeaderByID mocks base method.
func (m *MockEmulatorStorage) HeaderByID(id flow.Identifier) (*flow.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByID", id)
	ret0, _ := ret[0].(*flow.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByID indicates an expected call of HeaderByID.
func (mr *MockEmulatorStorageMockRecorder) HeaderByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByID", reflect.TypeOf((*MockEmulatorStorage)(nil).HeaderByID), id)
}

// IndexedHeight mocks base method.
func (m *MockEmulatorStorage) IndexedHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexedHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexedHeight indicates an expected call of IndexedHeight.
func (mr *MockEmulatorStorageMockRecorder) IndexedHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexedHeight", reflect.TypeOf((*MockEmulatorStorage)(nil).IndexedHeight))
}

// LatestBlock mocks base method.
func (m *MockEmulatorStorage) LatestBlock(ctx context.Context) (flow.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestBlock", ctx)
	ret0, _ := ret[0].(flow.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestBlock indicates an expected call of LatestBlock.
func (mr *MockEmulatorStorageMockRecorder) LatestBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestBlock", reflect.TypeOf((*MockEmulatorStorage)(nil).LatestBlock), ctx)
}

// LatestBlockHeight mocks base method.
func (m *MockEmulatorStorage) LatestBlockHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestBlockHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestBlockHeight indicates an expected call of LatestBlockHeight.
func (mr *MockEmulatorStorageMockRecorder) LatestBlockHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestBlockHeight", reflect.TypeOf((*MockEmulatorStorage)(nil).LatestBlockHeight), ctx)
}

// LedgerByHeight mocks base method.
func (m *MockEmulatorStorage) LedgerByHeight(ctx context.Context, blockHeight uint64) (snapshot.StorageSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LedgerByHeight", ctx, blockHeight)
	ret0, _ := ret[0].(snapshot.StorageSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LedgerByHeight indicates an expected call of LedgerByHeight.
func (mr *MockEmulatorStorageMockRecorder) LedgerByHeight(ctx, blockHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LedgerByHeight", reflect.TypeOf((*MockEmulatorStorage)(nil).LedgerByHeight), ctx, blockHeight)
}

// SealedHeader mocks base method.
func (m *MockEmulatorStorage) SealedHeader() (*flow.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SealedHeader")
	ret0, _ := ret[0].(*flow.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SealedHeader indicates an expected call of SealedHeader.
func (mr *MockEmulatorStorageMockRecorder) SealedHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SealedHeader", reflect.TypeOf((*MockEmulatorStorage)(nil).SealedHeader))
}

// Start mocks base method.
func (m *MockEmulatorStorage) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEmulatorStorageMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEmulatorStorage)(nil).Start))
}

// Stop mocks base method.
func (m *MockEmulatorStorage) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockEmulatorStorageMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEmulatorStorage)(nil).Stop))
}

// StoreBlock mocks base method.
func (m *MockEmulatorStorage) StoreBlock(ctx context.Context, block *flow.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBlock", ctx, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBlock indicates an expected call of StoreBlock.
func (mr *MockEmulatorStorageMockRecorder) StoreBlock(ctx, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBlock", reflect.TypeOf((*MockEmulatorStorage)(nil).StoreBlock), ctx, block)
}

// TransactionByID mocks base method.
func (m *MockEmulatorStorage) TransactionByID(ctx context.Context, transactionID flow.Identifier) (flow.TransactionBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByID", ctx, transactionID)
	ret0, _ := ret[0].(flow.TransactionBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionByID indicates an expected call of TransactionByID.
func (mr *MockEmulatorStorageMockRecorder) TransactionByID(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByID", reflect.TypeOf((*MockEmulatorStorage)(nil).TransactionByID), ctx, transactionID)
}

// TransactionResultByID mocks base method.
func (m *MockEmulatorStorage) TransactionResultByID(ctx context.Context, transactionID flow.Identifier) (emulator.StorableTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionResultByID", ctx, transactionID)
	ret0, _ := ret[0].(emulator.StorableTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionResultByID indicates an expected call of TransactionResultByID.
func (mr *MockEmulatorStorageMockRecorder) TransactionResultByID(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionResultByID", reflect.TypeOf((*MockEmulatorStorage)(nil).TransactionResultByID), ctx, transactionID)
}
