// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	cadence "github.com/onflow/cadence"
	access "github.com/onflow/flow-go-sdk/access"

	context "context"

	flow "github.com/onflow/flow-go-sdk"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteScriptAtBlockHeight provides a mock function with given fields: ctx, height, script, arguments
func (_m *Client) ExecuteScriptAtBlockHeight(ctx context.Context, height uint64, script []byte, arguments []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(ctx, height, script, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockHeight")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte, []cadence.Value) (cadence.Value, error)); ok {
		return rf(ctx, height, script, arguments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte, []cadence.Value) cadence.Value); ok {
		r0 = rf(ctx, height, script, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []byte, []cadence.Value) error); ok {
		r1 = rf(ctx, height, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteScriptAtBlockID provides a mock function with given fields: ctx, blockID, script, arguments
func (_m *Client) ExecuteScriptAtBlockID(ctx context.Context, blockID flow.Identifier, script []byte, arguments []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(ctx, blockID, script, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, []cadence.Value) (cadence.Value, error)); ok {
		return rf(ctx, blockID, script, arguments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, []cadence.Value) cadence.Value); ok {
		r0 = rf(ctx, blockID, script, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, []byte, []cadence.Value) error); ok {
		r1 = rf(ctx, blockID, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteScriptAtLatestBlock provides a mock function with given fields: ctx, script, arguments
func (_m *Client) ExecuteScriptAtLatestBlock(ctx context.Context, script []byte, arguments []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(ctx, script, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtLatestBlock")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []cadence.Value) (cadence.Value, error)); ok {
		return rf(ctx, script, arguments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []cadence.Value) cadence.Value); ok {
		r0 = rf(ctx, script, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []cadence.Value) error); ok {
		r1 = rf(ctx, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, address
func (_m *Client) GetAccount(ctx context.Context, address flow.Address) (*flow.Account, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (*flow.Account, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) *flow.Account); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountAtBlockHeight provides a mock function with given fields: ctx, address, blockHeight
func (_m *Client) GetAccountAtBlockHeight(ctx context.Context, address flow.Address, blockHeight uint64) (*flow.Account, error) {
	ret := _m.Called(ctx, address, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockHeight")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (*flow.Account, error)); ok {
		return rf(ctx, address, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) *flow.Account); ok {
		r0 = rf(ctx, address, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *Client) GetAccountAtLatestBlock(ctx context.Context, address flow.Address) (*flow.Account, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtLatestBlock")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (*flow.Account, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) *flow.Account); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBalanceAtBlockHeight provides a mock function with given fields: ctx, address, blockHeight
func (_m *Client) GetAccountBalanceAtBlockHeight(ctx context.Context, address flow.Address, blockHeight uint64) (uint64, error) {
	ret := _m.Called(ctx, address, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) (uint64, error)); ok {
		return rf(ctx, address, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) uint64); ok {
		r0 = rf(ctx, address, blockHeight)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBalanceAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *Client) GetAccountBalanceAtLatestBlock(ctx context.Context, address flow.Address) (uint64, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtLatestBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) (uint64, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) uint64); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeyAtBlockHeight provides a mock function with given fields: ctx, address, keyIndex, height
func (_m *Client) GetAccountKeyAtBlockHeight(ctx context.Context, address flow.Address, keyIndex uint32, height uint64) (*flow.AccountKey, error) {
	ret := _m.Called(ctx, address, keyIndex, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtBlockHeight")
	}

	var r0 *flow.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) (*flow.AccountKey, error)); ok {
		return rf(ctx, address, keyIndex, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, uint64) *flow.AccountKey); ok {
		r0 = rf(ctx, address, keyIndex, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32, uint64) error); ok {
		r1 = rf(ctx, address, keyIndex, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeyAtLatestBlock provides a mock function with given fields: ctx, address, keyIndex
func (_m *Client) GetAccountKeyAtLatestBlock(ctx context.Context, address flow.Address, keyIndex uint32) (*flow.AccountKey, error) {
	ret := _m.Called(ctx, address, keyIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtLatestBlock")
	}

	var r0 *flow.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32) (*flow.AccountKey, error)); ok {
		return rf(ctx, address, keyIndex)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32) *flow.AccountKey); ok {
		r0 = rf(ctx, address, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32) error); ok {
		r1 = rf(ctx, address, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeysAtBlockHeight provides a mock function with given fields: ctx, address, height
func (_m *Client) GetAccountKeysAtBlockHeight(ctx context.Context, address flow.Address, height uint64) ([]*flow.AccountKey, error) {
	ret := _m.Called(ctx, address, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtBlockHeight")
	}

	var r0 []*flow.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) ([]*flow.AccountKey, error)); ok {
		return rf(ctx, address, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint64) []*flow.AccountKey); ok {
		r0 = rf(ctx, address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint64) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeysAtLatestBlock provides a mock function with given fields: ctx, address
func (_m *Client) GetAccountKeysAtLatestBlock(ctx context.Context, address flow.Address) ([]*flow.AccountKey, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtLatestBlock")
	}

	var r0 []*flow.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) ([]*flow.AccountKey, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address) []*flow.AccountKey); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHeight provides a mock function with given fields: ctx, height
func (_m *Client) GetBlockByHeight(ctx context.Context, height uint64) (*flow.Block, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.Block, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.Block); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByID provides a mock function with given fields: ctx, blockID
func (_m *Client) GetBlockByID(ctx context.Context, blockID flow.Identifier) (*flow.Block, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByID")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Block, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Block); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeaderByHeight provides a mock function with given fields: ctx, height
func (_m *Client) GetBlockHeaderByHeight(ctx context.Context, height uint64) (*flow.BlockHeader, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByHeight")
	}

	var r0 *flow.BlockHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.BlockHeader, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.BlockHeader); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeaderByID provides a mock function with given fields: ctx, blockID
func (_m *Client) GetBlockHeaderByID(ctx context.Context, blockID flow.Identifier) (*flow.BlockHeader, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByID")
	}

	var r0 *flow.BlockHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.BlockHeader, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.BlockHeader); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollection provides a mock function with given fields: ctx, colID
func (_m *Client) GetCollection(ctx context.Context, colID flow.Identifier) (*flow.Collection, error) {
	ret := _m.Called(ctx, colID)

	if len(ret) == 0 {
		panic("no return value specified for GetCollection")
	}

	var r0 *flow.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Collection, error)); ok {
		return rf(ctx, colID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Collection); ok {
		r0 = rf(ctx, colID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, colID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionByID provides a mock function with given fields: ctx, id
func (_m *Client) GetCollectionByID(ctx context.Context, id flow.Identifier) (*flow.Collection, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionByID")
	}

	var r0 *flow.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Collection, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Collection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsForBlockIDs provides a mock function with given fields: ctx, eventType, blockIDs
func (_m *Client) GetEventsForBlockIDs(ctx context.Context, eventType string, blockIDs []flow.Identifier) ([]flow.BlockEvents, error) {
	ret := _m.Called(ctx, eventType, blockIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForBlockIDs")
	}

	var r0 []flow.BlockEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []flow.Identifier) ([]flow.BlockEvents, error)); ok {
		return rf(ctx, eventType, blockIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []flow.Identifier) []flow.BlockEvents); ok {
		r0 = rf(ctx, eventType, blockIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []flow.Identifier) error); ok {
		r1 = rf(ctx, eventType, blockIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsForHeightRange provides a mock function with given fields: ctx, eventType, startHeight, endHeight
func (_m *Client) GetEventsForHeightRange(ctx context.Context, eventType string, startHeight uint64, endHeight uint64) ([]flow.BlockEvents, error) {
	ret := _m.Called(ctx, eventType, startHeight, endHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForHeightRange")
	}

	var r0 []flow.BlockEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) ([]flow.BlockEvents, error)); ok {
		return rf(ctx, eventType, startHeight, endHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) []flow.BlockEvents); ok {
		r0 = rf(ctx, eventType, startHeight, endHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, eventType, startHeight, endHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionDataByBlockID provides a mock function with given fields: ctx, blockID
func (_m *Client) GetExecutionDataByBlockID(ctx context.Context, blockID flow.Identifier) (*flow.ExecutionData, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionDataByBlockID")
	}

	var r0 *flow.ExecutionData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.ExecutionData, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.ExecutionData); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionResultByID provides a mock function with given fields: ctx, id
func (_m *Client) GetExecutionResultByID(ctx context.Context, id flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultByID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionResultForBlockID provides a mock function with given fields: ctx, blockID
func (_m *Client) GetExecutionResultForBlockID(ctx context.Context, blockID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultForBlockID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullCollectionByID provides a mock function with given fields: ctx, id
func (_m *Client) GetFullCollectionByID(ctx context.Context, id flow.Identifier) (*flow.FullCollection, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFullCollectionByID")
	}

	var r0 *flow.FullCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.FullCollection, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.FullCollection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.FullCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields: ctx, isSealed
func (_m *Client) GetLatestBlock(ctx context.Context, isSealed bool) (*flow.Block, error) {
	ret := _m.Called(ctx, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*flow.Block, error)); ok {
		return rf(ctx, isSealed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *flow.Block); ok {
		r0 = rf(ctx, isSealed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, isSealed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlockHeader provides a mock function with given fields: ctx, isSealed
func (_m *Client) GetLatestBlockHeader(ctx context.Context, isSealed bool) (*flow.BlockHeader, error) {
	ret := _m.Called(ctx, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *flow.BlockHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*flow.BlockHeader, error)); ok {
		return rf(ctx, isSealed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *flow.BlockHeader); ok {
		r0 = rf(ctx, isSealed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, isSealed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestProtocolStateSnapshot provides a mock function with given fields: ctx
func (_m *Client) GetLatestProtocolStateSnapshot(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProtocolStateSnapshot")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkParameters provides a mock function with given fields: ctx
func (_m *Client) GetNetworkParameters(ctx context.Context) (*flow.NetworkParameters, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkParameters")
	}

	var r0 *flow.NetworkParameters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*flow.NetworkParameters, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *flow.NetworkParameters); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.NetworkParameters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeVersionInfo provides a mock function with given fields: ctx
func (_m *Client) GetNodeVersionInfo(ctx context.Context) (*flow.NodeVersionInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeVersionInfo")
	}

	var r0 *flow.NodeVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*flow.NodeVersionInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *flow.NodeVersionInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.NodeVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtocolStateSnapshotByBlockID provides a mock function with given fields: ctx, blockID
func (_m *Client) GetProtocolStateSnapshotByBlockID(ctx context.Context, blockID flow.Identifier) ([]byte, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByBlockID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]byte, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []byte); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtocolStateSnapshotByHeight provides a mock function with given fields: ctx, blockHeight
func (_m *Client) GetProtocolStateSnapshotByHeight(ctx context.Context, blockHeight uint64) ([]byte, error) {
	ret := _m.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByHeight")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]byte, error)); ok {
		return rf(ctx, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []byte); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemTransaction provides a mock function with given fields: ctx, blockID
func (_m *Client) GetSystemTransaction(ctx context.Context, blockID flow.Identifier) (*flow.Transaction, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransaction")
	}

	var r0 *flow.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Transaction, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Transaction); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemTransactionResult provides a mock function with given fields: ctx, blockID
func (_m *Client) GetSystemTransactionResult(ctx context.Context, blockID flow.Identifier) (*flow.TransactionResult, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransactionResult")
	}

	var r0 *flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.TransactionResult, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.TransactionResult); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, txID
func (_m *Client) GetTransaction(ctx context.Context, txID flow.Identifier) (*flow.Transaction, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *flow.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Transaction, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Transaction); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResult provides a mock function with given fields: ctx, txID
func (_m *Client) GetTransactionResult(ctx context.Context, txID flow.Identifier) (*flow.TransactionResult, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.TransactionResult, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.TransactionResult); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResultByIndex provides a mock function with given fields: ctx, blockID, index
func (_m *Client) GetTransactionResultByIndex(ctx context.Context, blockID flow.Identifier, index uint32) (*flow.TransactionResult, error) {
	ret := _m.Called(ctx, blockID, index)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultByIndex")
	}

	var r0 *flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint32) (*flow.TransactionResult, error)); ok {
		return rf(ctx, blockID, index)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint32) *flow.TransactionResult); ok {
		r0 = rf(ctx, blockID, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, uint32) error); ok {
		r1 = rf(ctx, blockID, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResultsByBlockID provides a mock function with given fields: ctx, blockID
func (_m *Client) GetTransactionResultsByBlockID(ctx context.Context, blockID flow.Identifier) ([]*flow.TransactionResult, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultsByBlockID")
	}

	var r0 []*flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]*flow.TransactionResult, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []*flow.TransactionResult); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByBlockID provides a mock function with given fields: ctx, blockID
func (_m *Client) GetTransactionsByBlockID(ctx context.Context, blockID flow.Identifier) ([]*flow.Transaction, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByBlockID")
	}

	var r0 []*flow.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]*flow.Transaction, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []*flow.Transaction); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Client) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendAndSubscribeTransactionStatuses provides a mock function with given fields: ctx, tx
func (_m *Client) SendAndSubscribeTransactionStatuses(ctx context.Context, tx flow.Transaction) (<-chan *flow.TransactionResult, <-chan error, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SendAndSubscribeTransactionStatuses")
	}

	var r0 <-chan *flow.TransactionResult
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Transaction) (<-chan *flow.TransactionResult, <-chan error, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Transaction) <-chan *flow.TransactionResult); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Transaction) <-chan error); ok {
		r1 = rf(ctx, tx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Transaction) error); ok {
		r2 = rf(ctx, tx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SendTransaction provides a mock function with given fields: ctx, tx
func (_m *Client) SendTransaction(ctx context.Context, tx flow.Transaction) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeAccountStatusesFromLatestBlock provides a mock function with given fields: ctx, filter
func (_m *Client) SubscribeAccountStatusesFromLatestBlock(ctx context.Context, filter flow.AccountStatusFilter) (<-chan *flow.AccountStatus, <-chan error, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromLatestBlock")
	}

	var r0 <-chan *flow.AccountStatus
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.AccountStatusFilter) (<-chan *flow.AccountStatus, <-chan error, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.AccountStatusFilter) <-chan *flow.AccountStatus); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.AccountStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.AccountStatusFilter) <-chan error); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.AccountStatusFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeAccountStatusesFromStartBlockID provides a mock function with given fields: ctx, startBlockID, filter
func (_m *Client) SubscribeAccountStatusesFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, filter flow.AccountStatusFilter) (<-chan *flow.AccountStatus, <-chan error, error) {
	ret := _m.Called(ctx, startBlockID, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromStartBlockID")
	}

	var r0 <-chan *flow.AccountStatus
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.AccountStatusFilter) (<-chan *flow.AccountStatus, <-chan error, error)); ok {
		return rf(ctx, startBlockID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.AccountStatusFilter) <-chan *flow.AccountStatus); ok {
		r0 = rf(ctx, startBlockID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.AccountStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.AccountStatusFilter) <-chan error); ok {
		r1 = rf(ctx, startBlockID, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier, flow.AccountStatusFilter) error); ok {
		r2 = rf(ctx, startBlockID, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeAccountStatusesFromStartHeight provides a mock function with given fields: ctx, startBlockHeight, filter
func (_m *Client) SubscribeAccountStatusesFromStartHeight(ctx context.Context, startBlockHeight uint64, filter flow.AccountStatusFilter) (<-chan *flow.AccountStatus, <-chan error, error) {
	ret := _m.Called(ctx, startBlockHeight, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromStartHeight")
	}

	var r0 <-chan *flow.AccountStatus
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.AccountStatusFilter) (<-chan *flow.AccountStatus, <-chan error, error)); ok {
		return rf(ctx, startBlockHeight, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.AccountStatusFilter) <-chan *flow.AccountStatus); ok {
		r0 = rf(ctx, startBlockHeight, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.AccountStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, flow.AccountStatusFilter) <-chan error); ok {
		r1 = rf(ctx, startBlockHeight, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, flow.AccountStatusFilter) error); ok {
		r2 = rf(ctx, startBlockHeight, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlockDigestsFromLatest provides a mock function with given fields: ctx, blockStatus
func (_m *Client) SubscribeBlockDigestsFromLatest(ctx context.Context, blockStatus flow.BlockStatus) (<-chan *flow.BlockDigest, <-chan error, error) {
	ret := _m.Called(ctx, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromLatest")
	}

	var r0 <-chan *flow.BlockDigest
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) (<-chan *flow.BlockDigest, <-chan error, error)); ok {
		return rf(ctx, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) <-chan *flow.BlockDigest); ok {
		r0 = rf(ctx, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.BlockDigest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.BlockStatus) error); ok {
		r2 = rf(ctx, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlockDigestsFromStartBlockID provides a mock function with given fields: ctx, startBlockID, blockStatus
func (_m *Client) SubscribeBlockDigestsFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus) (<-chan *flow.BlockDigest, <-chan error, error) {
	ret := _m.Called(ctx, startBlockID, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartBlockID")
	}

	var r0 <-chan *flow.BlockDigest
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) (<-chan *flow.BlockDigest, <-chan error, error)); ok {
		return rf(ctx, startBlockID, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) <-chan *flow.BlockDigest); ok {
		r0 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.BlockDigest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier, flow.BlockStatus) error); ok {
		r2 = rf(ctx, startBlockID, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlockDigestsFromStartHeight provides a mock function with given fields: ctx, startHeight, blockStatus
func (_m *Client) SubscribeBlockDigestsFromStartHeight(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus) (<-chan *flow.BlockDigest, <-chan error, error) {
	ret := _m.Called(ctx, startHeight, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartHeight")
	}

	var r0 <-chan *flow.BlockDigest
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) (<-chan *flow.BlockDigest, <-chan error, error)); ok {
		return rf(ctx, startHeight, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) <-chan *flow.BlockDigest); ok {
		r0 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.BlockDigest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, flow.BlockStatus) error); ok {
		r2 = rf(ctx, startHeight, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlockHeadersFromLatest provides a mock function with given fields: ctx, blockStatus
func (_m *Client) SubscribeBlockHeadersFromLatest(ctx context.Context, blockStatus flow.BlockStatus) (<-chan *flow.BlockHeader, <-chan error, error) {
	ret := _m.Called(ctx, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromLatest")
	}

	var r0 <-chan *flow.BlockHeader
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) (<-chan *flow.BlockHeader, <-chan error, error)); ok {
		return rf(ctx, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) <-chan *flow.BlockHeader); ok {
		r0 = rf(ctx, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.BlockStatus) error); ok {
		r2 = rf(ctx, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlockHeadersFromStartBlockID provides a mock function with given fields: ctx, startBlockID, blockStatus
func (_m *Client) SubscribeBlockHeadersFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus) (<-chan *flow.BlockHeader, <-chan error, error) {
	ret := _m.Called(ctx, startBlockID, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartBlockID")
	}

	var r0 <-chan *flow.BlockHeader
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) (<-chan *flow.BlockHeader, <-chan error, error)); ok {
		return rf(ctx, startBlockID, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) <-chan *flow.BlockHeader); ok {
		r0 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier, flow.BlockStatus) error); ok {
		r2 = rf(ctx, startBlockID, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlockHeadersFromStartHeight provides a mock function with given fields: ctx, startHeight, blockStatus
func (_m *Client) SubscribeBlockHeadersFromStartHeight(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus) (<-chan *flow.BlockHeader, <-chan error, error) {
	ret := _m.Called(ctx, startHeight, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartHeight")
	}

	var r0 <-chan *flow.BlockHeader
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) (<-chan *flow.BlockHeader, <-chan error, error)); ok {
		return rf(ctx, startHeight, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) <-chan *flow.BlockHeader); ok {
		r0 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.BlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, flow.BlockStatus) error); ok {
		r2 = rf(ctx, startHeight, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlocksFromLatest provides a mock function with given fields: ctx, blockStatus
func (_m *Client) SubscribeBlocksFromLatest(ctx context.Context, blockStatus flow.BlockStatus) (<-chan *flow.Block, <-chan error, error) {
	ret := _m.Called(ctx, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromLatest")
	}

	var r0 <-chan *flow.Block
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) (<-chan *flow.Block, <-chan error, error)); ok {
		return rf(ctx, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.BlockStatus) <-chan *flow.Block); ok {
		r0 = rf(ctx, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.BlockStatus) error); ok {
		r2 = rf(ctx, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlocksFromStartBlockID provides a mock function with given fields: ctx, startBlockID, blockStatus
func (_m *Client) SubscribeBlocksFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, blockStatus flow.BlockStatus) (<-chan *flow.Block, <-chan error, error) {
	ret := _m.Called(ctx, startBlockID, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartBlockID")
	}

	var r0 <-chan *flow.Block
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) (<-chan *flow.Block, <-chan error, error)); ok {
		return rf(ctx, startBlockID, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.BlockStatus) <-chan *flow.Block); ok {
		r0 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, startBlockID, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier, flow.BlockStatus) error); ok {
		r2 = rf(ctx, startBlockID, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeBlocksFromStartHeight provides a mock function with given fields: ctx, startHeight, blockStatus
func (_m *Client) SubscribeBlocksFromStartHeight(ctx context.Context, startHeight uint64, blockStatus flow.BlockStatus) (<-chan *flow.Block, <-chan error, error) {
	ret := _m.Called(ctx, startHeight, blockStatus)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartHeight")
	}

	var r0 <-chan *flow.Block
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) (<-chan *flow.Block, <-chan error, error)); ok {
		return rf(ctx, startHeight, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.BlockStatus) <-chan *flow.Block); ok {
		r0 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, flow.BlockStatus) <-chan error); ok {
		r1 = rf(ctx, startHeight, blockStatus)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, flow.BlockStatus) error); ok {
		r2 = rf(ctx, startHeight, blockStatus)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeEventsByBlockHeight provides a mock function with given fields: ctx, startHeight, filter, opts
func (_m *Client) SubscribeEventsByBlockHeight(ctx context.Context, startHeight uint64, filter flow.EventFilter, opts ...access.SubscribeOption) (<-chan flow.BlockEvents, <-chan error, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, startHeight, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeEventsByBlockHeight")
	}

	var r0 <-chan flow.BlockEvents
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.EventFilter, ...access.SubscribeOption) (<-chan flow.BlockEvents, <-chan error, error)); ok {
		return rf(ctx, startHeight, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, flow.EventFilter, ...access.SubscribeOption) <-chan flow.BlockEvents); ok {
		r0 = rf(ctx, startHeight, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, flow.EventFilter, ...access.SubscribeOption) <-chan error); ok {
		r1 = rf(ctx, startHeight, filter, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, flow.EventFilter, ...access.SubscribeOption) error); ok {
		r2 = rf(ctx, startHeight, filter, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeEventsByBlockID provides a mock function with given fields: ctx, startBlockID, filter, opts
func (_m *Client) SubscribeEventsByBlockID(ctx context.Context, startBlockID flow.Identifier, filter flow.EventFilter, opts ...access.SubscribeOption) (<-chan flow.BlockEvents, <-chan error, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, startBlockID, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeEventsByBlockID")
	}

	var r0 <-chan flow.BlockEvents
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.EventFilter, ...access.SubscribeOption) (<-chan flow.BlockEvents, <-chan error, error)); ok {
		return rf(ctx, startBlockID, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, flow.EventFilter, ...access.SubscribeOption) <-chan flow.BlockEvents); ok {
		r0 = rf(ctx, startBlockID, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan flow.BlockEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, flow.EventFilter, ...access.SubscribeOption) <-chan error); ok {
		r1 = rf(ctx, startBlockID, filter, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier, flow.EventFilter, ...access.SubscribeOption) error); ok {
		r2 = rf(ctx, startBlockID, filter, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeExecutionDataByBlockHeight provides a mock function with given fields: ctx, startHeight
func (_m *Client) SubscribeExecutionDataByBlockHeight(ctx context.Context, startHeight uint64) (<-chan *flow.ExecutionDataStreamResponse, <-chan error, error) {
	ret := _m.Called(ctx, startHeight)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeExecutionDataByBlockHeight")
	}

	var r0 <-chan *flow.ExecutionDataStreamResponse
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (<-chan *flow.ExecutionDataStreamResponse, <-chan error, error)); ok {
		return rf(ctx, startHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) <-chan *flow.ExecutionDataStreamResponse); ok {
		r0 = rf(ctx, startHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.ExecutionDataStreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) <-chan error); ok {
		r1 = rf(ctx, startHeight)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64) error); ok {
		r2 = rf(ctx, startHeight)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubscribeExecutionDataByBlockID provides a mock function with given fields: ctx, startBlockID
func (_m *Client) SubscribeExecutionDataByBlockID(ctx context.Context, startBlockID flow.Identifier) (<-chan *flow.ExecutionDataStreamResponse, <-chan error, error) {
	ret := _m.Called(ctx, startBlockID)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeExecutionDataByBlockID")
	}

	var r0 <-chan *flow.ExecutionDataStreamResponse
	var r1 <-chan error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (<-chan *flow.ExecutionDataStreamResponse, <-chan error, error)); ok {
		return rf(ctx, startBlockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) <-chan *flow.ExecutionDataStreamResponse); ok {
		r0 = rf(ctx, startBlockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *flow.ExecutionDataStreamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) <-chan error); ok {
		r1 = rf(ctx, startBlockID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Identifier) error); ok {
		r2 = rf(ctx, startBlockID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
