// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockStateMachine is an autogenerated mock type for the StateMachine type
type MockStateMachine struct {
	mock.Mock
}

type MockStateMachine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateMachine) EXPECT() *MockStateMachine_Expecter {
	return &MockStateMachine_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *MockStateMachine) Build() (*flow.EpochStateEntry, flow.Identifier, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *flow.EpochStateEntry
	var r1 flow.Identifier
	var r2 bool
	if rf, ok := ret.Get(0).(func() (*flow.EpochStateEntry, flow.Identifier, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.EpochStateEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochStateEntry)
		}
	}

	if rf, ok := ret.Get(1).(func() flow.Identifier); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// MockStateMachine_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockStateMachine_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *MockStateMachine_Expecter) Build() *MockStateMachine_Build_Call {
	return &MockStateMachine_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *MockStateMachine_Build_Call) Run(run func()) *MockStateMachine_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateMachine_Build_Call) Return(updatedState *flow.EpochStateEntry, stateID flow.Identifier, hasChanges bool) *MockStateMachine_Build_Call {
	_c.Call.Return(updatedState, stateID, hasChanges)
	return _c
}

func (_c *MockStateMachine_Build_Call) RunAndReturn(run func() (*flow.EpochStateEntry, flow.Identifier, bool)) *MockStateMachine_Build_Call {
	_c.Call.Return(run)
	return _c
}

// EjectIdentity provides a mock function with given fields: ejectionEvent
func (_m *MockStateMachine) EjectIdentity(ejectionEvent *flow.EjectNode) bool {
	ret := _m.Called(ejectionEvent)

	if len(ret) == 0 {
		panic("no return value specified for EjectIdentity")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*flow.EjectNode) bool); ok {
		r0 = rf(ejectionEvent)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockStateMachine_EjectIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EjectIdentity'
type MockStateMachine_EjectIdentity_Call struct {
	*mock.Call
}

// EjectIdentity is a helper method to define mock.On call
//   - ejectionEvent *flow.EjectNode
func (_e *MockStateMachine_Expecter) EjectIdentity(ejectionEvent interface{}) *MockStateMachine_EjectIdentity_Call {
	return &MockStateMachine_EjectIdentity_Call{Call: _e.mock.On("EjectIdentity", ejectionEvent)}
}

func (_c *MockStateMachine_EjectIdentity_Call) Run(run func(ejectionEvent *flow.EjectNode)) *MockStateMachine_EjectIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.EjectNode))
	})
	return _c
}

func (_c *MockStateMachine_EjectIdentity_Call) Return(_a0 bool) *MockStateMachine_EjectIdentity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateMachine_EjectIdentity_Call) RunAndReturn(run func(*flow.EjectNode) bool) *MockStateMachine_EjectIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// ParentState provides a mock function with no fields
func (_m *MockStateMachine) ParentState() *flow.RichEpochStateEntry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParentState")
	}

	var r0 *flow.RichEpochStateEntry
	if rf, ok := ret.Get(0).(func() *flow.RichEpochStateEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichEpochStateEntry)
		}
	}

	return r0
}

// MockStateMachine_ParentState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParentState'
type MockStateMachine_ParentState_Call struct {
	*mock.Call
}

// ParentState is a helper method to define mock.On call
func (_e *MockStateMachine_Expecter) ParentState() *MockStateMachine_ParentState_Call {
	return &MockStateMachine_ParentState_Call{Call: _e.mock.On("ParentState")}
}

func (_c *MockStateMachine_ParentState_Call) Run(run func()) *MockStateMachine_ParentState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateMachine_ParentState_Call) Return(_a0 *flow.RichEpochStateEntry) *MockStateMachine_ParentState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateMachine_ParentState_Call) RunAndReturn(run func() *flow.RichEpochStateEntry) *MockStateMachine_ParentState_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessEpochCommit provides a mock function with given fields: epochCommit
func (_m *MockStateMachine) ProcessEpochCommit(epochCommit *flow.EpochCommit) (bool, error) {
	ret := _m.Called(epochCommit)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEpochCommit")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.EpochCommit) (bool, error)); ok {
		return rf(epochCommit)
	}
	if rf, ok := ret.Get(0).(func(*flow.EpochCommit) bool); ok {
		r0 = rf(epochCommit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*flow.EpochCommit) error); ok {
		r1 = rf(epochCommit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateMachine_ProcessEpochCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessEpochCommit'
type MockStateMachine_ProcessEpochCommit_Call struct {
	*mock.Call
}

// ProcessEpochCommit is a helper method to define mock.On call
//   - epochCommit *flow.EpochCommit
func (_e *MockStateMachine_Expecter) ProcessEpochCommit(epochCommit interface{}) *MockStateMachine_ProcessEpochCommit_Call {
	return &MockStateMachine_ProcessEpochCommit_Call{Call: _e.mock.On("ProcessEpochCommit", epochCommit)}
}

func (_c *MockStateMachine_ProcessEpochCommit_Call) Run(run func(epochCommit *flow.EpochCommit)) *MockStateMachine_ProcessEpochCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.EpochCommit))
	})
	return _c
}

func (_c *MockStateMachine_ProcessEpochCommit_Call) Return(_a0 bool, _a1 error) *MockStateMachine_ProcessEpochCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateMachine_ProcessEpochCommit_Call) RunAndReturn(run func(*flow.EpochCommit) (bool, error)) *MockStateMachine_ProcessEpochCommit_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessEpochRecover provides a mock function with given fields: epochRecover
func (_m *MockStateMachine) ProcessEpochRecover(epochRecover *flow.EpochRecover) (bool, error) {
	ret := _m.Called(epochRecover)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEpochRecover")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.EpochRecover) (bool, error)); ok {
		return rf(epochRecover)
	}
	if rf, ok := ret.Get(0).(func(*flow.EpochRecover) bool); ok {
		r0 = rf(epochRecover)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*flow.EpochRecover) error); ok {
		r1 = rf(epochRecover)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateMachine_ProcessEpochRecover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessEpochRecover'
type MockStateMachine_ProcessEpochRecover_Call struct {
	*mock.Call
}

// ProcessEpochRecover is a helper method to define mock.On call
//   - epochRecover *flow.EpochRecover
func (_e *MockStateMachine_Expecter) ProcessEpochRecover(epochRecover interface{}) *MockStateMachine_ProcessEpochRecover_Call {
	return &MockStateMachine_ProcessEpochRecover_Call{Call: _e.mock.On("ProcessEpochRecover", epochRecover)}
}

func (_c *MockStateMachine_ProcessEpochRecover_Call) Run(run func(epochRecover *flow.EpochRecover)) *MockStateMachine_ProcessEpochRecover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.EpochRecover))
	})
	return _c
}

func (_c *MockStateMachine_ProcessEpochRecover_Call) Return(_a0 bool, _a1 error) *MockStateMachine_ProcessEpochRecover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateMachine_ProcessEpochRecover_Call) RunAndReturn(run func(*flow.EpochRecover) (bool, error)) *MockStateMachine_ProcessEpochRecover_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessEpochSetup provides a mock function with given fields: epochSetup
func (_m *MockStateMachine) ProcessEpochSetup(epochSetup *flow.EpochSetup) (bool, error) {
	ret := _m.Called(epochSetup)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEpochSetup")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.EpochSetup) (bool, error)); ok {
		return rf(epochSetup)
	}
	if rf, ok := ret.Get(0).(func(*flow.EpochSetup) bool); ok {
		r0 = rf(epochSetup)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*flow.EpochSetup) error); ok {
		r1 = rf(epochSetup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateMachine_ProcessEpochSetup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessEpochSetup'
type MockStateMachine_ProcessEpochSetup_Call struct {
	*mock.Call
}

// ProcessEpochSetup is a helper method to define mock.On call
//   - epochSetup *flow.EpochSetup
func (_e *MockStateMachine_Expecter) ProcessEpochSetup(epochSetup interface{}) *MockStateMachine_ProcessEpochSetup_Call {
	return &MockStateMachine_ProcessEpochSetup_Call{Call: _e.mock.On("ProcessEpochSetup", epochSetup)}
}

func (_c *MockStateMachine_ProcessEpochSetup_Call) Run(run func(epochSetup *flow.EpochSetup)) *MockStateMachine_ProcessEpochSetup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.EpochSetup))
	})
	return _c
}

func (_c *MockStateMachine_ProcessEpochSetup_Call) Return(_a0 bool, _a1 error) *MockStateMachine_ProcessEpochSetup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateMachine_ProcessEpochSetup_Call) RunAndReturn(run func(*flow.EpochSetup) (bool, error)) *MockStateMachine_ProcessEpochSetup_Call {
	_c.Call.Return(run)
	return _c
}

// TransitionToNextEpoch provides a mock function with no fields
func (_m *MockStateMachine) TransitionToNextEpoch() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransitionToNextEpoch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateMachine_TransitionToNextEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransitionToNextEpoch'
type MockStateMachine_TransitionToNextEpoch_Call struct {
	*mock.Call
}

// TransitionToNextEpoch is a helper method to define mock.On call
func (_e *MockStateMachine_Expecter) TransitionToNextEpoch() *MockStateMachine_TransitionToNextEpoch_Call {
	return &MockStateMachine_TransitionToNextEpoch_Call{Call: _e.mock.On("TransitionToNextEpoch")}
}

func (_c *MockStateMachine_TransitionToNextEpoch_Call) Run(run func()) *MockStateMachine_TransitionToNextEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateMachine_TransitionToNextEpoch_Call) Return(_a0 error) *MockStateMachine_TransitionToNextEpoch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateMachine_TransitionToNextEpoch_Call) RunAndReturn(run func() error) *MockStateMachine_TransitionToNextEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with no fields
func (_m *MockStateMachine) View() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockStateMachine_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockStateMachine_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
func (_e *MockStateMachine_Expecter) View() *MockStateMachine_View_Call {
	return &MockStateMachine_View_Call{Call: _e.mock.On("View")}
}

func (_c *MockStateMachine_View_Call) Run(run func()) *MockStateMachine_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateMachine_View_Call) Return(_a0 uint64) *MockStateMachine_View_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateMachine_View_Call) RunAndReturn(run func() uint64) *MockStateMachine_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateMachine creates a new instance of MockStateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateMachine {
	mock := &MockStateMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
