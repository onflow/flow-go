// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	epochs "github.com/onflow/flow-go/state/protocol/protocol_state/epochs"

	mock "github.com/stretchr/testify/mock"
)

// MockStateMachineFactoryMethod is an autogenerated mock type for the StateMachineFactoryMethod type
type MockStateMachineFactoryMethod struct {
	mock.Mock
}

type MockStateMachineFactoryMethod_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateMachineFactoryMethod) EXPECT() *MockStateMachineFactoryMethod_Expecter {
	return &MockStateMachineFactoryMethod_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: candidateView, parentState
func (_m *MockStateMachineFactoryMethod) Execute(candidateView uint64, parentState *flow.RichEpochStateEntry) (epochs.StateMachine, error) {
	ret := _m.Called(candidateView, parentState)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 epochs.StateMachine
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *flow.RichEpochStateEntry) (epochs.StateMachine, error)); ok {
		return rf(candidateView, parentState)
	}
	if rf, ok := ret.Get(0).(func(uint64, *flow.RichEpochStateEntry) epochs.StateMachine); ok {
		r0 = rf(candidateView, parentState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(epochs.StateMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *flow.RichEpochStateEntry) error); ok {
		r1 = rf(candidateView, parentState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateMachineFactoryMethod_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStateMachineFactoryMethod_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - candidateView uint64
//   - parentState *flow.RichEpochStateEntry
func (_e *MockStateMachineFactoryMethod_Expecter) Execute(candidateView interface{}, parentState interface{}) *MockStateMachineFactoryMethod_Execute_Call {
	return &MockStateMachineFactoryMethod_Execute_Call{Call: _e.mock.On("Execute", candidateView, parentState)}
}

func (_c *MockStateMachineFactoryMethod_Execute_Call) Run(run func(candidateView uint64, parentState *flow.RichEpochStateEntry)) *MockStateMachineFactoryMethod_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.RichEpochStateEntry))
	})
	return _c
}

func (_c *MockStateMachineFactoryMethod_Execute_Call) Return(_a0 epochs.StateMachine, _a1 error) *MockStateMachineFactoryMethod_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateMachineFactoryMethod_Execute_Call) RunAndReturn(run func(uint64, *flow.RichEpochStateEntry) (epochs.StateMachine, error)) *MockStateMachineFactoryMethod_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateMachineFactoryMethod creates a new instance of MockStateMachineFactoryMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateMachineFactoryMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateMachineFactoryMethod {
	mock := &MockStateMachineFactoryMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
