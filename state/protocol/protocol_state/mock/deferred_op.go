// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// DeferredOp is an autogenerated mock type for the DeferredOp type
type DeferredOp struct {
	mock.Mock
}

// Execute provides a mock function with given fields: blockID, rw
func (_m *DeferredOp) Execute(blockID flow.Identifier, rw storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, rw)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, rw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDeferredOp creates a new instance of DeferredOp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeferredOp(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeferredOp {
	mock := &DeferredOp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
