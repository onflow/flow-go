// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"

	protocol_state "github.com/onflow/flow-go/state/protocol/protocol_state"
)

// MockKeyValueStoreStateMachineFactory is an autogenerated mock type for the KeyValueStoreStateMachineFactory type
type MockKeyValueStoreStateMachineFactory struct {
	mock.Mock
}

type MockKeyValueStoreStateMachineFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyValueStoreStateMachineFactory) EXPECT() *MockKeyValueStoreStateMachineFactory_Expecter {
	return &MockKeyValueStoreStateMachineFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: candidateView, parentID, parentState, mutator
func (_m *MockKeyValueStoreStateMachineFactory) Create(candidateView uint64, parentID flow.Identifier, parentState protocol.KVStoreReader, mutator protocol_state.KVStoreMutator) (protocol_state.OrthogonalStoreStateMachine[protocol.KVStoreReader], error) {
	ret := _m.Called(candidateView, parentID, parentState, mutator)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 protocol_state.OrthogonalStoreStateMachine[protocol.KVStoreReader]
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, protocol.KVStoreReader, protocol_state.KVStoreMutator) (protocol_state.OrthogonalStoreStateMachine[protocol.KVStoreReader], error)); ok {
		return rf(candidateView, parentID, parentState, mutator)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, protocol.KVStoreReader, protocol_state.KVStoreMutator) protocol_state.OrthogonalStoreStateMachine[protocol.KVStoreReader]); ok {
		r0 = rf(candidateView, parentID, parentState, mutator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol_state.OrthogonalStoreStateMachine[protocol.KVStoreReader])
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier, protocol.KVStoreReader, protocol_state.KVStoreMutator) error); ok {
		r1 = rf(candidateView, parentID, parentState, mutator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyValueStoreStateMachineFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockKeyValueStoreStateMachineFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - candidateView uint64
//   - parentID flow.Identifier
//   - parentState protocol.KVStoreReader
//   - mutator protocol_state.KVStoreMutator
func (_e *MockKeyValueStoreStateMachineFactory_Expecter) Create(candidateView interface{}, parentID interface{}, parentState interface{}, mutator interface{}) *MockKeyValueStoreStateMachineFactory_Create_Call {
	return &MockKeyValueStoreStateMachineFactory_Create_Call{Call: _e.mock.On("Create", candidateView, parentID, parentState, mutator)}
}

func (_c *MockKeyValueStoreStateMachineFactory_Create_Call) Run(run func(candidateView uint64, parentID flow.Identifier, parentState protocol.KVStoreReader, mutator protocol_state.KVStoreMutator)) *MockKeyValueStoreStateMachineFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier), args[2].(protocol.KVStoreReader), args[3].(protocol_state.KVStoreMutator))
	})
	return _c
}

func (_c *MockKeyValueStoreStateMachineFactory_Create_Call) Return(_a0 protocol_state.OrthogonalStoreStateMachine[protocol.KVStoreReader], _a1 error) *MockKeyValueStoreStateMachineFactory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyValueStoreStateMachineFactory_Create_Call) RunAndReturn(run func(uint64, flow.Identifier, protocol.KVStoreReader, protocol_state.KVStoreMutator) (protocol_state.OrthogonalStoreStateMachine[protocol.KVStoreReader], error)) *MockKeyValueStoreStateMachineFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyValueStoreStateMachineFactory creates a new instance of MockKeyValueStoreStateMachineFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyValueStoreStateMachineFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyValueStoreStateMachineFactory {
	mock := &MockKeyValueStoreStateMachineFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
