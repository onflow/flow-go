// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// OrthogonalStoreStateMachine is an autogenerated mock type for the OrthogonalStoreStateMachine type
type OrthogonalStoreStateMachine[P interface{}] struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *OrthogonalStoreStateMachine[P]) Build() (*transaction.DeferredBlockPersist, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *transaction.DeferredBlockPersist
	var r1 error
	if rf, ok := ret.Get(0).(func() (*transaction.DeferredBlockPersist, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *transaction.DeferredBlockPersist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.DeferredBlockPersist)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvolveState provides a mock function with given fields: sealedServiceEvents
func (_m *OrthogonalStoreStateMachine[P]) EvolveState(sealedServiceEvents []flow.ServiceEvent) error {
	ret := _m.Called(sealedServiceEvents)

	if len(ret) == 0 {
		panic("no return value specified for EvolveState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]flow.ServiceEvent) error); ok {
		r0 = rf(sealedServiceEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParentState provides a mock function with given fields:
func (_m *OrthogonalStoreStateMachine[P]) ParentState() P {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParentState")
	}

	var r0 P
	if rf, ok := ret.Get(0).(func() P); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(P)
	}

	return r0
}

// View provides a mock function with given fields:
func (_m *OrthogonalStoreStateMachine[P]) View() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// NewOrthogonalStoreStateMachine creates a new instance of OrthogonalStoreStateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrthogonalStoreStateMachine[P interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *OrthogonalStoreStateMachine[P] {
	mock := &OrthogonalStoreStateMachine[P]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
