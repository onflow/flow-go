// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol_state "github.com/onflow/flow-go/state/protocol/protocol_state"
)

// KeyValueStoreStateMachine is an autogenerated mock type for the KeyValueStoreStateMachine type
type KeyValueStoreStateMachine struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *KeyValueStoreStateMachine) Build() (protocol_state.KVStoreReader, flow.Identifier, bool) {
	ret := _m.Called()

	var r0 protocol_state.KVStoreReader
	var r1 flow.Identifier
	var r2 bool
	if rf, ok := ret.Get(0).(func() (protocol_state.KVStoreReader, flow.Identifier, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol_state.KVStoreReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol_state.KVStoreReader)
		}
	}

	if rf, ok := ret.Get(1).(func() flow.Identifier); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// ParentState provides a mock function with given fields:
func (_m *KeyValueStoreStateMachine) ParentState() protocol_state.KVStoreReader {
	ret := _m.Called()

	var r0 protocol_state.KVStoreReader
	if rf, ok := ret.Get(0).(func() protocol_state.KVStoreReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol_state.KVStoreReader)
		}
	}

	return r0
}

// ProcessUpdate provides a mock function with given fields: update
func (_m *KeyValueStoreStateMachine) ProcessUpdate(update *flow.ServiceEvent) error {
	ret := _m.Called(update)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ServiceEvent) error); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// View provides a mock function with given fields:
func (_m *KeyValueStoreStateMachine) View() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

type mockConstructorTestingTNewKeyValueStoreStateMachine interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyValueStoreStateMachine creates a new instance of KeyValueStoreStateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyValueStoreStateMachine(t mockConstructorTestingTNewKeyValueStoreStateMachine) *KeyValueStoreStateMachine {
	mock := &KeyValueStoreStateMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
