// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	protocol_state "github.com/onflow/flow-go/state/protocol/protocol_state"
	mock "github.com/stretchr/testify/mock"
)

// StateMachineEventsTelemetryFactory is an autogenerated mock type for the StateMachineEventsTelemetryFactory type
type StateMachineEventsTelemetryFactory struct {
	mock.Mock
}

// Execute provides a mock function with given fields: candidateView
func (_m *StateMachineEventsTelemetryFactory) Execute(candidateView uint64) protocol_state.StateMachineTelemetryConsumer {
	ret := _m.Called(candidateView)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 protocol_state.StateMachineTelemetryConsumer
	if rf, ok := ret.Get(0).(func(uint64) protocol_state.StateMachineTelemetryConsumer); ok {
		r0 = rf(candidateView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol_state.StateMachineTelemetryConsumer)
		}
	}

	return r0
}

// NewStateMachineEventsTelemetryFactory creates a new instance of StateMachineEventsTelemetryFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateMachineEventsTelemetryFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateMachineEventsTelemetryFactory {
	mock := &StateMachineEventsTelemetryFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
