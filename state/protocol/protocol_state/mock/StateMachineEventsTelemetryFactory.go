// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	protocol_state "github.com/onflow/flow-go/state/protocol/protocol_state"
	mock "github.com/stretchr/testify/mock"
)

// MockStateMachineEventsTelemetryFactory is an autogenerated mock type for the StateMachineEventsTelemetryFactory type
type MockStateMachineEventsTelemetryFactory struct {
	mock.Mock
}

type MockStateMachineEventsTelemetryFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateMachineEventsTelemetryFactory) EXPECT() *MockStateMachineEventsTelemetryFactory_Expecter {
	return &MockStateMachineEventsTelemetryFactory_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: candidateView
func (_m *MockStateMachineEventsTelemetryFactory) Execute(candidateView uint64) protocol_state.StateMachineTelemetryConsumer {
	ret := _m.Called(candidateView)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 protocol_state.StateMachineTelemetryConsumer
	if rf, ok := ret.Get(0).(func(uint64) protocol_state.StateMachineTelemetryConsumer); ok {
		r0 = rf(candidateView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol_state.StateMachineTelemetryConsumer)
		}
	}

	return r0
}

// MockStateMachineEventsTelemetryFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStateMachineEventsTelemetryFactory_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - candidateView uint64
func (_e *MockStateMachineEventsTelemetryFactory_Expecter) Execute(candidateView interface{}) *MockStateMachineEventsTelemetryFactory_Execute_Call {
	return &MockStateMachineEventsTelemetryFactory_Execute_Call{Call: _e.mock.On("Execute", candidateView)}
}

func (_c *MockStateMachineEventsTelemetryFactory_Execute_Call) Run(run func(candidateView uint64)) *MockStateMachineEventsTelemetryFactory_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockStateMachineEventsTelemetryFactory_Execute_Call) Return(_a0 protocol_state.StateMachineTelemetryConsumer) *MockStateMachineEventsTelemetryFactory_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateMachineEventsTelemetryFactory_Execute_Call) RunAndReturn(run func(uint64) protocol_state.StateMachineTelemetryConsumer) *MockStateMachineEventsTelemetryFactory_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateMachineEventsTelemetryFactory creates a new instance of MockStateMachineEventsTelemetryFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateMachineEventsTelemetryFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateMachineEventsTelemetryFactory {
	mock := &MockStateMachineEventsTelemetryFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
