// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockStateMachineTelemetryConsumer is an autogenerated mock type for the StateMachineTelemetryConsumer type
type MockStateMachineTelemetryConsumer struct {
	mock.Mock
}

type MockStateMachineTelemetryConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateMachineTelemetryConsumer) EXPECT() *MockStateMachineTelemetryConsumer_Expecter {
	return &MockStateMachineTelemetryConsumer_Expecter{mock: &_m.Mock}
}

// OnInvalidServiceEvent provides a mock function with given fields: event, err
func (_m *MockStateMachineTelemetryConsumer) OnInvalidServiceEvent(event flow.ServiceEvent, err error) {
	_m.Called(event, err)
}

// MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnInvalidServiceEvent'
type MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call struct {
	*mock.Call
}

// OnInvalidServiceEvent is a helper method to define mock.On call
//   - event flow.ServiceEvent
//   - err error
func (_e *MockStateMachineTelemetryConsumer_Expecter) OnInvalidServiceEvent(event interface{}, err interface{}) *MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call {
	return &MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call{Call: _e.mock.On("OnInvalidServiceEvent", event, err)}
}

func (_c *MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call) Run(run func(event flow.ServiceEvent, err error)) *MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ServiceEvent), args[1].(error))
	})
	return _c
}

func (_c *MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call) Return() *MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call) RunAndReturn(run func(flow.ServiceEvent, error)) *MockStateMachineTelemetryConsumer_OnInvalidServiceEvent_Call {
	_c.Run(run)
	return _c
}

// OnServiceEventProcessed provides a mock function with given fields: event
func (_m *MockStateMachineTelemetryConsumer) OnServiceEventProcessed(event flow.ServiceEvent) {
	_m.Called(event)
}

// MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnServiceEventProcessed'
type MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call struct {
	*mock.Call
}

// OnServiceEventProcessed is a helper method to define mock.On call
//   - event flow.ServiceEvent
func (_e *MockStateMachineTelemetryConsumer_Expecter) OnServiceEventProcessed(event interface{}) *MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call {
	return &MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call{Call: _e.mock.On("OnServiceEventProcessed", event)}
}

func (_c *MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call) Run(run func(event flow.ServiceEvent)) *MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ServiceEvent))
	})
	return _c
}

func (_c *MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call) Return() *MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call) RunAndReturn(run func(flow.ServiceEvent)) *MockStateMachineTelemetryConsumer_OnServiceEventProcessed_Call {
	_c.Run(run)
	return _c
}

// OnServiceEventReceived provides a mock function with given fields: event
func (_m *MockStateMachineTelemetryConsumer) OnServiceEventReceived(event flow.ServiceEvent) {
	_m.Called(event)
}

// MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnServiceEventReceived'
type MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call struct {
	*mock.Call
}

// OnServiceEventReceived is a helper method to define mock.On call
//   - event flow.ServiceEvent
func (_e *MockStateMachineTelemetryConsumer_Expecter) OnServiceEventReceived(event interface{}) *MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call {
	return &MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call{Call: _e.mock.On("OnServiceEventReceived", event)}
}

func (_c *MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call) Run(run func(event flow.ServiceEvent)) *MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ServiceEvent))
	})
	return _c
}

func (_c *MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call) Return() *MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call) RunAndReturn(run func(flow.ServiceEvent)) *MockStateMachineTelemetryConsumer_OnServiceEventReceived_Call {
	_c.Run(run)
	return _c
}

// NewMockStateMachineTelemetryConsumer creates a new instance of MockStateMachineTelemetryConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateMachineTelemetryConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateMachineTelemetryConsumer {
	mock := &MockStateMachineTelemetryConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
