// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// MockKeyValueStoreStateMachine is an autogenerated mock type for the KeyValueStoreStateMachine type
type MockKeyValueStoreStateMachine[P interface{}] struct {
	mock.Mock
}

type MockKeyValueStoreStateMachine_Expecter[P interface{}] struct {
	mock *mock.Mock
}

func (_m *MockKeyValueStoreStateMachine[P]) EXPECT() *MockKeyValueStoreStateMachine_Expecter[P] {
	return &MockKeyValueStoreStateMachine_Expecter[P]{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *MockKeyValueStoreStateMachine[P]) Build() (*transaction.DeferredBlockPersist, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *transaction.DeferredBlockPersist
	var r1 error
	if rf, ok := ret.Get(0).(func() (*transaction.DeferredBlockPersist, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *transaction.DeferredBlockPersist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.DeferredBlockPersist)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyValueStoreStateMachine_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockKeyValueStoreStateMachine_Build_Call[P interface{}] struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *MockKeyValueStoreStateMachine_Expecter[P]) Build() *MockKeyValueStoreStateMachine_Build_Call[P] {
	return &MockKeyValueStoreStateMachine_Build_Call[P]{Call: _e.mock.On("Build")}
}

func (_c *MockKeyValueStoreStateMachine_Build_Call[P]) Run(run func()) *MockKeyValueStoreStateMachine_Build_Call[P] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyValueStoreStateMachine_Build_Call[P]) Return(_a0 *transaction.DeferredBlockPersist, _a1 error) *MockKeyValueStoreStateMachine_Build_Call[P] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyValueStoreStateMachine_Build_Call[P]) RunAndReturn(run func() (*transaction.DeferredBlockPersist, error)) *MockKeyValueStoreStateMachine_Build_Call[P] {
	_c.Call.Return(run)
	return _c
}

// EvolveState provides a mock function with given fields: sealedServiceEvents
func (_m *MockKeyValueStoreStateMachine[P]) EvolveState(sealedServiceEvents []flow.ServiceEvent) error {
	ret := _m.Called(sealedServiceEvents)

	if len(ret) == 0 {
		panic("no return value specified for EvolveState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]flow.ServiceEvent) error); ok {
		r0 = rf(sealedServiceEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeyValueStoreStateMachine_EvolveState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvolveState'
type MockKeyValueStoreStateMachine_EvolveState_Call[P interface{}] struct {
	*mock.Call
}

// EvolveState is a helper method to define mock.On call
//   - sealedServiceEvents []flow.ServiceEvent
func (_e *MockKeyValueStoreStateMachine_Expecter[P]) EvolveState(sealedServiceEvents interface{}) *MockKeyValueStoreStateMachine_EvolveState_Call[P] {
	return &MockKeyValueStoreStateMachine_EvolveState_Call[P]{Call: _e.mock.On("EvolveState", sealedServiceEvents)}
}

func (_c *MockKeyValueStoreStateMachine_EvolveState_Call[P]) Run(run func(sealedServiceEvents []flow.ServiceEvent)) *MockKeyValueStoreStateMachine_EvolveState_Call[P] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.ServiceEvent))
	})
	return _c
}

func (_c *MockKeyValueStoreStateMachine_EvolveState_Call[P]) Return(_a0 error) *MockKeyValueStoreStateMachine_EvolveState_Call[P] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyValueStoreStateMachine_EvolveState_Call[P]) RunAndReturn(run func([]flow.ServiceEvent) error) *MockKeyValueStoreStateMachine_EvolveState_Call[P] {
	_c.Call.Return(run)
	return _c
}

// ParentState provides a mock function with no fields
func (_m *MockKeyValueStoreStateMachine[P]) ParentState() protocol.KVStoreReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParentState")
	}

	var r0 protocol.KVStoreReader
	if rf, ok := ret.Get(0).(func() protocol.KVStoreReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.KVStoreReader)
		}
	}

	return r0
}

// MockKeyValueStoreStateMachine_ParentState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParentState'
type MockKeyValueStoreStateMachine_ParentState_Call[P interface{}] struct {
	*mock.Call
}

// ParentState is a helper method to define mock.On call
func (_e *MockKeyValueStoreStateMachine_Expecter[P]) ParentState() *MockKeyValueStoreStateMachine_ParentState_Call[P] {
	return &MockKeyValueStoreStateMachine_ParentState_Call[P]{Call: _e.mock.On("ParentState")}
}

func (_c *MockKeyValueStoreStateMachine_ParentState_Call[P]) Run(run func()) *MockKeyValueStoreStateMachine_ParentState_Call[P] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyValueStoreStateMachine_ParentState_Call[P]) Return(_a0 protocol.KVStoreReader) *MockKeyValueStoreStateMachine_ParentState_Call[P] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyValueStoreStateMachine_ParentState_Call[P]) RunAndReturn(run func() protocol.KVStoreReader) *MockKeyValueStoreStateMachine_ParentState_Call[P] {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with no fields
func (_m *MockKeyValueStoreStateMachine[P]) View() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockKeyValueStoreStateMachine_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockKeyValueStoreStateMachine_View_Call[P interface{}] struct {
	*mock.Call
}

// View is a helper method to define mock.On call
func (_e *MockKeyValueStoreStateMachine_Expecter[P]) View() *MockKeyValueStoreStateMachine_View_Call[P] {
	return &MockKeyValueStoreStateMachine_View_Call[P]{Call: _e.mock.On("View")}
}

func (_c *MockKeyValueStoreStateMachine_View_Call[P]) Run(run func()) *MockKeyValueStoreStateMachine_View_Call[P] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeyValueStoreStateMachine_View_Call[P]) Return(_a0 uint64) *MockKeyValueStoreStateMachine_View_Call[P] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeyValueStoreStateMachine_View_Call[P]) RunAndReturn(run func() uint64) *MockKeyValueStoreStateMachine_View_Call[P] {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyValueStoreStateMachine creates a new instance of MockKeyValueStoreStateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyValueStoreStateMachine[P interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyValueStoreStateMachine[P] {
	mock := &MockKeyValueStoreStateMachine[P]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
