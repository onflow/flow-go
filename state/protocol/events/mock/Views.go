// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	events "github.com/onflow/flow-go/state/protocol/events"
	mock "github.com/stretchr/testify/mock"
)

// MockViews is an autogenerated mock type for the Views type
type MockViews struct {
	mock.Mock
}

type MockViews_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViews) EXPECT() *MockViews_Expecter {
	return &MockViews_Expecter{mock: &_m.Mock}
}

// OnView provides a mock function with given fields: view, callback
func (_m *MockViews) OnView(view uint64, callback events.OnViewCallback) {
	_m.Called(view, callback)
}

// MockViews_OnView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnView'
type MockViews_OnView_Call struct {
	*mock.Call
}

// OnView is a helper method to define mock.On call
//   - view uint64
//   - callback events.OnViewCallback
func (_e *MockViews_Expecter) OnView(view interface{}, callback interface{}) *MockViews_OnView_Call {
	return &MockViews_OnView_Call{Call: _e.mock.On("OnView", view, callback)}
}

func (_c *MockViews_OnView_Call) Run(run func(view uint64, callback events.OnViewCallback)) *MockViews_OnView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(events.OnViewCallback))
	})
	return _c
}

func (_c *MockViews_OnView_Call) Return() *MockViews_OnView_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockViews_OnView_Call) RunAndReturn(run func(uint64, events.OnViewCallback)) *MockViews_OnView_Call {
	_c.Run(run)
	return _c
}

// NewMockViews creates a new instance of MockViews. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockViews(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockViews {
	mock := &MockViews{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
