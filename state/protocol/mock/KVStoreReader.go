// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockKVStoreReader is an autogenerated mock type for the KVStoreReader type
type MockKVStoreReader struct {
	mock.Mock
}

type MockKVStoreReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKVStoreReader) EXPECT() *MockKVStoreReader_Expecter {
	return &MockKVStoreReader_Expecter{mock: &_m.Mock}
}

// GetCadenceComponentVersion provides a mock function with no fields
func (_m *MockKVStoreReader) GetCadenceComponentVersion() (protocol.MagnitudeVersion, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCadenceComponentVersion")
	}

	var r0 protocol.MagnitudeVersion
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.MagnitudeVersion, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.MagnitudeVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protocol.MagnitudeVersion)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKVStoreReader_GetCadenceComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCadenceComponentVersion'
type MockKVStoreReader_GetCadenceComponentVersion_Call struct {
	*mock.Call
}

// GetCadenceComponentVersion is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetCadenceComponentVersion() *MockKVStoreReader_GetCadenceComponentVersion_Call {
	return &MockKVStoreReader_GetCadenceComponentVersion_Call{Call: _e.mock.On("GetCadenceComponentVersion")}
}

func (_c *MockKVStoreReader_GetCadenceComponentVersion_Call) Run(run func()) *MockKVStoreReader_GetCadenceComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetCadenceComponentVersion_Call) Return(_a0 protocol.MagnitudeVersion, _a1 error) *MockKVStoreReader_GetCadenceComponentVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKVStoreReader_GetCadenceComponentVersion_Call) RunAndReturn(run func() (protocol.MagnitudeVersion, error)) *MockKVStoreReader_GetCadenceComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetCadenceComponentVersionUpgrade provides a mock function with no fields
func (_m *MockKVStoreReader) GetCadenceComponentVersionUpgrade() *protocol.ViewBasedActivator[protocol.MagnitudeVersion] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCadenceComponentVersionUpgrade")
	}

	var r0 *protocol.ViewBasedActivator[protocol.MagnitudeVersion]
	if rf, ok := ret.Get(0).(func() *protocol.ViewBasedActivator[protocol.MagnitudeVersion]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ViewBasedActivator[protocol.MagnitudeVersion])
		}
	}

	return r0
}

// MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCadenceComponentVersionUpgrade'
type MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call struct {
	*mock.Call
}

// GetCadenceComponentVersionUpgrade is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetCadenceComponentVersionUpgrade() *MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call {
	return &MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call{Call: _e.mock.On("GetCadenceComponentVersionUpgrade")}
}

func (_c *MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call) Run(run func()) *MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call) Return(_a0 *protocol.ViewBasedActivator[protocol.MagnitudeVersion]) *MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call) RunAndReturn(run func() *protocol.ViewBasedActivator[protocol.MagnitudeVersion]) *MockKVStoreReader_GetCadenceComponentVersionUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// GetEpochExtensionViewCount provides a mock function with no fields
func (_m *MockKVStoreReader) GetEpochExtensionViewCount() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEpochExtensionViewCount")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockKVStoreReader_GetEpochExtensionViewCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpochExtensionViewCount'
type MockKVStoreReader_GetEpochExtensionViewCount_Call struct {
	*mock.Call
}

// GetEpochExtensionViewCount is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetEpochExtensionViewCount() *MockKVStoreReader_GetEpochExtensionViewCount_Call {
	return &MockKVStoreReader_GetEpochExtensionViewCount_Call{Call: _e.mock.On("GetEpochExtensionViewCount")}
}

func (_c *MockKVStoreReader_GetEpochExtensionViewCount_Call) Run(run func()) *MockKVStoreReader_GetEpochExtensionViewCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetEpochExtensionViewCount_Call) Return(_a0 uint64) *MockKVStoreReader_GetEpochExtensionViewCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetEpochExtensionViewCount_Call) RunAndReturn(run func() uint64) *MockKVStoreReader_GetEpochExtensionViewCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetEpochStateID provides a mock function with no fields
func (_m *MockKVStoreReader) GetEpochStateID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEpochStateID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockKVStoreReader_GetEpochStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpochStateID'
type MockKVStoreReader_GetEpochStateID_Call struct {
	*mock.Call
}

// GetEpochStateID is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetEpochStateID() *MockKVStoreReader_GetEpochStateID_Call {
	return &MockKVStoreReader_GetEpochStateID_Call{Call: _e.mock.On("GetEpochStateID")}
}

func (_c *MockKVStoreReader_GetEpochStateID_Call) Run(run func()) *MockKVStoreReader_GetEpochStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetEpochStateID_Call) Return(_a0 flow.Identifier) *MockKVStoreReader_GetEpochStateID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetEpochStateID_Call) RunAndReturn(run func() flow.Identifier) *MockKVStoreReader_GetEpochStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionComponentVersion provides a mock function with no fields
func (_m *MockKVStoreReader) GetExecutionComponentVersion() (protocol.MagnitudeVersion, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionComponentVersion")
	}

	var r0 protocol.MagnitudeVersion
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.MagnitudeVersion, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.MagnitudeVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protocol.MagnitudeVersion)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKVStoreReader_GetExecutionComponentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionComponentVersion'
type MockKVStoreReader_GetExecutionComponentVersion_Call struct {
	*mock.Call
}

// GetExecutionComponentVersion is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetExecutionComponentVersion() *MockKVStoreReader_GetExecutionComponentVersion_Call {
	return &MockKVStoreReader_GetExecutionComponentVersion_Call{Call: _e.mock.On("GetExecutionComponentVersion")}
}

func (_c *MockKVStoreReader_GetExecutionComponentVersion_Call) Run(run func()) *MockKVStoreReader_GetExecutionComponentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetExecutionComponentVersion_Call) Return(_a0 protocol.MagnitudeVersion, _a1 error) *MockKVStoreReader_GetExecutionComponentVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKVStoreReader_GetExecutionComponentVersion_Call) RunAndReturn(run func() (protocol.MagnitudeVersion, error)) *MockKVStoreReader_GetExecutionComponentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionComponentVersionUpgrade provides a mock function with no fields
func (_m *MockKVStoreReader) GetExecutionComponentVersionUpgrade() *protocol.ViewBasedActivator[protocol.MagnitudeVersion] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionComponentVersionUpgrade")
	}

	var r0 *protocol.ViewBasedActivator[protocol.MagnitudeVersion]
	if rf, ok := ret.Get(0).(func() *protocol.ViewBasedActivator[protocol.MagnitudeVersion]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ViewBasedActivator[protocol.MagnitudeVersion])
		}
	}

	return r0
}

// MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionComponentVersionUpgrade'
type MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call struct {
	*mock.Call
}

// GetExecutionComponentVersionUpgrade is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetExecutionComponentVersionUpgrade() *MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call {
	return &MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call{Call: _e.mock.On("GetExecutionComponentVersionUpgrade")}
}

func (_c *MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call) Run(run func()) *MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call) Return(_a0 *protocol.ViewBasedActivator[protocol.MagnitudeVersion]) *MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call) RunAndReturn(run func() *protocol.ViewBasedActivator[protocol.MagnitudeVersion]) *MockKVStoreReader_GetExecutionComponentVersionUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionMeteringParameters provides a mock function with no fields
func (_m *MockKVStoreReader) GetExecutionMeteringParameters() (protocol.ExecutionMeteringParameters, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionMeteringParameters")
	}

	var r0 protocol.ExecutionMeteringParameters
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.ExecutionMeteringParameters, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.ExecutionMeteringParameters); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protocol.ExecutionMeteringParameters)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKVStoreReader_GetExecutionMeteringParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionMeteringParameters'
type MockKVStoreReader_GetExecutionMeteringParameters_Call struct {
	*mock.Call
}

// GetExecutionMeteringParameters is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetExecutionMeteringParameters() *MockKVStoreReader_GetExecutionMeteringParameters_Call {
	return &MockKVStoreReader_GetExecutionMeteringParameters_Call{Call: _e.mock.On("GetExecutionMeteringParameters")}
}

func (_c *MockKVStoreReader_GetExecutionMeteringParameters_Call) Run(run func()) *MockKVStoreReader_GetExecutionMeteringParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetExecutionMeteringParameters_Call) Return(_a0 protocol.ExecutionMeteringParameters, _a1 error) *MockKVStoreReader_GetExecutionMeteringParameters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKVStoreReader_GetExecutionMeteringParameters_Call) RunAndReturn(run func() (protocol.ExecutionMeteringParameters, error)) *MockKVStoreReader_GetExecutionMeteringParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionMeteringParametersUpgrade provides a mock function with no fields
func (_m *MockKVStoreReader) GetExecutionMeteringParametersUpgrade() *protocol.ViewBasedActivator[protocol.ExecutionMeteringParameters] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionMeteringParametersUpgrade")
	}

	var r0 *protocol.ViewBasedActivator[protocol.ExecutionMeteringParameters]
	if rf, ok := ret.Get(0).(func() *protocol.ViewBasedActivator[protocol.ExecutionMeteringParameters]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ViewBasedActivator[protocol.ExecutionMeteringParameters])
		}
	}

	return r0
}

// MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionMeteringParametersUpgrade'
type MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call struct {
	*mock.Call
}

// GetExecutionMeteringParametersUpgrade is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetExecutionMeteringParametersUpgrade() *MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call {
	return &MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call{Call: _e.mock.On("GetExecutionMeteringParametersUpgrade")}
}

func (_c *MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call) Run(run func()) *MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call) Return(_a0 *protocol.ViewBasedActivator[protocol.ExecutionMeteringParameters]) *MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call) RunAndReturn(run func() *protocol.ViewBasedActivator[protocol.ExecutionMeteringParameters]) *MockKVStoreReader_GetExecutionMeteringParametersUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// GetFinalizationSafetyThreshold provides a mock function with no fields
func (_m *MockKVStoreReader) GetFinalizationSafetyThreshold() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFinalizationSafetyThreshold")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockKVStoreReader_GetFinalizationSafetyThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFinalizationSafetyThreshold'
type MockKVStoreReader_GetFinalizationSafetyThreshold_Call struct {
	*mock.Call
}

// GetFinalizationSafetyThreshold is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetFinalizationSafetyThreshold() *MockKVStoreReader_GetFinalizationSafetyThreshold_Call {
	return &MockKVStoreReader_GetFinalizationSafetyThreshold_Call{Call: _e.mock.On("GetFinalizationSafetyThreshold")}
}

func (_c *MockKVStoreReader_GetFinalizationSafetyThreshold_Call) Run(run func()) *MockKVStoreReader_GetFinalizationSafetyThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetFinalizationSafetyThreshold_Call) Return(_a0 uint64) *MockKVStoreReader_GetFinalizationSafetyThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetFinalizationSafetyThreshold_Call) RunAndReturn(run func() uint64) *MockKVStoreReader_GetFinalizationSafetyThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateVersion provides a mock function with no fields
func (_m *MockKVStoreReader) GetProtocolStateVersion() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateVersion")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockKVStoreReader_GetProtocolStateVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateVersion'
type MockKVStoreReader_GetProtocolStateVersion_Call struct {
	*mock.Call
}

// GetProtocolStateVersion is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetProtocolStateVersion() *MockKVStoreReader_GetProtocolStateVersion_Call {
	return &MockKVStoreReader_GetProtocolStateVersion_Call{Call: _e.mock.On("GetProtocolStateVersion")}
}

func (_c *MockKVStoreReader_GetProtocolStateVersion_Call) Run(run func()) *MockKVStoreReader_GetProtocolStateVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetProtocolStateVersion_Call) Return(_a0 uint64) *MockKVStoreReader_GetProtocolStateVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetProtocolStateVersion_Call) RunAndReturn(run func() uint64) *MockKVStoreReader_GetProtocolStateVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionUpgrade provides a mock function with no fields
func (_m *MockKVStoreReader) GetVersionUpgrade() *protocol.ViewBasedActivator[uint64] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersionUpgrade")
	}

	var r0 *protocol.ViewBasedActivator[uint64]
	if rf, ok := ret.Get(0).(func() *protocol.ViewBasedActivator[uint64]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.ViewBasedActivator[uint64])
		}
	}

	return r0
}

// MockKVStoreReader_GetVersionUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionUpgrade'
type MockKVStoreReader_GetVersionUpgrade_Call struct {
	*mock.Call
}

// GetVersionUpgrade is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) GetVersionUpgrade() *MockKVStoreReader_GetVersionUpgrade_Call {
	return &MockKVStoreReader_GetVersionUpgrade_Call{Call: _e.mock.On("GetVersionUpgrade")}
}

func (_c *MockKVStoreReader_GetVersionUpgrade_Call) Run(run func()) *MockKVStoreReader_GetVersionUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_GetVersionUpgrade_Call) Return(_a0 *protocol.ViewBasedActivator[uint64]) *MockKVStoreReader_GetVersionUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_GetVersionUpgrade_Call) RunAndReturn(run func() *protocol.ViewBasedActivator[uint64]) *MockKVStoreReader_GetVersionUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockKVStoreReader) ID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockKVStoreReader_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockKVStoreReader_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) ID() *MockKVStoreReader_ID_Call {
	return &MockKVStoreReader_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockKVStoreReader_ID_Call) Run(run func()) *MockKVStoreReader_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_ID_Call) Return(_a0 flow.Identifier) *MockKVStoreReader_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKVStoreReader_ID_Call) RunAndReturn(run func() flow.Identifier) *MockKVStoreReader_ID_Call {
	_c.Call.Return(run)
	return _c
}

// VersionedEncode provides a mock function with no fields
func (_m *MockKVStoreReader) VersionedEncode() (uint64, []byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VersionedEncode")
	}

	var r0 uint64
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() (uint64, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockKVStoreReader_VersionedEncode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VersionedEncode'
type MockKVStoreReader_VersionedEncode_Call struct {
	*mock.Call
}

// VersionedEncode is a helper method to define mock.On call
func (_e *MockKVStoreReader_Expecter) VersionedEncode() *MockKVStoreReader_VersionedEncode_Call {
	return &MockKVStoreReader_VersionedEncode_Call{Call: _e.mock.On("VersionedEncode")}
}

func (_c *MockKVStoreReader_VersionedEncode_Call) Run(run func()) *MockKVStoreReader_VersionedEncode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKVStoreReader_VersionedEncode_Call) Return(_a0 uint64, _a1 []byte, _a2 error) *MockKVStoreReader_VersionedEncode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockKVStoreReader_VersionedEncode_Call) RunAndReturn(run func() (uint64, []byte, error)) *MockKVStoreReader_VersionedEncode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKVStoreReader creates a new instance of MockKVStoreReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKVStoreReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKVStoreReader {
	mock := &MockKVStoreReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
