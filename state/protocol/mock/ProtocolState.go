// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockProtocolState is an autogenerated mock type for the ProtocolState type
type MockProtocolState struct {
	mock.Mock
}

type MockProtocolState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProtocolState) EXPECT() *MockProtocolState_Expecter {
	return &MockProtocolState_Expecter{mock: &_m.Mock}
}

// EpochStateAtBlockID provides a mock function with given fields: blockID
func (_m *MockProtocolState) EpochStateAtBlockID(blockID flow.Identifier) (protocol.EpochProtocolState, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for EpochStateAtBlockID")
	}

	var r0 protocol.EpochProtocolState
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (protocol.EpochProtocolState, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) protocol.EpochProtocolState); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.EpochProtocolState)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProtocolState_EpochStateAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochStateAtBlockID'
type MockProtocolState_EpochStateAtBlockID_Call struct {
	*mock.Call
}

// EpochStateAtBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockProtocolState_Expecter) EpochStateAtBlockID(blockID interface{}) *MockProtocolState_EpochStateAtBlockID_Call {
	return &MockProtocolState_EpochStateAtBlockID_Call{Call: _e.mock.On("EpochStateAtBlockID", blockID)}
}

func (_c *MockProtocolState_EpochStateAtBlockID_Call) Run(run func(blockID flow.Identifier)) *MockProtocolState_EpochStateAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockProtocolState_EpochStateAtBlockID_Call) Return(_a0 protocol.EpochProtocolState, _a1 error) *MockProtocolState_EpochStateAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProtocolState_EpochStateAtBlockID_Call) RunAndReturn(run func(flow.Identifier) (protocol.EpochProtocolState, error)) *MockProtocolState_EpochStateAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalParams provides a mock function with no fields
func (_m *MockProtocolState) GlobalParams() protocol.GlobalParams {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalParams")
	}

	var r0 protocol.GlobalParams
	if rf, ok := ret.Get(0).(func() protocol.GlobalParams); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.GlobalParams)
		}
	}

	return r0
}

// MockProtocolState_GlobalParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalParams'
type MockProtocolState_GlobalParams_Call struct {
	*mock.Call
}

// GlobalParams is a helper method to define mock.On call
func (_e *MockProtocolState_Expecter) GlobalParams() *MockProtocolState_GlobalParams_Call {
	return &MockProtocolState_GlobalParams_Call{Call: _e.mock.On("GlobalParams")}
}

func (_c *MockProtocolState_GlobalParams_Call) Run(run func()) *MockProtocolState_GlobalParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProtocolState_GlobalParams_Call) Return(_a0 protocol.GlobalParams) *MockProtocolState_GlobalParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtocolState_GlobalParams_Call) RunAndReturn(run func() protocol.GlobalParams) *MockProtocolState_GlobalParams_Call {
	_c.Call.Return(run)
	return _c
}

// KVStoreAtBlockID provides a mock function with given fields: blockID
func (_m *MockProtocolState) KVStoreAtBlockID(blockID flow.Identifier) (protocol.KVStoreReader, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for KVStoreAtBlockID")
	}

	var r0 protocol.KVStoreReader
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (protocol.KVStoreReader, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) protocol.KVStoreReader); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.KVStoreReader)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProtocolState_KVStoreAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KVStoreAtBlockID'
type MockProtocolState_KVStoreAtBlockID_Call struct {
	*mock.Call
}

// KVStoreAtBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockProtocolState_Expecter) KVStoreAtBlockID(blockID interface{}) *MockProtocolState_KVStoreAtBlockID_Call {
	return &MockProtocolState_KVStoreAtBlockID_Call{Call: _e.mock.On("KVStoreAtBlockID", blockID)}
}

func (_c *MockProtocolState_KVStoreAtBlockID_Call) Run(run func(blockID flow.Identifier)) *MockProtocolState_KVStoreAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockProtocolState_KVStoreAtBlockID_Call) Return(_a0 protocol.KVStoreReader, _a1 error) *MockProtocolState_KVStoreAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProtocolState_KVStoreAtBlockID_Call) RunAndReturn(run func(flow.Identifier) (protocol.KVStoreReader, error)) *MockProtocolState_KVStoreAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProtocolState creates a new instance of MockProtocolState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProtocolState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProtocolState {
	mock := &MockProtocolState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
