// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// InitialProtocolState is an autogenerated mock type for the InitialProtocolState type
type InitialProtocolState struct {
	mock.Mock
}

// Clustering provides a mock function with given fields:
func (_m *InitialProtocolState) Clustering() (flow.ClusterList, error) {
	ret := _m.Called()

	var r0 flow.ClusterList
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.ClusterList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.ClusterList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ClusterList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DKG provides a mock function with given fields:
func (_m *InitialProtocolState) DKG() (protocol.DKG, error) {
	ret := _m.Called()

	var r0 protocol.DKG
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.DKG, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.DKG); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.DKG)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Entry provides a mock function with given fields:
func (_m *InitialProtocolState) Entry() *flow.RichProtocolStateEntry {
	ret := _m.Called()

	var r0 *flow.RichProtocolStateEntry
	if rf, ok := ret.Get(0).(func() *flow.RichProtocolStateEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichProtocolStateEntry)
		}
	}

	return r0
}

// Epoch provides a mock function with given fields:
func (_m *InitialProtocolState) Epoch() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EpochCommit provides a mock function with given fields:
func (_m *InitialProtocolState) EpochCommit() *flow.EpochCommit {
	ret := _m.Called()

	var r0 *flow.EpochCommit
	if rf, ok := ret.Get(0).(func() *flow.EpochCommit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochCommit)
		}
	}

	return r0
}

// EpochSetup provides a mock function with given fields:
func (_m *InitialProtocolState) EpochSetup() *flow.EpochSetup {
	ret := _m.Called()

	var r0 *flow.EpochSetup
	if rf, ok := ret.Get(0).(func() *flow.EpochSetup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochSetup)
		}
	}

	return r0
}

type mockConstructorTestingTNewInitialProtocolState interface {
	mock.TestingT
	Cleanup(func())
}

// NewInitialProtocolState creates a new instance of InitialProtocolState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInitialProtocolState(t mockConstructorTestingTNewInitialProtocolState) *InitialProtocolState {
	mock := &InitialProtocolState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
