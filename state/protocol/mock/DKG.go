// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockDKG is an autogenerated mock type for the DKG type
type MockDKG struct {
	mock.Mock
}

type MockDKG_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDKG) EXPECT() *MockDKG_Expecter {
	return &MockDKG_Expecter{mock: &_m.Mock}
}

// GroupKey provides a mock function with no fields
func (_m *MockDKG) GroupKey() crypto.PublicKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroupKey")
	}

	var r0 crypto.PublicKey
	if rf, ok := ret.Get(0).(func() crypto.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	return r0
}

// MockDKG_GroupKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupKey'
type MockDKG_GroupKey_Call struct {
	*mock.Call
}

// GroupKey is a helper method to define mock.On call
func (_e *MockDKG_Expecter) GroupKey() *MockDKG_GroupKey_Call {
	return &MockDKG_GroupKey_Call{Call: _e.mock.On("GroupKey")}
}

func (_c *MockDKG_GroupKey_Call) Run(run func()) *MockDKG_GroupKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKG_GroupKey_Call) Return(_a0 crypto.PublicKey) *MockDKG_GroupKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKG_GroupKey_Call) RunAndReturn(run func() crypto.PublicKey) *MockDKG_GroupKey_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: nodeID
func (_m *MockDKG) Index(nodeID flow.Identifier) (uint, error) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (uint, error)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) uint); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKG_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockDKG_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - nodeID flow.Identifier
func (_e *MockDKG_Expecter) Index(nodeID interface{}) *MockDKG_Index_Call {
	return &MockDKG_Index_Call{Call: _e.mock.On("Index", nodeID)}
}

func (_c *MockDKG_Index_Call) Run(run func(nodeID flow.Identifier)) *MockDKG_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockDKG_Index_Call) Return(_a0 uint, _a1 error) *MockDKG_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKG_Index_Call) RunAndReturn(run func(flow.Identifier) (uint, error)) *MockDKG_Index_Call {
	_c.Call.Return(run)
	return _c
}

// KeyShare provides a mock function with given fields: nodeID
func (_m *MockDKG) KeyShare(nodeID flow.Identifier) (crypto.PublicKey, error) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for KeyShare")
	}

	var r0 crypto.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (crypto.PublicKey, error)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) crypto.PublicKey); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKG_KeyShare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyShare'
type MockDKG_KeyShare_Call struct {
	*mock.Call
}

// KeyShare is a helper method to define mock.On call
//   - nodeID flow.Identifier
func (_e *MockDKG_Expecter) KeyShare(nodeID interface{}) *MockDKG_KeyShare_Call {
	return &MockDKG_KeyShare_Call{Call: _e.mock.On("KeyShare", nodeID)}
}

func (_c *MockDKG_KeyShare_Call) Run(run func(nodeID flow.Identifier)) *MockDKG_KeyShare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockDKG_KeyShare_Call) Return(_a0 crypto.PublicKey, _a1 error) *MockDKG_KeyShare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKG_KeyShare_Call) RunAndReturn(run func(flow.Identifier) (crypto.PublicKey, error)) *MockDKG_KeyShare_Call {
	_c.Call.Return(run)
	return _c
}

// KeyShares provides a mock function with no fields
func (_m *MockDKG) KeyShares() []crypto.PublicKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyShares")
	}

	var r0 []crypto.PublicKey
	if rf, ok := ret.Get(0).(func() []crypto.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crypto.PublicKey)
		}
	}

	return r0
}

// MockDKG_KeyShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyShares'
type MockDKG_KeyShares_Call struct {
	*mock.Call
}

// KeyShares is a helper method to define mock.On call
func (_e *MockDKG_Expecter) KeyShares() *MockDKG_KeyShares_Call {
	return &MockDKG_KeyShares_Call{Call: _e.mock.On("KeyShares")}
}

func (_c *MockDKG_KeyShares_Call) Run(run func()) *MockDKG_KeyShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKG_KeyShares_Call) Return(_a0 []crypto.PublicKey) *MockDKG_KeyShares_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKG_KeyShares_Call) RunAndReturn(run func() []crypto.PublicKey) *MockDKG_KeyShares_Call {
	_c.Call.Return(run)
	return _c
}

// NodeID provides a mock function with given fields: index
func (_m *MockDKG) NodeID(index uint) (flow.Identifier, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for NodeID")
	}

	var r0 flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (flow.Identifier, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint) flow.Identifier); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKG_NodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeID'
type MockDKG_NodeID_Call struct {
	*mock.Call
}

// NodeID is a helper method to define mock.On call
//   - index uint
func (_e *MockDKG_Expecter) NodeID(index interface{}) *MockDKG_NodeID_Call {
	return &MockDKG_NodeID_Call{Call: _e.mock.On("NodeID", index)}
}

func (_c *MockDKG_NodeID_Call) Run(run func(index uint)) *MockDKG_NodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockDKG_NodeID_Call) Return(_a0 flow.Identifier, _a1 error) *MockDKG_NodeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKG_NodeID_Call) RunAndReturn(run func(uint) (flow.Identifier, error)) *MockDKG_NodeID_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockDKG) Size() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockDKG_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockDKG_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockDKG_Expecter) Size() *MockDKG_Size_Call {
	return &MockDKG_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockDKG_Size_Call) Run(run func()) *MockDKG_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDKG_Size_Call) Return(_a0 uint) *MockDKG_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKG_Size_Call) RunAndReturn(run func() uint) *MockDKG_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDKG creates a new instance of MockDKG. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDKG(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDKG {
	mock := &MockDKG{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
