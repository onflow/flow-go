// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockSnapshot is an autogenerated mock type for the Snapshot type
type MockSnapshot struct {
	mock.Mock
}

type MockSnapshot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSnapshot) EXPECT() *MockSnapshot_Expecter {
	return &MockSnapshot_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with no fields
func (_m *MockSnapshot) Commit() (flow.StateCommitment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 flow.StateCommitment
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.StateCommitment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.StateCommitment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockSnapshot_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Commit() *MockSnapshot_Commit_Call {
	return &MockSnapshot_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockSnapshot_Commit_Call) Run(run func()) *MockSnapshot_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Commit_Call) Return(_a0 flow.StateCommitment, _a1 error) *MockSnapshot_Commit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Commit_Call) RunAndReturn(run func() (flow.StateCommitment, error)) *MockSnapshot_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Descendants provides a mock function with no fields
func (_m *MockSnapshot) Descendants() ([]flow.Identifier, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Descendants")
	}

	var r0 []flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]flow.Identifier, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Descendants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Descendants'
type MockSnapshot_Descendants_Call struct {
	*mock.Call
}

// Descendants is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Descendants() *MockSnapshot_Descendants_Call {
	return &MockSnapshot_Descendants_Call{Call: _e.mock.On("Descendants")}
}

func (_c *MockSnapshot_Descendants_Call) Run(run func()) *MockSnapshot_Descendants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Descendants_Call) Return(_a0 []flow.Identifier, _a1 error) *MockSnapshot_Descendants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Descendants_Call) RunAndReturn(run func() ([]flow.Identifier, error)) *MockSnapshot_Descendants_Call {
	_c.Call.Return(run)
	return _c
}

// EpochPhase provides a mock function with no fields
func (_m *MockSnapshot) EpochPhase() (flow.EpochPhase, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochPhase")
	}

	var r0 flow.EpochPhase
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.EpochPhase, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.EpochPhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(flow.EpochPhase)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_EpochPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochPhase'
type MockSnapshot_EpochPhase_Call struct {
	*mock.Call
}

// EpochPhase is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) EpochPhase() *MockSnapshot_EpochPhase_Call {
	return &MockSnapshot_EpochPhase_Call{Call: _e.mock.On("EpochPhase")}
}

func (_c *MockSnapshot_EpochPhase_Call) Run(run func()) *MockSnapshot_EpochPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_EpochPhase_Call) Return(_a0 flow.EpochPhase, _a1 error) *MockSnapshot_EpochPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_EpochPhase_Call) RunAndReturn(run func() (flow.EpochPhase, error)) *MockSnapshot_EpochPhase_Call {
	_c.Call.Return(run)
	return _c
}

// EpochProtocolState provides a mock function with no fields
func (_m *MockSnapshot) EpochProtocolState() (protocol.EpochProtocolState, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochProtocolState")
	}

	var r0 protocol.EpochProtocolState
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.EpochProtocolState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.EpochProtocolState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.EpochProtocolState)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_EpochProtocolState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochProtocolState'
type MockSnapshot_EpochProtocolState_Call struct {
	*mock.Call
}

// EpochProtocolState is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) EpochProtocolState() *MockSnapshot_EpochProtocolState_Call {
	return &MockSnapshot_EpochProtocolState_Call{Call: _e.mock.On("EpochProtocolState")}
}

func (_c *MockSnapshot_EpochProtocolState_Call) Run(run func()) *MockSnapshot_EpochProtocolState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_EpochProtocolState_Call) Return(_a0 protocol.EpochProtocolState, _a1 error) *MockSnapshot_EpochProtocolState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_EpochProtocolState_Call) RunAndReturn(run func() (protocol.EpochProtocolState, error)) *MockSnapshot_EpochProtocolState_Call {
	_c.Call.Return(run)
	return _c
}

// Epochs provides a mock function with no fields
func (_m *MockSnapshot) Epochs() protocol.EpochQuery {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Epochs")
	}

	var r0 protocol.EpochQuery
	if rf, ok := ret.Get(0).(func() protocol.EpochQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.EpochQuery)
		}
	}

	return r0
}

// MockSnapshot_Epochs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Epochs'
type MockSnapshot_Epochs_Call struct {
	*mock.Call
}

// Epochs is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Epochs() *MockSnapshot_Epochs_Call {
	return &MockSnapshot_Epochs_Call{Call: _e.mock.On("Epochs")}
}

func (_c *MockSnapshot_Epochs_Call) Run(run func()) *MockSnapshot_Epochs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Epochs_Call) Return(_a0 protocol.EpochQuery) *MockSnapshot_Epochs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnapshot_Epochs_Call) RunAndReturn(run func() protocol.EpochQuery) *MockSnapshot_Epochs_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function with no fields
func (_m *MockSnapshot) Head() (*flow.Header, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.Header, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type MockSnapshot_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Head() *MockSnapshot_Head_Call {
	return &MockSnapshot_Head_Call{Call: _e.mock.On("Head")}
}

func (_c *MockSnapshot_Head_Call) Run(run func()) *MockSnapshot_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Head_Call) Return(_a0 *flow.Header, _a1 error) *MockSnapshot_Head_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Head_Call) RunAndReturn(run func() (*flow.Header, error)) *MockSnapshot_Head_Call {
	_c.Call.Return(run)
	return _c
}

// Identities provides a mock function with given fields: selector
func (_m *MockSnapshot) Identities(selector flow.IdentityFilter[flow.Identity]) (flow.GenericIdentityList[flow.Identity], error) {
	ret := _m.Called(selector)

	if len(ret) == 0 {
		panic("no return value specified for Identities")
	}

	var r0 flow.GenericIdentityList[flow.Identity]
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.IdentityFilter[flow.Identity]) (flow.GenericIdentityList[flow.Identity], error)); ok {
		return rf(selector)
	}
	if rf, ok := ret.Get(0).(func(flow.IdentityFilter[flow.Identity]) flow.GenericIdentityList[flow.Identity]); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.Identity])
		}
	}

	if rf, ok := ret.Get(1).(func(flow.IdentityFilter[flow.Identity]) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Identities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identities'
type MockSnapshot_Identities_Call struct {
	*mock.Call
}

// Identities is a helper method to define mock.On call
//   - selector flow.IdentityFilter[flow.Identity]
func (_e *MockSnapshot_Expecter) Identities(selector interface{}) *MockSnapshot_Identities_Call {
	return &MockSnapshot_Identities_Call{Call: _e.mock.On("Identities", selector)}
}

func (_c *MockSnapshot_Identities_Call) Run(run func(selector flow.IdentityFilter[flow.Identity])) *MockSnapshot_Identities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.IdentityFilter[flow.Identity]))
	})
	return _c
}

func (_c *MockSnapshot_Identities_Call) Return(_a0 flow.GenericIdentityList[flow.Identity], _a1 error) *MockSnapshot_Identities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Identities_Call) RunAndReturn(run func(flow.IdentityFilter[flow.Identity]) (flow.GenericIdentityList[flow.Identity], error)) *MockSnapshot_Identities_Call {
	_c.Call.Return(run)
	return _c
}

// Identity provides a mock function with given fields: nodeID
func (_m *MockSnapshot) Identity(nodeID flow.Identifier) (*flow.Identity, error) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for Identity")
	}

	var r0 *flow.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Identity, error)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Identity); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Identity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identity'
type MockSnapshot_Identity_Call struct {
	*mock.Call
}

// Identity is a helper method to define mock.On call
//   - nodeID flow.Identifier
func (_e *MockSnapshot_Expecter) Identity(nodeID interface{}) *MockSnapshot_Identity_Call {
	return &MockSnapshot_Identity_Call{Call: _e.mock.On("Identity", nodeID)}
}

func (_c *MockSnapshot_Identity_Call) Run(run func(nodeID flow.Identifier)) *MockSnapshot_Identity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockSnapshot_Identity_Call) Return(_a0 *flow.Identity, _a1 error) *MockSnapshot_Identity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Identity_Call) RunAndReturn(run func(flow.Identifier) (*flow.Identity, error)) *MockSnapshot_Identity_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with no fields
func (_m *MockSnapshot) Params() protocol.GlobalParams {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 protocol.GlobalParams
	if rf, ok := ret.Get(0).(func() protocol.GlobalParams); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.GlobalParams)
		}
	}

	return r0
}

// MockSnapshot_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockSnapshot_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Params() *MockSnapshot_Params_Call {
	return &MockSnapshot_Params_Call{Call: _e.mock.On("Params")}
}

func (_c *MockSnapshot_Params_Call) Run(run func()) *MockSnapshot_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Params_Call) Return(_a0 protocol.GlobalParams) *MockSnapshot_Params_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnapshot_Params_Call) RunAndReturn(run func() protocol.GlobalParams) *MockSnapshot_Params_Call {
	_c.Call.Return(run)
	return _c
}

// ProtocolState provides a mock function with no fields
func (_m *MockSnapshot) ProtocolState() (protocol.KVStoreReader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProtocolState")
	}

	var r0 protocol.KVStoreReader
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.KVStoreReader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.KVStoreReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.KVStoreReader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_ProtocolState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtocolState'
type MockSnapshot_ProtocolState_Call struct {
	*mock.Call
}

// ProtocolState is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) ProtocolState() *MockSnapshot_ProtocolState_Call {
	return &MockSnapshot_ProtocolState_Call{Call: _e.mock.On("ProtocolState")}
}

func (_c *MockSnapshot_ProtocolState_Call) Run(run func()) *MockSnapshot_ProtocolState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_ProtocolState_Call) Return(_a0 protocol.KVStoreReader, _a1 error) *MockSnapshot_ProtocolState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_ProtocolState_Call) RunAndReturn(run func() (protocol.KVStoreReader, error)) *MockSnapshot_ProtocolState_Call {
	_c.Call.Return(run)
	return _c
}

// QuorumCertificate provides a mock function with no fields
func (_m *MockSnapshot) QuorumCertificate() (*flow.QuorumCertificate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QuorumCertificate")
	}

	var r0 *flow.QuorumCertificate
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.QuorumCertificate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.QuorumCertificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.QuorumCertificate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_QuorumCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuorumCertificate'
type MockSnapshot_QuorumCertificate_Call struct {
	*mock.Call
}

// QuorumCertificate is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) QuorumCertificate() *MockSnapshot_QuorumCertificate_Call {
	return &MockSnapshot_QuorumCertificate_Call{Call: _e.mock.On("QuorumCertificate")}
}

func (_c *MockSnapshot_QuorumCertificate_Call) Run(run func()) *MockSnapshot_QuorumCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_QuorumCertificate_Call) Return(_a0 *flow.QuorumCertificate, _a1 error) *MockSnapshot_QuorumCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_QuorumCertificate_Call) RunAndReturn(run func() (*flow.QuorumCertificate, error)) *MockSnapshot_QuorumCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// RandomSource provides a mock function with no fields
func (_m *MockSnapshot) RandomSource() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RandomSource")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_RandomSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomSource'
type MockSnapshot_RandomSource_Call struct {
	*mock.Call
}

// RandomSource is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) RandomSource() *MockSnapshot_RandomSource_Call {
	return &MockSnapshot_RandomSource_Call{Call: _e.mock.On("RandomSource")}
}

func (_c *MockSnapshot_RandomSource_Call) Run(run func()) *MockSnapshot_RandomSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_RandomSource_Call) Return(_a0 []byte, _a1 error) *MockSnapshot_RandomSource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_RandomSource_Call) RunAndReturn(run func() ([]byte, error)) *MockSnapshot_RandomSource_Call {
	_c.Call.Return(run)
	return _c
}

// SealedResult provides a mock function with no fields
func (_m *MockSnapshot) SealedResult() (*flow.ExecutionResult, *flow.Seal, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SealedResult")
	}

	var r0 *flow.ExecutionResult
	var r1 *flow.Seal
	var r2 error
	if rf, ok := ret.Get(0).(func() (*flow.ExecutionResult, *flow.Seal, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.ExecutionResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func() *flow.Seal); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*flow.Seal)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSnapshot_SealedResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SealedResult'
type MockSnapshot_SealedResult_Call struct {
	*mock.Call
}

// SealedResult is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) SealedResult() *MockSnapshot_SealedResult_Call {
	return &MockSnapshot_SealedResult_Call{Call: _e.mock.On("SealedResult")}
}

func (_c *MockSnapshot_SealedResult_Call) Run(run func()) *MockSnapshot_SealedResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_SealedResult_Call) Return(_a0 *flow.ExecutionResult, _a1 *flow.Seal, _a2 error) *MockSnapshot_SealedResult_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSnapshot_SealedResult_Call) RunAndReturn(run func() (*flow.ExecutionResult, *flow.Seal, error)) *MockSnapshot_SealedResult_Call {
	_c.Call.Return(run)
	return _c
}

// SealingSegment provides a mock function with no fields
func (_m *MockSnapshot) SealingSegment() (*flow.SealingSegment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SealingSegment")
	}

	var r0 *flow.SealingSegment
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.SealingSegment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.SealingSegment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.SealingSegment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_SealingSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SealingSegment'
type MockSnapshot_SealingSegment_Call struct {
	*mock.Call
}

// SealingSegment is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) SealingSegment() *MockSnapshot_SealingSegment_Call {
	return &MockSnapshot_SealingSegment_Call{Call: _e.mock.On("SealingSegment")}
}

func (_c *MockSnapshot_SealingSegment_Call) Run(run func()) *MockSnapshot_SealingSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_SealingSegment_Call) Return(_a0 *flow.SealingSegment, _a1 error) *MockSnapshot_SealingSegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_SealingSegment_Call) RunAndReturn(run func() (*flow.SealingSegment, error)) *MockSnapshot_SealingSegment_Call {
	_c.Call.Return(run)
	return _c
}

// VersionBeacon provides a mock function with no fields
func (_m *MockSnapshot) VersionBeacon() (*flow.SealedVersionBeacon, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VersionBeacon")
	}

	var r0 *flow.SealedVersionBeacon
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.SealedVersionBeacon, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.SealedVersionBeacon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.SealedVersionBeacon)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_VersionBeacon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VersionBeacon'
type MockSnapshot_VersionBeacon_Call struct {
	*mock.Call
}

// VersionBeacon is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) VersionBeacon() *MockSnapshot_VersionBeacon_Call {
	return &MockSnapshot_VersionBeacon_Call{Call: _e.mock.On("VersionBeacon")}
}

func (_c *MockSnapshot_VersionBeacon_Call) Run(run func()) *MockSnapshot_VersionBeacon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_VersionBeacon_Call) Return(_a0 *flow.SealedVersionBeacon, _a1 error) *MockSnapshot_VersionBeacon_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_VersionBeacon_Call) RunAndReturn(run func() (*flow.SealedVersionBeacon, error)) *MockSnapshot_VersionBeacon_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSnapshot creates a new instance of MockSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSnapshot {
	mock := &MockSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
