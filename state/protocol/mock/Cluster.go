// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	cluster "github.com/onflow/flow-go/model/cluster"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockCluster is an autogenerated mock type for the Cluster type
type MockCluster struct {
	mock.Mock
}

type MockCluster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCluster) EXPECT() *MockCluster_Expecter {
	return &MockCluster_Expecter{mock: &_m.Mock}
}

// ChainID provides a mock function with no fields
func (_m *MockCluster) ChainID() flow.ChainID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 flow.ChainID
	if rf, ok := ret.Get(0).(func() flow.ChainID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(flow.ChainID)
	}

	return r0
}

// MockCluster_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type MockCluster_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *MockCluster_Expecter) ChainID() *MockCluster_ChainID_Call {
	return &MockCluster_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *MockCluster_ChainID_Call) Run(run func()) *MockCluster_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_ChainID_Call) Return(_a0 flow.ChainID) *MockCluster_ChainID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCluster_ChainID_Call) RunAndReturn(run func() flow.ChainID) *MockCluster_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// EpochCounter provides a mock function with no fields
func (_m *MockCluster) EpochCounter() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochCounter")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCluster_EpochCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochCounter'
type MockCluster_EpochCounter_Call struct {
	*mock.Call
}

// EpochCounter is a helper method to define mock.On call
func (_e *MockCluster_Expecter) EpochCounter() *MockCluster_EpochCounter_Call {
	return &MockCluster_EpochCounter_Call{Call: _e.mock.On("EpochCounter")}
}

func (_c *MockCluster_EpochCounter_Call) Run(run func()) *MockCluster_EpochCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_EpochCounter_Call) Return(_a0 uint64) *MockCluster_EpochCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCluster_EpochCounter_Call) RunAndReturn(run func() uint64) *MockCluster_EpochCounter_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with no fields
func (_m *MockCluster) Index() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockCluster_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockCluster_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
func (_e *MockCluster_Expecter) Index() *MockCluster_Index_Call {
	return &MockCluster_Index_Call{Call: _e.mock.On("Index")}
}

func (_c *MockCluster_Index_Call) Run(run func()) *MockCluster_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_Index_Call) Return(_a0 uint) *MockCluster_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCluster_Index_Call) RunAndReturn(run func() uint) *MockCluster_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Members provides a mock function with no fields
func (_m *MockCluster) Members() flow.GenericIdentityList[flow.IdentitySkeleton] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Members")
	}

	var r0 flow.GenericIdentityList[flow.IdentitySkeleton]
	if rf, ok := ret.Get(0).(func() flow.GenericIdentityList[flow.IdentitySkeleton]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.IdentitySkeleton])
		}
	}

	return r0
}

// MockCluster_Members_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Members'
type MockCluster_Members_Call struct {
	*mock.Call
}

// Members is a helper method to define mock.On call
func (_e *MockCluster_Expecter) Members() *MockCluster_Members_Call {
	return &MockCluster_Members_Call{Call: _e.mock.On("Members")}
}

func (_c *MockCluster_Members_Call) Run(run func()) *MockCluster_Members_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_Members_Call) Return(_a0 flow.GenericIdentityList[flow.IdentitySkeleton]) *MockCluster_Members_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCluster_Members_Call) RunAndReturn(run func() flow.GenericIdentityList[flow.IdentitySkeleton]) *MockCluster_Members_Call {
	_c.Call.Return(run)
	return _c
}

// RootBlock provides a mock function with no fields
func (_m *MockCluster) RootBlock() *cluster.Block {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RootBlock")
	}

	var r0 *cluster.Block
	if rf, ok := ret.Get(0).(func() *cluster.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.Block)
		}
	}

	return r0
}

// MockCluster_RootBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootBlock'
type MockCluster_RootBlock_Call struct {
	*mock.Call
}

// RootBlock is a helper method to define mock.On call
func (_e *MockCluster_Expecter) RootBlock() *MockCluster_RootBlock_Call {
	return &MockCluster_RootBlock_Call{Call: _e.mock.On("RootBlock")}
}

func (_c *MockCluster_RootBlock_Call) Run(run func()) *MockCluster_RootBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_RootBlock_Call) Return(_a0 *cluster.Block) *MockCluster_RootBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCluster_RootBlock_Call) RunAndReturn(run func() *cluster.Block) *MockCluster_RootBlock_Call {
	_c.Call.Return(run)
	return _c
}

// RootQC provides a mock function with no fields
func (_m *MockCluster) RootQC() *flow.QuorumCertificate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RootQC")
	}

	var r0 *flow.QuorumCertificate
	if rf, ok := ret.Get(0).(func() *flow.QuorumCertificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.QuorumCertificate)
		}
	}

	return r0
}

// MockCluster_RootQC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootQC'
type MockCluster_RootQC_Call struct {
	*mock.Call
}

// RootQC is a helper method to define mock.On call
func (_e *MockCluster_Expecter) RootQC() *MockCluster_RootQC_Call {
	return &MockCluster_RootQC_Call{Call: _e.mock.On("RootQC")}
}

func (_c *MockCluster_RootQC_Call) Run(run func()) *MockCluster_RootQC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCluster_RootQC_Call) Return(_a0 *flow.QuorumCertificate) *MockCluster_RootQC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCluster_RootQC_Call) RunAndReturn(run func() *flow.QuorumCertificate) *MockCluster_RootQC_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCluster creates a new instance of MockCluster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCluster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCluster {
	mock := &MockCluster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
