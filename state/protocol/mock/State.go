// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockState is an autogenerated mock type for the State type
type MockState struct {
	mock.Mock
}

type MockState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockState) EXPECT() *MockState_Expecter {
	return &MockState_Expecter{mock: &_m.Mock}
}

// AtBlockID provides a mock function with given fields: blockID
func (_m *MockState) AtBlockID(blockID flow.Identifier) protocol.Snapshot {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for AtBlockID")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(flow.Identifier) protocol.Snapshot); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockState_AtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AtBlockID'
type MockState_AtBlockID_Call struct {
	*mock.Call
}

// AtBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockState_Expecter) AtBlockID(blockID interface{}) *MockState_AtBlockID_Call {
	return &MockState_AtBlockID_Call{Call: _e.mock.On("AtBlockID", blockID)}
}

func (_c *MockState_AtBlockID_Call) Run(run func(blockID flow.Identifier)) *MockState_AtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockState_AtBlockID_Call) Return(_a0 protocol.Snapshot) *MockState_AtBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_AtBlockID_Call) RunAndReturn(run func(flow.Identifier) protocol.Snapshot) *MockState_AtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// AtHeight provides a mock function with given fields: height
func (_m *MockState) AtHeight(height uint64) protocol.Snapshot {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for AtHeight")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(uint64) protocol.Snapshot); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockState_AtHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AtHeight'
type MockState_AtHeight_Call struct {
	*mock.Call
}

// AtHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockState_Expecter) AtHeight(height interface{}) *MockState_AtHeight_Call {
	return &MockState_AtHeight_Call{Call: _e.mock.On("AtHeight", height)}
}

func (_c *MockState_AtHeight_Call) Run(run func(height uint64)) *MockState_AtHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockState_AtHeight_Call) Return(_a0 protocol.Snapshot) *MockState_AtHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_AtHeight_Call) RunAndReturn(run func(uint64) protocol.Snapshot) *MockState_AtHeight_Call {
	_c.Call.Return(run)
	return _c
}

// Final provides a mock function with no fields
func (_m *MockState) Final() protocol.Snapshot {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Final")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockState_Final_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Final'
type MockState_Final_Call struct {
	*mock.Call
}

// Final is a helper method to define mock.On call
func (_e *MockState_Expecter) Final() *MockState_Final_Call {
	return &MockState_Final_Call{Call: _e.mock.On("Final")}
}

func (_c *MockState_Final_Call) Run(run func()) *MockState_Final_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_Final_Call) Return(_a0 protocol.Snapshot) *MockState_Final_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Final_Call) RunAndReturn(run func() protocol.Snapshot) *MockState_Final_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with no fields
func (_m *MockState) Params() protocol.Params {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 protocol.Params
	if rf, ok := ret.Get(0).(func() protocol.Params); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Params)
		}
	}

	return r0
}

// MockState_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockState_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
func (_e *MockState_Expecter) Params() *MockState_Params_Call {
	return &MockState_Params_Call{Call: _e.mock.On("Params")}
}

func (_c *MockState_Params_Call) Run(run func()) *MockState_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_Params_Call) Return(_a0 protocol.Params) *MockState_Params_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Params_Call) RunAndReturn(run func() protocol.Params) *MockState_Params_Call {
	_c.Call.Return(run)
	return _c
}

// Sealed provides a mock function with no fields
func (_m *MockState) Sealed() protocol.Snapshot {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sealed")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockState_Sealed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sealed'
type MockState_Sealed_Call struct {
	*mock.Call
}

// Sealed is a helper method to define mock.On call
func (_e *MockState_Expecter) Sealed() *MockState_Sealed_Call {
	return &MockState_Sealed_Call{Call: _e.mock.On("Sealed")}
}

func (_c *MockState_Sealed_Call) Run(run func()) *MockState_Sealed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockState_Sealed_Call) Return(_a0 protocol.Snapshot) *MockState_Sealed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockState_Sealed_Call) RunAndReturn(run func() protocol.Snapshot) *MockState_Sealed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockState creates a new instance of MockState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockState {
	mock := &MockState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
