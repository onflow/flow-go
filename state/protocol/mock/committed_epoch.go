// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// CommittedEpoch is an autogenerated mock type for the CommittedEpoch type
type CommittedEpoch struct {
	mock.Mock
}

// Cluster provides a mock function with given fields: index
func (_m *CommittedEpoch) Cluster(index uint) (protocol.Cluster, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for Cluster")
	}

	var r0 protocol.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (protocol.Cluster, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint) protocol.Cluster); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterByChainID provides a mock function with given fields: chainID
func (_m *CommittedEpoch) ClusterByChainID(chainID flow.ChainID) (protocol.Cluster, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterByChainID")
	}

	var r0 protocol.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.ChainID) (protocol.Cluster, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(flow.ChainID) protocol.Cluster); ok {
		r0 = rf(chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.ChainID) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clustering provides a mock function with given fields:
func (_m *CommittedEpoch) Clustering() (flow.ClusterList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clustering")
	}

	var r0 flow.ClusterList
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.ClusterList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.ClusterList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ClusterList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Counter provides a mock function with given fields:
func (_m *CommittedEpoch) Counter() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Counter")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// DKG provides a mock function with given fields:
func (_m *CommittedEpoch) DKG() (protocol.DKG, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKG")
	}

	var r0 protocol.DKG
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.DKG, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.DKG); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.DKG)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DKGPhase1FinalView provides a mock function with given fields:
func (_m *CommittedEpoch) DKGPhase1FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKGPhase1FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// DKGPhase2FinalView provides a mock function with given fields:
func (_m *CommittedEpoch) DKGPhase2FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKGPhase2FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// DKGPhase3FinalView provides a mock function with given fields:
func (_m *CommittedEpoch) DKGPhase3FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKGPhase3FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// FinalHeight provides a mock function with given fields:
func (_m *CommittedEpoch) FinalHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalView provides a mock function with given fields:
func (_m *CommittedEpoch) FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// FirstHeight provides a mock function with given fields:
func (_m *CommittedEpoch) FirstHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FirstHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstView provides a mock function with given fields:
func (_m *CommittedEpoch) FirstView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FirstView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// InitialIdentities provides a mock function with given fields:
func (_m *CommittedEpoch) InitialIdentities() flow.GenericIdentityList[flow.IdentitySkeleton] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitialIdentities")
	}

	var r0 flow.GenericIdentityList[flow.IdentitySkeleton]
	if rf, ok := ret.Get(0).(func() flow.GenericIdentityList[flow.IdentitySkeleton]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.IdentitySkeleton])
		}
	}

	return r0
}

// RandomSource provides a mock function with given fields:
func (_m *CommittedEpoch) RandomSource() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RandomSource")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// TargetDuration provides a mock function with given fields:
func (_m *CommittedEpoch) TargetDuration() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetDuration")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// TargetEndTime provides a mock function with given fields:
func (_m *CommittedEpoch) TargetEndTime() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetEndTime")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// NewCommittedEpoch creates a new instance of CommittedEpoch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommittedEpoch(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommittedEpoch {
	mock := &CommittedEpoch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
