// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	protocol "github.com/onflow/flow-go/state/protocol"
	mock "github.com/stretchr/testify/mock"
)

// MockEpochQuery is an autogenerated mock type for the EpochQuery type
type MockEpochQuery struct {
	mock.Mock
}

type MockEpochQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpochQuery) EXPECT() *MockEpochQuery_Expecter {
	return &MockEpochQuery_Expecter{mock: &_m.Mock}
}

// Current provides a mock function with no fields
func (_m *MockEpochQuery) Current() (protocol.CommittedEpoch, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Current")
	}

	var r0 protocol.CommittedEpoch
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.CommittedEpoch, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.CommittedEpoch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.CommittedEpoch)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochQuery_Current_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Current'
type MockEpochQuery_Current_Call struct {
	*mock.Call
}

// Current is a helper method to define mock.On call
func (_e *MockEpochQuery_Expecter) Current() *MockEpochQuery_Current_Call {
	return &MockEpochQuery_Current_Call{Call: _e.mock.On("Current")}
}

func (_c *MockEpochQuery_Current_Call) Run(run func()) *MockEpochQuery_Current_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochQuery_Current_Call) Return(_a0 protocol.CommittedEpoch, _a1 error) *MockEpochQuery_Current_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpochQuery_Current_Call) RunAndReturn(run func() (protocol.CommittedEpoch, error)) *MockEpochQuery_Current_Call {
	_c.Call.Return(run)
	return _c
}

// NextCommitted provides a mock function with no fields
func (_m *MockEpochQuery) NextCommitted() (protocol.CommittedEpoch, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextCommitted")
	}

	var r0 protocol.CommittedEpoch
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.CommittedEpoch, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.CommittedEpoch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.CommittedEpoch)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochQuery_NextCommitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextCommitted'
type MockEpochQuery_NextCommitted_Call struct {
	*mock.Call
}

// NextCommitted is a helper method to define mock.On call
func (_e *MockEpochQuery_Expecter) NextCommitted() *MockEpochQuery_NextCommitted_Call {
	return &MockEpochQuery_NextCommitted_Call{Call: _e.mock.On("NextCommitted")}
}

func (_c *MockEpochQuery_NextCommitted_Call) Run(run func()) *MockEpochQuery_NextCommitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochQuery_NextCommitted_Call) Return(_a0 protocol.CommittedEpoch, _a1 error) *MockEpochQuery_NextCommitted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpochQuery_NextCommitted_Call) RunAndReturn(run func() (protocol.CommittedEpoch, error)) *MockEpochQuery_NextCommitted_Call {
	_c.Call.Return(run)
	return _c
}

// NextUnsafe provides a mock function with no fields
func (_m *MockEpochQuery) NextUnsafe() (protocol.TentativeEpoch, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextUnsafe")
	}

	var r0 protocol.TentativeEpoch
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.TentativeEpoch, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.TentativeEpoch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.TentativeEpoch)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochQuery_NextUnsafe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextUnsafe'
type MockEpochQuery_NextUnsafe_Call struct {
	*mock.Call
}

// NextUnsafe is a helper method to define mock.On call
func (_e *MockEpochQuery_Expecter) NextUnsafe() *MockEpochQuery_NextUnsafe_Call {
	return &MockEpochQuery_NextUnsafe_Call{Call: _e.mock.On("NextUnsafe")}
}

func (_c *MockEpochQuery_NextUnsafe_Call) Run(run func()) *MockEpochQuery_NextUnsafe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochQuery_NextUnsafe_Call) Return(_a0 protocol.TentativeEpoch, _a1 error) *MockEpochQuery_NextUnsafe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpochQuery_NextUnsafe_Call) RunAndReturn(run func() (protocol.TentativeEpoch, error)) *MockEpochQuery_NextUnsafe_Call {
	_c.Call.Return(run)
	return _c
}

// Previous provides a mock function with no fields
func (_m *MockEpochQuery) Previous() (protocol.CommittedEpoch, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Previous")
	}

	var r0 protocol.CommittedEpoch
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.CommittedEpoch, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.CommittedEpoch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.CommittedEpoch)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochQuery_Previous_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Previous'
type MockEpochQuery_Previous_Call struct {
	*mock.Call
}

// Previous is a helper method to define mock.On call
func (_e *MockEpochQuery_Expecter) Previous() *MockEpochQuery_Previous_Call {
	return &MockEpochQuery_Previous_Call{Call: _e.mock.On("Previous")}
}

func (_c *MockEpochQuery_Previous_Call) Run(run func()) *MockEpochQuery_Previous_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochQuery_Previous_Call) Return(_a0 protocol.CommittedEpoch, _a1 error) *MockEpochQuery_Previous_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpochQuery_Previous_Call) RunAndReturn(run func() (protocol.CommittedEpoch, error)) *MockEpochQuery_Previous_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEpochQuery creates a new instance of MockEpochQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpochQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpochQuery {
	mock := &MockEpochQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
