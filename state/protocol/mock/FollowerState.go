// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockFollowerState is an autogenerated mock type for the FollowerState type
type MockFollowerState struct {
	mock.Mock
}

type MockFollowerState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFollowerState) EXPECT() *MockFollowerState_Expecter {
	return &MockFollowerState_Expecter{mock: &_m.Mock}
}

// AtBlockID provides a mock function with given fields: blockID
func (_m *MockFollowerState) AtBlockID(blockID flow.Identifier) protocol.Snapshot {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for AtBlockID")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(flow.Identifier) protocol.Snapshot); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockFollowerState_AtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AtBlockID'
type MockFollowerState_AtBlockID_Call struct {
	*mock.Call
}

// AtBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockFollowerState_Expecter) AtBlockID(blockID interface{}) *MockFollowerState_AtBlockID_Call {
	return &MockFollowerState_AtBlockID_Call{Call: _e.mock.On("AtBlockID", blockID)}
}

func (_c *MockFollowerState_AtBlockID_Call) Run(run func(blockID flow.Identifier)) *MockFollowerState_AtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockFollowerState_AtBlockID_Call) Return(_a0 protocol.Snapshot) *MockFollowerState_AtBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerState_AtBlockID_Call) RunAndReturn(run func(flow.Identifier) protocol.Snapshot) *MockFollowerState_AtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// AtHeight provides a mock function with given fields: height
func (_m *MockFollowerState) AtHeight(height uint64) protocol.Snapshot {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for AtHeight")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(uint64) protocol.Snapshot); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockFollowerState_AtHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AtHeight'
type MockFollowerState_AtHeight_Call struct {
	*mock.Call
}

// AtHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockFollowerState_Expecter) AtHeight(height interface{}) *MockFollowerState_AtHeight_Call {
	return &MockFollowerState_AtHeight_Call{Call: _e.mock.On("AtHeight", height)}
}

func (_c *MockFollowerState_AtHeight_Call) Run(run func(height uint64)) *MockFollowerState_AtHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockFollowerState_AtHeight_Call) Return(_a0 protocol.Snapshot) *MockFollowerState_AtHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerState_AtHeight_Call) RunAndReturn(run func(uint64) protocol.Snapshot) *MockFollowerState_AtHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendCertified provides a mock function with given fields: ctx, candidate, qc
func (_m *MockFollowerState) ExtendCertified(ctx context.Context, candidate *flow.Block, qc *flow.QuorumCertificate) error {
	ret := _m.Called(ctx, candidate, qc)

	if len(ret) == 0 {
		panic("no return value specified for ExtendCertified")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Block, *flow.QuorumCertificate) error); ok {
		r0 = rf(ctx, candidate, qc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFollowerState_ExtendCertified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendCertified'
type MockFollowerState_ExtendCertified_Call struct {
	*mock.Call
}

// ExtendCertified is a helper method to define mock.On call
//   - ctx context.Context
//   - candidate *flow.Block
//   - qc *flow.QuorumCertificate
func (_e *MockFollowerState_Expecter) ExtendCertified(ctx interface{}, candidate interface{}, qc interface{}) *MockFollowerState_ExtendCertified_Call {
	return &MockFollowerState_ExtendCertified_Call{Call: _e.mock.On("ExtendCertified", ctx, candidate, qc)}
}

func (_c *MockFollowerState_ExtendCertified_Call) Run(run func(ctx context.Context, candidate *flow.Block, qc *flow.QuorumCertificate)) *MockFollowerState_ExtendCertified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*flow.Block), args[2].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockFollowerState_ExtendCertified_Call) Return(_a0 error) *MockFollowerState_ExtendCertified_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerState_ExtendCertified_Call) RunAndReturn(run func(context.Context, *flow.Block, *flow.QuorumCertificate) error) *MockFollowerState_ExtendCertified_Call {
	_c.Call.Return(run)
	return _c
}

// Final provides a mock function with no fields
func (_m *MockFollowerState) Final() protocol.Snapshot {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Final")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockFollowerState_Final_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Final'
type MockFollowerState_Final_Call struct {
	*mock.Call
}

// Final is a helper method to define mock.On call
func (_e *MockFollowerState_Expecter) Final() *MockFollowerState_Final_Call {
	return &MockFollowerState_Final_Call{Call: _e.mock.On("Final")}
}

func (_c *MockFollowerState_Final_Call) Run(run func()) *MockFollowerState_Final_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFollowerState_Final_Call) Return(_a0 protocol.Snapshot) *MockFollowerState_Final_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerState_Final_Call) RunAndReturn(run func() protocol.Snapshot) *MockFollowerState_Final_Call {
	_c.Call.Return(run)
	return _c
}

// Finalize provides a mock function with given fields: ctx, blockID
func (_m *MockFollowerState) Finalize(ctx context.Context, blockID flow.Identifier) error {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for Finalize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) error); ok {
		r0 = rf(ctx, blockID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFollowerState_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type MockFollowerState_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockFollowerState_Expecter) Finalize(ctx interface{}, blockID interface{}) *MockFollowerState_Finalize_Call {
	return &MockFollowerState_Finalize_Call{Call: _e.mock.On("Finalize", ctx, blockID)}
}

func (_c *MockFollowerState_Finalize_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockFollowerState_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockFollowerState_Finalize_Call) Return(_a0 error) *MockFollowerState_Finalize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerState_Finalize_Call) RunAndReturn(run func(context.Context, flow.Identifier) error) *MockFollowerState_Finalize_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with no fields
func (_m *MockFollowerState) Params() protocol.Params {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 protocol.Params
	if rf, ok := ret.Get(0).(func() protocol.Params); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Params)
		}
	}

	return r0
}

// MockFollowerState_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockFollowerState_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
func (_e *MockFollowerState_Expecter) Params() *MockFollowerState_Params_Call {
	return &MockFollowerState_Params_Call{Call: _e.mock.On("Params")}
}

func (_c *MockFollowerState_Params_Call) Run(run func()) *MockFollowerState_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFollowerState_Params_Call) Return(_a0 protocol.Params) *MockFollowerState_Params_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerState_Params_Call) RunAndReturn(run func() protocol.Params) *MockFollowerState_Params_Call {
	_c.Call.Return(run)
	return _c
}

// Sealed provides a mock function with no fields
func (_m *MockFollowerState) Sealed() protocol.Snapshot {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sealed")
	}

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// MockFollowerState_Sealed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sealed'
type MockFollowerState_Sealed_Call struct {
	*mock.Call
}

// Sealed is a helper method to define mock.On call
func (_e *MockFollowerState_Expecter) Sealed() *MockFollowerState_Sealed_Call {
	return &MockFollowerState_Sealed_Call{Call: _e.mock.On("Sealed")}
}

func (_c *MockFollowerState_Sealed_Call) Run(run func()) *MockFollowerState_Sealed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFollowerState_Sealed_Call) Return(_a0 protocol.Snapshot) *MockFollowerState_Sealed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerState_Sealed_Call) RunAndReturn(run func() protocol.Snapshot) *MockFollowerState_Sealed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFollowerState creates a new instance of MockFollowerState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFollowerState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFollowerState {
	mock := &MockFollowerState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
