// Code generated by mockery. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// BlockTimer is an autogenerated mock type for the BlockTimer type
type BlockTimer struct {
	mock.Mock
}

// Build provides a mock function with given fields: parentTimestamp
func (_m *BlockTimer) Build(parentTimestamp uint64) uint64 {
	ret := _m.Called(parentTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(parentTimestamp)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Validate provides a mock function with given fields: parentTimestamp, currentTimestamp
func (_m *BlockTimer) Validate(parentTimestamp uint64, currentTimestamp uint64) error {
	ret := _m.Called(parentTimestamp, currentTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(parentTimestamp, currentTimestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlockTimer creates a new instance of BlockTimer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockTimer {
	mock := &BlockTimer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
