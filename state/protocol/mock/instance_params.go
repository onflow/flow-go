// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// InstanceParams is an autogenerated mock type for the InstanceParams type
type InstanceParams struct {
	mock.Mock
}

// EpochFallbackTriggered provides a mock function with given fields:
func (_m *InstanceParams) EpochFallbackTriggered() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochFallbackTriggered")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizedRoot provides a mock function with given fields:
func (_m *InstanceParams) FinalizedRoot() *flow.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizedRoot")
	}

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// Seal provides a mock function with given fields:
func (_m *InstanceParams) Seal() *flow.Seal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Seal")
	}

	var r0 *flow.Seal
	if rf, ok := ret.Get(0).(func() *flow.Seal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Seal)
		}
	}

	return r0
}

// SealedRoot provides a mock function with given fields:
func (_m *InstanceParams) SealedRoot() *flow.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SealedRoot")
	}

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// NewInstanceParams creates a new instance of InstanceParams. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstanceParams(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstanceParams {
	mock := &InstanceParams{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
