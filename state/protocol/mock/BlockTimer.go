// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockBlockTimer is an autogenerated mock type for the BlockTimer type
type MockBlockTimer struct {
	mock.Mock
}

type MockBlockTimer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockTimer) EXPECT() *MockBlockTimer_Expecter {
	return &MockBlockTimer_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: parentTimestamp
func (_m *MockBlockTimer) Build(parentTimestamp time.Time) time.Time {
	ret := _m.Called(parentTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(time.Time) time.Time); ok {
		r0 = rf(parentTimestamp)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockBlockTimer_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockBlockTimer_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - parentTimestamp time.Time
func (_e *MockBlockTimer_Expecter) Build(parentTimestamp interface{}) *MockBlockTimer_Build_Call {
	return &MockBlockTimer_Build_Call{Call: _e.mock.On("Build", parentTimestamp)}
}

func (_c *MockBlockTimer_Build_Call) Run(run func(parentTimestamp time.Time)) *MockBlockTimer_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockBlockTimer_Build_Call) Return(_a0 time.Time) *MockBlockTimer_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockTimer_Build_Call) RunAndReturn(run func(time.Time) time.Time) *MockBlockTimer_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: parentTimestamp, currentTimestamp
func (_m *MockBlockTimer) Validate(parentTimestamp time.Time, currentTimestamp time.Time) error {
	ret := _m.Called(parentTimestamp, currentTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) error); ok {
		r0 = rf(parentTimestamp, currentTimestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlockTimer_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockBlockTimer_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - parentTimestamp time.Time
//   - currentTimestamp time.Time
func (_e *MockBlockTimer_Expecter) Validate(parentTimestamp interface{}, currentTimestamp interface{}) *MockBlockTimer_Validate_Call {
	return &MockBlockTimer_Validate_Call{Call: _e.mock.On("Validate", parentTimestamp, currentTimestamp)}
}

func (_c *MockBlockTimer_Validate_Call) Run(run func(parentTimestamp time.Time, currentTimestamp time.Time)) *MockBlockTimer_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time))
	})
	return _c
}

func (_c *MockBlockTimer_Validate_Call) Return(_a0 error) *MockBlockTimer_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockTimer_Validate_Call) RunAndReturn(run func(time.Time, time.Time) error) *MockBlockTimer_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockTimer creates a new instance of MockBlockTimer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockTimer {
	mock := &MockBlockTimer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
