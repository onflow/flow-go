// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockInstanceParams is an autogenerated mock type for the InstanceParams type
type MockInstanceParams struct {
	mock.Mock
}

type MockInstanceParams_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstanceParams) EXPECT() *MockInstanceParams_Expecter {
	return &MockInstanceParams_Expecter{mock: &_m.Mock}
}

// FinalizedRoot provides a mock function with no fields
func (_m *MockInstanceParams) FinalizedRoot() *flow.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizedRoot")
	}

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// MockInstanceParams_FinalizedRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizedRoot'
type MockInstanceParams_FinalizedRoot_Call struct {
	*mock.Call
}

// FinalizedRoot is a helper method to define mock.On call
func (_e *MockInstanceParams_Expecter) FinalizedRoot() *MockInstanceParams_FinalizedRoot_Call {
	return &MockInstanceParams_FinalizedRoot_Call{Call: _e.mock.On("FinalizedRoot")}
}

func (_c *MockInstanceParams_FinalizedRoot_Call) Run(run func()) *MockInstanceParams_FinalizedRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstanceParams_FinalizedRoot_Call) Return(_a0 *flow.Header) *MockInstanceParams_FinalizedRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstanceParams_FinalizedRoot_Call) RunAndReturn(run func() *flow.Header) *MockInstanceParams_FinalizedRoot_Call {
	_c.Call.Return(run)
	return _c
}

// Seal provides a mock function with no fields
func (_m *MockInstanceParams) Seal() *flow.Seal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Seal")
	}

	var r0 *flow.Seal
	if rf, ok := ret.Get(0).(func() *flow.Seal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Seal)
		}
	}

	return r0
}

// MockInstanceParams_Seal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seal'
type MockInstanceParams_Seal_Call struct {
	*mock.Call
}

// Seal is a helper method to define mock.On call
func (_e *MockInstanceParams_Expecter) Seal() *MockInstanceParams_Seal_Call {
	return &MockInstanceParams_Seal_Call{Call: _e.mock.On("Seal")}
}

func (_c *MockInstanceParams_Seal_Call) Run(run func()) *MockInstanceParams_Seal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstanceParams_Seal_Call) Return(_a0 *flow.Seal) *MockInstanceParams_Seal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstanceParams_Seal_Call) RunAndReturn(run func() *flow.Seal) *MockInstanceParams_Seal_Call {
	_c.Call.Return(run)
	return _c
}

// SealedRoot provides a mock function with no fields
func (_m *MockInstanceParams) SealedRoot() *flow.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SealedRoot")
	}

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// MockInstanceParams_SealedRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SealedRoot'
type MockInstanceParams_SealedRoot_Call struct {
	*mock.Call
}

// SealedRoot is a helper method to define mock.On call
func (_e *MockInstanceParams_Expecter) SealedRoot() *MockInstanceParams_SealedRoot_Call {
	return &MockInstanceParams_SealedRoot_Call{Call: _e.mock.On("SealedRoot")}
}

func (_c *MockInstanceParams_SealedRoot_Call) Run(run func()) *MockInstanceParams_SealedRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstanceParams_SealedRoot_Call) Return(_a0 *flow.Header) *MockInstanceParams_SealedRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstanceParams_SealedRoot_Call) RunAndReturn(run func() *flow.Header) *MockInstanceParams_SealedRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInstanceParams creates a new instance of MockInstanceParams. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstanceParams(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstanceParams {
	mock := &MockInstanceParams{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
