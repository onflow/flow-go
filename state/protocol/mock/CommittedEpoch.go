// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockCommittedEpoch is an autogenerated mock type for the CommittedEpoch type
type MockCommittedEpoch struct {
	mock.Mock
}

type MockCommittedEpoch_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommittedEpoch) EXPECT() *MockCommittedEpoch_Expecter {
	return &MockCommittedEpoch_Expecter{mock: &_m.Mock}
}

// Cluster provides a mock function with given fields: index
func (_m *MockCommittedEpoch) Cluster(index uint) (protocol.Cluster, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for Cluster")
	}

	var r0 protocol.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (protocol.Cluster, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint) protocol.Cluster); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommittedEpoch_Cluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cluster'
type MockCommittedEpoch_Cluster_Call struct {
	*mock.Call
}

// Cluster is a helper method to define mock.On call
//   - index uint
func (_e *MockCommittedEpoch_Expecter) Cluster(index interface{}) *MockCommittedEpoch_Cluster_Call {
	return &MockCommittedEpoch_Cluster_Call{Call: _e.mock.On("Cluster", index)}
}

func (_c *MockCommittedEpoch_Cluster_Call) Run(run func(index uint)) *MockCommittedEpoch_Cluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockCommittedEpoch_Cluster_Call) Return(_a0 protocol.Cluster, _a1 error) *MockCommittedEpoch_Cluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommittedEpoch_Cluster_Call) RunAndReturn(run func(uint) (protocol.Cluster, error)) *MockCommittedEpoch_Cluster_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterByChainID provides a mock function with given fields: chainID
func (_m *MockCommittedEpoch) ClusterByChainID(chainID flow.ChainID) (protocol.Cluster, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for ClusterByChainID")
	}

	var r0 protocol.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.ChainID) (protocol.Cluster, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(flow.ChainID) protocol.Cluster); ok {
		r0 = rf(chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.ChainID) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommittedEpoch_ClusterByChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterByChainID'
type MockCommittedEpoch_ClusterByChainID_Call struct {
	*mock.Call
}

// ClusterByChainID is a helper method to define mock.On call
//   - chainID flow.ChainID
func (_e *MockCommittedEpoch_Expecter) ClusterByChainID(chainID interface{}) *MockCommittedEpoch_ClusterByChainID_Call {
	return &MockCommittedEpoch_ClusterByChainID_Call{Call: _e.mock.On("ClusterByChainID", chainID)}
}

func (_c *MockCommittedEpoch_ClusterByChainID_Call) Run(run func(chainID flow.ChainID)) *MockCommittedEpoch_ClusterByChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ChainID))
	})
	return _c
}

func (_c *MockCommittedEpoch_ClusterByChainID_Call) Return(_a0 protocol.Cluster, _a1 error) *MockCommittedEpoch_ClusterByChainID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommittedEpoch_ClusterByChainID_Call) RunAndReturn(run func(flow.ChainID) (protocol.Cluster, error)) *MockCommittedEpoch_ClusterByChainID_Call {
	_c.Call.Return(run)
	return _c
}

// Clustering provides a mock function with no fields
func (_m *MockCommittedEpoch) Clustering() (flow.ClusterList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clustering")
	}

	var r0 flow.ClusterList
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.ClusterList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.ClusterList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ClusterList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommittedEpoch_Clustering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clustering'
type MockCommittedEpoch_Clustering_Call struct {
	*mock.Call
}

// Clustering is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) Clustering() *MockCommittedEpoch_Clustering_Call {
	return &MockCommittedEpoch_Clustering_Call{Call: _e.mock.On("Clustering")}
}

func (_c *MockCommittedEpoch_Clustering_Call) Run(run func()) *MockCommittedEpoch_Clustering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_Clustering_Call) Return(_a0 flow.ClusterList, _a1 error) *MockCommittedEpoch_Clustering_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommittedEpoch_Clustering_Call) RunAndReturn(run func() (flow.ClusterList, error)) *MockCommittedEpoch_Clustering_Call {
	_c.Call.Return(run)
	return _c
}

// Counter provides a mock function with no fields
func (_m *MockCommittedEpoch) Counter() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Counter")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Counter'
type MockCommittedEpoch_Counter_Call struct {
	*mock.Call
}

// Counter is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) Counter() *MockCommittedEpoch_Counter_Call {
	return &MockCommittedEpoch_Counter_Call{Call: _e.mock.On("Counter")}
}

func (_c *MockCommittedEpoch_Counter_Call) Run(run func()) *MockCommittedEpoch_Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_Counter_Call) Return(_a0 uint64) *MockCommittedEpoch_Counter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_Counter_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_Counter_Call {
	_c.Call.Return(run)
	return _c
}

// DKG provides a mock function with no fields
func (_m *MockCommittedEpoch) DKG() (protocol.DKG, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKG")
	}

	var r0 protocol.DKG
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.DKG, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.DKG); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.DKG)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommittedEpoch_DKG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DKG'
type MockCommittedEpoch_DKG_Call struct {
	*mock.Call
}

// DKG is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) DKG() *MockCommittedEpoch_DKG_Call {
	return &MockCommittedEpoch_DKG_Call{Call: _e.mock.On("DKG")}
}

func (_c *MockCommittedEpoch_DKG_Call) Run(run func()) *MockCommittedEpoch_DKG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_DKG_Call) Return(_a0 protocol.DKG, _a1 error) *MockCommittedEpoch_DKG_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommittedEpoch_DKG_Call) RunAndReturn(run func() (protocol.DKG, error)) *MockCommittedEpoch_DKG_Call {
	_c.Call.Return(run)
	return _c
}

// DKGPhase1FinalView provides a mock function with no fields
func (_m *MockCommittedEpoch) DKGPhase1FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKGPhase1FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_DKGPhase1FinalView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DKGPhase1FinalView'
type MockCommittedEpoch_DKGPhase1FinalView_Call struct {
	*mock.Call
}

// DKGPhase1FinalView is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) DKGPhase1FinalView() *MockCommittedEpoch_DKGPhase1FinalView_Call {
	return &MockCommittedEpoch_DKGPhase1FinalView_Call{Call: _e.mock.On("DKGPhase1FinalView")}
}

func (_c *MockCommittedEpoch_DKGPhase1FinalView_Call) Run(run func()) *MockCommittedEpoch_DKGPhase1FinalView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_DKGPhase1FinalView_Call) Return(_a0 uint64) *MockCommittedEpoch_DKGPhase1FinalView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_DKGPhase1FinalView_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_DKGPhase1FinalView_Call {
	_c.Call.Return(run)
	return _c
}

// DKGPhase2FinalView provides a mock function with no fields
func (_m *MockCommittedEpoch) DKGPhase2FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKGPhase2FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_DKGPhase2FinalView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DKGPhase2FinalView'
type MockCommittedEpoch_DKGPhase2FinalView_Call struct {
	*mock.Call
}

// DKGPhase2FinalView is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) DKGPhase2FinalView() *MockCommittedEpoch_DKGPhase2FinalView_Call {
	return &MockCommittedEpoch_DKGPhase2FinalView_Call{Call: _e.mock.On("DKGPhase2FinalView")}
}

func (_c *MockCommittedEpoch_DKGPhase2FinalView_Call) Run(run func()) *MockCommittedEpoch_DKGPhase2FinalView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_DKGPhase2FinalView_Call) Return(_a0 uint64) *MockCommittedEpoch_DKGPhase2FinalView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_DKGPhase2FinalView_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_DKGPhase2FinalView_Call {
	_c.Call.Return(run)
	return _c
}

// DKGPhase3FinalView provides a mock function with no fields
func (_m *MockCommittedEpoch) DKGPhase3FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKGPhase3FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_DKGPhase3FinalView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DKGPhase3FinalView'
type MockCommittedEpoch_DKGPhase3FinalView_Call struct {
	*mock.Call
}

// DKGPhase3FinalView is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) DKGPhase3FinalView() *MockCommittedEpoch_DKGPhase3FinalView_Call {
	return &MockCommittedEpoch_DKGPhase3FinalView_Call{Call: _e.mock.On("DKGPhase3FinalView")}
}

func (_c *MockCommittedEpoch_DKGPhase3FinalView_Call) Run(run func()) *MockCommittedEpoch_DKGPhase3FinalView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_DKGPhase3FinalView_Call) Return(_a0 uint64) *MockCommittedEpoch_DKGPhase3FinalView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_DKGPhase3FinalView_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_DKGPhase3FinalView_Call {
	_c.Call.Return(run)
	return _c
}

// FinalHeight provides a mock function with no fields
func (_m *MockCommittedEpoch) FinalHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommittedEpoch_FinalHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalHeight'
type MockCommittedEpoch_FinalHeight_Call struct {
	*mock.Call
}

// FinalHeight is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) FinalHeight() *MockCommittedEpoch_FinalHeight_Call {
	return &MockCommittedEpoch_FinalHeight_Call{Call: _e.mock.On("FinalHeight")}
}

func (_c *MockCommittedEpoch_FinalHeight_Call) Run(run func()) *MockCommittedEpoch_FinalHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_FinalHeight_Call) Return(_a0 uint64, _a1 error) *MockCommittedEpoch_FinalHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommittedEpoch_FinalHeight_Call) RunAndReturn(run func() (uint64, error)) *MockCommittedEpoch_FinalHeight_Call {
	_c.Call.Return(run)
	return _c
}

// FinalView provides a mock function with no fields
func (_m *MockCommittedEpoch) FinalView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_FinalView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalView'
type MockCommittedEpoch_FinalView_Call struct {
	*mock.Call
}

// FinalView is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) FinalView() *MockCommittedEpoch_FinalView_Call {
	return &MockCommittedEpoch_FinalView_Call{Call: _e.mock.On("FinalView")}
}

func (_c *MockCommittedEpoch_FinalView_Call) Run(run func()) *MockCommittedEpoch_FinalView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_FinalView_Call) Return(_a0 uint64) *MockCommittedEpoch_FinalView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_FinalView_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_FinalView_Call {
	_c.Call.Return(run)
	return _c
}

// FirstHeight provides a mock function with no fields
func (_m *MockCommittedEpoch) FirstHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FirstHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommittedEpoch_FirstHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstHeight'
type MockCommittedEpoch_FirstHeight_Call struct {
	*mock.Call
}

// FirstHeight is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) FirstHeight() *MockCommittedEpoch_FirstHeight_Call {
	return &MockCommittedEpoch_FirstHeight_Call{Call: _e.mock.On("FirstHeight")}
}

func (_c *MockCommittedEpoch_FirstHeight_Call) Run(run func()) *MockCommittedEpoch_FirstHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_FirstHeight_Call) Return(_a0 uint64, _a1 error) *MockCommittedEpoch_FirstHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommittedEpoch_FirstHeight_Call) RunAndReturn(run func() (uint64, error)) *MockCommittedEpoch_FirstHeight_Call {
	_c.Call.Return(run)
	return _c
}

// FirstView provides a mock function with no fields
func (_m *MockCommittedEpoch) FirstView() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FirstView")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_FirstView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstView'
type MockCommittedEpoch_FirstView_Call struct {
	*mock.Call
}

// FirstView is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) FirstView() *MockCommittedEpoch_FirstView_Call {
	return &MockCommittedEpoch_FirstView_Call{Call: _e.mock.On("FirstView")}
}

func (_c *MockCommittedEpoch_FirstView_Call) Run(run func()) *MockCommittedEpoch_FirstView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_FirstView_Call) Return(_a0 uint64) *MockCommittedEpoch_FirstView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_FirstView_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_FirstView_Call {
	_c.Call.Return(run)
	return _c
}

// InitialIdentities provides a mock function with no fields
func (_m *MockCommittedEpoch) InitialIdentities() flow.GenericIdentityList[flow.IdentitySkeleton] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitialIdentities")
	}

	var r0 flow.GenericIdentityList[flow.IdentitySkeleton]
	if rf, ok := ret.Get(0).(func() flow.GenericIdentityList[flow.IdentitySkeleton]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.IdentitySkeleton])
		}
	}

	return r0
}

// MockCommittedEpoch_InitialIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitialIdentities'
type MockCommittedEpoch_InitialIdentities_Call struct {
	*mock.Call
}

// InitialIdentities is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) InitialIdentities() *MockCommittedEpoch_InitialIdentities_Call {
	return &MockCommittedEpoch_InitialIdentities_Call{Call: _e.mock.On("InitialIdentities")}
}

func (_c *MockCommittedEpoch_InitialIdentities_Call) Run(run func()) *MockCommittedEpoch_InitialIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_InitialIdentities_Call) Return(_a0 flow.GenericIdentityList[flow.IdentitySkeleton]) *MockCommittedEpoch_InitialIdentities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_InitialIdentities_Call) RunAndReturn(run func() flow.GenericIdentityList[flow.IdentitySkeleton]) *MockCommittedEpoch_InitialIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// RandomSource provides a mock function with no fields
func (_m *MockCommittedEpoch) RandomSource() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RandomSource")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockCommittedEpoch_RandomSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomSource'
type MockCommittedEpoch_RandomSource_Call struct {
	*mock.Call
}

// RandomSource is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) RandomSource() *MockCommittedEpoch_RandomSource_Call {
	return &MockCommittedEpoch_RandomSource_Call{Call: _e.mock.On("RandomSource")}
}

func (_c *MockCommittedEpoch_RandomSource_Call) Run(run func()) *MockCommittedEpoch_RandomSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_RandomSource_Call) Return(_a0 []byte) *MockCommittedEpoch_RandomSource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_RandomSource_Call) RunAndReturn(run func() []byte) *MockCommittedEpoch_RandomSource_Call {
	_c.Call.Return(run)
	return _c
}

// TargetDuration provides a mock function with no fields
func (_m *MockCommittedEpoch) TargetDuration() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetDuration")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_TargetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TargetDuration'
type MockCommittedEpoch_TargetDuration_Call struct {
	*mock.Call
}

// TargetDuration is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) TargetDuration() *MockCommittedEpoch_TargetDuration_Call {
	return &MockCommittedEpoch_TargetDuration_Call{Call: _e.mock.On("TargetDuration")}
}

func (_c *MockCommittedEpoch_TargetDuration_Call) Run(run func()) *MockCommittedEpoch_TargetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_TargetDuration_Call) Return(_a0 uint64) *MockCommittedEpoch_TargetDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_TargetDuration_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_TargetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// TargetEndTime provides a mock function with no fields
func (_m *MockCommittedEpoch) TargetEndTime() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetEndTime")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockCommittedEpoch_TargetEndTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TargetEndTime'
type MockCommittedEpoch_TargetEndTime_Call struct {
	*mock.Call
}

// TargetEndTime is a helper method to define mock.On call
func (_e *MockCommittedEpoch_Expecter) TargetEndTime() *MockCommittedEpoch_TargetEndTime_Call {
	return &MockCommittedEpoch_TargetEndTime_Call{Call: _e.mock.On("TargetEndTime")}
}

func (_c *MockCommittedEpoch_TargetEndTime_Call) Run(run func()) *MockCommittedEpoch_TargetEndTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommittedEpoch_TargetEndTime_Call) Return(_a0 uint64) *MockCommittedEpoch_TargetEndTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommittedEpoch_TargetEndTime_Call) RunAndReturn(run func() uint64) *MockCommittedEpoch_TargetEndTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommittedEpoch creates a new instance of MockCommittedEpoch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommittedEpoch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommittedEpoch {
	mock := &MockCommittedEpoch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
