// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// TentativeEpoch is an autogenerated mock type for the TentativeEpoch type
type TentativeEpoch struct {
	mock.Mock
}

// Clustering provides a mock function with given fields:
func (_m *TentativeEpoch) Clustering() (flow.ClusterList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clustering")
	}

	var r0 flow.ClusterList
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.ClusterList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.ClusterList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ClusterList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Counter provides a mock function with given fields:
func (_m *TentativeEpoch) Counter() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Counter")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// InitialIdentities provides a mock function with given fields:
func (_m *TentativeEpoch) InitialIdentities() flow.GenericIdentityList[flow.IdentitySkeleton] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitialIdentities")
	}

	var r0 flow.GenericIdentityList[flow.IdentitySkeleton]
	if rf, ok := ret.Get(0).(func() flow.GenericIdentityList[flow.IdentitySkeleton]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.IdentitySkeleton])
		}
	}

	return r0
}

// NewTentativeEpoch creates a new instance of TentativeEpoch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTentativeEpoch(t interface {
	mock.TestingT
	Cleanup(func())
}) *TentativeEpoch {
	mock := &TentativeEpoch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
