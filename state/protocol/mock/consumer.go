// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// BlockFinalized provides a mock function with given fields: block
func (_m *Consumer) BlockFinalized(block *flow.Header) {
	_m.Called(block)
}

// BlockProcessable provides a mock function with given fields: block, certifyingQC
func (_m *Consumer) BlockProcessable(block *flow.Header, certifyingQC *flow.QuorumCertificate) {
	_m.Called(block, certifyingQC)
}

// EpochCommittedPhaseStarted provides a mock function with given fields: currentEpochCounter, first
func (_m *Consumer) EpochCommittedPhaseStarted(currentEpochCounter uint64, first *flow.Header) {
	_m.Called(currentEpochCounter, first)
}

// EpochExtended provides a mock function with given fields: epochCounter, header, extension
func (_m *Consumer) EpochExtended(epochCounter uint64, header *flow.Header, extension flow.EpochExtension) {
	_m.Called(epochCounter, header, extension)
}

// EpochFallbackModeExited provides a mock function with given fields: epochCounter, header
func (_m *Consumer) EpochFallbackModeExited(epochCounter uint64, header *flow.Header) {
	_m.Called(epochCounter, header)
}

// EpochFallbackModeTriggered provides a mock function with given fields: epochCounter, header
func (_m *Consumer) EpochFallbackModeTriggered(epochCounter uint64, header *flow.Header) {
	_m.Called(epochCounter, header)
}

// EpochSetupPhaseStarted provides a mock function with given fields: currentEpochCounter, first
func (_m *Consumer) EpochSetupPhaseStarted(currentEpochCounter uint64, first *flow.Header) {
	_m.Called(currentEpochCounter, first)
}

// EpochTransition provides a mock function with given fields: newEpochCounter, first
func (_m *Consumer) EpochTransition(newEpochCounter uint64, first *flow.Header) {
	_m.Called(newEpochCounter, first)
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
