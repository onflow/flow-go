// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockEpochProtocolState is an autogenerated mock type for the EpochProtocolState type
type MockEpochProtocolState struct {
	mock.Mock
}

type MockEpochProtocolState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpochProtocolState) EXPECT() *MockEpochProtocolState_Expecter {
	return &MockEpochProtocolState_Expecter{mock: &_m.Mock}
}

// Clustering provides a mock function with no fields
func (_m *MockEpochProtocolState) Clustering() (flow.ClusterList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clustering")
	}

	var r0 flow.ClusterList
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.ClusterList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.ClusterList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ClusterList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochProtocolState_Clustering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clustering'
type MockEpochProtocolState_Clustering_Call struct {
	*mock.Call
}

// Clustering is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) Clustering() *MockEpochProtocolState_Clustering_Call {
	return &MockEpochProtocolState_Clustering_Call{Call: _e.mock.On("Clustering")}
}

func (_c *MockEpochProtocolState_Clustering_Call) Run(run func()) *MockEpochProtocolState_Clustering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_Clustering_Call) Return(_a0 flow.ClusterList, _a1 error) *MockEpochProtocolState_Clustering_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpochProtocolState_Clustering_Call) RunAndReturn(run func() (flow.ClusterList, error)) *MockEpochProtocolState_Clustering_Call {
	_c.Call.Return(run)
	return _c
}

// DKG provides a mock function with no fields
func (_m *MockEpochProtocolState) DKG() (protocol.DKG, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DKG")
	}

	var r0 protocol.DKG
	var r1 error
	if rf, ok := ret.Get(0).(func() (protocol.DKG, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() protocol.DKG); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.DKG)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochProtocolState_DKG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DKG'
type MockEpochProtocolState_DKG_Call struct {
	*mock.Call
}

// DKG is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) DKG() *MockEpochProtocolState_DKG_Call {
	return &MockEpochProtocolState_DKG_Call{Call: _e.mock.On("DKG")}
}

func (_c *MockEpochProtocolState_DKG_Call) Run(run func()) *MockEpochProtocolState_DKG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_DKG_Call) Return(_a0 protocol.DKG, _a1 error) *MockEpochProtocolState_DKG_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpochProtocolState_DKG_Call) RunAndReturn(run func() (protocol.DKG, error)) *MockEpochProtocolState_DKG_Call {
	_c.Call.Return(run)
	return _c
}

// Entry provides a mock function with no fields
func (_m *MockEpochProtocolState) Entry() *flow.RichEpochStateEntry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entry")
	}

	var r0 *flow.RichEpochStateEntry
	if rf, ok := ret.Get(0).(func() *flow.RichEpochStateEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichEpochStateEntry)
		}
	}

	return r0
}

// MockEpochProtocolState_Entry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entry'
type MockEpochProtocolState_Entry_Call struct {
	*mock.Call
}

// Entry is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) Entry() *MockEpochProtocolState_Entry_Call {
	return &MockEpochProtocolState_Entry_Call{Call: _e.mock.On("Entry")}
}

func (_c *MockEpochProtocolState_Entry_Call) Run(run func()) *MockEpochProtocolState_Entry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_Entry_Call) Return(_a0 *flow.RichEpochStateEntry) *MockEpochProtocolState_Entry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_Entry_Call) RunAndReturn(run func() *flow.RichEpochStateEntry) *MockEpochProtocolState_Entry_Call {
	_c.Call.Return(run)
	return _c
}

// Epoch provides a mock function with no fields
func (_m *MockEpochProtocolState) Epoch() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Epoch")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockEpochProtocolState_Epoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Epoch'
type MockEpochProtocolState_Epoch_Call struct {
	*mock.Call
}

// Epoch is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) Epoch() *MockEpochProtocolState_Epoch_Call {
	return &MockEpochProtocolState_Epoch_Call{Call: _e.mock.On("Epoch")}
}

func (_c *MockEpochProtocolState_Epoch_Call) Run(run func()) *MockEpochProtocolState_Epoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_Epoch_Call) Return(_a0 uint64) *MockEpochProtocolState_Epoch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_Epoch_Call) RunAndReturn(run func() uint64) *MockEpochProtocolState_Epoch_Call {
	_c.Call.Return(run)
	return _c
}

// EpochCommit provides a mock function with no fields
func (_m *MockEpochProtocolState) EpochCommit() *flow.EpochCommit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochCommit")
	}

	var r0 *flow.EpochCommit
	if rf, ok := ret.Get(0).(func() *flow.EpochCommit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochCommit)
		}
	}

	return r0
}

// MockEpochProtocolState_EpochCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochCommit'
type MockEpochProtocolState_EpochCommit_Call struct {
	*mock.Call
}

// EpochCommit is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) EpochCommit() *MockEpochProtocolState_EpochCommit_Call {
	return &MockEpochProtocolState_EpochCommit_Call{Call: _e.mock.On("EpochCommit")}
}

func (_c *MockEpochProtocolState_EpochCommit_Call) Run(run func()) *MockEpochProtocolState_EpochCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_EpochCommit_Call) Return(_a0 *flow.EpochCommit) *MockEpochProtocolState_EpochCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_EpochCommit_Call) RunAndReturn(run func() *flow.EpochCommit) *MockEpochProtocolState_EpochCommit_Call {
	_c.Call.Return(run)
	return _c
}

// EpochExtensions provides a mock function with no fields
func (_m *MockEpochProtocolState) EpochExtensions() []flow.EpochExtension {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochExtensions")
	}

	var r0 []flow.EpochExtension
	if rf, ok := ret.Get(0).(func() []flow.EpochExtension); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.EpochExtension)
		}
	}

	return r0
}

// MockEpochProtocolState_EpochExtensions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochExtensions'
type MockEpochProtocolState_EpochExtensions_Call struct {
	*mock.Call
}

// EpochExtensions is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) EpochExtensions() *MockEpochProtocolState_EpochExtensions_Call {
	return &MockEpochProtocolState_EpochExtensions_Call{Call: _e.mock.On("EpochExtensions")}
}

func (_c *MockEpochProtocolState_EpochExtensions_Call) Run(run func()) *MockEpochProtocolState_EpochExtensions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_EpochExtensions_Call) Return(_a0 []flow.EpochExtension) *MockEpochProtocolState_EpochExtensions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_EpochExtensions_Call) RunAndReturn(run func() []flow.EpochExtension) *MockEpochProtocolState_EpochExtensions_Call {
	_c.Call.Return(run)
	return _c
}

// EpochFallbackTriggered provides a mock function with no fields
func (_m *MockEpochProtocolState) EpochFallbackTriggered() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochFallbackTriggered")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEpochProtocolState_EpochFallbackTriggered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochFallbackTriggered'
type MockEpochProtocolState_EpochFallbackTriggered_Call struct {
	*mock.Call
}

// EpochFallbackTriggered is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) EpochFallbackTriggered() *MockEpochProtocolState_EpochFallbackTriggered_Call {
	return &MockEpochProtocolState_EpochFallbackTriggered_Call{Call: _e.mock.On("EpochFallbackTriggered")}
}

func (_c *MockEpochProtocolState_EpochFallbackTriggered_Call) Run(run func()) *MockEpochProtocolState_EpochFallbackTriggered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_EpochFallbackTriggered_Call) Return(_a0 bool) *MockEpochProtocolState_EpochFallbackTriggered_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_EpochFallbackTriggered_Call) RunAndReturn(run func() bool) *MockEpochProtocolState_EpochFallbackTriggered_Call {
	_c.Call.Return(run)
	return _c
}

// EpochPhase provides a mock function with no fields
func (_m *MockEpochProtocolState) EpochPhase() flow.EpochPhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochPhase")
	}

	var r0 flow.EpochPhase
	if rf, ok := ret.Get(0).(func() flow.EpochPhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(flow.EpochPhase)
	}

	return r0
}

// MockEpochProtocolState_EpochPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochPhase'
type MockEpochProtocolState_EpochPhase_Call struct {
	*mock.Call
}

// EpochPhase is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) EpochPhase() *MockEpochProtocolState_EpochPhase_Call {
	return &MockEpochProtocolState_EpochPhase_Call{Call: _e.mock.On("EpochPhase")}
}

func (_c *MockEpochProtocolState_EpochPhase_Call) Run(run func()) *MockEpochProtocolState_EpochPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_EpochPhase_Call) Return(_a0 flow.EpochPhase) *MockEpochProtocolState_EpochPhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_EpochPhase_Call) RunAndReturn(run func() flow.EpochPhase) *MockEpochProtocolState_EpochPhase_Call {
	_c.Call.Return(run)
	return _c
}

// EpochSetup provides a mock function with no fields
func (_m *MockEpochProtocolState) EpochSetup() *flow.EpochSetup {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EpochSetup")
	}

	var r0 *flow.EpochSetup
	if rf, ok := ret.Get(0).(func() *flow.EpochSetup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochSetup)
		}
	}

	return r0
}

// MockEpochProtocolState_EpochSetup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochSetup'
type MockEpochProtocolState_EpochSetup_Call struct {
	*mock.Call
}

// EpochSetup is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) EpochSetup() *MockEpochProtocolState_EpochSetup_Call {
	return &MockEpochProtocolState_EpochSetup_Call{Call: _e.mock.On("EpochSetup")}
}

func (_c *MockEpochProtocolState_EpochSetup_Call) Run(run func()) *MockEpochProtocolState_EpochSetup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_EpochSetup_Call) Return(_a0 *flow.EpochSetup) *MockEpochProtocolState_EpochSetup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_EpochSetup_Call) RunAndReturn(run func() *flow.EpochSetup) *MockEpochProtocolState_EpochSetup_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalParams provides a mock function with no fields
func (_m *MockEpochProtocolState) GlobalParams() protocol.GlobalParams {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalParams")
	}

	var r0 protocol.GlobalParams
	if rf, ok := ret.Get(0).(func() protocol.GlobalParams); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.GlobalParams)
		}
	}

	return r0
}

// MockEpochProtocolState_GlobalParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalParams'
type MockEpochProtocolState_GlobalParams_Call struct {
	*mock.Call
}

// GlobalParams is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) GlobalParams() *MockEpochProtocolState_GlobalParams_Call {
	return &MockEpochProtocolState_GlobalParams_Call{Call: _e.mock.On("GlobalParams")}
}

func (_c *MockEpochProtocolState_GlobalParams_Call) Run(run func()) *MockEpochProtocolState_GlobalParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_GlobalParams_Call) Return(_a0 protocol.GlobalParams) *MockEpochProtocolState_GlobalParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_GlobalParams_Call) RunAndReturn(run func() protocol.GlobalParams) *MockEpochProtocolState_GlobalParams_Call {
	_c.Call.Return(run)
	return _c
}

// Identities provides a mock function with no fields
func (_m *MockEpochProtocolState) Identities() flow.GenericIdentityList[flow.Identity] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Identities")
	}

	var r0 flow.GenericIdentityList[flow.Identity]
	if rf, ok := ret.Get(0).(func() flow.GenericIdentityList[flow.Identity]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.Identity])
		}
	}

	return r0
}

// MockEpochProtocolState_Identities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identities'
type MockEpochProtocolState_Identities_Call struct {
	*mock.Call
}

// Identities is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) Identities() *MockEpochProtocolState_Identities_Call {
	return &MockEpochProtocolState_Identities_Call{Call: _e.mock.On("Identities")}
}

func (_c *MockEpochProtocolState_Identities_Call) Run(run func()) *MockEpochProtocolState_Identities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_Identities_Call) Return(_a0 flow.GenericIdentityList[flow.Identity]) *MockEpochProtocolState_Identities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_Identities_Call) RunAndReturn(run func() flow.GenericIdentityList[flow.Identity]) *MockEpochProtocolState_Identities_Call {
	_c.Call.Return(run)
	return _c
}

// PreviousEpochExists provides a mock function with no fields
func (_m *MockEpochProtocolState) PreviousEpochExists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PreviousEpochExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEpochProtocolState_PreviousEpochExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreviousEpochExists'
type MockEpochProtocolState_PreviousEpochExists_Call struct {
	*mock.Call
}

// PreviousEpochExists is a helper method to define mock.On call
func (_e *MockEpochProtocolState_Expecter) PreviousEpochExists() *MockEpochProtocolState_PreviousEpochExists_Call {
	return &MockEpochProtocolState_PreviousEpochExists_Call{Call: _e.mock.On("PreviousEpochExists")}
}

func (_c *MockEpochProtocolState_PreviousEpochExists_Call) Run(run func()) *MockEpochProtocolState_PreviousEpochExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochProtocolState_PreviousEpochExists_Call) Return(_a0 bool) *MockEpochProtocolState_PreviousEpochExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochProtocolState_PreviousEpochExists_Call) RunAndReturn(run func() bool) *MockEpochProtocolState_PreviousEpochExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEpochProtocolState creates a new instance of MockEpochProtocolState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpochProtocolState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpochProtocolState {
	mock := &MockEpochProtocolState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
