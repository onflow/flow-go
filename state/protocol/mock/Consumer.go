// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockConsumer is an autogenerated mock type for the Consumer type
type MockConsumer struct {
	mock.Mock
}

type MockConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumer) EXPECT() *MockConsumer_Expecter {
	return &MockConsumer_Expecter{mock: &_m.Mock}
}

// BlockFinalized provides a mock function with given fields: block
func (_m *MockConsumer) BlockFinalized(block *flow.Header) {
	_m.Called(block)
}

// MockConsumer_BlockFinalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockFinalized'
type MockConsumer_BlockFinalized_Call struct {
	*mock.Call
}

// BlockFinalized is a helper method to define mock.On call
//   - block *flow.Header
func (_e *MockConsumer_Expecter) BlockFinalized(block interface{}) *MockConsumer_BlockFinalized_Call {
	return &MockConsumer_BlockFinalized_Call{Call: _e.mock.On("BlockFinalized", block)}
}

func (_c *MockConsumer_BlockFinalized_Call) Run(run func(block *flow.Header)) *MockConsumer_BlockFinalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header))
	})
	return _c
}

func (_c *MockConsumer_BlockFinalized_Call) Return() *MockConsumer_BlockFinalized_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_BlockFinalized_Call) RunAndReturn(run func(*flow.Header)) *MockConsumer_BlockFinalized_Call {
	_c.Run(run)
	return _c
}

// BlockProcessable provides a mock function with given fields: block, certifyingQC
func (_m *MockConsumer) BlockProcessable(block *flow.Header, certifyingQC *flow.QuorumCertificate) {
	_m.Called(block, certifyingQC)
}

// MockConsumer_BlockProcessable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockProcessable'
type MockConsumer_BlockProcessable_Call struct {
	*mock.Call
}

// BlockProcessable is a helper method to define mock.On call
//   - block *flow.Header
//   - certifyingQC *flow.QuorumCertificate
func (_e *MockConsumer_Expecter) BlockProcessable(block interface{}, certifyingQC interface{}) *MockConsumer_BlockProcessable_Call {
	return &MockConsumer_BlockProcessable_Call{Call: _e.mock.On("BlockProcessable", block, certifyingQC)}
}

func (_c *MockConsumer_BlockProcessable_Call) Run(run func(block *flow.Header, certifyingQC *flow.QuorumCertificate)) *MockConsumer_BlockProcessable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header), args[1].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockConsumer_BlockProcessable_Call) Return() *MockConsumer_BlockProcessable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_BlockProcessable_Call) RunAndReturn(run func(*flow.Header, *flow.QuorumCertificate)) *MockConsumer_BlockProcessable_Call {
	_c.Run(run)
	return _c
}

// EpochCommittedPhaseStarted provides a mock function with given fields: currentEpochCounter, first
func (_m *MockConsumer) EpochCommittedPhaseStarted(currentEpochCounter uint64, first *flow.Header) {
	_m.Called(currentEpochCounter, first)
}

// MockConsumer_EpochCommittedPhaseStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochCommittedPhaseStarted'
type MockConsumer_EpochCommittedPhaseStarted_Call struct {
	*mock.Call
}

// EpochCommittedPhaseStarted is a helper method to define mock.On call
//   - currentEpochCounter uint64
//   - first *flow.Header
func (_e *MockConsumer_Expecter) EpochCommittedPhaseStarted(currentEpochCounter interface{}, first interface{}) *MockConsumer_EpochCommittedPhaseStarted_Call {
	return &MockConsumer_EpochCommittedPhaseStarted_Call{Call: _e.mock.On("EpochCommittedPhaseStarted", currentEpochCounter, first)}
}

func (_c *MockConsumer_EpochCommittedPhaseStarted_Call) Run(run func(currentEpochCounter uint64, first *flow.Header)) *MockConsumer_EpochCommittedPhaseStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockConsumer_EpochCommittedPhaseStarted_Call) Return() *MockConsumer_EpochCommittedPhaseStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_EpochCommittedPhaseStarted_Call) RunAndReturn(run func(uint64, *flow.Header)) *MockConsumer_EpochCommittedPhaseStarted_Call {
	_c.Run(run)
	return _c
}

// EpochExtended provides a mock function with given fields: epochCounter, header, extension
func (_m *MockConsumer) EpochExtended(epochCounter uint64, header *flow.Header, extension flow.EpochExtension) {
	_m.Called(epochCounter, header, extension)
}

// MockConsumer_EpochExtended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochExtended'
type MockConsumer_EpochExtended_Call struct {
	*mock.Call
}

// EpochExtended is a helper method to define mock.On call
//   - epochCounter uint64
//   - header *flow.Header
//   - extension flow.EpochExtension
func (_e *MockConsumer_Expecter) EpochExtended(epochCounter interface{}, header interface{}, extension interface{}) *MockConsumer_EpochExtended_Call {
	return &MockConsumer_EpochExtended_Call{Call: _e.mock.On("EpochExtended", epochCounter, header, extension)}
}

func (_c *MockConsumer_EpochExtended_Call) Run(run func(epochCounter uint64, header *flow.Header, extension flow.EpochExtension)) *MockConsumer_EpochExtended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.Header), args[2].(flow.EpochExtension))
	})
	return _c
}

func (_c *MockConsumer_EpochExtended_Call) Return() *MockConsumer_EpochExtended_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_EpochExtended_Call) RunAndReturn(run func(uint64, *flow.Header, flow.EpochExtension)) *MockConsumer_EpochExtended_Call {
	_c.Run(run)
	return _c
}

// EpochFallbackModeExited provides a mock function with given fields: epochCounter, header
func (_m *MockConsumer) EpochFallbackModeExited(epochCounter uint64, header *flow.Header) {
	_m.Called(epochCounter, header)
}

// MockConsumer_EpochFallbackModeExited_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochFallbackModeExited'
type MockConsumer_EpochFallbackModeExited_Call struct {
	*mock.Call
}

// EpochFallbackModeExited is a helper method to define mock.On call
//   - epochCounter uint64
//   - header *flow.Header
func (_e *MockConsumer_Expecter) EpochFallbackModeExited(epochCounter interface{}, header interface{}) *MockConsumer_EpochFallbackModeExited_Call {
	return &MockConsumer_EpochFallbackModeExited_Call{Call: _e.mock.On("EpochFallbackModeExited", epochCounter, header)}
}

func (_c *MockConsumer_EpochFallbackModeExited_Call) Run(run func(epochCounter uint64, header *flow.Header)) *MockConsumer_EpochFallbackModeExited_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockConsumer_EpochFallbackModeExited_Call) Return() *MockConsumer_EpochFallbackModeExited_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_EpochFallbackModeExited_Call) RunAndReturn(run func(uint64, *flow.Header)) *MockConsumer_EpochFallbackModeExited_Call {
	_c.Run(run)
	return _c
}

// EpochFallbackModeTriggered provides a mock function with given fields: epochCounter, header
func (_m *MockConsumer) EpochFallbackModeTriggered(epochCounter uint64, header *flow.Header) {
	_m.Called(epochCounter, header)
}

// MockConsumer_EpochFallbackModeTriggered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochFallbackModeTriggered'
type MockConsumer_EpochFallbackModeTriggered_Call struct {
	*mock.Call
}

// EpochFallbackModeTriggered is a helper method to define mock.On call
//   - epochCounter uint64
//   - header *flow.Header
func (_e *MockConsumer_Expecter) EpochFallbackModeTriggered(epochCounter interface{}, header interface{}) *MockConsumer_EpochFallbackModeTriggered_Call {
	return &MockConsumer_EpochFallbackModeTriggered_Call{Call: _e.mock.On("EpochFallbackModeTriggered", epochCounter, header)}
}

func (_c *MockConsumer_EpochFallbackModeTriggered_Call) Run(run func(epochCounter uint64, header *flow.Header)) *MockConsumer_EpochFallbackModeTriggered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockConsumer_EpochFallbackModeTriggered_Call) Return() *MockConsumer_EpochFallbackModeTriggered_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_EpochFallbackModeTriggered_Call) RunAndReturn(run func(uint64, *flow.Header)) *MockConsumer_EpochFallbackModeTriggered_Call {
	_c.Run(run)
	return _c
}

// EpochSetupPhaseStarted provides a mock function with given fields: currentEpochCounter, first
func (_m *MockConsumer) EpochSetupPhaseStarted(currentEpochCounter uint64, first *flow.Header) {
	_m.Called(currentEpochCounter, first)
}

// MockConsumer_EpochSetupPhaseStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochSetupPhaseStarted'
type MockConsumer_EpochSetupPhaseStarted_Call struct {
	*mock.Call
}

// EpochSetupPhaseStarted is a helper method to define mock.On call
//   - currentEpochCounter uint64
//   - first *flow.Header
func (_e *MockConsumer_Expecter) EpochSetupPhaseStarted(currentEpochCounter interface{}, first interface{}) *MockConsumer_EpochSetupPhaseStarted_Call {
	return &MockConsumer_EpochSetupPhaseStarted_Call{Call: _e.mock.On("EpochSetupPhaseStarted", currentEpochCounter, first)}
}

func (_c *MockConsumer_EpochSetupPhaseStarted_Call) Run(run func(currentEpochCounter uint64, first *flow.Header)) *MockConsumer_EpochSetupPhaseStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockConsumer_EpochSetupPhaseStarted_Call) Return() *MockConsumer_EpochSetupPhaseStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_EpochSetupPhaseStarted_Call) RunAndReturn(run func(uint64, *flow.Header)) *MockConsumer_EpochSetupPhaseStarted_Call {
	_c.Run(run)
	return _c
}

// EpochTransition provides a mock function with given fields: newEpochCounter, first
func (_m *MockConsumer) EpochTransition(newEpochCounter uint64, first *flow.Header) {
	_m.Called(newEpochCounter, first)
}

// MockConsumer_EpochTransition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpochTransition'
type MockConsumer_EpochTransition_Call struct {
	*mock.Call
}

// EpochTransition is a helper method to define mock.On call
//   - newEpochCounter uint64
//   - first *flow.Header
func (_e *MockConsumer_Expecter) EpochTransition(newEpochCounter interface{}, first interface{}) *MockConsumer_EpochTransition_Call {
	return &MockConsumer_EpochTransition_Call{Call: _e.mock.On("EpochTransition", newEpochCounter, first)}
}

func (_c *MockConsumer_EpochTransition_Call) Run(run func(newEpochCounter uint64, first *flow.Header)) *MockConsumer_EpochTransition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockConsumer_EpochTransition_Call) Return() *MockConsumer_EpochTransition_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_EpochTransition_Call) RunAndReturn(run func(uint64, *flow.Header)) *MockConsumer_EpochTransition_Call {
	_c.Run(run)
	return _c
}

// NewMockConsumer creates a new instance of MockConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumer {
	mock := &MockConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
