// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// ParticipantState is an autogenerated mock type for the ParticipantState type
type ParticipantState struct {
	mock.Mock
}

// AtBlockID provides a mock function with given fields: blockID
func (_m *ParticipantState) AtBlockID(blockID flow.Identifier) protocol.Snapshot {
	ret := _m.Called(blockID)

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(flow.Identifier) protocol.Snapshot); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// AtHeight provides a mock function with given fields: height
func (_m *ParticipantState) AtHeight(height uint64) protocol.Snapshot {
	ret := _m.Called(height)

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(uint64) protocol.Snapshot); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// Extend provides a mock function with given fields: ctx, candidate
func (_m *ParticipantState) Extend(ctx context.Context, candidate *flow.Block) error {
	ret := _m.Called(ctx, candidate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Block) error); ok {
		r0 = rf(ctx, candidate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtendCertified provides a mock function with given fields: ctx, candidate, qc
func (_m *ParticipantState) ExtendCertified(ctx context.Context, candidate *flow.Block, qc *flow.QuorumCertificate) error {
	ret := _m.Called(ctx, candidate, qc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Block, *flow.QuorumCertificate) error); ok {
		r0 = rf(ctx, candidate, qc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Final provides a mock function with given fields:
func (_m *ParticipantState) Final() protocol.Snapshot {
	ret := _m.Called()

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// Finalize provides a mock function with given fields: ctx, blockID
func (_m *ParticipantState) Finalize(ctx context.Context, blockID flow.Identifier) error {
	ret := _m.Called(ctx, blockID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) error); ok {
		r0 = rf(ctx, blockID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Params provides a mock function with given fields:
func (_m *ParticipantState) Params() protocol.Params {
	ret := _m.Called()

	var r0 protocol.Params
	if rf, ok := ret.Get(0).(func() protocol.Params); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Params)
		}
	}

	return r0
}

// Sealed provides a mock function with given fields:
func (_m *ParticipantState) Sealed() protocol.Snapshot {
	ret := _m.Called()

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

type mockConstructorTestingTNewParticipantState interface {
	mock.TestingT
	Cleanup(func())
}

// NewParticipantState creates a new instance of ParticipantState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParticipantState(t mockConstructorTestingTNewParticipantState) *ParticipantState {
	mock := &ParticipantState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
