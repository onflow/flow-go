// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockTentativeEpoch is an autogenerated mock type for the TentativeEpoch type
type MockTentativeEpoch struct {
	mock.Mock
}

type MockTentativeEpoch_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTentativeEpoch) EXPECT() *MockTentativeEpoch_Expecter {
	return &MockTentativeEpoch_Expecter{mock: &_m.Mock}
}

// Clustering provides a mock function with no fields
func (_m *MockTentativeEpoch) Clustering() (flow.ClusterList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clustering")
	}

	var r0 flow.ClusterList
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.ClusterList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.ClusterList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ClusterList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTentativeEpoch_Clustering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clustering'
type MockTentativeEpoch_Clustering_Call struct {
	*mock.Call
}

// Clustering is a helper method to define mock.On call
func (_e *MockTentativeEpoch_Expecter) Clustering() *MockTentativeEpoch_Clustering_Call {
	return &MockTentativeEpoch_Clustering_Call{Call: _e.mock.On("Clustering")}
}

func (_c *MockTentativeEpoch_Clustering_Call) Run(run func()) *MockTentativeEpoch_Clustering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTentativeEpoch_Clustering_Call) Return(_a0 flow.ClusterList, _a1 error) *MockTentativeEpoch_Clustering_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTentativeEpoch_Clustering_Call) RunAndReturn(run func() (flow.ClusterList, error)) *MockTentativeEpoch_Clustering_Call {
	_c.Call.Return(run)
	return _c
}

// Counter provides a mock function with no fields
func (_m *MockTentativeEpoch) Counter() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Counter")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockTentativeEpoch_Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Counter'
type MockTentativeEpoch_Counter_Call struct {
	*mock.Call
}

// Counter is a helper method to define mock.On call
func (_e *MockTentativeEpoch_Expecter) Counter() *MockTentativeEpoch_Counter_Call {
	return &MockTentativeEpoch_Counter_Call{Call: _e.mock.On("Counter")}
}

func (_c *MockTentativeEpoch_Counter_Call) Run(run func()) *MockTentativeEpoch_Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTentativeEpoch_Counter_Call) Return(_a0 uint64) *MockTentativeEpoch_Counter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTentativeEpoch_Counter_Call) RunAndReturn(run func() uint64) *MockTentativeEpoch_Counter_Call {
	_c.Call.Return(run)
	return _c
}

// InitialIdentities provides a mock function with no fields
func (_m *MockTentativeEpoch) InitialIdentities() flow.GenericIdentityList[flow.IdentitySkeleton] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitialIdentities")
	}

	var r0 flow.GenericIdentityList[flow.IdentitySkeleton]
	if rf, ok := ret.Get(0).(func() flow.GenericIdentityList[flow.IdentitySkeleton]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.GenericIdentityList[flow.IdentitySkeleton])
		}
	}

	return r0
}

// MockTentativeEpoch_InitialIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitialIdentities'
type MockTentativeEpoch_InitialIdentities_Call struct {
	*mock.Call
}

// InitialIdentities is a helper method to define mock.On call
func (_e *MockTentativeEpoch_Expecter) InitialIdentities() *MockTentativeEpoch_InitialIdentities_Call {
	return &MockTentativeEpoch_InitialIdentities_Call{Call: _e.mock.On("InitialIdentities")}
}

func (_c *MockTentativeEpoch_InitialIdentities_Call) Run(run func()) *MockTentativeEpoch_InitialIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTentativeEpoch_InitialIdentities_Call) Return(_a0 flow.GenericIdentityList[flow.IdentitySkeleton]) *MockTentativeEpoch_InitialIdentities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTentativeEpoch_InitialIdentities_Call) RunAndReturn(run func() flow.GenericIdentityList[flow.IdentitySkeleton]) *MockTentativeEpoch_InitialIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTentativeEpoch creates a new instance of MockTentativeEpoch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTentativeEpoch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTentativeEpoch {
	mock := &MockTentativeEpoch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
