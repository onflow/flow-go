// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	cluster "github.com/onflow/flow-go/state/cluster"

	mock "github.com/stretchr/testify/mock"

	modelcluster "github.com/onflow/flow-go/model/cluster"
)

// MockMutableState is an autogenerated mock type for the MutableState type
type MockMutableState struct {
	mock.Mock
}

type MockMutableState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMutableState) EXPECT() *MockMutableState_Expecter {
	return &MockMutableState_Expecter{mock: &_m.Mock}
}

// AtBlockID provides a mock function with given fields: blockID
func (_m *MockMutableState) AtBlockID(blockID flow.Identifier) cluster.Snapshot {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for AtBlockID")
	}

	var r0 cluster.Snapshot
	if rf, ok := ret.Get(0).(func(flow.Identifier) cluster.Snapshot); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Snapshot)
		}
	}

	return r0
}

// MockMutableState_AtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AtBlockID'
type MockMutableState_AtBlockID_Call struct {
	*mock.Call
}

// AtBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockMutableState_Expecter) AtBlockID(blockID interface{}) *MockMutableState_AtBlockID_Call {
	return &MockMutableState_AtBlockID_Call{Call: _e.mock.On("AtBlockID", blockID)}
}

func (_c *MockMutableState_AtBlockID_Call) Run(run func(blockID flow.Identifier)) *MockMutableState_AtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockMutableState_AtBlockID_Call) Return(_a0 cluster.Snapshot) *MockMutableState_AtBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMutableState_AtBlockID_Call) RunAndReturn(run func(flow.Identifier) cluster.Snapshot) *MockMutableState_AtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function with given fields: candidate
func (_m *MockMutableState) Extend(candidate *modelcluster.Block) error {
	ret := _m.Called(candidate)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*modelcluster.Block) error); ok {
		r0 = rf(candidate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMutableState_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type MockMutableState_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - candidate *modelcluster.Block
func (_e *MockMutableState_Expecter) Extend(candidate interface{}) *MockMutableState_Extend_Call {
	return &MockMutableState_Extend_Call{Call: _e.mock.On("Extend", candidate)}
}

func (_c *MockMutableState_Extend_Call) Run(run func(candidate *modelcluster.Block)) *MockMutableState_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*modelcluster.Block))
	})
	return _c
}

func (_c *MockMutableState_Extend_Call) Return(_a0 error) *MockMutableState_Extend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMutableState_Extend_Call) RunAndReturn(run func(*modelcluster.Block) error) *MockMutableState_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// Final provides a mock function with no fields
func (_m *MockMutableState) Final() cluster.Snapshot {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Final")
	}

	var r0 cluster.Snapshot
	if rf, ok := ret.Get(0).(func() cluster.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Snapshot)
		}
	}

	return r0
}

// MockMutableState_Final_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Final'
type MockMutableState_Final_Call struct {
	*mock.Call
}

// Final is a helper method to define mock.On call
func (_e *MockMutableState_Expecter) Final() *MockMutableState_Final_Call {
	return &MockMutableState_Final_Call{Call: _e.mock.On("Final")}
}

func (_c *MockMutableState_Final_Call) Run(run func()) *MockMutableState_Final_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMutableState_Final_Call) Return(_a0 cluster.Snapshot) *MockMutableState_Final_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMutableState_Final_Call) RunAndReturn(run func() cluster.Snapshot) *MockMutableState_Final_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with no fields
func (_m *MockMutableState) Params() cluster.Params {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 cluster.Params
	if rf, ok := ret.Get(0).(func() cluster.Params); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Params)
		}
	}

	return r0
}

// MockMutableState_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockMutableState_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
func (_e *MockMutableState_Expecter) Params() *MockMutableState_Params_Call {
	return &MockMutableState_Params_Call{Call: _e.mock.On("Params")}
}

func (_c *MockMutableState_Params_Call) Run(run func()) *MockMutableState_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMutableState_Params_Call) Return(_a0 cluster.Params) *MockMutableState_Params_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMutableState_Params_Call) RunAndReturn(run func() cluster.Params) *MockMutableState_Params_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMutableState creates a new instance of MockMutableState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMutableState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMutableState {
	mock := &MockMutableState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
