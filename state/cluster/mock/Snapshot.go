// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockSnapshot is an autogenerated mock type for the Snapshot type
type MockSnapshot struct {
	mock.Mock
}

type MockSnapshot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSnapshot) EXPECT() *MockSnapshot_Expecter {
	return &MockSnapshot_Expecter{mock: &_m.Mock}
}

// Collection provides a mock function with no fields
func (_m *MockSnapshot) Collection() (*flow.Collection, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 *flow.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.Collection, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockSnapshot_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Collection() *MockSnapshot_Collection_Call {
	return &MockSnapshot_Collection_Call{Call: _e.mock.On("Collection")}
}

func (_c *MockSnapshot_Collection_Call) Run(run func()) *MockSnapshot_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Collection_Call) Return(_a0 *flow.Collection, _a1 error) *MockSnapshot_Collection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Collection_Call) RunAndReturn(run func() (*flow.Collection, error)) *MockSnapshot_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function with no fields
func (_m *MockSnapshot) Head() (*flow.Header, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.Header, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type MockSnapshot_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Head() *MockSnapshot_Head_Call {
	return &MockSnapshot_Head_Call{Call: _e.mock.On("Head")}
}

func (_c *MockSnapshot_Head_Call) Run(run func()) *MockSnapshot_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Head_Call) Return(_a0 *flow.Header, _a1 error) *MockSnapshot_Head_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Head_Call) RunAndReturn(run func() (*flow.Header, error)) *MockSnapshot_Head_Call {
	_c.Call.Return(run)
	return _c
}

// Pending provides a mock function with no fields
func (_m *MockSnapshot) Pending() ([]flow.Identifier, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pending")
	}

	var r0 []flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]flow.Identifier, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSnapshot_Pending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pending'
type MockSnapshot_Pending_Call struct {
	*mock.Call
}

// Pending is a helper method to define mock.On call
func (_e *MockSnapshot_Expecter) Pending() *MockSnapshot_Pending_Call {
	return &MockSnapshot_Pending_Call{Call: _e.mock.On("Pending")}
}

func (_c *MockSnapshot_Pending_Call) Run(run func()) *MockSnapshot_Pending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnapshot_Pending_Call) Return(_a0 []flow.Identifier, _a1 error) *MockSnapshot_Pending_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSnapshot_Pending_Call) RunAndReturn(run func() ([]flow.Identifier, error)) *MockSnapshot_Pending_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSnapshot creates a new instance of MockSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSnapshot {
	mock := &MockSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
