/cmd/flow/flow
/cmd/collection/collection
/cmd/consensus/consensus
/cmd/execution/execution
/cmd/verification/verification
/cmd/util/util
/cmd/bootstrap/bootstrap

# Test ouput of  bootstrapping CLI
cmd/bootstrap/bootstrap-example

# Test binary, build with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Output from logging to debug
*.log

# Output from binstat
*.binstat.txt*

# Output from pprof
*.pprof.txt

# Coverage artifacts
coverage.zip
coverage.txt
cover.json
cover-summary
index.html

# Since we have tooling that uses node
node_modules

.DS_Store

flow.json
flowdb

# IDE related files
.idea
.vscode
*.code-workspace
# ignore all files in the .cursor directory, except for the rules directory
.cursor/*
!.cursor/rules/
!.cursor/rules/*
# do ignore rules files matching private-*
.cursor/rules/private-*
git
language/tools/vscode-extension/cadence-*.vsix
language/tools/vscode-extension/out/*

# Local development files
.local

# Go mod ignores
.history

# Mock generation
**/gomock_reflect*/*

# command line tool
read-badger
read-protocol-state
remove-execution-fork

# generated key
integration/localnet/observer-network-key

# go workspace
go.work
go.work.sum

# Ledger checkpoint status files
**/checkpoint_status.json
**/export_report.json

# Local testing result files
tps-results*.json

# Custom golangcilint build
custom-gcl
tools/custom-gcl
