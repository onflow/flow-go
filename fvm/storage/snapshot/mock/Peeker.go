// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockPeeker is an autogenerated mock type for the Peeker type
type MockPeeker struct {
	mock.Mock
}

type MockPeeker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeeker) EXPECT() *MockPeeker_Expecter {
	return &MockPeeker_Expecter{mock: &_m.Mock}
}

// Peek provides a mock function with given fields: id
func (_m *MockPeeker) Peek(id flow.RegisterID) ([]byte, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Peek")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.RegisterID) ([]byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.RegisterID) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.RegisterID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPeeker_Peek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Peek'
type MockPeeker_Peek_Call struct {
	*mock.Call
}

// Peek is a helper method to define mock.On call
//   - id flow.RegisterID
func (_e *MockPeeker_Expecter) Peek(id interface{}) *MockPeeker_Peek_Call {
	return &MockPeeker_Peek_Call{Call: _e.mock.On("Peek", id)}
}

func (_c *MockPeeker_Peek_Call) Run(run func(id flow.RegisterID)) *MockPeeker_Peek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.RegisterID))
	})
	return _c
}

func (_c *MockPeeker_Peek_Call) Return(_a0 []byte, _a1 error) *MockPeeker_Peek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPeeker_Peek_Call) RunAndReturn(run func(flow.RegisterID) ([]byte, error)) *MockPeeker_Peek_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPeeker creates a new instance of MockPeeker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeeker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeeker {
	mock := &MockPeeker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
