// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockStorageSnapshot is an autogenerated mock type for the StorageSnapshot type
type MockStorageSnapshot struct {
	mock.Mock
}

type MockStorageSnapshot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageSnapshot) EXPECT() *MockStorageSnapshot_Expecter {
	return &MockStorageSnapshot_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id
func (_m *MockStorageSnapshot) Get(id flow.RegisterID) ([]byte, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.RegisterID) ([]byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.RegisterID) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.RegisterID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageSnapshot_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorageSnapshot_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id flow.RegisterID
func (_e *MockStorageSnapshot_Expecter) Get(id interface{}) *MockStorageSnapshot_Get_Call {
	return &MockStorageSnapshot_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockStorageSnapshot_Get_Call) Run(run func(id flow.RegisterID)) *MockStorageSnapshot_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.RegisterID))
	})
	return _c
}

func (_c *MockStorageSnapshot_Get_Call) Return(_a0 []byte, _a1 error) *MockStorageSnapshot_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageSnapshot_Get_Call) RunAndReturn(run func(flow.RegisterID) ([]byte, error)) *MockStorageSnapshot_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageSnapshot creates a new instance of MockStorageSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageSnapshot {
	mock := &MockStorageSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
