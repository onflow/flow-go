// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	fvm "github.com/onflow/flow-go/fvm"
	mock "github.com/stretchr/testify/mock"

	programs "github.com/onflow/flow-go/fvm/programs"

	state "github.com/onflow/flow-go/fvm/state"
)

// TransactionProcessor is an autogenerated mock type for the TransactionProcessor type
type TransactionProcessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *TransactionProcessor) Process(_a0 fvm.Context, _a1 *fvm.TransactionProcedure, _a2 *state.TransactionState, _a3 *programs.TransactionPrograms) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(fvm.Context, *fvm.TransactionProcedure, *state.TransactionState, *programs.TransactionPrograms) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionProcessor creates a new instance of TransactionProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionProcessor(t mockConstructorTestingTNewTransactionProcessor) *TransactionProcessor {
	mock := &TransactionProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
