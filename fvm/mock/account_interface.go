// Code generated by mockery v2.13.0. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/runtime/common"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/onflow/cadence/runtime"

	sema "github.com/onflow/cadence/runtime/sema"
)

// AccountInterface is an autogenerated mock type for the AccountInterface type
type AccountInterface struct {
	mock.Mock
}

// AddAccountKey provides a mock function with given fields: address, publicKey, hashAlgo, weight
func (_m *AccountInterface) AddAccountKey(address common.Address, publicKey *runtime.PublicKey, hashAlgo sema.HashAlgorithm, weight int) (*runtime.AccountKey, error) {
	ret := _m.Called(address, publicKey, hashAlgo, weight)

	var r0 *runtime.AccountKey
	if rf, ok := ret.Get(0).(func(common.Address, *runtime.PublicKey, sema.HashAlgorithm, int) *runtime.AccountKey); ok {
		r0 = rf(address, publicKey, hashAlgo, weight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.AccountKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *runtime.PublicKey, sema.HashAlgorithm, int) error); ok {
		r1 = rf(address, publicKey, hashAlgo, weight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddEncodedAccountKey provides a mock function with given fields: address, publicKey
func (_m *AccountInterface) AddEncodedAccountKey(address common.Address, publicKey []byte) error {
	ret := _m.Called(address, publicKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, []byte) error); ok {
		r0 = rf(address, publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: address
func (_m *AccountInterface) CreateAccount(address common.Address) (common.Address, error) {
	ret := _m.Called(address)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(common.Address) common.Address); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKey provides a mock function with given fields: address, keyIndex
func (_m *AccountInterface) GetAccountKey(address common.Address, keyIndex int) (*runtime.AccountKey, error) {
	ret := _m.Called(address, keyIndex)

	var r0 *runtime.AccountKey
	if rf, ok := ret.Get(0).(func(common.Address, int) *runtime.AccountKey); ok {
		r0 = rf(address, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.AccountKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, int) error); ok {
		r1 = rf(address, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSigningAccounts provides a mock function with given fields:
func (_m *AccountInterface) GetSigningAccounts() ([]common.Address, error) {
	ret := _m.Called()

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAccountKey provides a mock function with given fields: address, keyIndex
func (_m *AccountInterface) RevokeAccountKey(address common.Address, keyIndex int) (*runtime.AccountKey, error) {
	ret := _m.Called(address, keyIndex)

	var r0 *runtime.AccountKey
	if rf, ok := ret.Get(0).(func(common.Address, int) *runtime.AccountKey); ok {
		r0 = rf(address, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.AccountKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, int) error); ok {
		r1 = rf(address, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewAccountInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountInterface creates a new instance of AccountInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountInterface(t NewAccountInterfaceT) *AccountInterface {
	mock := &AccountInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
