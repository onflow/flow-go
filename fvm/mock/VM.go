// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	fvm "github.com/onflow/flow-go/fvm"
	mock "github.com/stretchr/testify/mock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"

	storage "github.com/onflow/flow-go/fvm/storage"
)

// MockVM is an autogenerated mock type for the VM type
type MockVM struct {
	mock.Mock
}

type MockVM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVM) EXPECT() *MockVM_Expecter {
	return &MockVM_Expecter{mock: &_m.Mock}
}

// NewExecutor provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockVM) NewExecutor(_a0 fvm.Context, _a1 fvm.Procedure, _a2 storage.TransactionPreparer) fvm.ProcedureExecutor {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for NewExecutor")
	}

	var r0 fvm.ProcedureExecutor
	if rf, ok := ret.Get(0).(func(fvm.Context, fvm.Procedure, storage.TransactionPreparer) fvm.ProcedureExecutor); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fvm.ProcedureExecutor)
		}
	}

	return r0
}

// MockVM_NewExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewExecutor'
type MockVM_NewExecutor_Call struct {
	*mock.Call
}

// NewExecutor is a helper method to define mock.On call
//   - _a0 fvm.Context
//   - _a1 fvm.Procedure
//   - _a2 storage.TransactionPreparer
func (_e *MockVM_Expecter) NewExecutor(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockVM_NewExecutor_Call {
	return &MockVM_NewExecutor_Call{Call: _e.mock.On("NewExecutor", _a0, _a1, _a2)}
}

func (_c *MockVM_NewExecutor_Call) Run(run func(_a0 fvm.Context, _a1 fvm.Procedure, _a2 storage.TransactionPreparer)) *MockVM_NewExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fvm.Context), args[1].(fvm.Procedure), args[2].(storage.TransactionPreparer))
	})
	return _c
}

func (_c *MockVM_NewExecutor_Call) Return(_a0 fvm.ProcedureExecutor) *MockVM_NewExecutor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVM_NewExecutor_Call) RunAndReturn(run func(fvm.Context, fvm.Procedure, storage.TransactionPreparer) fvm.ProcedureExecutor) *MockVM_NewExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockVM) Run(_a0 fvm.Context, _a1 fvm.Procedure, _a2 snapshot.StorageSnapshot) (*snapshot.ExecutionSnapshot, fvm.ProcedureOutput, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 *snapshot.ExecutionSnapshot
	var r1 fvm.ProcedureOutput
	var r2 error
	if rf, ok := ret.Get(0).(func(fvm.Context, fvm.Procedure, snapshot.StorageSnapshot) (*snapshot.ExecutionSnapshot, fvm.ProcedureOutput, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(fvm.Context, fvm.Procedure, snapshot.StorageSnapshot) *snapshot.ExecutionSnapshot); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snapshot.ExecutionSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(fvm.Context, fvm.Procedure, snapshot.StorageSnapshot) fvm.ProcedureOutput); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(fvm.ProcedureOutput)
	}

	if rf, ok := ret.Get(2).(func(fvm.Context, fvm.Procedure, snapshot.StorageSnapshot) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVM_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockVM_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 fvm.Context
//   - _a1 fvm.Procedure
//   - _a2 snapshot.StorageSnapshot
func (_e *MockVM_Expecter) Run(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockVM_Run_Call {
	return &MockVM_Run_Call{Call: _e.mock.On("Run", _a0, _a1, _a2)}
}

func (_c *MockVM_Run_Call) Run(run func(_a0 fvm.Context, _a1 fvm.Procedure, _a2 snapshot.StorageSnapshot)) *MockVM_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fvm.Context), args[1].(fvm.Procedure), args[2].(snapshot.StorageSnapshot))
	})
	return _c
}

func (_c *MockVM_Run_Call) Return(_a0 *snapshot.ExecutionSnapshot, _a1 fvm.ProcedureOutput, _a2 error) *MockVM_Run_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVM_Run_Call) RunAndReturn(run func(fvm.Context, fvm.Procedure, snapshot.StorageSnapshot) (*snapshot.ExecutionSnapshot, fvm.ProcedureOutput, error)) *MockVM_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVM creates a new instance of MockVM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVM {
	mock := &MockVM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
