// Code generated by mockery v2.12.1. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Ledger is an autogenerated mock type for the Ledger type
type Ledger struct {
	mock.Mock
}

// Delete provides a mock function with given fields: owner, controller, key
func (_m *Ledger) Delete(owner string, controller string, key string) error {
	ret := _m.Called(owner, controller, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(owner, controller, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: owner, controller, key
func (_m *Ledger) Get(owner string, controller string, key string) ([]byte, error) {
	ret := _m.Called(owner, controller, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string) []byte); ok {
		r0 = rf(owner, controller, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(owner, controller, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: owner, controller, key, value
func (_m *Ledger) Set(owner string, controller string, key string, value []byte) error {
	ret := _m.Called(owner, controller, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) error); ok {
		r0 = rf(owner, controller, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Touch provides a mock function with given fields: owner, controller, key
func (_m *Ledger) Touch(owner string, controller string, key string) error {
	ret := _m.Called(owner, controller, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(owner, controller, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLedger creates a new instance of Ledger. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewLedger(t testing.TB) *Ledger {
	mock := &Ledger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
