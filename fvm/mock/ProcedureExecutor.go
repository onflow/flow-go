// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	fvm "github.com/onflow/flow-go/fvm"
	mock "github.com/stretchr/testify/mock"
)

// MockProcedureExecutor is an autogenerated mock type for the ProcedureExecutor type
type MockProcedureExecutor struct {
	mock.Mock
}

type MockProcedureExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcedureExecutor) EXPECT() *MockProcedureExecutor_Expecter {
	return &MockProcedureExecutor_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with no fields
func (_m *MockProcedureExecutor) Cleanup() {
	_m.Called()
}

// MockProcedureExecutor_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type MockProcedureExecutor_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
func (_e *MockProcedureExecutor_Expecter) Cleanup() *MockProcedureExecutor_Cleanup_Call {
	return &MockProcedureExecutor_Cleanup_Call{Call: _e.mock.On("Cleanup")}
}

func (_c *MockProcedureExecutor_Cleanup_Call) Run(run func()) *MockProcedureExecutor_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcedureExecutor_Cleanup_Call) Return() *MockProcedureExecutor_Cleanup_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcedureExecutor_Cleanup_Call) RunAndReturn(run func()) *MockProcedureExecutor_Cleanup_Call {
	_c.Run(run)
	return _c
}

// Execute provides a mock function with no fields
func (_m *MockProcedureExecutor) Execute() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProcedureExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockProcedureExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockProcedureExecutor_Expecter) Execute() *MockProcedureExecutor_Execute_Call {
	return &MockProcedureExecutor_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockProcedureExecutor_Execute_Call) Run(run func()) *MockProcedureExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcedureExecutor_Execute_Call) Return(_a0 error) *MockProcedureExecutor_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedureExecutor_Execute_Call) RunAndReturn(run func() error) *MockProcedureExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Output provides a mock function with no fields
func (_m *MockProcedureExecutor) Output() fvm.ProcedureOutput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 fvm.ProcedureOutput
	if rf, ok := ret.Get(0).(func() fvm.ProcedureOutput); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fvm.ProcedureOutput)
	}

	return r0
}

// MockProcedureExecutor_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockProcedureExecutor_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
func (_e *MockProcedureExecutor_Expecter) Output() *MockProcedureExecutor_Output_Call {
	return &MockProcedureExecutor_Output_Call{Call: _e.mock.On("Output")}
}

func (_c *MockProcedureExecutor_Output_Call) Run(run func()) *MockProcedureExecutor_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcedureExecutor_Output_Call) Return(_a0 fvm.ProcedureOutput) *MockProcedureExecutor_Output_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedureExecutor_Output_Call) RunAndReturn(run func() fvm.ProcedureOutput) *MockProcedureExecutor_Output_Call {
	_c.Call.Return(run)
	return _c
}

// Preprocess provides a mock function with no fields
func (_m *MockProcedureExecutor) Preprocess() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Preprocess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProcedureExecutor_Preprocess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preprocess'
type MockProcedureExecutor_Preprocess_Call struct {
	*mock.Call
}

// Preprocess is a helper method to define mock.On call
func (_e *MockProcedureExecutor_Expecter) Preprocess() *MockProcedureExecutor_Preprocess_Call {
	return &MockProcedureExecutor_Preprocess_Call{Call: _e.mock.On("Preprocess")}
}

func (_c *MockProcedureExecutor_Preprocess_Call) Run(run func()) *MockProcedureExecutor_Preprocess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcedureExecutor_Preprocess_Call) Return(_a0 error) *MockProcedureExecutor_Preprocess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedureExecutor_Preprocess_Call) RunAndReturn(run func() error) *MockProcedureExecutor_Preprocess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcedureExecutor creates a new instance of MockProcedureExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcedureExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcedureExecutor {
	mock := &MockProcedureExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
