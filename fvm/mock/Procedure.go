// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	fvm "github.com/onflow/flow-go/fvm"
	logical "github.com/onflow/flow-go/fvm/storage/logical"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/fvm/storage"
)

// MockProcedure is an autogenerated mock type for the Procedure type
type MockProcedure struct {
	mock.Mock
}

type MockProcedure_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcedure) EXPECT() *MockProcedure_Expecter {
	return &MockProcedure_Expecter{mock: &_m.Mock}
}

// ComputationLimit provides a mock function with given fields: ctx
func (_m *MockProcedure) ComputationLimit(ctx fvm.Context) uint64 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ComputationLimit")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(fvm.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockProcedure_ComputationLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputationLimit'
type MockProcedure_ComputationLimit_Call struct {
	*mock.Call
}

// ComputationLimit is a helper method to define mock.On call
//   - ctx fvm.Context
func (_e *MockProcedure_Expecter) ComputationLimit(ctx interface{}) *MockProcedure_ComputationLimit_Call {
	return &MockProcedure_ComputationLimit_Call{Call: _e.mock.On("ComputationLimit", ctx)}
}

func (_c *MockProcedure_ComputationLimit_Call) Run(run func(ctx fvm.Context)) *MockProcedure_ComputationLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fvm.Context))
	})
	return _c
}

func (_c *MockProcedure_ComputationLimit_Call) Return(_a0 uint64) *MockProcedure_ComputationLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedure_ComputationLimit_Call) RunAndReturn(run func(fvm.Context) uint64) *MockProcedure_ComputationLimit_Call {
	_c.Call.Return(run)
	return _c
}

// ExecutionTime provides a mock function with no fields
func (_m *MockProcedure) ExecutionTime() logical.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecutionTime")
	}

	var r0 logical.Time
	if rf, ok := ret.Get(0).(func() logical.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logical.Time)
	}

	return r0
}

// MockProcedure_ExecutionTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionTime'
type MockProcedure_ExecutionTime_Call struct {
	*mock.Call
}

// ExecutionTime is a helper method to define mock.On call
func (_e *MockProcedure_Expecter) ExecutionTime() *MockProcedure_ExecutionTime_Call {
	return &MockProcedure_ExecutionTime_Call{Call: _e.mock.On("ExecutionTime")}
}

func (_c *MockProcedure_ExecutionTime_Call) Run(run func()) *MockProcedure_ExecutionTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcedure_ExecutionTime_Call) Return(_a0 logical.Time) *MockProcedure_ExecutionTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedure_ExecutionTime_Call) RunAndReturn(run func() logical.Time) *MockProcedure_ExecutionTime_Call {
	_c.Call.Return(run)
	return _c
}

// MemoryLimit provides a mock function with given fields: ctx
func (_m *MockProcedure) MemoryLimit(ctx fvm.Context) uint64 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MemoryLimit")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(fvm.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockProcedure_MemoryLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemoryLimit'
type MockProcedure_MemoryLimit_Call struct {
	*mock.Call
}

// MemoryLimit is a helper method to define mock.On call
//   - ctx fvm.Context
func (_e *MockProcedure_Expecter) MemoryLimit(ctx interface{}) *MockProcedure_MemoryLimit_Call {
	return &MockProcedure_MemoryLimit_Call{Call: _e.mock.On("MemoryLimit", ctx)}
}

func (_c *MockProcedure_MemoryLimit_Call) Run(run func(ctx fvm.Context)) *MockProcedure_MemoryLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fvm.Context))
	})
	return _c
}

func (_c *MockProcedure_MemoryLimit_Call) Return(_a0 uint64) *MockProcedure_MemoryLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedure_MemoryLimit_Call) RunAndReturn(run func(fvm.Context) uint64) *MockProcedure_MemoryLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutor provides a mock function with given fields: ctx, txnState
func (_m *MockProcedure) NewExecutor(ctx fvm.Context, txnState storage.TransactionPreparer) fvm.ProcedureExecutor {
	ret := _m.Called(ctx, txnState)

	if len(ret) == 0 {
		panic("no return value specified for NewExecutor")
	}

	var r0 fvm.ProcedureExecutor
	if rf, ok := ret.Get(0).(func(fvm.Context, storage.TransactionPreparer) fvm.ProcedureExecutor); ok {
		r0 = rf(ctx, txnState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fvm.ProcedureExecutor)
		}
	}

	return r0
}

// MockProcedure_NewExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewExecutor'
type MockProcedure_NewExecutor_Call struct {
	*mock.Call
}

// NewExecutor is a helper method to define mock.On call
//   - ctx fvm.Context
//   - txnState storage.TransactionPreparer
func (_e *MockProcedure_Expecter) NewExecutor(ctx interface{}, txnState interface{}) *MockProcedure_NewExecutor_Call {
	return &MockProcedure_NewExecutor_Call{Call: _e.mock.On("NewExecutor", ctx, txnState)}
}

func (_c *MockProcedure_NewExecutor_Call) Run(run func(ctx fvm.Context, txnState storage.TransactionPreparer)) *MockProcedure_NewExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fvm.Context), args[1].(storage.TransactionPreparer))
	})
	return _c
}

func (_c *MockProcedure_NewExecutor_Call) Return(_a0 fvm.ProcedureExecutor) *MockProcedure_NewExecutor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedure_NewExecutor_Call) RunAndReturn(run func(fvm.Context, storage.TransactionPreparer) fvm.ProcedureExecutor) *MockProcedure_NewExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldDisableMemoryAndInteractionLimits provides a mock function with given fields: ctx
func (_m *MockProcedure) ShouldDisableMemoryAndInteractionLimits(ctx fvm.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ShouldDisableMemoryAndInteractionLimits")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(fvm.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldDisableMemoryAndInteractionLimits'
type MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call struct {
	*mock.Call
}

// ShouldDisableMemoryAndInteractionLimits is a helper method to define mock.On call
//   - ctx fvm.Context
func (_e *MockProcedure_Expecter) ShouldDisableMemoryAndInteractionLimits(ctx interface{}) *MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call {
	return &MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call{Call: _e.mock.On("ShouldDisableMemoryAndInteractionLimits", ctx)}
}

func (_c *MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call) Run(run func(ctx fvm.Context)) *MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fvm.Context))
	})
	return _c
}

func (_c *MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call) Return(_a0 bool) *MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call) RunAndReturn(run func(fvm.Context) bool) *MockProcedure_ShouldDisableMemoryAndInteractionLimits_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockProcedure) Type() fvm.ProcedureType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 fvm.ProcedureType
	if rf, ok := ret.Get(0).(func() fvm.ProcedureType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fvm.ProcedureType)
	}

	return r0
}

// MockProcedure_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockProcedure_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockProcedure_Expecter) Type() *MockProcedure_Type_Call {
	return &MockProcedure_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockProcedure_Type_Call) Run(run func()) *MockProcedure_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcedure_Type_Call) Return(_a0 fvm.ProcedureType) *MockProcedure_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcedure_Type_Call) RunAndReturn(run func() fvm.ProcedureType) *MockProcedure_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcedure creates a new instance of MockProcedure. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcedure(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcedure {
	mock := &MockProcedure{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
