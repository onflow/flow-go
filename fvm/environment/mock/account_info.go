// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/runtime/common"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// AccountInfo is an autogenerated mock type for the AccountInfo type
type AccountInfo struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: address
func (_m *AccountInfo) GetAccount(address flow.Address) (*flow.Account, error) {
	ret := _m.Called(address)

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address) (*flow.Account, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(flow.Address) *flow.Account); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountAvailableBalance provides a mock function with given fields: runtimeAddress
func (_m *AccountInfo) GetAccountAvailableBalance(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBalance provides a mock function with given fields: runtimeAddress
func (_m *AccountInfo) GetAccountBalance(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageCapacity provides a mock function with given fields: runtimeAddress
func (_m *AccountInfo) GetStorageCapacity(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageUsed provides a mock function with given fields: runtimeaddress
func (_m *AccountInfo) GetStorageUsed(runtimeaddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeaddress)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeaddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeaddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeaddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAccountInfo interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountInfo creates a new instance of AccountInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountInfo(t mockConstructorTestingTNewAccountInfo) *AccountInfo {
	mock := &AccountInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
