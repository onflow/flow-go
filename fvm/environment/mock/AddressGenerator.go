// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockAddressGenerator is an autogenerated mock type for the AddressGenerator type
type MockAddressGenerator struct {
	mock.Mock
}

type MockAddressGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressGenerator) EXPECT() *MockAddressGenerator_Expecter {
	return &MockAddressGenerator_Expecter{mock: &_m.Mock}
}

// AddressCount provides a mock function with no fields
func (_m *MockAddressGenerator) AddressCount() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddressCount")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockAddressGenerator_AddressCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressCount'
type MockAddressGenerator_AddressCount_Call struct {
	*mock.Call
}

// AddressCount is a helper method to define mock.On call
func (_e *MockAddressGenerator_Expecter) AddressCount() *MockAddressGenerator_AddressCount_Call {
	return &MockAddressGenerator_AddressCount_Call{Call: _e.mock.On("AddressCount")}
}

func (_c *MockAddressGenerator_AddressCount_Call) Run(run func()) *MockAddressGenerator_AddressCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddressGenerator_AddressCount_Call) Return(_a0 uint64) *MockAddressGenerator_AddressCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressGenerator_AddressCount_Call) RunAndReturn(run func() uint64) *MockAddressGenerator_AddressCount_Call {
	_c.Call.Return(run)
	return _c
}

// Bytes provides a mock function with no fields
func (_m *MockAddressGenerator) Bytes() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockAddressGenerator_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockAddressGenerator_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockAddressGenerator_Expecter) Bytes() *MockAddressGenerator_Bytes_Call {
	return &MockAddressGenerator_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockAddressGenerator_Bytes_Call) Run(run func()) *MockAddressGenerator_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddressGenerator_Bytes_Call) Return(_a0 []byte) *MockAddressGenerator_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressGenerator_Bytes_Call) RunAndReturn(run func() []byte) *MockAddressGenerator_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentAddress provides a mock function with no fields
func (_m *MockAddressGenerator) CurrentAddress() flow.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentAddress")
	}

	var r0 flow.Address
	if rf, ok := ret.Get(0).(func() flow.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Address)
		}
	}

	return r0
}

// MockAddressGenerator_CurrentAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentAddress'
type MockAddressGenerator_CurrentAddress_Call struct {
	*mock.Call
}

// CurrentAddress is a helper method to define mock.On call
func (_e *MockAddressGenerator_Expecter) CurrentAddress() *MockAddressGenerator_CurrentAddress_Call {
	return &MockAddressGenerator_CurrentAddress_Call{Call: _e.mock.On("CurrentAddress")}
}

func (_c *MockAddressGenerator_CurrentAddress_Call) Run(run func()) *MockAddressGenerator_CurrentAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddressGenerator_CurrentAddress_Call) Return(_a0 flow.Address) *MockAddressGenerator_CurrentAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressGenerator_CurrentAddress_Call) RunAndReturn(run func() flow.Address) *MockAddressGenerator_CurrentAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NextAddress provides a mock function with no fields
func (_m *MockAddressGenerator) NextAddress() (flow.Address, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextAddress")
	}

	var r0 flow.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressGenerator_NextAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextAddress'
type MockAddressGenerator_NextAddress_Call struct {
	*mock.Call
}

// NextAddress is a helper method to define mock.On call
func (_e *MockAddressGenerator_Expecter) NextAddress() *MockAddressGenerator_NextAddress_Call {
	return &MockAddressGenerator_NextAddress_Call{Call: _e.mock.On("NextAddress")}
}

func (_c *MockAddressGenerator_NextAddress_Call) Run(run func()) *MockAddressGenerator_NextAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddressGenerator_NextAddress_Call) Return(_a0 flow.Address, _a1 error) *MockAddressGenerator_NextAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressGenerator_NextAddress_Call) RunAndReturn(run func() (flow.Address, error)) *MockAddressGenerator_NextAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddressGenerator creates a new instance of MockAddressGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddressGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddressGenerator {
	mock := &MockAddressGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
