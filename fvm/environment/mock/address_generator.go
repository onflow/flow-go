// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// AddressGenerator is an autogenerated mock type for the AddressGenerator type
type AddressGenerator struct {
	mock.Mock
}

// AddressCount provides a mock function with given fields:
func (_m *AddressGenerator) AddressCount() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddressCount")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Bytes provides a mock function with given fields:
func (_m *AddressGenerator) Bytes() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// CurrentAddress provides a mock function with given fields:
func (_m *AddressGenerator) CurrentAddress() flow.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentAddress")
	}

	var r0 flow.Address
	if rf, ok := ret.Get(0).(func() flow.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Address)
		}
	}

	return r0
}

// NextAddress provides a mock function with given fields:
func (_m *AddressGenerator) NextAddress() (flow.Address, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextAddress")
	}

	var r0 flow.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() (flow.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAddressGenerator creates a new instance of AddressGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressGenerator {
	mock := &AddressGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
