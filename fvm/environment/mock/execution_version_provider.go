// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	semver "github.com/coreos/go-semver/semver"
	mock "github.com/stretchr/testify/mock"
)

// ExecutionVersionProvider is an autogenerated mock type for the ExecutionVersionProvider type
type ExecutionVersionProvider struct {
	mock.Mock
}

// ExecutionVersion provides a mock function with given fields:
func (_m *ExecutionVersionProvider) ExecutionVersion() (semver.Version, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecutionVersion")
	}

	var r0 semver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func() (semver.Version, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() semver.Version); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExecutionVersionProvider creates a new instance of ExecutionVersionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionVersionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionVersionProvider {
	mock := &ExecutionVersionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
