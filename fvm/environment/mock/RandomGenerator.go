// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockRandomGenerator is an autogenerated mock type for the RandomGenerator type
type MockRandomGenerator struct {
	mock.Mock
}

type MockRandomGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRandomGenerator) EXPECT() *MockRandomGenerator_Expecter {
	return &MockRandomGenerator_Expecter{mock: &_m.Mock}
}

// ReadRandom provides a mock function with given fields: _a0
func (_m *MockRandomGenerator) ReadRandom(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadRandom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRandomGenerator_ReadRandom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRandom'
type MockRandomGenerator_ReadRandom_Call struct {
	*mock.Call
}

// ReadRandom is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockRandomGenerator_Expecter) ReadRandom(_a0 interface{}) *MockRandomGenerator_ReadRandom_Call {
	return &MockRandomGenerator_ReadRandom_Call{Call: _e.mock.On("ReadRandom", _a0)}
}

func (_c *MockRandomGenerator_ReadRandom_Call) Run(run func(_a0 []byte)) *MockRandomGenerator_ReadRandom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockRandomGenerator_ReadRandom_Call) Return(_a0 error) *MockRandomGenerator_ReadRandom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRandomGenerator_ReadRandom_Call) RunAndReturn(run func([]byte) error) *MockRandomGenerator_ReadRandom_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRandomGenerator creates a new instance of MockRandomGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRandomGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRandomGenerator {
	mock := &MockRandomGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
