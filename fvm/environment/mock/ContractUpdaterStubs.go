// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	cadence "github.com/onflow/cadence"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockContractUpdaterStubs is an autogenerated mock type for the ContractUpdaterStubs type
type MockContractUpdaterStubs struct {
	mock.Mock
}

type MockContractUpdaterStubs_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContractUpdaterStubs) EXPECT() *MockContractUpdaterStubs_Expecter {
	return &MockContractUpdaterStubs_Expecter{mock: &_m.Mock}
}

// GetAuthorizedAccounts provides a mock function with given fields: path
func (_m *MockContractUpdaterStubs) GetAuthorizedAccounts(path cadence.Path) []flow.Address {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizedAccounts")
	}

	var r0 []flow.Address
	if rf, ok := ret.Get(0).(func(cadence.Path) []flow.Address); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Address)
		}
	}

	return r0
}

// MockContractUpdaterStubs_GetAuthorizedAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizedAccounts'
type MockContractUpdaterStubs_GetAuthorizedAccounts_Call struct {
	*mock.Call
}

// GetAuthorizedAccounts is a helper method to define mock.On call
//   - path cadence.Path
func (_e *MockContractUpdaterStubs_Expecter) GetAuthorizedAccounts(path interface{}) *MockContractUpdaterStubs_GetAuthorizedAccounts_Call {
	return &MockContractUpdaterStubs_GetAuthorizedAccounts_Call{Call: _e.mock.On("GetAuthorizedAccounts", path)}
}

func (_c *MockContractUpdaterStubs_GetAuthorizedAccounts_Call) Run(run func(path cadence.Path)) *MockContractUpdaterStubs_GetAuthorizedAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cadence.Path))
	})
	return _c
}

func (_c *MockContractUpdaterStubs_GetAuthorizedAccounts_Call) Return(_a0 []flow.Address) *MockContractUpdaterStubs_GetAuthorizedAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContractUpdaterStubs_GetAuthorizedAccounts_Call) RunAndReturn(run func(cadence.Path) []flow.Address) *MockContractUpdaterStubs_GetAuthorizedAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// RestrictedDeploymentEnabled provides a mock function with no fields
func (_m *MockContractUpdaterStubs) RestrictedDeploymentEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestrictedDeploymentEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestrictedDeploymentEnabled'
type MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call struct {
	*mock.Call
}

// RestrictedDeploymentEnabled is a helper method to define mock.On call
func (_e *MockContractUpdaterStubs_Expecter) RestrictedDeploymentEnabled() *MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call {
	return &MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call{Call: _e.mock.On("RestrictedDeploymentEnabled")}
}

func (_c *MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call) Run(run func()) *MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call) Return(_a0 bool) *MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call) RunAndReturn(run func() bool) *MockContractUpdaterStubs_RestrictedDeploymentEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// RestrictedRemovalEnabled provides a mock function with no fields
func (_m *MockContractUpdaterStubs) RestrictedRemovalEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestrictedRemovalEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContractUpdaterStubs_RestrictedRemovalEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestrictedRemovalEnabled'
type MockContractUpdaterStubs_RestrictedRemovalEnabled_Call struct {
	*mock.Call
}

// RestrictedRemovalEnabled is a helper method to define mock.On call
func (_e *MockContractUpdaterStubs_Expecter) RestrictedRemovalEnabled() *MockContractUpdaterStubs_RestrictedRemovalEnabled_Call {
	return &MockContractUpdaterStubs_RestrictedRemovalEnabled_Call{Call: _e.mock.On("RestrictedRemovalEnabled")}
}

func (_c *MockContractUpdaterStubs_RestrictedRemovalEnabled_Call) Run(run func()) *MockContractUpdaterStubs_RestrictedRemovalEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContractUpdaterStubs_RestrictedRemovalEnabled_Call) Return(_a0 bool) *MockContractUpdaterStubs_RestrictedRemovalEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContractUpdaterStubs_RestrictedRemovalEnabled_Call) RunAndReturn(run func() bool) *MockContractUpdaterStubs_RestrictedRemovalEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContractUpdaterStubs creates a new instance of MockContractUpdaterStubs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContractUpdaterStubs(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContractUpdaterStubs {
	mock := &MockContractUpdaterStubs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
