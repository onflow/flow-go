// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	sema "github.com/onflow/cadence/sema"
	mock "github.com/stretchr/testify/mock"

	stdlib "github.com/onflow/cadence/stdlib"
)

// MockCryptoLibrary is an autogenerated mock type for the CryptoLibrary type
type MockCryptoLibrary struct {
	mock.Mock
}

type MockCryptoLibrary_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCryptoLibrary) EXPECT() *MockCryptoLibrary_Expecter {
	return &MockCryptoLibrary_Expecter{mock: &_m.Mock}
}

// BLSAggregatePublicKeys provides a mock function with given fields: keys
func (_m *MockCryptoLibrary) BLSAggregatePublicKeys(keys []*stdlib.PublicKey) (*stdlib.PublicKey, error) {
	ret := _m.Called(keys)

	if len(ret) == 0 {
		panic("no return value specified for BLSAggregatePublicKeys")
	}

	var r0 *stdlib.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]*stdlib.PublicKey) (*stdlib.PublicKey, error)); ok {
		return rf(keys)
	}
	if rf, ok := ret.Get(0).(func([]*stdlib.PublicKey) *stdlib.PublicKey); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]*stdlib.PublicKey) error); ok {
		r1 = rf(keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCryptoLibrary_BLSAggregatePublicKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLSAggregatePublicKeys'
type MockCryptoLibrary_BLSAggregatePublicKeys_Call struct {
	*mock.Call
}

// BLSAggregatePublicKeys is a helper method to define mock.On call
//   - keys []*stdlib.PublicKey
func (_e *MockCryptoLibrary_Expecter) BLSAggregatePublicKeys(keys interface{}) *MockCryptoLibrary_BLSAggregatePublicKeys_Call {
	return &MockCryptoLibrary_BLSAggregatePublicKeys_Call{Call: _e.mock.On("BLSAggregatePublicKeys", keys)}
}

func (_c *MockCryptoLibrary_BLSAggregatePublicKeys_Call) Run(run func(keys []*stdlib.PublicKey)) *MockCryptoLibrary_BLSAggregatePublicKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*stdlib.PublicKey))
	})
	return _c
}

func (_c *MockCryptoLibrary_BLSAggregatePublicKeys_Call) Return(_a0 *stdlib.PublicKey, _a1 error) *MockCryptoLibrary_BLSAggregatePublicKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCryptoLibrary_BLSAggregatePublicKeys_Call) RunAndReturn(run func([]*stdlib.PublicKey) (*stdlib.PublicKey, error)) *MockCryptoLibrary_BLSAggregatePublicKeys_Call {
	_c.Call.Return(run)
	return _c
}

// BLSAggregateSignatures provides a mock function with given fields: sigs
func (_m *MockCryptoLibrary) BLSAggregateSignatures(sigs [][]byte) ([]byte, error) {
	ret := _m.Called(sigs)

	if len(ret) == 0 {
		panic("no return value specified for BLSAggregateSignatures")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([][]byte) ([]byte, error)); ok {
		return rf(sigs)
	}
	if rf, ok := ret.Get(0).(func([][]byte) []byte); ok {
		r0 = rf(sigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([][]byte) error); ok {
		r1 = rf(sigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCryptoLibrary_BLSAggregateSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLSAggregateSignatures'
type MockCryptoLibrary_BLSAggregateSignatures_Call struct {
	*mock.Call
}

// BLSAggregateSignatures is a helper method to define mock.On call
//   - sigs [][]byte
func (_e *MockCryptoLibrary_Expecter) BLSAggregateSignatures(sigs interface{}) *MockCryptoLibrary_BLSAggregateSignatures_Call {
	return &MockCryptoLibrary_BLSAggregateSignatures_Call{Call: _e.mock.On("BLSAggregateSignatures", sigs)}
}

func (_c *MockCryptoLibrary_BLSAggregateSignatures_Call) Run(run func(sigs [][]byte)) *MockCryptoLibrary_BLSAggregateSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([][]byte))
	})
	return _c
}

func (_c *MockCryptoLibrary_BLSAggregateSignatures_Call) Return(_a0 []byte, _a1 error) *MockCryptoLibrary_BLSAggregateSignatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCryptoLibrary_BLSAggregateSignatures_Call) RunAndReturn(run func([][]byte) ([]byte, error)) *MockCryptoLibrary_BLSAggregateSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// BLSVerifyPOP provides a mock function with given fields: pk, sig
func (_m *MockCryptoLibrary) BLSVerifyPOP(pk *stdlib.PublicKey, sig []byte) (bool, error) {
	ret := _m.Called(pk, sig)

	if len(ret) == 0 {
		panic("no return value specified for BLSVerifyPOP")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*stdlib.PublicKey, []byte) (bool, error)); ok {
		return rf(pk, sig)
	}
	if rf, ok := ret.Get(0).(func(*stdlib.PublicKey, []byte) bool); ok {
		r0 = rf(pk, sig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*stdlib.PublicKey, []byte) error); ok {
		r1 = rf(pk, sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCryptoLibrary_BLSVerifyPOP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLSVerifyPOP'
type MockCryptoLibrary_BLSVerifyPOP_Call struct {
	*mock.Call
}

// BLSVerifyPOP is a helper method to define mock.On call
//   - pk *stdlib.PublicKey
//   - sig []byte
func (_e *MockCryptoLibrary_Expecter) BLSVerifyPOP(pk interface{}, sig interface{}) *MockCryptoLibrary_BLSVerifyPOP_Call {
	return &MockCryptoLibrary_BLSVerifyPOP_Call{Call: _e.mock.On("BLSVerifyPOP", pk, sig)}
}

func (_c *MockCryptoLibrary_BLSVerifyPOP_Call) Run(run func(pk *stdlib.PublicKey, sig []byte)) *MockCryptoLibrary_BLSVerifyPOP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*stdlib.PublicKey), args[1].([]byte))
	})
	return _c
}

func (_c *MockCryptoLibrary_BLSVerifyPOP_Call) Return(_a0 bool, _a1 error) *MockCryptoLibrary_BLSVerifyPOP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCryptoLibrary_BLSVerifyPOP_Call) RunAndReturn(run func(*stdlib.PublicKey, []byte) (bool, error)) *MockCryptoLibrary_BLSVerifyPOP_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: data, tag, hashAlgorithm
func (_m *MockCryptoLibrary) Hash(data []byte, tag string, hashAlgorithm sema.HashAlgorithm) ([]byte, error) {
	ret := _m.Called(data, tag, hashAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string, sema.HashAlgorithm) ([]byte, error)); ok {
		return rf(data, tag, hashAlgorithm)
	}
	if rf, ok := ret.Get(0).(func([]byte, string, sema.HashAlgorithm) []byte); ok {
		r0 = rf(data, tag, hashAlgorithm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, string, sema.HashAlgorithm) error); ok {
		r1 = rf(data, tag, hashAlgorithm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCryptoLibrary_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockCryptoLibrary_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - data []byte
//   - tag string
//   - hashAlgorithm sema.HashAlgorithm
func (_e *MockCryptoLibrary_Expecter) Hash(data interface{}, tag interface{}, hashAlgorithm interface{}) *MockCryptoLibrary_Hash_Call {
	return &MockCryptoLibrary_Hash_Call{Call: _e.mock.On("Hash", data, tag, hashAlgorithm)}
}

func (_c *MockCryptoLibrary_Hash_Call) Run(run func(data []byte, tag string, hashAlgorithm sema.HashAlgorithm)) *MockCryptoLibrary_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].(sema.HashAlgorithm))
	})
	return _c
}

func (_c *MockCryptoLibrary_Hash_Call) Return(_a0 []byte, _a1 error) *MockCryptoLibrary_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCryptoLibrary_Hash_Call) RunAndReturn(run func([]byte, string, sema.HashAlgorithm) ([]byte, error)) *MockCryptoLibrary_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePublicKey provides a mock function with given fields: pk
func (_m *MockCryptoLibrary) ValidatePublicKey(pk *stdlib.PublicKey) error {
	ret := _m.Called(pk)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePublicKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*stdlib.PublicKey) error); ok {
		r0 = rf(pk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCryptoLibrary_ValidatePublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePublicKey'
type MockCryptoLibrary_ValidatePublicKey_Call struct {
	*mock.Call
}

// ValidatePublicKey is a helper method to define mock.On call
//   - pk *stdlib.PublicKey
func (_e *MockCryptoLibrary_Expecter) ValidatePublicKey(pk interface{}) *MockCryptoLibrary_ValidatePublicKey_Call {
	return &MockCryptoLibrary_ValidatePublicKey_Call{Call: _e.mock.On("ValidatePublicKey", pk)}
}

func (_c *MockCryptoLibrary_ValidatePublicKey_Call) Run(run func(pk *stdlib.PublicKey)) *MockCryptoLibrary_ValidatePublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*stdlib.PublicKey))
	})
	return _c
}

func (_c *MockCryptoLibrary_ValidatePublicKey_Call) Return(_a0 error) *MockCryptoLibrary_ValidatePublicKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCryptoLibrary_ValidatePublicKey_Call) RunAndReturn(run func(*stdlib.PublicKey) error) *MockCryptoLibrary_ValidatePublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// VerifySignature provides a mock function with given fields: signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm
func (_m *MockCryptoLibrary) VerifySignature(signature []byte, tag string, signedData []byte, publicKey []byte, signatureAlgorithm sema.SignatureAlgorithm, hashAlgorithm sema.HashAlgorithm) (bool, error) {
	ret := _m.Called(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for VerifySignature")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) (bool, error)); ok {
		return rf(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)
	}
	if rf, ok := ret.Get(0).(func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) bool); ok {
		r0 = rf(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) error); ok {
		r1 = rf(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCryptoLibrary_VerifySignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySignature'
type MockCryptoLibrary_VerifySignature_Call struct {
	*mock.Call
}

// VerifySignature is a helper method to define mock.On call
//   - signature []byte
//   - tag string
//   - signedData []byte
//   - publicKey []byte
//   - signatureAlgorithm sema.SignatureAlgorithm
//   - hashAlgorithm sema.HashAlgorithm
func (_e *MockCryptoLibrary_Expecter) VerifySignature(signature interface{}, tag interface{}, signedData interface{}, publicKey interface{}, signatureAlgorithm interface{}, hashAlgorithm interface{}) *MockCryptoLibrary_VerifySignature_Call {
	return &MockCryptoLibrary_VerifySignature_Call{Call: _e.mock.On("VerifySignature", signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)}
}

func (_c *MockCryptoLibrary_VerifySignature_Call) Run(run func(signature []byte, tag string, signedData []byte, publicKey []byte, signatureAlgorithm sema.SignatureAlgorithm, hashAlgorithm sema.HashAlgorithm)) *MockCryptoLibrary_VerifySignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].([]byte), args[3].([]byte), args[4].(sema.SignatureAlgorithm), args[5].(sema.HashAlgorithm))
	})
	return _c
}

func (_c *MockCryptoLibrary_VerifySignature_Call) Return(_a0 bool, _a1 error) *MockCryptoLibrary_VerifySignature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCryptoLibrary_VerifySignature_Call) RunAndReturn(run func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) (bool, error)) *MockCryptoLibrary_VerifySignature_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCryptoLibrary creates a new instance of MockCryptoLibrary. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCryptoLibrary(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCryptoLibrary {
	mock := &MockCryptoLibrary{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
