// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMetricsReporter is an autogenerated mock type for the MetricsReporter type
type MockMetricsReporter struct {
	mock.Mock
}

type MockMetricsReporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsReporter) EXPECT() *MockMetricsReporter_Expecter {
	return &MockMetricsReporter_Expecter{mock: &_m.Mock}
}

// EVMBlockExecuted provides a mock function with given fields: txCount, totalGasUsed, totalSupplyInFlow
func (_m *MockMetricsReporter) EVMBlockExecuted(txCount int, totalGasUsed uint64, totalSupplyInFlow float64) {
	_m.Called(txCount, totalGasUsed, totalSupplyInFlow)
}

// MockMetricsReporter_EVMBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMBlockExecuted'
type MockMetricsReporter_EVMBlockExecuted_Call struct {
	*mock.Call
}

// EVMBlockExecuted is a helper method to define mock.On call
//   - txCount int
//   - totalGasUsed uint64
//   - totalSupplyInFlow float64
func (_e *MockMetricsReporter_Expecter) EVMBlockExecuted(txCount interface{}, totalGasUsed interface{}, totalSupplyInFlow interface{}) *MockMetricsReporter_EVMBlockExecuted_Call {
	return &MockMetricsReporter_EVMBlockExecuted_Call{Call: _e.mock.On("EVMBlockExecuted", txCount, totalGasUsed, totalSupplyInFlow)}
}

func (_c *MockMetricsReporter_EVMBlockExecuted_Call) Run(run func(txCount int, totalGasUsed uint64, totalSupplyInFlow float64)) *MockMetricsReporter_EVMBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(uint64), args[2].(float64))
	})
	return _c
}

func (_c *MockMetricsReporter_EVMBlockExecuted_Call) Return() *MockMetricsReporter_EVMBlockExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_EVMBlockExecuted_Call) RunAndReturn(run func(int, uint64, float64)) *MockMetricsReporter_EVMBlockExecuted_Call {
	_c.Run(run)
	return _c
}

// EVMTransactionExecuted provides a mock function with given fields: gasUsed, isDirectCall, failed
func (_m *MockMetricsReporter) EVMTransactionExecuted(gasUsed uint64, isDirectCall bool, failed bool) {
	_m.Called(gasUsed, isDirectCall, failed)
}

// MockMetricsReporter_EVMTransactionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMTransactionExecuted'
type MockMetricsReporter_EVMTransactionExecuted_Call struct {
	*mock.Call
}

// EVMTransactionExecuted is a helper method to define mock.On call
//   - gasUsed uint64
//   - isDirectCall bool
//   - failed bool
func (_e *MockMetricsReporter_Expecter) EVMTransactionExecuted(gasUsed interface{}, isDirectCall interface{}, failed interface{}) *MockMetricsReporter_EVMTransactionExecuted_Call {
	return &MockMetricsReporter_EVMTransactionExecuted_Call{Call: _e.mock.On("EVMTransactionExecuted", gasUsed, isDirectCall, failed)}
}

func (_c *MockMetricsReporter_EVMTransactionExecuted_Call) Run(run func(gasUsed uint64, isDirectCall bool, failed bool)) *MockMetricsReporter_EVMTransactionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *MockMetricsReporter_EVMTransactionExecuted_Call) Return() *MockMetricsReporter_EVMTransactionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_EVMTransactionExecuted_Call) RunAndReturn(run func(uint64, bool, bool)) *MockMetricsReporter_EVMTransactionExecuted_Call {
	_c.Run(run)
	return _c
}

// RuntimeSetNumberOfAccounts provides a mock function with given fields: count
func (_m *MockMetricsReporter) RuntimeSetNumberOfAccounts(count uint64) {
	_m.Called(count)
}

// MockMetricsReporter_RuntimeSetNumberOfAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeSetNumberOfAccounts'
type MockMetricsReporter_RuntimeSetNumberOfAccounts_Call struct {
	*mock.Call
}

// RuntimeSetNumberOfAccounts is a helper method to define mock.On call
//   - count uint64
func (_e *MockMetricsReporter_Expecter) RuntimeSetNumberOfAccounts(count interface{}) *MockMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	return &MockMetricsReporter_RuntimeSetNumberOfAccounts_Call{Call: _e.mock.On("RuntimeSetNumberOfAccounts", count)}
}

func (_c *MockMetricsReporter_RuntimeSetNumberOfAccounts_Call) Run(run func(count uint64)) *MockMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockMetricsReporter_RuntimeSetNumberOfAccounts_Call) Return() *MockMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_RuntimeSetNumberOfAccounts_Call) RunAndReturn(run func(uint64)) *MockMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionChecked provides a mock function with given fields: _a0
func (_m *MockMetricsReporter) RuntimeTransactionChecked(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockMetricsReporter_RuntimeTransactionChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionChecked'
type MockMetricsReporter_RuntimeTransactionChecked_Call struct {
	*mock.Call
}

// RuntimeTransactionChecked is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockMetricsReporter_Expecter) RuntimeTransactionChecked(_a0 interface{}) *MockMetricsReporter_RuntimeTransactionChecked_Call {
	return &MockMetricsReporter_RuntimeTransactionChecked_Call{Call: _e.mock.On("RuntimeTransactionChecked", _a0)}
}

func (_c *MockMetricsReporter_RuntimeTransactionChecked_Call) Run(run func(_a0 time.Duration)) *MockMetricsReporter_RuntimeTransactionChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionChecked_Call) Return() *MockMetricsReporter_RuntimeTransactionChecked_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionChecked_Call) RunAndReturn(run func(time.Duration)) *MockMetricsReporter_RuntimeTransactionChecked_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionInterpreted provides a mock function with given fields: _a0
func (_m *MockMetricsReporter) RuntimeTransactionInterpreted(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockMetricsReporter_RuntimeTransactionInterpreted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionInterpreted'
type MockMetricsReporter_RuntimeTransactionInterpreted_Call struct {
	*mock.Call
}

// RuntimeTransactionInterpreted is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockMetricsReporter_Expecter) RuntimeTransactionInterpreted(_a0 interface{}) *MockMetricsReporter_RuntimeTransactionInterpreted_Call {
	return &MockMetricsReporter_RuntimeTransactionInterpreted_Call{Call: _e.mock.On("RuntimeTransactionInterpreted", _a0)}
}

func (_c *MockMetricsReporter_RuntimeTransactionInterpreted_Call) Run(run func(_a0 time.Duration)) *MockMetricsReporter_RuntimeTransactionInterpreted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionInterpreted_Call) Return() *MockMetricsReporter_RuntimeTransactionInterpreted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionInterpreted_Call) RunAndReturn(run func(time.Duration)) *MockMetricsReporter_RuntimeTransactionInterpreted_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionParsed provides a mock function with given fields: _a0
func (_m *MockMetricsReporter) RuntimeTransactionParsed(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockMetricsReporter_RuntimeTransactionParsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionParsed'
type MockMetricsReporter_RuntimeTransactionParsed_Call struct {
	*mock.Call
}

// RuntimeTransactionParsed is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockMetricsReporter_Expecter) RuntimeTransactionParsed(_a0 interface{}) *MockMetricsReporter_RuntimeTransactionParsed_Call {
	return &MockMetricsReporter_RuntimeTransactionParsed_Call{Call: _e.mock.On("RuntimeTransactionParsed", _a0)}
}

func (_c *MockMetricsReporter_RuntimeTransactionParsed_Call) Run(run func(_a0 time.Duration)) *MockMetricsReporter_RuntimeTransactionParsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionParsed_Call) Return() *MockMetricsReporter_RuntimeTransactionParsed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionParsed_Call) RunAndReturn(run func(time.Duration)) *MockMetricsReporter_RuntimeTransactionParsed_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheHit provides a mock function with no fields
func (_m *MockMetricsReporter) RuntimeTransactionProgramsCacheHit() {
	_m.Called()
}

// MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheHit'
type MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheHit is a helper method to define mock.On call
func (_e *MockMetricsReporter_Expecter) RuntimeTransactionProgramsCacheHit() *MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	return &MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheHit")}
}

func (_c *MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call) Run(run func()) *MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call) Return() *MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call) RunAndReturn(run func()) *MockMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheMiss provides a mock function with no fields
func (_m *MockMetricsReporter) RuntimeTransactionProgramsCacheMiss() {
	_m.Called()
}

// MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheMiss'
type MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheMiss is a helper method to define mock.On call
func (_e *MockMetricsReporter_Expecter) RuntimeTransactionProgramsCacheMiss() *MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	return &MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheMiss")}
}

func (_c *MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call) Run(run func()) *MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call) Return() *MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call) RunAndReturn(run func()) *MockMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Run(run)
	return _c
}

// SetNumberOfDeployedCOAs provides a mock function with given fields: count
func (_m *MockMetricsReporter) SetNumberOfDeployedCOAs(count uint64) {
	_m.Called(count)
}

// MockMetricsReporter_SetNumberOfDeployedCOAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNumberOfDeployedCOAs'
type MockMetricsReporter_SetNumberOfDeployedCOAs_Call struct {
	*mock.Call
}

// SetNumberOfDeployedCOAs is a helper method to define mock.On call
//   - count uint64
func (_e *MockMetricsReporter_Expecter) SetNumberOfDeployedCOAs(count interface{}) *MockMetricsReporter_SetNumberOfDeployedCOAs_Call {
	return &MockMetricsReporter_SetNumberOfDeployedCOAs_Call{Call: _e.mock.On("SetNumberOfDeployedCOAs", count)}
}

func (_c *MockMetricsReporter_SetNumberOfDeployedCOAs_Call) Run(run func(count uint64)) *MockMetricsReporter_SetNumberOfDeployedCOAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockMetricsReporter_SetNumberOfDeployedCOAs_Call) Return() *MockMetricsReporter_SetNumberOfDeployedCOAs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsReporter_SetNumberOfDeployedCOAs_Call) RunAndReturn(run func(uint64)) *MockMetricsReporter_SetNumberOfDeployedCOAs_Call {
	_c.Run(run)
	return _c
}

// NewMockMetricsReporter creates a new instance of MockMetricsReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsReporter {
	mock := &MockMetricsReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
