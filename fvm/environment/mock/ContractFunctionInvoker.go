// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	cadence "github.com/onflow/cadence"
	environment "github.com/onflow/flow-go/fvm/environment"
	mock "github.com/stretchr/testify/mock"
)

// MockContractFunctionInvoker is an autogenerated mock type for the ContractFunctionInvoker type
type MockContractFunctionInvoker struct {
	mock.Mock
}

type MockContractFunctionInvoker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContractFunctionInvoker) EXPECT() *MockContractFunctionInvoker_Expecter {
	return &MockContractFunctionInvoker_Expecter{mock: &_m.Mock}
}

// Invoke provides a mock function with given fields: spec, arguments
func (_m *MockContractFunctionInvoker) Invoke(spec environment.ContractFunctionSpec, arguments []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(spec, arguments)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(environment.ContractFunctionSpec, []cadence.Value) (cadence.Value, error)); ok {
		return rf(spec, arguments)
	}
	if rf, ok := ret.Get(0).(func(environment.ContractFunctionSpec, []cadence.Value) cadence.Value); ok {
		r0 = rf(spec, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(environment.ContractFunctionSpec, []cadence.Value) error); ok {
		r1 = rf(spec, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractFunctionInvoker_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type MockContractFunctionInvoker_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - spec environment.ContractFunctionSpec
//   - arguments []cadence.Value
func (_e *MockContractFunctionInvoker_Expecter) Invoke(spec interface{}, arguments interface{}) *MockContractFunctionInvoker_Invoke_Call {
	return &MockContractFunctionInvoker_Invoke_Call{Call: _e.mock.On("Invoke", spec, arguments)}
}

func (_c *MockContractFunctionInvoker_Invoke_Call) Run(run func(spec environment.ContractFunctionSpec, arguments []cadence.Value)) *MockContractFunctionInvoker_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(environment.ContractFunctionSpec), args[1].([]cadence.Value))
	})
	return _c
}

func (_c *MockContractFunctionInvoker_Invoke_Call) Return(_a0 cadence.Value, _a1 error) *MockContractFunctionInvoker_Invoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractFunctionInvoker_Invoke_Call) RunAndReturn(run func(environment.ContractFunctionSpec, []cadence.Value) (cadence.Value, error)) *MockContractFunctionInvoker_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContractFunctionInvoker creates a new instance of MockContractFunctionInvoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContractFunctionInvoker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContractFunctionInvoker {
	mock := &MockContractFunctionInvoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
