// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockGetVersionBeaconFunc is an autogenerated mock type for the GetVersionBeaconFunc type
type MockGetVersionBeaconFunc struct {
	mock.Mock
}

type MockGetVersionBeaconFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetVersionBeaconFunc) EXPECT() *MockGetVersionBeaconFunc_Expecter {
	return &MockGetVersionBeaconFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *MockGetVersionBeaconFunc) Execute() (*flow.SealedVersionBeacon, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *flow.SealedVersionBeacon
	var r1 error
	if rf, ok := ret.Get(0).(func() (*flow.SealedVersionBeacon, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.SealedVersionBeacon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.SealedVersionBeacon)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetVersionBeaconFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockGetVersionBeaconFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockGetVersionBeaconFunc_Expecter) Execute() *MockGetVersionBeaconFunc_Execute_Call {
	return &MockGetVersionBeaconFunc_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockGetVersionBeaconFunc_Execute_Call) Run(run func()) *MockGetVersionBeaconFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetVersionBeaconFunc_Execute_Call) Return(_a0 *flow.SealedVersionBeacon, _a1 error) *MockGetVersionBeaconFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetVersionBeaconFunc_Execute_Call) RunAndReturn(run func() (*flow.SealedVersionBeacon, error)) *MockGetVersionBeaconFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetVersionBeaconFunc creates a new instance of MockGetVersionBeaconFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetVersionBeaconFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetVersionBeaconFunc {
	mock := &MockGetVersionBeaconFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
