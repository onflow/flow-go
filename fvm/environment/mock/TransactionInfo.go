// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/common"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionInfo is an autogenerated mock type for the TransactionInfo type
type MockTransactionInfo struct {
	mock.Mock
}

type MockTransactionInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionInfo) EXPECT() *MockTransactionInfo_Expecter {
	return &MockTransactionInfo_Expecter{mock: &_m.Mock}
}

// GetSigningAccounts provides a mock function with no fields
func (_m *MockTransactionInfo) GetSigningAccounts() ([]common.Address, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSigningAccounts")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]common.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionInfo_GetSigningAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSigningAccounts'
type MockTransactionInfo_GetSigningAccounts_Call struct {
	*mock.Call
}

// GetSigningAccounts is a helper method to define mock.On call
func (_e *MockTransactionInfo_Expecter) GetSigningAccounts() *MockTransactionInfo_GetSigningAccounts_Call {
	return &MockTransactionInfo_GetSigningAccounts_Call{Call: _e.mock.On("GetSigningAccounts")}
}

func (_c *MockTransactionInfo_GetSigningAccounts_Call) Run(run func()) *MockTransactionInfo_GetSigningAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionInfo_GetSigningAccounts_Call) Return(_a0 []common.Address, _a1 error) *MockTransactionInfo_GetSigningAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionInfo_GetSigningAccounts_Call) RunAndReturn(run func() ([]common.Address, error)) *MockTransactionInfo_GetSigningAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// IsServiceAccountAuthorizer provides a mock function with no fields
func (_m *MockTransactionInfo) IsServiceAccountAuthorizer() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsServiceAccountAuthorizer")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactionInfo_IsServiceAccountAuthorizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsServiceAccountAuthorizer'
type MockTransactionInfo_IsServiceAccountAuthorizer_Call struct {
	*mock.Call
}

// IsServiceAccountAuthorizer is a helper method to define mock.On call
func (_e *MockTransactionInfo_Expecter) IsServiceAccountAuthorizer() *MockTransactionInfo_IsServiceAccountAuthorizer_Call {
	return &MockTransactionInfo_IsServiceAccountAuthorizer_Call{Call: _e.mock.On("IsServiceAccountAuthorizer")}
}

func (_c *MockTransactionInfo_IsServiceAccountAuthorizer_Call) Run(run func()) *MockTransactionInfo_IsServiceAccountAuthorizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionInfo_IsServiceAccountAuthorizer_Call) Return(_a0 bool) *MockTransactionInfo_IsServiceAccountAuthorizer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionInfo_IsServiceAccountAuthorizer_Call) RunAndReturn(run func() bool) *MockTransactionInfo_IsServiceAccountAuthorizer_Call {
	_c.Call.Return(run)
	return _c
}

// LimitAccountStorage provides a mock function with no fields
func (_m *MockTransactionInfo) LimitAccountStorage() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LimitAccountStorage")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactionInfo_LimitAccountStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LimitAccountStorage'
type MockTransactionInfo_LimitAccountStorage_Call struct {
	*mock.Call
}

// LimitAccountStorage is a helper method to define mock.On call
func (_e *MockTransactionInfo_Expecter) LimitAccountStorage() *MockTransactionInfo_LimitAccountStorage_Call {
	return &MockTransactionInfo_LimitAccountStorage_Call{Call: _e.mock.On("LimitAccountStorage")}
}

func (_c *MockTransactionInfo_LimitAccountStorage_Call) Run(run func()) *MockTransactionInfo_LimitAccountStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionInfo_LimitAccountStorage_Call) Return(_a0 bool) *MockTransactionInfo_LimitAccountStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionInfo_LimitAccountStorage_Call) RunAndReturn(run func() bool) *MockTransactionInfo_LimitAccountStorage_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionFeesEnabled provides a mock function with no fields
func (_m *MockTransactionInfo) TransactionFeesEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionFeesEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTransactionInfo_TransactionFeesEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionFeesEnabled'
type MockTransactionInfo_TransactionFeesEnabled_Call struct {
	*mock.Call
}

// TransactionFeesEnabled is a helper method to define mock.On call
func (_e *MockTransactionInfo_Expecter) TransactionFeesEnabled() *MockTransactionInfo_TransactionFeesEnabled_Call {
	return &MockTransactionInfo_TransactionFeesEnabled_Call{Call: _e.mock.On("TransactionFeesEnabled")}
}

func (_c *MockTransactionInfo_TransactionFeesEnabled_Call) Run(run func()) *MockTransactionInfo_TransactionFeesEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionInfo_TransactionFeesEnabled_Call) Return(_a0 bool) *MockTransactionInfo_TransactionFeesEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionInfo_TransactionFeesEnabled_Call) RunAndReturn(run func() bool) *MockTransactionInfo_TransactionFeesEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// TxID provides a mock function with no fields
func (_m *MockTransactionInfo) TxID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockTransactionInfo_TxID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxID'
type MockTransactionInfo_TxID_Call struct {
	*mock.Call
}

// TxID is a helper method to define mock.On call
func (_e *MockTransactionInfo_Expecter) TxID() *MockTransactionInfo_TxID_Call {
	return &MockTransactionInfo_TxID_Call{Call: _e.mock.On("TxID")}
}

func (_c *MockTransactionInfo_TxID_Call) Run(run func()) *MockTransactionInfo_TxID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionInfo_TxID_Call) Return(_a0 flow.Identifier) *MockTransactionInfo_TxID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionInfo_TxID_Call) RunAndReturn(run func() flow.Identifier) *MockTransactionInfo_TxID_Call {
	_c.Call.Return(run)
	return _c
}

// TxIndex provides a mock function with no fields
func (_m *MockTransactionInfo) TxIndex() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxIndex")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MockTransactionInfo_TxIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxIndex'
type MockTransactionInfo_TxIndex_Call struct {
	*mock.Call
}

// TxIndex is a helper method to define mock.On call
func (_e *MockTransactionInfo_Expecter) TxIndex() *MockTransactionInfo_TxIndex_Call {
	return &MockTransactionInfo_TxIndex_Call{Call: _e.mock.On("TxIndex")}
}

func (_c *MockTransactionInfo_TxIndex_Call) Run(run func()) *MockTransactionInfo_TxIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionInfo_TxIndex_Call) Return(_a0 uint32) *MockTransactionInfo_TxIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionInfo_TxIndex_Call) RunAndReturn(run func() uint32) *MockTransactionInfo_TxIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionInfo creates a new instance of MockTransactionInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionInfo {
	mock := &MockTransactionInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
