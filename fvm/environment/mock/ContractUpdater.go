// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/common"
	environment "github.com/onflow/flow-go/fvm/environment"

	mock "github.com/stretchr/testify/mock"
)

// MockContractUpdater is an autogenerated mock type for the ContractUpdater type
type MockContractUpdater struct {
	mock.Mock
}

type MockContractUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContractUpdater) EXPECT() *MockContractUpdater_Expecter {
	return &MockContractUpdater_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with no fields
func (_m *MockContractUpdater) Commit() (environment.ContractUpdates, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 environment.ContractUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func() (environment.ContractUpdates, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() environment.ContractUpdates); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(environment.ContractUpdates)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractUpdater_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockContractUpdater_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockContractUpdater_Expecter) Commit() *MockContractUpdater_Commit_Call {
	return &MockContractUpdater_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockContractUpdater_Commit_Call) Run(run func()) *MockContractUpdater_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContractUpdater_Commit_Call) Return(_a0 environment.ContractUpdates, _a1 error) *MockContractUpdater_Commit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractUpdater_Commit_Call) RunAndReturn(run func() (environment.ContractUpdates, error)) *MockContractUpdater_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAccountContractCode provides a mock function with given fields: location
func (_m *MockContractUpdater) RemoveAccountContractCode(location common.AddressLocation) error {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAccountContractCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AddressLocation) error); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContractUpdater_RemoveAccountContractCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAccountContractCode'
type MockContractUpdater_RemoveAccountContractCode_Call struct {
	*mock.Call
}

// RemoveAccountContractCode is a helper method to define mock.On call
//   - location common.AddressLocation
func (_e *MockContractUpdater_Expecter) RemoveAccountContractCode(location interface{}) *MockContractUpdater_RemoveAccountContractCode_Call {
	return &MockContractUpdater_RemoveAccountContractCode_Call{Call: _e.mock.On("RemoveAccountContractCode", location)}
}

func (_c *MockContractUpdater_RemoveAccountContractCode_Call) Run(run func(location common.AddressLocation)) *MockContractUpdater_RemoveAccountContractCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.AddressLocation))
	})
	return _c
}

func (_c *MockContractUpdater_RemoveAccountContractCode_Call) Return(_a0 error) *MockContractUpdater_RemoveAccountContractCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContractUpdater_RemoveAccountContractCode_Call) RunAndReturn(run func(common.AddressLocation) error) *MockContractUpdater_RemoveAccountContractCode_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockContractUpdater) Reset() {
	_m.Called()
}

// MockContractUpdater_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockContractUpdater_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockContractUpdater_Expecter) Reset() *MockContractUpdater_Reset_Call {
	return &MockContractUpdater_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockContractUpdater_Reset_Call) Run(run func()) *MockContractUpdater_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContractUpdater_Reset_Call) Return() *MockContractUpdater_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContractUpdater_Reset_Call) RunAndReturn(run func()) *MockContractUpdater_Reset_Call {
	_c.Run(run)
	return _c
}

// UpdateAccountContractCode provides a mock function with given fields: location, code
func (_m *MockContractUpdater) UpdateAccountContractCode(location common.AddressLocation, code []byte) error {
	ret := _m.Called(location, code)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountContractCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AddressLocation, []byte) error); ok {
		r0 = rf(location, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContractUpdater_UpdateAccountContractCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountContractCode'
type MockContractUpdater_UpdateAccountContractCode_Call struct {
	*mock.Call
}

// UpdateAccountContractCode is a helper method to define mock.On call
//   - location common.AddressLocation
//   - code []byte
func (_e *MockContractUpdater_Expecter) UpdateAccountContractCode(location interface{}, code interface{}) *MockContractUpdater_UpdateAccountContractCode_Call {
	return &MockContractUpdater_UpdateAccountContractCode_Call{Call: _e.mock.On("UpdateAccountContractCode", location, code)}
}

func (_c *MockContractUpdater_UpdateAccountContractCode_Call) Run(run func(location common.AddressLocation, code []byte)) *MockContractUpdater_UpdateAccountContractCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.AddressLocation), args[1].([]byte))
	})
	return _c
}

func (_c *MockContractUpdater_UpdateAccountContractCode_Call) Return(_a0 error) *MockContractUpdater_UpdateAccountContractCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContractUpdater_UpdateAccountContractCode_Call) RunAndReturn(run func(common.AddressLocation, []byte) error) *MockContractUpdater_UpdateAccountContractCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContractUpdater creates a new instance of MockContractUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContractUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContractUpdater {
	mock := &MockContractUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
