// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	oteltrace "go.opentelemetry.io/otel/trace"

	trace "github.com/onflow/flow-go/module/trace"

	tracing "github.com/onflow/flow-go/fvm/tracing"
)

// MockTracer is an autogenerated mock type for the Tracer type
type MockTracer struct {
	mock.Mock
}

type MockTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTracer) EXPECT() *MockTracer_Expecter {
	return &MockTracer_Expecter{mock: &_m.Mock}
}

// StartChildSpan provides a mock function with given fields: name, options
func (_m *MockTracer) StartChildSpan(name trace.SpanName, options ...oteltrace.SpanStartOption) tracing.TracerSpan {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartChildSpan")
	}

	var r0 tracing.TracerSpan
	if rf, ok := ret.Get(0).(func(trace.SpanName, ...oteltrace.SpanStartOption) tracing.TracerSpan); ok {
		r0 = rf(name, options...)
	} else {
		r0 = ret.Get(0).(tracing.TracerSpan)
	}

	return r0
}

// MockTracer_StartChildSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartChildSpan'
type MockTracer_StartChildSpan_Call struct {
	*mock.Call
}

// StartChildSpan is a helper method to define mock.On call
//   - name trace.SpanName
//   - options ...oteltrace.SpanStartOption
func (_e *MockTracer_Expecter) StartChildSpan(name interface{}, options ...interface{}) *MockTracer_StartChildSpan_Call {
	return &MockTracer_StartChildSpan_Call{Call: _e.mock.On("StartChildSpan",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockTracer_StartChildSpan_Call) Run(run func(name trace.SpanName, options ...oteltrace.SpanStartOption)) *MockTracer_StartChildSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oteltrace.SpanStartOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(oteltrace.SpanStartOption)
			}
		}
		run(args[0].(trace.SpanName), variadicArgs...)
	})
	return _c
}

func (_c *MockTracer_StartChildSpan_Call) Return(_a0 tracing.TracerSpan) *MockTracer_StartChildSpan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_StartChildSpan_Call) RunAndReturn(run func(trace.SpanName, ...oteltrace.SpanStartOption) tracing.TracerSpan) *MockTracer_StartChildSpan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTracer creates a new instance of MockTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTracer {
	mock := &MockTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
