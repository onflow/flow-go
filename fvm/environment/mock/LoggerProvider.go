// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	zerolog "github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// MockLoggerProvider is an autogenerated mock type for the LoggerProvider type
type MockLoggerProvider struct {
	mock.Mock
}

type MockLoggerProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoggerProvider) EXPECT() *MockLoggerProvider_Expecter {
	return &MockLoggerProvider_Expecter{mock: &_m.Mock}
}

// Logger provides a mock function with no fields
func (_m *MockLoggerProvider) Logger() zerolog.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 zerolog.Logger
	if rf, ok := ret.Get(0).(func() zerolog.Logger); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zerolog.Logger)
	}

	return r0
}

// MockLoggerProvider_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type MockLoggerProvider_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *MockLoggerProvider_Expecter) Logger() *MockLoggerProvider_Logger_Call {
	return &MockLoggerProvider_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *MockLoggerProvider_Logger_Call) Run(run func()) *MockLoggerProvider_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoggerProvider_Logger_Call) Return(_a0 zerolog.Logger) *MockLoggerProvider_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoggerProvider_Logger_Call) RunAndReturn(run func() zerolog.Logger) *MockLoggerProvider_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoggerProvider creates a new instance of MockLoggerProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoggerProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoggerProvider {
	mock := &MockLoggerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
