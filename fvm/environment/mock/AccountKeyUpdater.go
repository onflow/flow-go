// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/common"

	mock "github.com/stretchr/testify/mock"

	sema "github.com/onflow/cadence/sema"

	stdlib "github.com/onflow/cadence/stdlib"
)

// MockAccountKeyUpdater is an autogenerated mock type for the AccountKeyUpdater type
type MockAccountKeyUpdater struct {
	mock.Mock
}

type MockAccountKeyUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountKeyUpdater) EXPECT() *MockAccountKeyUpdater_Expecter {
	return &MockAccountKeyUpdater_Expecter{mock: &_m.Mock}
}

// AddAccountKey provides a mock function with given fields: runtimeAddress, publicKey, hashAlgo, weight
func (_m *MockAccountKeyUpdater) AddAccountKey(runtimeAddress common.Address, publicKey *stdlib.PublicKey, hashAlgo sema.HashAlgorithm, weight int) (*stdlib.AccountKey, error) {
	ret := _m.Called(runtimeAddress, publicKey, hashAlgo, weight)

	if len(ret) == 0 {
		panic("no return value specified for AddAccountKey")
	}

	var r0 *stdlib.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) (*stdlib.AccountKey, error)); ok {
		return rf(runtimeAddress, publicKey, hashAlgo, weight)
	}
	if rf, ok := ret.Get(0).(func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) *stdlib.AccountKey); ok {
		r0 = rf(runtimeAddress, publicKey, hashAlgo, weight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) error); ok {
		r1 = rf(runtimeAddress, publicKey, hashAlgo, weight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountKeyUpdater_AddAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccountKey'
type MockAccountKeyUpdater_AddAccountKey_Call struct {
	*mock.Call
}

// AddAccountKey is a helper method to define mock.On call
//   - runtimeAddress common.Address
//   - publicKey *stdlib.PublicKey
//   - hashAlgo sema.HashAlgorithm
//   - weight int
func (_e *MockAccountKeyUpdater_Expecter) AddAccountKey(runtimeAddress interface{}, publicKey interface{}, hashAlgo interface{}, weight interface{}) *MockAccountKeyUpdater_AddAccountKey_Call {
	return &MockAccountKeyUpdater_AddAccountKey_Call{Call: _e.mock.On("AddAccountKey", runtimeAddress, publicKey, hashAlgo, weight)}
}

func (_c *MockAccountKeyUpdater_AddAccountKey_Call) Run(run func(runtimeAddress common.Address, publicKey *stdlib.PublicKey, hashAlgo sema.HashAlgorithm, weight int)) *MockAccountKeyUpdater_AddAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(*stdlib.PublicKey), args[2].(sema.HashAlgorithm), args[3].(int))
	})
	return _c
}

func (_c *MockAccountKeyUpdater_AddAccountKey_Call) Return(_a0 *stdlib.AccountKey, _a1 error) *MockAccountKeyUpdater_AddAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountKeyUpdater_AddAccountKey_Call) RunAndReturn(run func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) (*stdlib.AccountKey, error)) *MockAccountKeyUpdater_AddAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccountKey provides a mock function with given fields: runtimeAddress, keyIndex
func (_m *MockAccountKeyUpdater) RevokeAccountKey(runtimeAddress common.Address, keyIndex uint32) (*stdlib.AccountKey, error) {
	ret := _m.Called(runtimeAddress, keyIndex)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccountKey")
	}

	var r0 *stdlib.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, uint32) (*stdlib.AccountKey, error)); ok {
		return rf(runtimeAddress, keyIndex)
	}
	if rf, ok := ret.Get(0).(func(common.Address, uint32) *stdlib.AccountKey); ok {
		r0 = rf(runtimeAddress, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, uint32) error); ok {
		r1 = rf(runtimeAddress, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountKeyUpdater_RevokeAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccountKey'
type MockAccountKeyUpdater_RevokeAccountKey_Call struct {
	*mock.Call
}

// RevokeAccountKey is a helper method to define mock.On call
//   - runtimeAddress common.Address
//   - keyIndex uint32
func (_e *MockAccountKeyUpdater_Expecter) RevokeAccountKey(runtimeAddress interface{}, keyIndex interface{}) *MockAccountKeyUpdater_RevokeAccountKey_Call {
	return &MockAccountKeyUpdater_RevokeAccountKey_Call{Call: _e.mock.On("RevokeAccountKey", runtimeAddress, keyIndex)}
}

func (_c *MockAccountKeyUpdater_RevokeAccountKey_Call) Run(run func(runtimeAddress common.Address, keyIndex uint32)) *MockAccountKeyUpdater_RevokeAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(uint32))
	})
	return _c
}

func (_c *MockAccountKeyUpdater_RevokeAccountKey_Call) Return(_a0 *stdlib.AccountKey, _a1 error) *MockAccountKeyUpdater_RevokeAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountKeyUpdater_RevokeAccountKey_Call) RunAndReturn(run func(common.Address, uint32) (*stdlib.AccountKey, error)) *MockAccountKeyUpdater_RevokeAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountKeyUpdater creates a new instance of MockAccountKeyUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountKeyUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountKeyUpdater {
	mock := &MockAccountKeyUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
