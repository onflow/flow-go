// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/runtime/common"

	mock "github.com/stretchr/testify/mock"

	stdlib "github.com/onflow/cadence/runtime/stdlib"
)

// AccountKeyReader is an autogenerated mock type for the AccountKeyReader type
type AccountKeyReader struct {
	mock.Mock
}

// AccountKeysCount provides a mock function with given fields: runtimeAddress
func (_m *AccountKeyReader) AccountKeysCount(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKey provides a mock function with given fields: runtimeAddress, keyIndex
func (_m *AccountKeyReader) GetAccountKey(runtimeAddress common.Address, keyIndex int) (*stdlib.AccountKey, error) {
	ret := _m.Called(runtimeAddress, keyIndex)

	var r0 *stdlib.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, int) (*stdlib.AccountKey, error)); ok {
		return rf(runtimeAddress, keyIndex)
	}
	if rf, ok := ret.Get(0).(func(common.Address, int) *stdlib.AccountKey); ok {
		r0 = rf(runtimeAddress, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, int) error); ok {
		r1 = rf(runtimeAddress, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAccountKeyReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountKeyReader creates a new instance of AccountKeyReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountKeyReader(t mockConstructorTestingTNewAccountKeyReader) *AccountKeyReader {
	mock := &AccountKeyReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
