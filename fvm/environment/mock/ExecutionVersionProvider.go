// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	semver "github.com/coreos/go-semver/semver"
	mock "github.com/stretchr/testify/mock"
)

// MockExecutionVersionProvider is an autogenerated mock type for the ExecutionVersionProvider type
type MockExecutionVersionProvider struct {
	mock.Mock
}

type MockExecutionVersionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionVersionProvider) EXPECT() *MockExecutionVersionProvider_Expecter {
	return &MockExecutionVersionProvider_Expecter{mock: &_m.Mock}
}

// ExecutionVersion provides a mock function with no fields
func (_m *MockExecutionVersionProvider) ExecutionVersion() (semver.Version, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExecutionVersion")
	}

	var r0 semver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func() (semver.Version, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() semver.Version); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(semver.Version)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionVersionProvider_ExecutionVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionVersion'
type MockExecutionVersionProvider_ExecutionVersion_Call struct {
	*mock.Call
}

// ExecutionVersion is a helper method to define mock.On call
func (_e *MockExecutionVersionProvider_Expecter) ExecutionVersion() *MockExecutionVersionProvider_ExecutionVersion_Call {
	return &MockExecutionVersionProvider_ExecutionVersion_Call{Call: _e.mock.On("ExecutionVersion")}
}

func (_c *MockExecutionVersionProvider_ExecutionVersion_Call) Run(run func()) *MockExecutionVersionProvider_ExecutionVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionVersionProvider_ExecutionVersion_Call) Return(_a0 semver.Version, _a1 error) *MockExecutionVersionProvider_ExecutionVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionVersionProvider_ExecutionVersion_Call) RunAndReturn(run func() (semver.Version, error)) *MockExecutionVersionProvider_ExecutionVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionVersionProvider creates a new instance of MockExecutionVersionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionVersionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionVersionProvider {
	mock := &MockExecutionVersionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
