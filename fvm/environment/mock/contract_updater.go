// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/runtime/common"
	environment "github.com/onflow/flow-go/fvm/environment"

	mock "github.com/stretchr/testify/mock"
)

// ContractUpdater is an autogenerated mock type for the ContractUpdater type
type ContractUpdater struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *ContractUpdater) Commit() ([]environment.ContractUpdateKey, error) {
	ret := _m.Called()

	var r0 []environment.ContractUpdateKey
	if rf, ok := ret.Get(0).(func() []environment.ContractUpdateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]environment.ContractUpdateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAccountContractCode provides a mock function with given fields: address, name
func (_m *ContractUpdater) RemoveAccountContractCode(address common.Address, name string) error {
	ret := _m.Called(address, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, string) error); ok {
		r0 = rf(address, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *ContractUpdater) Reset() {
	_m.Called()
}

// UpdateAccountContractCode provides a mock function with given fields: address, name, code
func (_m *ContractUpdater) UpdateAccountContractCode(address common.Address, name string, code []byte) error {
	ret := _m.Called(address, name, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, string, []byte) error); ok {
		r0 = rf(address, name, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewContractUpdater interface {
	mock.TestingT
	Cleanup(func())
}

// NewContractUpdater creates a new instance of ContractUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContractUpdater(t mockConstructorTestingTNewContractUpdater) *ContractUpdater {
	mock := &ContractUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
