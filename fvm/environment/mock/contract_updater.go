// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/runtime/common"
	environment "github.com/onflow/flow-go/fvm/environment"

	mock "github.com/stretchr/testify/mock"
)

// ContractUpdater is an autogenerated mock type for the ContractUpdater type
type ContractUpdater struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *ContractUpdater) Commit() (environment.ContractUpdates, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 environment.ContractUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func() (environment.ContractUpdates, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() environment.ContractUpdates); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(environment.ContractUpdates)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAccountContractCode provides a mock function with given fields: location
func (_m *ContractUpdater) RemoveAccountContractCode(location common.AddressLocation) error {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAccountContractCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AddressLocation) error); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *ContractUpdater) Reset() {
	_m.Called()
}

// UpdateAccountContractCode provides a mock function with given fields: location, code
func (_m *ContractUpdater) UpdateAccountContractCode(location common.AddressLocation, code []byte) error {
	ret := _m.Called(location, code)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountContractCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AddressLocation, []byte) error); ok {
		r0 = rf(location, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContractUpdater creates a new instance of ContractUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractUpdater {
	mock := &ContractUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
