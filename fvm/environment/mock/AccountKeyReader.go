// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/common"

	mock "github.com/stretchr/testify/mock"

	stdlib "github.com/onflow/cadence/stdlib"
)

// MockAccountKeyReader is an autogenerated mock type for the AccountKeyReader type
type MockAccountKeyReader struct {
	mock.Mock
}

type MockAccountKeyReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountKeyReader) EXPECT() *MockAccountKeyReader_Expecter {
	return &MockAccountKeyReader_Expecter{mock: &_m.Mock}
}

// AccountKeysCount provides a mock function with given fields: runtimeAddress
func (_m *MockAccountKeyReader) AccountKeysCount(runtimeAddress common.Address) (uint32, error) {
	ret := _m.Called(runtimeAddress)

	if len(ret) == 0 {
		panic("no return value specified for AccountKeysCount")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint32, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint32); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountKeyReader_AccountKeysCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountKeysCount'
type MockAccountKeyReader_AccountKeysCount_Call struct {
	*mock.Call
}

// AccountKeysCount is a helper method to define mock.On call
//   - runtimeAddress common.Address
func (_e *MockAccountKeyReader_Expecter) AccountKeysCount(runtimeAddress interface{}) *MockAccountKeyReader_AccountKeysCount_Call {
	return &MockAccountKeyReader_AccountKeysCount_Call{Call: _e.mock.On("AccountKeysCount", runtimeAddress)}
}

func (_c *MockAccountKeyReader_AccountKeysCount_Call) Run(run func(runtimeAddress common.Address)) *MockAccountKeyReader_AccountKeysCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockAccountKeyReader_AccountKeysCount_Call) Return(_a0 uint32, _a1 error) *MockAccountKeyReader_AccountKeysCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountKeyReader_AccountKeysCount_Call) RunAndReturn(run func(common.Address) (uint32, error)) *MockAccountKeyReader_AccountKeysCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKey provides a mock function with given fields: runtimeAddress, keyIndex
func (_m *MockAccountKeyReader) GetAccountKey(runtimeAddress common.Address, keyIndex uint32) (*stdlib.AccountKey, error) {
	ret := _m.Called(runtimeAddress, keyIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKey")
	}

	var r0 *stdlib.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, uint32) (*stdlib.AccountKey, error)); ok {
		return rf(runtimeAddress, keyIndex)
	}
	if rf, ok := ret.Get(0).(func(common.Address, uint32) *stdlib.AccountKey); ok {
		r0 = rf(runtimeAddress, keyIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, uint32) error); ok {
		r1 = rf(runtimeAddress, keyIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountKeyReader_GetAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKey'
type MockAccountKeyReader_GetAccountKey_Call struct {
	*mock.Call
}

// GetAccountKey is a helper method to define mock.On call
//   - runtimeAddress common.Address
//   - keyIndex uint32
func (_e *MockAccountKeyReader_Expecter) GetAccountKey(runtimeAddress interface{}, keyIndex interface{}) *MockAccountKeyReader_GetAccountKey_Call {
	return &MockAccountKeyReader_GetAccountKey_Call{Call: _e.mock.On("GetAccountKey", runtimeAddress, keyIndex)}
}

func (_c *MockAccountKeyReader_GetAccountKey_Call) Run(run func(runtimeAddress common.Address, keyIndex uint32)) *MockAccountKeyReader_GetAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(uint32))
	})
	return _c
}

func (_c *MockAccountKeyReader_GetAccountKey_Call) Return(_a0 *stdlib.AccountKey, _a1 error) *MockAccountKeyReader_GetAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountKeyReader_GetAccountKey_Call) RunAndReturn(run func(common.Address, uint32) (*stdlib.AccountKey, error)) *MockAccountKeyReader_GetAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountKeyReader creates a new instance of MockAccountKeyReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountKeyReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountKeyReader {
	mock := &MockAccountKeyReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
