// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	atree "github.com/onflow/atree"

	mock "github.com/stretchr/testify/mock"
)

// MockValueStore is an autogenerated mock type for the ValueStore type
type MockValueStore struct {
	mock.Mock
}

type MockValueStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValueStore) EXPECT() *MockValueStore_Expecter {
	return &MockValueStore_Expecter{mock: &_m.Mock}
}

// AllocateSlabIndex provides a mock function with given fields: owner
func (_m *MockValueStore) AllocateSlabIndex(owner []byte) (atree.SlabIndex, error) {
	ret := _m.Called(owner)

	if len(ret) == 0 {
		panic("no return value specified for AllocateSlabIndex")
	}

	var r0 atree.SlabIndex
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (atree.SlabIndex, error)); ok {
		return rf(owner)
	}
	if rf, ok := ret.Get(0).(func([]byte) atree.SlabIndex); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(atree.SlabIndex)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValueStore_AllocateSlabIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocateSlabIndex'
type MockValueStore_AllocateSlabIndex_Call struct {
	*mock.Call
}

// AllocateSlabIndex is a helper method to define mock.On call
//   - owner []byte
func (_e *MockValueStore_Expecter) AllocateSlabIndex(owner interface{}) *MockValueStore_AllocateSlabIndex_Call {
	return &MockValueStore_AllocateSlabIndex_Call{Call: _e.mock.On("AllocateSlabIndex", owner)}
}

func (_c *MockValueStore_AllocateSlabIndex_Call) Run(run func(owner []byte)) *MockValueStore_AllocateSlabIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockValueStore_AllocateSlabIndex_Call) Return(_a0 atree.SlabIndex, _a1 error) *MockValueStore_AllocateSlabIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValueStore_AllocateSlabIndex_Call) RunAndReturn(run func([]byte) (atree.SlabIndex, error)) *MockValueStore_AllocateSlabIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields: owner, key
func (_m *MockValueStore) GetValue(owner []byte, key []byte) ([]byte, error) {
	ret := _m.Called(owner, key)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) ([]byte, error)); ok {
		return rf(owner, key)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(owner, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(owner, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValueStore_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockValueStore_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - owner []byte
//   - key []byte
func (_e *MockValueStore_Expecter) GetValue(owner interface{}, key interface{}) *MockValueStore_GetValue_Call {
	return &MockValueStore_GetValue_Call{Call: _e.mock.On("GetValue", owner, key)}
}

func (_c *MockValueStore_GetValue_Call) Run(run func(owner []byte, key []byte)) *MockValueStore_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockValueStore_GetValue_Call) Return(_a0 []byte, _a1 error) *MockValueStore_GetValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValueStore_GetValue_Call) RunAndReturn(run func([]byte, []byte) ([]byte, error)) *MockValueStore_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// SetValue provides a mock function with given fields: owner, key, value
func (_m *MockValueStore) SetValue(owner []byte, key []byte, value []byte) error {
	ret := _m.Called(owner, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) error); ok {
		r0 = rf(owner, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValueStore_SetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetValue'
type MockValueStore_SetValue_Call struct {
	*mock.Call
}

// SetValue is a helper method to define mock.On call
//   - owner []byte
//   - key []byte
//   - value []byte
func (_e *MockValueStore_Expecter) SetValue(owner interface{}, key interface{}, value interface{}) *MockValueStore_SetValue_Call {
	return &MockValueStore_SetValue_Call{Call: _e.mock.On("SetValue", owner, key, value)}
}

func (_c *MockValueStore_SetValue_Call) Run(run func(owner []byte, key []byte, value []byte)) *MockValueStore_SetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockValueStore_SetValue_Call) Return(_a0 error) *MockValueStore_SetValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValueStore_SetValue_Call) RunAndReturn(run func([]byte, []byte, []byte) error) *MockValueStore_SetValue_Call {
	_c.Call.Return(run)
	return _c
}

// ValueExists provides a mock function with given fields: owner, key
func (_m *MockValueStore) ValueExists(owner []byte, key []byte) (bool, error) {
	ret := _m.Called(owner, key)

	if len(ret) == 0 {
		panic("no return value specified for ValueExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) (bool, error)); ok {
		return rf(owner, key)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(owner, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(owner, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValueStore_ValueExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValueExists'
type MockValueStore_ValueExists_Call struct {
	*mock.Call
}

// ValueExists is a helper method to define mock.On call
//   - owner []byte
//   - key []byte
func (_e *MockValueStore_Expecter) ValueExists(owner interface{}, key interface{}) *MockValueStore_ValueExists_Call {
	return &MockValueStore_ValueExists_Call{Call: _e.mock.On("ValueExists", owner, key)}
}

func (_c *MockValueStore_ValueExists_Call) Run(run func(owner []byte, key []byte)) *MockValueStore_ValueExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockValueStore_ValueExists_Call) Return(_a0 bool, _a1 error) *MockValueStore_ValueExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValueStore_ValueExists_Call) RunAndReturn(run func([]byte, []byte) (bool, error)) *MockValueStore_ValueExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValueStore creates a new instance of MockValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValueStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValueStore {
	mock := &MockValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
