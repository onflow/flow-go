// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	oteltrace "go.opentelemetry.io/otel/trace"

	trace "github.com/onflow/flow-go/module/trace"

	tracing "github.com/onflow/flow-go/fvm/tracing"
)

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

// StartChildSpan provides a mock function with given fields: name, options
func (_m *Tracer) StartChildSpan(name trace.SpanName, options ...oteltrace.SpanStartOption) tracing.TracerSpan {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartChildSpan")
	}

	var r0 tracing.TracerSpan
	if rf, ok := ret.Get(0).(func(trace.SpanName, ...oteltrace.SpanStartOption) tracing.TracerSpan); ok {
		r0 = rf(name, options...)
	} else {
		r0 = ret.Get(0).(tracing.TracerSpan)
	}

	return r0
}

// NewTracer creates a new instance of Tracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tracer {
	mock := &Tracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
