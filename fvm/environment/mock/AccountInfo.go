// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/common"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountInfo is an autogenerated mock type for the AccountInfo type
type MockAccountInfo struct {
	mock.Mock
}

type MockAccountInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountInfo) EXPECT() *MockAccountInfo_Expecter {
	return &MockAccountInfo_Expecter{mock: &_m.Mock}
}

// GetAccount provides a mock function with given fields: address
func (_m *MockAccountInfo) GetAccount(address flow.Address) (*flow.Account, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address) (*flow.Account, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(flow.Address) *flow.Account); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountInfo_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockAccountInfo_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - address flow.Address
func (_e *MockAccountInfo_Expecter) GetAccount(address interface{}) *MockAccountInfo_GetAccount_Call {
	return &MockAccountInfo_GetAccount_Call{Call: _e.mock.On("GetAccount", address)}
}

func (_c *MockAccountInfo_GetAccount_Call) Run(run func(address flow.Address)) *MockAccountInfo_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Address))
	})
	return _c
}

func (_c *MockAccountInfo_GetAccount_Call) Return(_a0 *flow.Account, _a1 error) *MockAccountInfo_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountInfo_GetAccount_Call) RunAndReturn(run func(flow.Address) (*flow.Account, error)) *MockAccountInfo_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAvailableBalance provides a mock function with given fields: runtimeAddress
func (_m *MockAccountInfo) GetAccountAvailableBalance(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAvailableBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountInfo_GetAccountAvailableBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAvailableBalance'
type MockAccountInfo_GetAccountAvailableBalance_Call struct {
	*mock.Call
}

// GetAccountAvailableBalance is a helper method to define mock.On call
//   - runtimeAddress common.Address
func (_e *MockAccountInfo_Expecter) GetAccountAvailableBalance(runtimeAddress interface{}) *MockAccountInfo_GetAccountAvailableBalance_Call {
	return &MockAccountInfo_GetAccountAvailableBalance_Call{Call: _e.mock.On("GetAccountAvailableBalance", runtimeAddress)}
}

func (_c *MockAccountInfo_GetAccountAvailableBalance_Call) Run(run func(runtimeAddress common.Address)) *MockAccountInfo_GetAccountAvailableBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockAccountInfo_GetAccountAvailableBalance_Call) Return(_a0 uint64, _a1 error) *MockAccountInfo_GetAccountAvailableBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountInfo_GetAccountAvailableBalance_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockAccountInfo_GetAccountAvailableBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalance provides a mock function with given fields: runtimeAddress
func (_m *MockAccountInfo) GetAccountBalance(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountInfo_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type MockAccountInfo_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - runtimeAddress common.Address
func (_e *MockAccountInfo_Expecter) GetAccountBalance(runtimeAddress interface{}) *MockAccountInfo_GetAccountBalance_Call {
	return &MockAccountInfo_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", runtimeAddress)}
}

func (_c *MockAccountInfo_GetAccountBalance_Call) Run(run func(runtimeAddress common.Address)) *MockAccountInfo_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockAccountInfo_GetAccountBalance_Call) Return(_a0 uint64, _a1 error) *MockAccountInfo_GetAccountBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountInfo_GetAccountBalance_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockAccountInfo_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeyByIndex provides a mock function with given fields: address, index
func (_m *MockAccountInfo) GetAccountKeyByIndex(address flow.Address, index uint32) (*flow.AccountPublicKey, error) {
	ret := _m.Called(address, index)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyByIndex")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address, uint32) (*flow.AccountPublicKey, error)); ok {
		return rf(address, index)
	}
	if rf, ok := ret.Get(0).(func(flow.Address, uint32) *flow.AccountPublicKey); ok {
		r0 = rf(address, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address, uint32) error); ok {
		r1 = rf(address, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountInfo_GetAccountKeyByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeyByIndex'
type MockAccountInfo_GetAccountKeyByIndex_Call struct {
	*mock.Call
}

// GetAccountKeyByIndex is a helper method to define mock.On call
//   - address flow.Address
//   - index uint32
func (_e *MockAccountInfo_Expecter) GetAccountKeyByIndex(address interface{}, index interface{}) *MockAccountInfo_GetAccountKeyByIndex_Call {
	return &MockAccountInfo_GetAccountKeyByIndex_Call{Call: _e.mock.On("GetAccountKeyByIndex", address, index)}
}

func (_c *MockAccountInfo_GetAccountKeyByIndex_Call) Run(run func(address flow.Address, index uint32)) *MockAccountInfo_GetAccountKeyByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Address), args[1].(uint32))
	})
	return _c
}

func (_c *MockAccountInfo_GetAccountKeyByIndex_Call) Return(_a0 *flow.AccountPublicKey, _a1 error) *MockAccountInfo_GetAccountKeyByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountInfo_GetAccountKeyByIndex_Call) RunAndReturn(run func(flow.Address, uint32) (*flow.AccountPublicKey, error)) *MockAccountInfo_GetAccountKeyByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeys provides a mock function with given fields: address
func (_m *MockAccountInfo) GetAccountKeys(address flow.Address) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeys")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address) ([]flow.AccountPublicKey, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(flow.Address) []flow.AccountPublicKey); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountInfo_GetAccountKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeys'
type MockAccountInfo_GetAccountKeys_Call struct {
	*mock.Call
}

// GetAccountKeys is a helper method to define mock.On call
//   - address flow.Address
func (_e *MockAccountInfo_Expecter) GetAccountKeys(address interface{}) *MockAccountInfo_GetAccountKeys_Call {
	return &MockAccountInfo_GetAccountKeys_Call{Call: _e.mock.On("GetAccountKeys", address)}
}

func (_c *MockAccountInfo_GetAccountKeys_Call) Run(run func(address flow.Address)) *MockAccountInfo_GetAccountKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Address))
	})
	return _c
}

func (_c *MockAccountInfo_GetAccountKeys_Call) Return(_a0 []flow.AccountPublicKey, _a1 error) *MockAccountInfo_GetAccountKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountInfo_GetAccountKeys_Call) RunAndReturn(run func(flow.Address) ([]flow.AccountPublicKey, error)) *MockAccountInfo_GetAccountKeys_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageCapacity provides a mock function with given fields: runtimeAddress
func (_m *MockAccountInfo) GetStorageCapacity(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageCapacity")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountInfo_GetStorageCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageCapacity'
type MockAccountInfo_GetStorageCapacity_Call struct {
	*mock.Call
}

// GetStorageCapacity is a helper method to define mock.On call
//   - runtimeAddress common.Address
func (_e *MockAccountInfo_Expecter) GetStorageCapacity(runtimeAddress interface{}) *MockAccountInfo_GetStorageCapacity_Call {
	return &MockAccountInfo_GetStorageCapacity_Call{Call: _e.mock.On("GetStorageCapacity", runtimeAddress)}
}

func (_c *MockAccountInfo_GetStorageCapacity_Call) Run(run func(runtimeAddress common.Address)) *MockAccountInfo_GetStorageCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockAccountInfo_GetStorageCapacity_Call) Return(_a0 uint64, _a1 error) *MockAccountInfo_GetStorageCapacity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountInfo_GetStorageCapacity_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockAccountInfo_GetStorageCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageUsed provides a mock function with given fields: runtimeAddress
func (_m *MockAccountInfo) GetStorageUsed(runtimeAddress common.Address) (uint64, error) {
	ret := _m.Called(runtimeAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageUsed")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(runtimeAddress)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(runtimeAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountInfo_GetStorageUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageUsed'
type MockAccountInfo_GetStorageUsed_Call struct {
	*mock.Call
}

// GetStorageUsed is a helper method to define mock.On call
//   - runtimeAddress common.Address
func (_e *MockAccountInfo_Expecter) GetStorageUsed(runtimeAddress interface{}) *MockAccountInfo_GetStorageUsed_Call {
	return &MockAccountInfo_GetStorageUsed_Call{Call: _e.mock.On("GetStorageUsed", runtimeAddress)}
}

func (_c *MockAccountInfo_GetStorageUsed_Call) Run(run func(runtimeAddress common.Address)) *MockAccountInfo_GetStorageUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockAccountInfo_GetStorageUsed_Call) Return(_a0 uint64, _a1 error) *MockAccountInfo_GetStorageUsed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountInfo_GetStorageUsed_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockAccountInfo_GetStorageUsed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountInfo creates a new instance of MockAccountInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountInfo {
	mock := &MockAccountInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
