// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/runtime/common"

	mock "github.com/stretchr/testify/mock"
)

// TransactionInfo is an autogenerated mock type for the TransactionInfo type
type TransactionInfo struct {
	mock.Mock
}

// GetSigningAccounts provides a mock function with given fields:
func (_m *TransactionInfo) GetSigningAccounts() ([]common.Address, error) {
	ret := _m.Called()

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsServiceAccountAuthorizer provides a mock function with given fields:
func (_m *TransactionInfo) IsServiceAccountAuthorizer() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SigningAccounts provides a mock function with given fields:
func (_m *TransactionInfo) SigningAccounts() []common.Address {
	ret := _m.Called()

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	return r0
}

type mockConstructorTestingTNewTransactionInfo interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionInfo creates a new instance of TransactionInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionInfo(t mockConstructorTestingTNewTransactionInfo) *TransactionInfo {
	mock := &TransactionInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
