// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	cadence "github.com/onflow/cadence"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockEventEmitter is an autogenerated mock type for the EventEmitter type
type MockEventEmitter struct {
	mock.Mock
}

type MockEventEmitter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventEmitter) EXPECT() *MockEventEmitter_Expecter {
	return &MockEventEmitter_Expecter{mock: &_m.Mock}
}

// ConvertedServiceEvents provides a mock function with no fields
func (_m *MockEventEmitter) ConvertedServiceEvents() flow.ServiceEventList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConvertedServiceEvents")
	}

	var r0 flow.ServiceEventList
	if rf, ok := ret.Get(0).(func() flow.ServiceEventList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ServiceEventList)
		}
	}

	return r0
}

// MockEventEmitter_ConvertedServiceEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertedServiceEvents'
type MockEventEmitter_ConvertedServiceEvents_Call struct {
	*mock.Call
}

// ConvertedServiceEvents is a helper method to define mock.On call
func (_e *MockEventEmitter_Expecter) ConvertedServiceEvents() *MockEventEmitter_ConvertedServiceEvents_Call {
	return &MockEventEmitter_ConvertedServiceEvents_Call{Call: _e.mock.On("ConvertedServiceEvents")}
}

func (_c *MockEventEmitter_ConvertedServiceEvents_Call) Run(run func()) *MockEventEmitter_ConvertedServiceEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventEmitter_ConvertedServiceEvents_Call) Return(_a0 flow.ServiceEventList) *MockEventEmitter_ConvertedServiceEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventEmitter_ConvertedServiceEvents_Call) RunAndReturn(run func() flow.ServiceEventList) *MockEventEmitter_ConvertedServiceEvents_Call {
	_c.Call.Return(run)
	return _c
}

// EmitEvent provides a mock function with given fields: event
func (_m *MockEventEmitter) EmitEvent(event cadence.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for EmitEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cadence.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventEmitter_EmitEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmitEvent'
type MockEventEmitter_EmitEvent_Call struct {
	*mock.Call
}

// EmitEvent is a helper method to define mock.On call
//   - event cadence.Event
func (_e *MockEventEmitter_Expecter) EmitEvent(event interface{}) *MockEventEmitter_EmitEvent_Call {
	return &MockEventEmitter_EmitEvent_Call{Call: _e.mock.On("EmitEvent", event)}
}

func (_c *MockEventEmitter_EmitEvent_Call) Run(run func(event cadence.Event)) *MockEventEmitter_EmitEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cadence.Event))
	})
	return _c
}

func (_c *MockEventEmitter_EmitEvent_Call) Return(_a0 error) *MockEventEmitter_EmitEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventEmitter_EmitEvent_Call) RunAndReturn(run func(cadence.Event) error) *MockEventEmitter_EmitEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with no fields
func (_m *MockEventEmitter) Events() flow.EventsList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 flow.EventsList
	if rf, ok := ret.Get(0).(func() flow.EventsList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.EventsList)
		}
	}

	return r0
}

// MockEventEmitter_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type MockEventEmitter_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *MockEventEmitter_Expecter) Events() *MockEventEmitter_Events_Call {
	return &MockEventEmitter_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *MockEventEmitter_Events_Call) Run(run func()) *MockEventEmitter_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventEmitter_Events_Call) Return(_a0 flow.EventsList) *MockEventEmitter_Events_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventEmitter_Events_Call) RunAndReturn(run func() flow.EventsList) *MockEventEmitter_Events_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockEventEmitter) Reset() {
	_m.Called()
}

// MockEventEmitter_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockEventEmitter_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockEventEmitter_Expecter) Reset() *MockEventEmitter_Reset_Call {
	return &MockEventEmitter_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockEventEmitter_Reset_Call) Run(run func()) *MockEventEmitter_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventEmitter_Reset_Call) Return() *MockEventEmitter_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventEmitter_Reset_Call) RunAndReturn(run func()) *MockEventEmitter_Reset_Call {
	_c.Run(run)
	return _c
}

// ServiceEvents provides a mock function with no fields
func (_m *MockEventEmitter) ServiceEvents() flow.EventsList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceEvents")
	}

	var r0 flow.EventsList
	if rf, ok := ret.Get(0).(func() flow.EventsList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.EventsList)
		}
	}

	return r0
}

// MockEventEmitter_ServiceEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceEvents'
type MockEventEmitter_ServiceEvents_Call struct {
	*mock.Call
}

// ServiceEvents is a helper method to define mock.On call
func (_e *MockEventEmitter_Expecter) ServiceEvents() *MockEventEmitter_ServiceEvents_Call {
	return &MockEventEmitter_ServiceEvents_Call{Call: _e.mock.On("ServiceEvents")}
}

func (_c *MockEventEmitter_ServiceEvents_Call) Run(run func()) *MockEventEmitter_ServiceEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventEmitter_ServiceEvents_Call) Return(_a0 flow.EventsList) *MockEventEmitter_ServiceEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventEmitter_ServiceEvents_Call) RunAndReturn(run func() flow.EventsList) *MockEventEmitter_ServiceEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventEmitter creates a new instance of MockEventEmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventEmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventEmitter {
	mock := &MockEventEmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
