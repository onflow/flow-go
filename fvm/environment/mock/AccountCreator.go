// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/common"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountCreator is an autogenerated mock type for the AccountCreator type
type MockAccountCreator struct {
	mock.Mock
}

type MockAccountCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountCreator) EXPECT() *MockAccountCreator_Expecter {
	return &MockAccountCreator_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: runtimePayer
func (_m *MockAccountCreator) CreateAccount(runtimePayer common.Address) (common.Address, error) {
	ret := _m.Called(runtimePayer)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (common.Address, error)); ok {
		return rf(runtimePayer)
	}
	if rf, ok := ret.Get(0).(func(common.Address) common.Address); ok {
		r0 = rf(runtimePayer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(runtimePayer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountCreator_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockAccountCreator_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - runtimePayer common.Address
func (_e *MockAccountCreator_Expecter) CreateAccount(runtimePayer interface{}) *MockAccountCreator_CreateAccount_Call {
	return &MockAccountCreator_CreateAccount_Call{Call: _e.mock.On("CreateAccount", runtimePayer)}
}

func (_c *MockAccountCreator_CreateAccount_Call) Run(run func(runtimePayer common.Address)) *MockAccountCreator_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockAccountCreator_CreateAccount_Call) Return(_a0 common.Address, _a1 error) *MockAccountCreator_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountCreator_CreateAccount_Call) RunAndReturn(run func(common.Address) (common.Address, error)) *MockAccountCreator_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountCreator creates a new instance of MockAccountCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountCreator {
	mock := &MockAccountCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
