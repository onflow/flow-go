// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	cadence "github.com/onflow/cadence"
	environment "github.com/onflow/flow-go/fvm/environment"
	mock "github.com/stretchr/testify/mock"
)

// ContractFunctionInvoker is an autogenerated mock type for the ContractFunctionInvoker type
type ContractFunctionInvoker struct {
	mock.Mock
}

// Invoke provides a mock function with given fields: spec, arguments
func (_m *ContractFunctionInvoker) Invoke(spec environment.ContractFunctionSpec, arguments []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(spec, arguments)

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(environment.ContractFunctionSpec, []cadence.Value) (cadence.Value, error)); ok {
		return rf(spec, arguments)
	}
	if rf, ok := ret.Get(0).(func(environment.ContractFunctionSpec, []cadence.Value) cadence.Value); ok {
		r0 = rf(spec, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(environment.ContractFunctionSpec, []cadence.Value) error); ok {
		r1 = rf(spec, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewContractFunctionInvoker interface {
	mock.TestingT
	Cleanup(func())
}

// NewContractFunctionInvoker creates a new instance of ContractFunctionInvoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContractFunctionInvoker(t mockConstructorTestingTNewContractFunctionInvoker) *ContractFunctionInvoker {
	mock := &ContractFunctionInvoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
