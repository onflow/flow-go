// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	stdlib "github.com/onflow/cadence/stdlib"
	mock "github.com/stretchr/testify/mock"
)

// MockBlockInfo is an autogenerated mock type for the BlockInfo type
type MockBlockInfo struct {
	mock.Mock
}

type MockBlockInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockInfo) EXPECT() *MockBlockInfo_Expecter {
	return &MockBlockInfo_Expecter{mock: &_m.Mock}
}

// GetBlockAtHeight provides a mock function with given fields: height
func (_m *MockBlockInfo) GetBlockAtHeight(height uint64) (stdlib.Block, bool, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockAtHeight")
	}

	var r0 stdlib.Block
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (stdlib.Block, bool, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) stdlib.Block); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(stdlib.Block)
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(height)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBlockInfo_GetBlockAtHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockAtHeight'
type MockBlockInfo_GetBlockAtHeight_Call struct {
	*mock.Call
}

// GetBlockAtHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockBlockInfo_Expecter) GetBlockAtHeight(height interface{}) *MockBlockInfo_GetBlockAtHeight_Call {
	return &MockBlockInfo_GetBlockAtHeight_Call{Call: _e.mock.On("GetBlockAtHeight", height)}
}

func (_c *MockBlockInfo_GetBlockAtHeight_Call) Run(run func(height uint64)) *MockBlockInfo_GetBlockAtHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockBlockInfo_GetBlockAtHeight_Call) Return(_a0 stdlib.Block, _a1 bool, _a2 error) *MockBlockInfo_GetBlockAtHeight_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBlockInfo_GetBlockAtHeight_Call) RunAndReturn(run func(uint64) (stdlib.Block, bool, error)) *MockBlockInfo_GetBlockAtHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentBlockHeight provides a mock function with no fields
func (_m *MockBlockInfo) GetCurrentBlockHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockInfo_GetCurrentBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentBlockHeight'
type MockBlockInfo_GetCurrentBlockHeight_Call struct {
	*mock.Call
}

// GetCurrentBlockHeight is a helper method to define mock.On call
func (_e *MockBlockInfo_Expecter) GetCurrentBlockHeight() *MockBlockInfo_GetCurrentBlockHeight_Call {
	return &MockBlockInfo_GetCurrentBlockHeight_Call{Call: _e.mock.On("GetCurrentBlockHeight")}
}

func (_c *MockBlockInfo_GetCurrentBlockHeight_Call) Run(run func()) *MockBlockInfo_GetCurrentBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockInfo_GetCurrentBlockHeight_Call) Return(_a0 uint64, _a1 error) *MockBlockInfo_GetCurrentBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockInfo_GetCurrentBlockHeight_Call) RunAndReturn(run func() (uint64, error)) *MockBlockInfo_GetCurrentBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockInfo creates a new instance of MockBlockInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockInfo {
	mock := &MockBlockInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
