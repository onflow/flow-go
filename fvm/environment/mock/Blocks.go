// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockBlocks is an autogenerated mock type for the Blocks type
type MockBlocks struct {
	mock.Mock
}

type MockBlocks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlocks) EXPECT() *MockBlocks_Expecter {
	return &MockBlocks_Expecter{mock: &_m.Mock}
}

// ByHeightFrom provides a mock function with given fields: height, header
func (_m *MockBlocks) ByHeightFrom(height uint64, header *flow.Header) (*flow.Header, error) {
	ret := _m.Called(height, header)

	if len(ret) == 0 {
		panic("no return value specified for ByHeightFrom")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *flow.Header) (*flow.Header, error)); ok {
		return rf(height, header)
	}
	if rf, ok := ret.Get(0).(func(uint64, *flow.Header) *flow.Header); ok {
		r0 = rf(height, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *flow.Header) error); ok {
		r1 = rf(height, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_ByHeightFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByHeightFrom'
type MockBlocks_ByHeightFrom_Call struct {
	*mock.Call
}

// ByHeightFrom is a helper method to define mock.On call
//   - height uint64
//   - header *flow.Header
func (_e *MockBlocks_Expecter) ByHeightFrom(height interface{}, header interface{}) *MockBlocks_ByHeightFrom_Call {
	return &MockBlocks_ByHeightFrom_Call{Call: _e.mock.On("ByHeightFrom", height, header)}
}

func (_c *MockBlocks_ByHeightFrom_Call) Run(run func(height uint64, header *flow.Header)) *MockBlocks_ByHeightFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.Header))
	})
	return _c
}

func (_c *MockBlocks_ByHeightFrom_Call) Return(_a0 *flow.Header, _a1 error) *MockBlocks_ByHeightFrom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_ByHeightFrom_Call) RunAndReturn(run func(uint64, *flow.Header) (*flow.Header, error)) *MockBlocks_ByHeightFrom_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlocks creates a new instance of MockBlocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlocks {
	mock := &MockBlocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
