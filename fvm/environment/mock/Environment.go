// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	atree "github.com/onflow/atree"
	ast "github.com/onflow/cadence/ast"

	attribute "go.opentelemetry.io/otel/attribute"

	cadence "github.com/onflow/cadence"

	cadenceruntime "github.com/onflow/cadence/runtime"

	common "github.com/onflow/cadence/common"

	environment "github.com/onflow/flow-go/fvm/environment"

	flow "github.com/onflow/flow-go/model/flow"

	interpreter "github.com/onflow/cadence/interpreter"

	meter "github.com/onflow/flow-go/fvm/meter"

	mock "github.com/stretchr/testify/mock"

	oteltrace "go.opentelemetry.io/otel/trace"

	runtime "github.com/onflow/flow-go/fvm/runtime"

	sema "github.com/onflow/cadence/sema"

	stdlib "github.com/onflow/cadence/stdlib"

	time "time"

	trace "github.com/onflow/flow-go/module/trace"

	tracing "github.com/onflow/flow-go/fvm/tracing"

	zerolog "github.com/rs/zerolog"
)

// MockEnvironment is an autogenerated mock type for the Environment type
type MockEnvironment struct {
	mock.Mock
}

type MockEnvironment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnvironment) EXPECT() *MockEnvironment_Expecter {
	return &MockEnvironment_Expecter{mock: &_m.Mock}
}

// AccountKeysCount provides a mock function with given fields: address
func (_m *MockEnvironment) AccountKeysCount(address common.Address) (uint32, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for AccountKeysCount")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint32, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint32); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_AccountKeysCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountKeysCount'
type MockEnvironment_AccountKeysCount_Call struct {
	*mock.Call
}

// AccountKeysCount is a helper method to define mock.On call
//   - address common.Address
func (_e *MockEnvironment_Expecter) AccountKeysCount(address interface{}) *MockEnvironment_AccountKeysCount_Call {
	return &MockEnvironment_AccountKeysCount_Call{Call: _e.mock.On("AccountKeysCount", address)}
}

func (_c *MockEnvironment_AccountKeysCount_Call) Run(run func(address common.Address)) *MockEnvironment_AccountKeysCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_AccountKeysCount_Call) Return(_a0 uint32, _a1 error) *MockEnvironment_AccountKeysCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_AccountKeysCount_Call) RunAndReturn(run func(common.Address) (uint32, error)) *MockEnvironment_AccountKeysCount_Call {
	_c.Call.Return(run)
	return _c
}

// AccountsStorageCapacity provides a mock function with given fields: addresses, payer, maxTxFees
func (_m *MockEnvironment) AccountsStorageCapacity(addresses []flow.Address, payer flow.Address, maxTxFees uint64) (cadence.Value, error) {
	ret := _m.Called(addresses, payer, maxTxFees)

	if len(ret) == 0 {
		panic("no return value specified for AccountsStorageCapacity")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func([]flow.Address, flow.Address, uint64) (cadence.Value, error)); ok {
		return rf(addresses, payer, maxTxFees)
	}
	if rf, ok := ret.Get(0).(func([]flow.Address, flow.Address, uint64) cadence.Value); ok {
		r0 = rf(addresses, payer, maxTxFees)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func([]flow.Address, flow.Address, uint64) error); ok {
		r1 = rf(addresses, payer, maxTxFees)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_AccountsStorageCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountsStorageCapacity'
type MockEnvironment_AccountsStorageCapacity_Call struct {
	*mock.Call
}

// AccountsStorageCapacity is a helper method to define mock.On call
//   - addresses []flow.Address
//   - payer flow.Address
//   - maxTxFees uint64
func (_e *MockEnvironment_Expecter) AccountsStorageCapacity(addresses interface{}, payer interface{}, maxTxFees interface{}) *MockEnvironment_AccountsStorageCapacity_Call {
	return &MockEnvironment_AccountsStorageCapacity_Call{Call: _e.mock.On("AccountsStorageCapacity", addresses, payer, maxTxFees)}
}

func (_c *MockEnvironment_AccountsStorageCapacity_Call) Run(run func(addresses []flow.Address, payer flow.Address, maxTxFees uint64)) *MockEnvironment_AccountsStorageCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.Address), args[1].(flow.Address), args[2].(uint64))
	})
	return _c
}

func (_c *MockEnvironment_AccountsStorageCapacity_Call) Return(_a0 cadence.Value, _a1 error) *MockEnvironment_AccountsStorageCapacity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_AccountsStorageCapacity_Call) RunAndReturn(run func([]flow.Address, flow.Address, uint64) (cadence.Value, error)) *MockEnvironment_AccountsStorageCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// AddAccountKey provides a mock function with given fields: address, publicKey, hashAlgo, weight
func (_m *MockEnvironment) AddAccountKey(address common.Address, publicKey *stdlib.PublicKey, hashAlgo sema.HashAlgorithm, weight int) (*stdlib.AccountKey, error) {
	ret := _m.Called(address, publicKey, hashAlgo, weight)

	if len(ret) == 0 {
		panic("no return value specified for AddAccountKey")
	}

	var r0 *stdlib.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) (*stdlib.AccountKey, error)); ok {
		return rf(address, publicKey, hashAlgo, weight)
	}
	if rf, ok := ret.Get(0).(func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) *stdlib.AccountKey); ok {
		r0 = rf(address, publicKey, hashAlgo, weight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) error); ok {
		r1 = rf(address, publicKey, hashAlgo, weight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_AddAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccountKey'
type MockEnvironment_AddAccountKey_Call struct {
	*mock.Call
}

// AddAccountKey is a helper method to define mock.On call
//   - address common.Address
//   - publicKey *stdlib.PublicKey
//   - hashAlgo sema.HashAlgorithm
//   - weight int
func (_e *MockEnvironment_Expecter) AddAccountKey(address interface{}, publicKey interface{}, hashAlgo interface{}, weight interface{}) *MockEnvironment_AddAccountKey_Call {
	return &MockEnvironment_AddAccountKey_Call{Call: _e.mock.On("AddAccountKey", address, publicKey, hashAlgo, weight)}
}

func (_c *MockEnvironment_AddAccountKey_Call) Run(run func(address common.Address, publicKey *stdlib.PublicKey, hashAlgo sema.HashAlgorithm, weight int)) *MockEnvironment_AddAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(*stdlib.PublicKey), args[2].(sema.HashAlgorithm), args[3].(int))
	})
	return _c
}

func (_c *MockEnvironment_AddAccountKey_Call) Return(_a0 *stdlib.AccountKey, _a1 error) *MockEnvironment_AddAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_AddAccountKey_Call) RunAndReturn(run func(common.Address, *stdlib.PublicKey, sema.HashAlgorithm, int) (*stdlib.AccountKey, error)) *MockEnvironment_AddAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// AllocateSlabIndex provides a mock function with given fields: owner
func (_m *MockEnvironment) AllocateSlabIndex(owner []byte) (atree.SlabIndex, error) {
	ret := _m.Called(owner)

	if len(ret) == 0 {
		panic("no return value specified for AllocateSlabIndex")
	}

	var r0 atree.SlabIndex
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (atree.SlabIndex, error)); ok {
		return rf(owner)
	}
	if rf, ok := ret.Get(0).(func([]byte) atree.SlabIndex); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(atree.SlabIndex)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_AllocateSlabIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocateSlabIndex'
type MockEnvironment_AllocateSlabIndex_Call struct {
	*mock.Call
}

// AllocateSlabIndex is a helper method to define mock.On call
//   - owner []byte
func (_e *MockEnvironment_Expecter) AllocateSlabIndex(owner interface{}) *MockEnvironment_AllocateSlabIndex_Call {
	return &MockEnvironment_AllocateSlabIndex_Call{Call: _e.mock.On("AllocateSlabIndex", owner)}
}

func (_c *MockEnvironment_AllocateSlabIndex_Call) Run(run func(owner []byte)) *MockEnvironment_AllocateSlabIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockEnvironment_AllocateSlabIndex_Call) Return(_a0 atree.SlabIndex, _a1 error) *MockEnvironment_AllocateSlabIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_AllocateSlabIndex_Call) RunAndReturn(run func([]byte) (atree.SlabIndex, error)) *MockEnvironment_AllocateSlabIndex_Call {
	_c.Call.Return(run)
	return _c
}

// BLSAggregatePublicKeys provides a mock function with given fields: publicKeys
func (_m *MockEnvironment) BLSAggregatePublicKeys(publicKeys []*stdlib.PublicKey) (*stdlib.PublicKey, error) {
	ret := _m.Called(publicKeys)

	if len(ret) == 0 {
		panic("no return value specified for BLSAggregatePublicKeys")
	}

	var r0 *stdlib.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func([]*stdlib.PublicKey) (*stdlib.PublicKey, error)); ok {
		return rf(publicKeys)
	}
	if rf, ok := ret.Get(0).(func([]*stdlib.PublicKey) *stdlib.PublicKey); ok {
		r0 = rf(publicKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func([]*stdlib.PublicKey) error); ok {
		r1 = rf(publicKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_BLSAggregatePublicKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLSAggregatePublicKeys'
type MockEnvironment_BLSAggregatePublicKeys_Call struct {
	*mock.Call
}

// BLSAggregatePublicKeys is a helper method to define mock.On call
//   - publicKeys []*stdlib.PublicKey
func (_e *MockEnvironment_Expecter) BLSAggregatePublicKeys(publicKeys interface{}) *MockEnvironment_BLSAggregatePublicKeys_Call {
	return &MockEnvironment_BLSAggregatePublicKeys_Call{Call: _e.mock.On("BLSAggregatePublicKeys", publicKeys)}
}

func (_c *MockEnvironment_BLSAggregatePublicKeys_Call) Run(run func(publicKeys []*stdlib.PublicKey)) *MockEnvironment_BLSAggregatePublicKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*stdlib.PublicKey))
	})
	return _c
}

func (_c *MockEnvironment_BLSAggregatePublicKeys_Call) Return(_a0 *stdlib.PublicKey, _a1 error) *MockEnvironment_BLSAggregatePublicKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_BLSAggregatePublicKeys_Call) RunAndReturn(run func([]*stdlib.PublicKey) (*stdlib.PublicKey, error)) *MockEnvironment_BLSAggregatePublicKeys_Call {
	_c.Call.Return(run)
	return _c
}

// BLSAggregateSignatures provides a mock function with given fields: signatures
func (_m *MockEnvironment) BLSAggregateSignatures(signatures [][]byte) ([]byte, error) {
	ret := _m.Called(signatures)

	if len(ret) == 0 {
		panic("no return value specified for BLSAggregateSignatures")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([][]byte) ([]byte, error)); ok {
		return rf(signatures)
	}
	if rf, ok := ret.Get(0).(func([][]byte) []byte); ok {
		r0 = rf(signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([][]byte) error); ok {
		r1 = rf(signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_BLSAggregateSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLSAggregateSignatures'
type MockEnvironment_BLSAggregateSignatures_Call struct {
	*mock.Call
}

// BLSAggregateSignatures is a helper method to define mock.On call
//   - signatures [][]byte
func (_e *MockEnvironment_Expecter) BLSAggregateSignatures(signatures interface{}) *MockEnvironment_BLSAggregateSignatures_Call {
	return &MockEnvironment_BLSAggregateSignatures_Call{Call: _e.mock.On("BLSAggregateSignatures", signatures)}
}

func (_c *MockEnvironment_BLSAggregateSignatures_Call) Run(run func(signatures [][]byte)) *MockEnvironment_BLSAggregateSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([][]byte))
	})
	return _c
}

func (_c *MockEnvironment_BLSAggregateSignatures_Call) Return(_a0 []byte, _a1 error) *MockEnvironment_BLSAggregateSignatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_BLSAggregateSignatures_Call) RunAndReturn(run func([][]byte) ([]byte, error)) *MockEnvironment_BLSAggregateSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// BLSVerifyPOP provides a mock function with given fields: publicKey, signature
func (_m *MockEnvironment) BLSVerifyPOP(publicKey *stdlib.PublicKey, signature []byte) (bool, error) {
	ret := _m.Called(publicKey, signature)

	if len(ret) == 0 {
		panic("no return value specified for BLSVerifyPOP")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*stdlib.PublicKey, []byte) (bool, error)); ok {
		return rf(publicKey, signature)
	}
	if rf, ok := ret.Get(0).(func(*stdlib.PublicKey, []byte) bool); ok {
		r0 = rf(publicKey, signature)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*stdlib.PublicKey, []byte) error); ok {
		r1 = rf(publicKey, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_BLSVerifyPOP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLSVerifyPOP'
type MockEnvironment_BLSVerifyPOP_Call struct {
	*mock.Call
}

// BLSVerifyPOP is a helper method to define mock.On call
//   - publicKey *stdlib.PublicKey
//   - signature []byte
func (_e *MockEnvironment_Expecter) BLSVerifyPOP(publicKey interface{}, signature interface{}) *MockEnvironment_BLSVerifyPOP_Call {
	return &MockEnvironment_BLSVerifyPOP_Call{Call: _e.mock.On("BLSVerifyPOP", publicKey, signature)}
}

func (_c *MockEnvironment_BLSVerifyPOP_Call) Run(run func(publicKey *stdlib.PublicKey, signature []byte)) *MockEnvironment_BLSVerifyPOP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*stdlib.PublicKey), args[1].([]byte))
	})
	return _c
}

func (_c *MockEnvironment_BLSVerifyPOP_Call) Return(_a0 bool, _a1 error) *MockEnvironment_BLSVerifyPOP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_BLSVerifyPOP_Call) RunAndReturn(run func(*stdlib.PublicKey, []byte) (bool, error)) *MockEnvironment_BLSVerifyPOP_Call {
	_c.Call.Return(run)
	return _c
}

// BorrowCadenceRuntime provides a mock function with no fields
func (_m *MockEnvironment) BorrowCadenceRuntime() *runtime.ReusableCadenceRuntime {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BorrowCadenceRuntime")
	}

	var r0 *runtime.ReusableCadenceRuntime
	if rf, ok := ret.Get(0).(func() *runtime.ReusableCadenceRuntime); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.ReusableCadenceRuntime)
		}
	}

	return r0
}

// MockEnvironment_BorrowCadenceRuntime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BorrowCadenceRuntime'
type MockEnvironment_BorrowCadenceRuntime_Call struct {
	*mock.Call
}

// BorrowCadenceRuntime is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) BorrowCadenceRuntime() *MockEnvironment_BorrowCadenceRuntime_Call {
	return &MockEnvironment_BorrowCadenceRuntime_Call{Call: _e.mock.On("BorrowCadenceRuntime")}
}

func (_c *MockEnvironment_BorrowCadenceRuntime_Call) Run(run func()) *MockEnvironment_BorrowCadenceRuntime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_BorrowCadenceRuntime_Call) Return(_a0 *runtime.ReusableCadenceRuntime) *MockEnvironment_BorrowCadenceRuntime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_BorrowCadenceRuntime_Call) RunAndReturn(run func() *runtime.ReusableCadenceRuntime) *MockEnvironment_BorrowCadenceRuntime_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPayerBalanceAndGetMaxTxFees provides a mock function with given fields: payer, inclusionEffort, executionEffort
func (_m *MockEnvironment) CheckPayerBalanceAndGetMaxTxFees(payer flow.Address, inclusionEffort uint64, executionEffort uint64) (cadence.Value, error) {
	ret := _m.Called(payer, inclusionEffort, executionEffort)

	if len(ret) == 0 {
		panic("no return value specified for CheckPayerBalanceAndGetMaxTxFees")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address, uint64, uint64) (cadence.Value, error)); ok {
		return rf(payer, inclusionEffort, executionEffort)
	}
	if rf, ok := ret.Get(0).(func(flow.Address, uint64, uint64) cadence.Value); ok {
		r0 = rf(payer, inclusionEffort, executionEffort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address, uint64, uint64) error); ok {
		r1 = rf(payer, inclusionEffort, executionEffort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPayerBalanceAndGetMaxTxFees'
type MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call struct {
	*mock.Call
}

// CheckPayerBalanceAndGetMaxTxFees is a helper method to define mock.On call
//   - payer flow.Address
//   - inclusionEffort uint64
//   - executionEffort uint64
func (_e *MockEnvironment_Expecter) CheckPayerBalanceAndGetMaxTxFees(payer interface{}, inclusionEffort interface{}, executionEffort interface{}) *MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call {
	return &MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call{Call: _e.mock.On("CheckPayerBalanceAndGetMaxTxFees", payer, inclusionEffort, executionEffort)}
}

func (_c *MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call) Run(run func(payer flow.Address, inclusionEffort uint64, executionEffort uint64)) *MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Address), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call) Return(_a0 cadence.Value, _a1 error) *MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call) RunAndReturn(run func(flow.Address, uint64, uint64) (cadence.Value, error)) *MockEnvironment_CheckPayerBalanceAndGetMaxTxFees_Call {
	_c.Call.Return(run)
	return _c
}

// ComputationAvailable provides a mock function with given fields: _a0
func (_m *MockEnvironment) ComputationAvailable(_a0 common.ComputationUsage) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ComputationAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.ComputationUsage) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEnvironment_ComputationAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputationAvailable'
type MockEnvironment_ComputationAvailable_Call struct {
	*mock.Call
}

// ComputationAvailable is a helper method to define mock.On call
//   - _a0 common.ComputationUsage
func (_e *MockEnvironment_Expecter) ComputationAvailable(_a0 interface{}) *MockEnvironment_ComputationAvailable_Call {
	return &MockEnvironment_ComputationAvailable_Call{Call: _e.mock.On("ComputationAvailable", _a0)}
}

func (_c *MockEnvironment_ComputationAvailable_Call) Run(run func(_a0 common.ComputationUsage)) *MockEnvironment_ComputationAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComputationUsage))
	})
	return _c
}

func (_c *MockEnvironment_ComputationAvailable_Call) Return(_a0 bool) *MockEnvironment_ComputationAvailable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ComputationAvailable_Call) RunAndReturn(run func(common.ComputationUsage) bool) *MockEnvironment_ComputationAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// ComputationIntensities provides a mock function with no fields
func (_m *MockEnvironment) ComputationIntensities() meter.MeteredComputationIntensities {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ComputationIntensities")
	}

	var r0 meter.MeteredComputationIntensities
	if rf, ok := ret.Get(0).(func() meter.MeteredComputationIntensities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meter.MeteredComputationIntensities)
		}
	}

	return r0
}

// MockEnvironment_ComputationIntensities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputationIntensities'
type MockEnvironment_ComputationIntensities_Call struct {
	*mock.Call
}

// ComputationIntensities is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) ComputationIntensities() *MockEnvironment_ComputationIntensities_Call {
	return &MockEnvironment_ComputationIntensities_Call{Call: _e.mock.On("ComputationIntensities")}
}

func (_c *MockEnvironment_ComputationIntensities_Call) Run(run func()) *MockEnvironment_ComputationIntensities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_ComputationIntensities_Call) Return(_a0 meter.MeteredComputationIntensities) *MockEnvironment_ComputationIntensities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ComputationIntensities_Call) RunAndReturn(run func() meter.MeteredComputationIntensities) *MockEnvironment_ComputationIntensities_Call {
	_c.Call.Return(run)
	return _c
}

// ComputationUsed provides a mock function with no fields
func (_m *MockEnvironment) ComputationUsed() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ComputationUsed")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_ComputationUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputationUsed'
type MockEnvironment_ComputationUsed_Call struct {
	*mock.Call
}

// ComputationUsed is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) ComputationUsed() *MockEnvironment_ComputationUsed_Call {
	return &MockEnvironment_ComputationUsed_Call{Call: _e.mock.On("ComputationUsed")}
}

func (_c *MockEnvironment_ComputationUsed_Call) Run(run func()) *MockEnvironment_ComputationUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_ComputationUsed_Call) Return(_a0 uint64, _a1 error) *MockEnvironment_ComputationUsed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_ComputationUsed_Call) RunAndReturn(run func() (uint64, error)) *MockEnvironment_ComputationUsed_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertedServiceEvents provides a mock function with no fields
func (_m *MockEnvironment) ConvertedServiceEvents() flow.ServiceEventList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConvertedServiceEvents")
	}

	var r0 flow.ServiceEventList
	if rf, ok := ret.Get(0).(func() flow.ServiceEventList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ServiceEventList)
		}
	}

	return r0
}

// MockEnvironment_ConvertedServiceEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertedServiceEvents'
type MockEnvironment_ConvertedServiceEvents_Call struct {
	*mock.Call
}

// ConvertedServiceEvents is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) ConvertedServiceEvents() *MockEnvironment_ConvertedServiceEvents_Call {
	return &MockEnvironment_ConvertedServiceEvents_Call{Call: _e.mock.On("ConvertedServiceEvents")}
}

func (_c *MockEnvironment_ConvertedServiceEvents_Call) Run(run func()) *MockEnvironment_ConvertedServiceEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_ConvertedServiceEvents_Call) Return(_a0 flow.ServiceEventList) *MockEnvironment_ConvertedServiceEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ConvertedServiceEvents_Call) RunAndReturn(run func() flow.ServiceEventList) *MockEnvironment_ConvertedServiceEvents_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function with given fields: payer
func (_m *MockEnvironment) CreateAccount(payer common.Address) (common.Address, error) {
	ret := _m.Called(payer)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (common.Address, error)); ok {
		return rf(payer)
	}
	if rf, ok := ret.Get(0).(func(common.Address) common.Address); ok {
		r0 = rf(payer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(payer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockEnvironment_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - payer common.Address
func (_e *MockEnvironment_Expecter) CreateAccount(payer interface{}) *MockEnvironment_CreateAccount_Call {
	return &MockEnvironment_CreateAccount_Call{Call: _e.mock.On("CreateAccount", payer)}
}

func (_c *MockEnvironment_CreateAccount_Call) Run(run func(payer common.Address)) *MockEnvironment_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_CreateAccount_Call) Return(address common.Address, err error) *MockEnvironment_CreateAccount_Call {
	_c.Call.Return(address, err)
	return _c
}

func (_c *MockEnvironment_CreateAccount_Call) RunAndReturn(run func(common.Address) (common.Address, error)) *MockEnvironment_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeArgument provides a mock function with given fields: argument, argumentType
func (_m *MockEnvironment) DecodeArgument(argument []byte, argumentType cadence.Type) (cadence.Value, error) {
	ret := _m.Called(argument, argumentType)

	if len(ret) == 0 {
		panic("no return value specified for DecodeArgument")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, cadence.Type) (cadence.Value, error)); ok {
		return rf(argument, argumentType)
	}
	if rf, ok := ret.Get(0).(func([]byte, cadence.Type) cadence.Value); ok {
		r0 = rf(argument, argumentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, cadence.Type) error); ok {
		r1 = rf(argument, argumentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_DecodeArgument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeArgument'
type MockEnvironment_DecodeArgument_Call struct {
	*mock.Call
}

// DecodeArgument is a helper method to define mock.On call
//   - argument []byte
//   - argumentType cadence.Type
func (_e *MockEnvironment_Expecter) DecodeArgument(argument interface{}, argumentType interface{}) *MockEnvironment_DecodeArgument_Call {
	return &MockEnvironment_DecodeArgument_Call{Call: _e.mock.On("DecodeArgument", argument, argumentType)}
}

func (_c *MockEnvironment_DecodeArgument_Call) Run(run func(argument []byte, argumentType cadence.Type)) *MockEnvironment_DecodeArgument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(cadence.Type))
	})
	return _c
}

func (_c *MockEnvironment_DecodeArgument_Call) Return(_a0 cadence.Value, _a1 error) *MockEnvironment_DecodeArgument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_DecodeArgument_Call) RunAndReturn(run func([]byte, cadence.Type) (cadence.Value, error)) *MockEnvironment_DecodeArgument_Call {
	_c.Call.Return(run)
	return _c
}

// DeductTransactionFees provides a mock function with given fields: payer, inclusionEffort, executionEffort
func (_m *MockEnvironment) DeductTransactionFees(payer flow.Address, inclusionEffort uint64, executionEffort uint64) (cadence.Value, error) {
	ret := _m.Called(payer, inclusionEffort, executionEffort)

	if len(ret) == 0 {
		panic("no return value specified for DeductTransactionFees")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address, uint64, uint64) (cadence.Value, error)); ok {
		return rf(payer, inclusionEffort, executionEffort)
	}
	if rf, ok := ret.Get(0).(func(flow.Address, uint64, uint64) cadence.Value); ok {
		r0 = rf(payer, inclusionEffort, executionEffort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address, uint64, uint64) error); ok {
		r1 = rf(payer, inclusionEffort, executionEffort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_DeductTransactionFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeductTransactionFees'
type MockEnvironment_DeductTransactionFees_Call struct {
	*mock.Call
}

// DeductTransactionFees is a helper method to define mock.On call
//   - payer flow.Address
//   - inclusionEffort uint64
//   - executionEffort uint64
func (_e *MockEnvironment_Expecter) DeductTransactionFees(payer interface{}, inclusionEffort interface{}, executionEffort interface{}) *MockEnvironment_DeductTransactionFees_Call {
	return &MockEnvironment_DeductTransactionFees_Call{Call: _e.mock.On("DeductTransactionFees", payer, inclusionEffort, executionEffort)}
}

func (_c *MockEnvironment_DeductTransactionFees_Call) Run(run func(payer flow.Address, inclusionEffort uint64, executionEffort uint64)) *MockEnvironment_DeductTransactionFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Address), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockEnvironment_DeductTransactionFees_Call) Return(_a0 cadence.Value, _a1 error) *MockEnvironment_DeductTransactionFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_DeductTransactionFees_Call) RunAndReturn(run func(flow.Address, uint64, uint64) (cadence.Value, error)) *MockEnvironment_DeductTransactionFees_Call {
	_c.Call.Return(run)
	return _c
}

// EVMBlockExecuted provides a mock function with given fields: txCount, totalGasUsed, totalSupplyInFlow
func (_m *MockEnvironment) EVMBlockExecuted(txCount int, totalGasUsed uint64, totalSupplyInFlow float64) {
	_m.Called(txCount, totalGasUsed, totalSupplyInFlow)
}

// MockEnvironment_EVMBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMBlockExecuted'
type MockEnvironment_EVMBlockExecuted_Call struct {
	*mock.Call
}

// EVMBlockExecuted is a helper method to define mock.On call
//   - txCount int
//   - totalGasUsed uint64
//   - totalSupplyInFlow float64
func (_e *MockEnvironment_Expecter) EVMBlockExecuted(txCount interface{}, totalGasUsed interface{}, totalSupplyInFlow interface{}) *MockEnvironment_EVMBlockExecuted_Call {
	return &MockEnvironment_EVMBlockExecuted_Call{Call: _e.mock.On("EVMBlockExecuted", txCount, totalGasUsed, totalSupplyInFlow)}
}

func (_c *MockEnvironment_EVMBlockExecuted_Call) Run(run func(txCount int, totalGasUsed uint64, totalSupplyInFlow float64)) *MockEnvironment_EVMBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(uint64), args[2].(float64))
	})
	return _c
}

func (_c *MockEnvironment_EVMBlockExecuted_Call) Return() *MockEnvironment_EVMBlockExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_EVMBlockExecuted_Call) RunAndReturn(run func(int, uint64, float64)) *MockEnvironment_EVMBlockExecuted_Call {
	_c.Run(run)
	return _c
}

// EVMTransactionExecuted provides a mock function with given fields: gasUsed, isDirectCall, failed
func (_m *MockEnvironment) EVMTransactionExecuted(gasUsed uint64, isDirectCall bool, failed bool) {
	_m.Called(gasUsed, isDirectCall, failed)
}

// MockEnvironment_EVMTransactionExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EVMTransactionExecuted'
type MockEnvironment_EVMTransactionExecuted_Call struct {
	*mock.Call
}

// EVMTransactionExecuted is a helper method to define mock.On call
//   - gasUsed uint64
//   - isDirectCall bool
//   - failed bool
func (_e *MockEnvironment_Expecter) EVMTransactionExecuted(gasUsed interface{}, isDirectCall interface{}, failed interface{}) *MockEnvironment_EVMTransactionExecuted_Call {
	return &MockEnvironment_EVMTransactionExecuted_Call{Call: _e.mock.On("EVMTransactionExecuted", gasUsed, isDirectCall, failed)}
}

func (_c *MockEnvironment_EVMTransactionExecuted_Call) Run(run func(gasUsed uint64, isDirectCall bool, failed bool)) *MockEnvironment_EVMTransactionExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *MockEnvironment_EVMTransactionExecuted_Call) Return() *MockEnvironment_EVMTransactionExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_EVMTransactionExecuted_Call) RunAndReturn(run func(uint64, bool, bool)) *MockEnvironment_EVMTransactionExecuted_Call {
	_c.Run(run)
	return _c
}

// EmitEvent provides a mock function with given fields: _a0
func (_m *MockEnvironment) EmitEvent(_a0 cadence.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EmitEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cadence.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_EmitEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmitEvent'
type MockEnvironment_EmitEvent_Call struct {
	*mock.Call
}

// EmitEvent is a helper method to define mock.On call
//   - _a0 cadence.Event
func (_e *MockEnvironment_Expecter) EmitEvent(_a0 interface{}) *MockEnvironment_EmitEvent_Call {
	return &MockEnvironment_EmitEvent_Call{Call: _e.mock.On("EmitEvent", _a0)}
}

func (_c *MockEnvironment_EmitEvent_Call) Run(run func(_a0 cadence.Event)) *MockEnvironment_EmitEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cadence.Event))
	})
	return _c
}

func (_c *MockEnvironment_EmitEvent_Call) Return(_a0 error) *MockEnvironment_EmitEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_EmitEvent_Call) RunAndReturn(run func(cadence.Event) error) *MockEnvironment_EmitEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with no fields
func (_m *MockEnvironment) Events() flow.EventsList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 flow.EventsList
	if rf, ok := ret.Get(0).(func() flow.EventsList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.EventsList)
		}
	}

	return r0
}

// MockEnvironment_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type MockEnvironment_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) Events() *MockEnvironment_Events_Call {
	return &MockEnvironment_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *MockEnvironment_Events_Call) Run(run func()) *MockEnvironment_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_Events_Call) Return(_a0 flow.EventsList) *MockEnvironment_Events_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_Events_Call) RunAndReturn(run func() flow.EventsList) *MockEnvironment_Events_Call {
	_c.Call.Return(run)
	return _c
}

// FlushPendingUpdates provides a mock function with no fields
func (_m *MockEnvironment) FlushPendingUpdates() (environment.ContractUpdates, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlushPendingUpdates")
	}

	var r0 environment.ContractUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func() (environment.ContractUpdates, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() environment.ContractUpdates); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(environment.ContractUpdates)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_FlushPendingUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushPendingUpdates'
type MockEnvironment_FlushPendingUpdates_Call struct {
	*mock.Call
}

// FlushPendingUpdates is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) FlushPendingUpdates() *MockEnvironment_FlushPendingUpdates_Call {
	return &MockEnvironment_FlushPendingUpdates_Call{Call: _e.mock.On("FlushPendingUpdates")}
}

func (_c *MockEnvironment_FlushPendingUpdates_Call) Run(run func()) *MockEnvironment_FlushPendingUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_FlushPendingUpdates_Call) Return(_a0 environment.ContractUpdates, _a1 error) *MockEnvironment_FlushPendingUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_FlushPendingUpdates_Call) RunAndReturn(run func() (environment.ContractUpdates, error)) *MockEnvironment_FlushPendingUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAccountID provides a mock function with given fields: address
func (_m *MockEnvironment) GenerateAccountID(address common.Address) (uint64, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccountID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GenerateAccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccountID'
type MockEnvironment_GenerateAccountID_Call struct {
	*mock.Call
}

// GenerateAccountID is a helper method to define mock.On call
//   - address common.Address
func (_e *MockEnvironment_Expecter) GenerateAccountID(address interface{}) *MockEnvironment_GenerateAccountID_Call {
	return &MockEnvironment_GenerateAccountID_Call{Call: _e.mock.On("GenerateAccountID", address)}
}

func (_c *MockEnvironment_GenerateAccountID_Call) Run(run func(address common.Address)) *MockEnvironment_GenerateAccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_GenerateAccountID_Call) Return(_a0 uint64, _a1 error) *MockEnvironment_GenerateAccountID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GenerateAccountID_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockEnvironment_GenerateAccountID_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateUUID provides a mock function with no fields
func (_m *MockEnvironment) GenerateUUID() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateUUID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GenerateUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUUID'
type MockEnvironment_GenerateUUID_Call struct {
	*mock.Call
}

// GenerateUUID is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) GenerateUUID() *MockEnvironment_GenerateUUID_Call {
	return &MockEnvironment_GenerateUUID_Call{Call: _e.mock.On("GenerateUUID")}
}

func (_c *MockEnvironment_GenerateUUID_Call) Run(run func()) *MockEnvironment_GenerateUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_GenerateUUID_Call) Return(_a0 uint64, _a1 error) *MockEnvironment_GenerateUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GenerateUUID_Call) RunAndReturn(run func() (uint64, error)) *MockEnvironment_GenerateUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: address
func (_m *MockEnvironment) GetAccount(address flow.Address) (*flow.Account, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address) (*flow.Account, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(flow.Address) *flow.Account); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockEnvironment_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - address flow.Address
func (_e *MockEnvironment_Expecter) GetAccount(address interface{}) *MockEnvironment_GetAccount_Call {
	return &MockEnvironment_GetAccount_Call{Call: _e.mock.On("GetAccount", address)}
}

func (_c *MockEnvironment_GetAccount_Call) Run(run func(address flow.Address)) *MockEnvironment_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Address))
	})
	return _c
}

func (_c *MockEnvironment_GetAccount_Call) Return(_a0 *flow.Account, _a1 error) *MockEnvironment_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetAccount_Call) RunAndReturn(run func(flow.Address) (*flow.Account, error)) *MockEnvironment_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAvailableBalance provides a mock function with given fields: address
func (_m *MockEnvironment) GetAccountAvailableBalance(address common.Address) (uint64, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAvailableBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetAccountAvailableBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAvailableBalance'
type MockEnvironment_GetAccountAvailableBalance_Call struct {
	*mock.Call
}

// GetAccountAvailableBalance is a helper method to define mock.On call
//   - address common.Address
func (_e *MockEnvironment_Expecter) GetAccountAvailableBalance(address interface{}) *MockEnvironment_GetAccountAvailableBalance_Call {
	return &MockEnvironment_GetAccountAvailableBalance_Call{Call: _e.mock.On("GetAccountAvailableBalance", address)}
}

func (_c *MockEnvironment_GetAccountAvailableBalance_Call) Run(run func(address common.Address)) *MockEnvironment_GetAccountAvailableBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_GetAccountAvailableBalance_Call) Return(value uint64, err error) *MockEnvironment_GetAccountAvailableBalance_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockEnvironment_GetAccountAvailableBalance_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockEnvironment_GetAccountAvailableBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalance provides a mock function with given fields: address
func (_m *MockEnvironment) GetAccountBalance(address common.Address) (uint64, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type MockEnvironment_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - address common.Address
func (_e *MockEnvironment_Expecter) GetAccountBalance(address interface{}) *MockEnvironment_GetAccountBalance_Call {
	return &MockEnvironment_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", address)}
}

func (_c *MockEnvironment_GetAccountBalance_Call) Run(run func(address common.Address)) *MockEnvironment_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_GetAccountBalance_Call) Return(value uint64, err error) *MockEnvironment_GetAccountBalance_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockEnvironment_GetAccountBalance_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockEnvironment_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountContractCode provides a mock function with given fields: location
func (_m *MockEnvironment) GetAccountContractCode(location common.AddressLocation) ([]byte, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountContractCode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(common.AddressLocation) ([]byte, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(common.AddressLocation) []byte); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(common.AddressLocation) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetAccountContractCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountContractCode'
type MockEnvironment_GetAccountContractCode_Call struct {
	*mock.Call
}

// GetAccountContractCode is a helper method to define mock.On call
//   - location common.AddressLocation
func (_e *MockEnvironment_Expecter) GetAccountContractCode(location interface{}) *MockEnvironment_GetAccountContractCode_Call {
	return &MockEnvironment_GetAccountContractCode_Call{Call: _e.mock.On("GetAccountContractCode", location)}
}

func (_c *MockEnvironment_GetAccountContractCode_Call) Run(run func(location common.AddressLocation)) *MockEnvironment_GetAccountContractCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.AddressLocation))
	})
	return _c
}

func (_c *MockEnvironment_GetAccountContractCode_Call) Return(code []byte, err error) *MockEnvironment_GetAccountContractCode_Call {
	_c.Call.Return(code, err)
	return _c
}

func (_c *MockEnvironment_GetAccountContractCode_Call) RunAndReturn(run func(common.AddressLocation) ([]byte, error)) *MockEnvironment_GetAccountContractCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountContractNames provides a mock function with given fields: address
func (_m *MockEnvironment) GetAccountContractNames(address common.Address) ([]string, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountContractNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) ([]string, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) []string); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetAccountContractNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountContractNames'
type MockEnvironment_GetAccountContractNames_Call struct {
	*mock.Call
}

// GetAccountContractNames is a helper method to define mock.On call
//   - address common.Address
func (_e *MockEnvironment_Expecter) GetAccountContractNames(address interface{}) *MockEnvironment_GetAccountContractNames_Call {
	return &MockEnvironment_GetAccountContractNames_Call{Call: _e.mock.On("GetAccountContractNames", address)}
}

func (_c *MockEnvironment_GetAccountContractNames_Call) Run(run func(address common.Address)) *MockEnvironment_GetAccountContractNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_GetAccountContractNames_Call) Return(_a0 []string, _a1 error) *MockEnvironment_GetAccountContractNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetAccountContractNames_Call) RunAndReturn(run func(common.Address) ([]string, error)) *MockEnvironment_GetAccountContractNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKey provides a mock function with given fields: address, index
func (_m *MockEnvironment) GetAccountKey(address common.Address, index uint32) (*stdlib.AccountKey, error) {
	ret := _m.Called(address, index)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKey")
	}

	var r0 *stdlib.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, uint32) (*stdlib.AccountKey, error)); ok {
		return rf(address, index)
	}
	if rf, ok := ret.Get(0).(func(common.Address, uint32) *stdlib.AccountKey); ok {
		r0 = rf(address, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, uint32) error); ok {
		r1 = rf(address, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKey'
type MockEnvironment_GetAccountKey_Call struct {
	*mock.Call
}

// GetAccountKey is a helper method to define mock.On call
//   - address common.Address
//   - index uint32
func (_e *MockEnvironment_Expecter) GetAccountKey(address interface{}, index interface{}) *MockEnvironment_GetAccountKey_Call {
	return &MockEnvironment_GetAccountKey_Call{Call: _e.mock.On("GetAccountKey", address, index)}
}

func (_c *MockEnvironment_GetAccountKey_Call) Run(run func(address common.Address, index uint32)) *MockEnvironment_GetAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(uint32))
	})
	return _c
}

func (_c *MockEnvironment_GetAccountKey_Call) Return(_a0 *stdlib.AccountKey, _a1 error) *MockEnvironment_GetAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetAccountKey_Call) RunAndReturn(run func(common.Address, uint32) (*stdlib.AccountKey, error)) *MockEnvironment_GetAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeys provides a mock function with given fields: address
func (_m *MockEnvironment) GetAccountKeys(address flow.Address) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeys")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Address) ([]flow.AccountPublicKey, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(flow.Address) []flow.AccountPublicKey); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetAccountKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeys'
type MockEnvironment_GetAccountKeys_Call struct {
	*mock.Call
}

// GetAccountKeys is a helper method to define mock.On call
//   - address flow.Address
func (_e *MockEnvironment_Expecter) GetAccountKeys(address interface{}) *MockEnvironment_GetAccountKeys_Call {
	return &MockEnvironment_GetAccountKeys_Call{Call: _e.mock.On("GetAccountKeys", address)}
}

func (_c *MockEnvironment_GetAccountKeys_Call) Run(run func(address flow.Address)) *MockEnvironment_GetAccountKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Address))
	})
	return _c
}

func (_c *MockEnvironment_GetAccountKeys_Call) Return(_a0 []flow.AccountPublicKey, _a1 error) *MockEnvironment_GetAccountKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetAccountKeys_Call) RunAndReturn(run func(flow.Address) ([]flow.AccountPublicKey, error)) *MockEnvironment_GetAccountKeys_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockAtHeight provides a mock function with given fields: height
func (_m *MockEnvironment) GetBlockAtHeight(height uint64) (stdlib.Block, bool, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockAtHeight")
	}

	var r0 stdlib.Block
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (stdlib.Block, bool, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) stdlib.Block); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(stdlib.Block)
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(height)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEnvironment_GetBlockAtHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockAtHeight'
type MockEnvironment_GetBlockAtHeight_Call struct {
	*mock.Call
}

// GetBlockAtHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockEnvironment_Expecter) GetBlockAtHeight(height interface{}) *MockEnvironment_GetBlockAtHeight_Call {
	return &MockEnvironment_GetBlockAtHeight_Call{Call: _e.mock.On("GetBlockAtHeight", height)}
}

func (_c *MockEnvironment_GetBlockAtHeight_Call) Run(run func(height uint64)) *MockEnvironment_GetBlockAtHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockEnvironment_GetBlockAtHeight_Call) Return(block stdlib.Block, exists bool, err error) *MockEnvironment_GetBlockAtHeight_Call {
	_c.Call.Return(block, exists, err)
	return _c
}

func (_c *MockEnvironment_GetBlockAtHeight_Call) RunAndReturn(run func(uint64) (stdlib.Block, bool, error)) *MockEnvironment_GetBlockAtHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetCode provides a mock function with given fields: location
func (_m *MockEnvironment) GetCode(location common.Location) ([]byte, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetCode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Location) ([]byte, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(common.Location) []byte); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Location) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCode'
type MockEnvironment_GetCode_Call struct {
	*mock.Call
}

// GetCode is a helper method to define mock.On call
//   - location common.Location
func (_e *MockEnvironment_Expecter) GetCode(location interface{}) *MockEnvironment_GetCode_Call {
	return &MockEnvironment_GetCode_Call{Call: _e.mock.On("GetCode", location)}
}

func (_c *MockEnvironment_GetCode_Call) Run(run func(location common.Location)) *MockEnvironment_GetCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Location))
	})
	return _c
}

func (_c *MockEnvironment_GetCode_Call) Return(_a0 []byte, _a1 error) *MockEnvironment_GetCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetCode_Call) RunAndReturn(run func(common.Location) ([]byte, error)) *MockEnvironment_GetCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentBlockHeight provides a mock function with no fields
func (_m *MockEnvironment) GetCurrentBlockHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetCurrentBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentBlockHeight'
type MockEnvironment_GetCurrentBlockHeight_Call struct {
	*mock.Call
}

// GetCurrentBlockHeight is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) GetCurrentBlockHeight() *MockEnvironment_GetCurrentBlockHeight_Call {
	return &MockEnvironment_GetCurrentBlockHeight_Call{Call: _e.mock.On("GetCurrentBlockHeight")}
}

func (_c *MockEnvironment_GetCurrentBlockHeight_Call) Run(run func()) *MockEnvironment_GetCurrentBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_GetCurrentBlockHeight_Call) Return(_a0 uint64, _a1 error) *MockEnvironment_GetCurrentBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetCurrentBlockHeight_Call) RunAndReturn(run func() (uint64, error)) *MockEnvironment_GetCurrentBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetInterpreterSharedState provides a mock function with no fields
func (_m *MockEnvironment) GetInterpreterSharedState() *interpreter.SharedState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInterpreterSharedState")
	}

	var r0 *interpreter.SharedState
	if rf, ok := ret.Get(0).(func() *interpreter.SharedState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interpreter.SharedState)
		}
	}

	return r0
}

// MockEnvironment_GetInterpreterSharedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInterpreterSharedState'
type MockEnvironment_GetInterpreterSharedState_Call struct {
	*mock.Call
}

// GetInterpreterSharedState is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) GetInterpreterSharedState() *MockEnvironment_GetInterpreterSharedState_Call {
	return &MockEnvironment_GetInterpreterSharedState_Call{Call: _e.mock.On("GetInterpreterSharedState")}
}

func (_c *MockEnvironment_GetInterpreterSharedState_Call) Run(run func()) *MockEnvironment_GetInterpreterSharedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_GetInterpreterSharedState_Call) Return(_a0 *interpreter.SharedState) *MockEnvironment_GetInterpreterSharedState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_GetInterpreterSharedState_Call) RunAndReturn(run func() *interpreter.SharedState) *MockEnvironment_GetInterpreterSharedState_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrLoadProgram provides a mock function with given fields: location, load
func (_m *MockEnvironment) GetOrLoadProgram(location common.Location, load func() (*cadenceruntime.Program, error)) (*cadenceruntime.Program, error) {
	ret := _m.Called(location, load)

	if len(ret) == 0 {
		panic("no return value specified for GetOrLoadProgram")
	}

	var r0 *cadenceruntime.Program
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Location, func() (*cadenceruntime.Program, error)) (*cadenceruntime.Program, error)); ok {
		return rf(location, load)
	}
	if rf, ok := ret.Get(0).(func(common.Location, func() (*cadenceruntime.Program, error)) *cadenceruntime.Program); ok {
		r0 = rf(location, load)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cadenceruntime.Program)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Location, func() (*cadenceruntime.Program, error)) error); ok {
		r1 = rf(location, load)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetOrLoadProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrLoadProgram'
type MockEnvironment_GetOrLoadProgram_Call struct {
	*mock.Call
}

// GetOrLoadProgram is a helper method to define mock.On call
//   - location common.Location
//   - load func()(*cadenceruntime.Program , error)
func (_e *MockEnvironment_Expecter) GetOrLoadProgram(location interface{}, load interface{}) *MockEnvironment_GetOrLoadProgram_Call {
	return &MockEnvironment_GetOrLoadProgram_Call{Call: _e.mock.On("GetOrLoadProgram", location, load)}
}

func (_c *MockEnvironment_GetOrLoadProgram_Call) Run(run func(location common.Location, load func() (*cadenceruntime.Program, error))) *MockEnvironment_GetOrLoadProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Location), args[1].(func() (*cadenceruntime.Program, error)))
	})
	return _c
}

func (_c *MockEnvironment_GetOrLoadProgram_Call) Return(_a0 *cadenceruntime.Program, _a1 error) *MockEnvironment_GetOrLoadProgram_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetOrLoadProgram_Call) RunAndReturn(run func(common.Location, func() (*cadenceruntime.Program, error)) (*cadenceruntime.Program, error)) *MockEnvironment_GetOrLoadProgram_Call {
	_c.Call.Return(run)
	return _c
}

// GetSigningAccounts provides a mock function with no fields
func (_m *MockEnvironment) GetSigningAccounts() ([]common.Address, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSigningAccounts")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]common.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetSigningAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSigningAccounts'
type MockEnvironment_GetSigningAccounts_Call struct {
	*mock.Call
}

// GetSigningAccounts is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) GetSigningAccounts() *MockEnvironment_GetSigningAccounts_Call {
	return &MockEnvironment_GetSigningAccounts_Call{Call: _e.mock.On("GetSigningAccounts")}
}

func (_c *MockEnvironment_GetSigningAccounts_Call) Run(run func()) *MockEnvironment_GetSigningAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_GetSigningAccounts_Call) Return(_a0 []common.Address, _a1 error) *MockEnvironment_GetSigningAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_GetSigningAccounts_Call) RunAndReturn(run func() ([]common.Address, error)) *MockEnvironment_GetSigningAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageCapacity provides a mock function with given fields: address
func (_m *MockEnvironment) GetStorageCapacity(address common.Address) (uint64, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageCapacity")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetStorageCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageCapacity'
type MockEnvironment_GetStorageCapacity_Call struct {
	*mock.Call
}

// GetStorageCapacity is a helper method to define mock.On call
//   - address common.Address
func (_e *MockEnvironment_Expecter) GetStorageCapacity(address interface{}) *MockEnvironment_GetStorageCapacity_Call {
	return &MockEnvironment_GetStorageCapacity_Call{Call: _e.mock.On("GetStorageCapacity", address)}
}

func (_c *MockEnvironment_GetStorageCapacity_Call) Run(run func(address common.Address)) *MockEnvironment_GetStorageCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_GetStorageCapacity_Call) Return(value uint64, err error) *MockEnvironment_GetStorageCapacity_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockEnvironment_GetStorageCapacity_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockEnvironment_GetStorageCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageUsed provides a mock function with given fields: address
func (_m *MockEnvironment) GetStorageUsed(address common.Address) (uint64, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageUsed")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetStorageUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageUsed'
type MockEnvironment_GetStorageUsed_Call struct {
	*mock.Call
}

// GetStorageUsed is a helper method to define mock.On call
//   - address common.Address
func (_e *MockEnvironment_Expecter) GetStorageUsed(address interface{}) *MockEnvironment_GetStorageUsed_Call {
	return &MockEnvironment_GetStorageUsed_Call{Call: _e.mock.On("GetStorageUsed", address)}
}

func (_c *MockEnvironment_GetStorageUsed_Call) Run(run func(address common.Address)) *MockEnvironment_GetStorageUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_GetStorageUsed_Call) Return(value uint64, err error) *MockEnvironment_GetStorageUsed_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockEnvironment_GetStorageUsed_Call) RunAndReturn(run func(common.Address) (uint64, error)) *MockEnvironment_GetStorageUsed_Call {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields: owner, key
func (_m *MockEnvironment) GetValue(owner []byte, key []byte) ([]byte, error) {
	ret := _m.Called(owner, key)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) ([]byte, error)); ok {
		return rf(owner, key)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(owner, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(owner, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockEnvironment_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - owner []byte
//   - key []byte
func (_e *MockEnvironment_Expecter) GetValue(owner interface{}, key interface{}) *MockEnvironment_GetValue_Call {
	return &MockEnvironment_GetValue_Call{Call: _e.mock.On("GetValue", owner, key)}
}

func (_c *MockEnvironment_GetValue_Call) Run(run func(owner []byte, key []byte)) *MockEnvironment_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockEnvironment_GetValue_Call) Return(value []byte, err error) *MockEnvironment_GetValue_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockEnvironment_GetValue_Call) RunAndReturn(run func([]byte, []byte) ([]byte, error)) *MockEnvironment_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: data, tag, hashAlgorithm
func (_m *MockEnvironment) Hash(data []byte, tag string, hashAlgorithm sema.HashAlgorithm) ([]byte, error) {
	ret := _m.Called(data, tag, hashAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string, sema.HashAlgorithm) ([]byte, error)); ok {
		return rf(data, tag, hashAlgorithm)
	}
	if rf, ok := ret.Get(0).(func([]byte, string, sema.HashAlgorithm) []byte); ok {
		r0 = rf(data, tag, hashAlgorithm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, string, sema.HashAlgorithm) error); ok {
		r1 = rf(data, tag, hashAlgorithm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockEnvironment_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - data []byte
//   - tag string
//   - hashAlgorithm sema.HashAlgorithm
func (_e *MockEnvironment_Expecter) Hash(data interface{}, tag interface{}, hashAlgorithm interface{}) *MockEnvironment_Hash_Call {
	return &MockEnvironment_Hash_Call{Call: _e.mock.On("Hash", data, tag, hashAlgorithm)}
}

func (_c *MockEnvironment_Hash_Call) Run(run func(data []byte, tag string, hashAlgorithm sema.HashAlgorithm)) *MockEnvironment_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].(sema.HashAlgorithm))
	})
	return _c
}

func (_c *MockEnvironment_Hash_Call) Return(_a0 []byte, _a1 error) *MockEnvironment_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_Hash_Call) RunAndReturn(run func([]byte, string, sema.HashAlgorithm) ([]byte, error)) *MockEnvironment_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// ImplementationDebugLog provides a mock function with given fields: message
func (_m *MockEnvironment) ImplementationDebugLog(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for ImplementationDebugLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_ImplementationDebugLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImplementationDebugLog'
type MockEnvironment_ImplementationDebugLog_Call struct {
	*mock.Call
}

// ImplementationDebugLog is a helper method to define mock.On call
//   - message string
func (_e *MockEnvironment_Expecter) ImplementationDebugLog(message interface{}) *MockEnvironment_ImplementationDebugLog_Call {
	return &MockEnvironment_ImplementationDebugLog_Call{Call: _e.mock.On("ImplementationDebugLog", message)}
}

func (_c *MockEnvironment_ImplementationDebugLog_Call) Run(run func(message string)) *MockEnvironment_ImplementationDebugLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEnvironment_ImplementationDebugLog_Call) Return(_a0 error) *MockEnvironment_ImplementationDebugLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ImplementationDebugLog_Call) RunAndReturn(run func(string) error) *MockEnvironment_ImplementationDebugLog_Call {
	_c.Call.Return(run)
	return _c
}

// InteractionUsed provides a mock function with no fields
func (_m *MockEnvironment) InteractionUsed() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InteractionUsed")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_InteractionUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InteractionUsed'
type MockEnvironment_InteractionUsed_Call struct {
	*mock.Call
}

// InteractionUsed is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) InteractionUsed() *MockEnvironment_InteractionUsed_Call {
	return &MockEnvironment_InteractionUsed_Call{Call: _e.mock.On("InteractionUsed")}
}

func (_c *MockEnvironment_InteractionUsed_Call) Run(run func()) *MockEnvironment_InteractionUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_InteractionUsed_Call) Return(_a0 uint64, _a1 error) *MockEnvironment_InteractionUsed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_InteractionUsed_Call) RunAndReturn(run func() (uint64, error)) *MockEnvironment_InteractionUsed_Call {
	_c.Call.Return(run)
	return _c
}

// Invoke provides a mock function with given fields: spec, arguments
func (_m *MockEnvironment) Invoke(spec environment.ContractFunctionSpec, arguments []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(spec, arguments)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 cadence.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(environment.ContractFunctionSpec, []cadence.Value) (cadence.Value, error)); ok {
		return rf(spec, arguments)
	}
	if rf, ok := ret.Get(0).(func(environment.ContractFunctionSpec, []cadence.Value) cadence.Value); ok {
		r0 = rf(spec, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(environment.ContractFunctionSpec, []cadence.Value) error); ok {
		r1 = rf(spec, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type MockEnvironment_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - spec environment.ContractFunctionSpec
//   - arguments []cadence.Value
func (_e *MockEnvironment_Expecter) Invoke(spec interface{}, arguments interface{}) *MockEnvironment_Invoke_Call {
	return &MockEnvironment_Invoke_Call{Call: _e.mock.On("Invoke", spec, arguments)}
}

func (_c *MockEnvironment_Invoke_Call) Run(run func(spec environment.ContractFunctionSpec, arguments []cadence.Value)) *MockEnvironment_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(environment.ContractFunctionSpec), args[1].([]cadence.Value))
	})
	return _c
}

func (_c *MockEnvironment_Invoke_Call) Return(_a0 cadence.Value, _a1 error) *MockEnvironment_Invoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_Invoke_Call) RunAndReturn(run func(environment.ContractFunctionSpec, []cadence.Value) (cadence.Value, error)) *MockEnvironment_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

// IsServiceAccountAuthorizer provides a mock function with no fields
func (_m *MockEnvironment) IsServiceAccountAuthorizer() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsServiceAccountAuthorizer")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEnvironment_IsServiceAccountAuthorizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsServiceAccountAuthorizer'
type MockEnvironment_IsServiceAccountAuthorizer_Call struct {
	*mock.Call
}

// IsServiceAccountAuthorizer is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) IsServiceAccountAuthorizer() *MockEnvironment_IsServiceAccountAuthorizer_Call {
	return &MockEnvironment_IsServiceAccountAuthorizer_Call{Call: _e.mock.On("IsServiceAccountAuthorizer")}
}

func (_c *MockEnvironment_IsServiceAccountAuthorizer_Call) Run(run func()) *MockEnvironment_IsServiceAccountAuthorizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_IsServiceAccountAuthorizer_Call) Return(_a0 bool) *MockEnvironment_IsServiceAccountAuthorizer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_IsServiceAccountAuthorizer_Call) RunAndReturn(run func() bool) *MockEnvironment_IsServiceAccountAuthorizer_Call {
	_c.Call.Return(run)
	return _c
}

// LimitAccountStorage provides a mock function with no fields
func (_m *MockEnvironment) LimitAccountStorage() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LimitAccountStorage")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEnvironment_LimitAccountStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LimitAccountStorage'
type MockEnvironment_LimitAccountStorage_Call struct {
	*mock.Call
}

// LimitAccountStorage is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) LimitAccountStorage() *MockEnvironment_LimitAccountStorage_Call {
	return &MockEnvironment_LimitAccountStorage_Call{Call: _e.mock.On("LimitAccountStorage")}
}

func (_c *MockEnvironment_LimitAccountStorage_Call) Run(run func()) *MockEnvironment_LimitAccountStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_LimitAccountStorage_Call) Return(_a0 bool) *MockEnvironment_LimitAccountStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_LimitAccountStorage_Call) RunAndReturn(run func() bool) *MockEnvironment_LimitAccountStorage_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with no fields
func (_m *MockEnvironment) Logger() zerolog.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 zerolog.Logger
	if rf, ok := ret.Get(0).(func() zerolog.Logger); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zerolog.Logger)
	}

	return r0
}

// MockEnvironment_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type MockEnvironment_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) Logger() *MockEnvironment_Logger_Call {
	return &MockEnvironment_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *MockEnvironment_Logger_Call) Run(run func()) *MockEnvironment_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_Logger_Call) Return(_a0 zerolog.Logger) *MockEnvironment_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_Logger_Call) RunAndReturn(run func() zerolog.Logger) *MockEnvironment_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// Logs provides a mock function with no fields
func (_m *MockEnvironment) Logs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockEnvironment_Logs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logs'
type MockEnvironment_Logs_Call struct {
	*mock.Call
}

// Logs is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) Logs() *MockEnvironment_Logs_Call {
	return &MockEnvironment_Logs_Call{Call: _e.mock.On("Logs")}
}

func (_c *MockEnvironment_Logs_Call) Run(run func()) *MockEnvironment_Logs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_Logs_Call) Return(_a0 []string) *MockEnvironment_Logs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_Logs_Call) RunAndReturn(run func() []string) *MockEnvironment_Logs_Call {
	_c.Call.Return(run)
	return _c
}

// MemoryUsed provides a mock function with no fields
func (_m *MockEnvironment) MemoryUsed() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MemoryUsed")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_MemoryUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemoryUsed'
type MockEnvironment_MemoryUsed_Call struct {
	*mock.Call
}

// MemoryUsed is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) MemoryUsed() *MockEnvironment_MemoryUsed_Call {
	return &MockEnvironment_MemoryUsed_Call{Call: _e.mock.On("MemoryUsed")}
}

func (_c *MockEnvironment_MemoryUsed_Call) Run(run func()) *MockEnvironment_MemoryUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_MemoryUsed_Call) Return(_a0 uint64, _a1 error) *MockEnvironment_MemoryUsed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_MemoryUsed_Call) RunAndReturn(run func() (uint64, error)) *MockEnvironment_MemoryUsed_Call {
	_c.Call.Return(run)
	return _c
}

// MeterComputation provides a mock function with given fields: usage
func (_m *MockEnvironment) MeterComputation(usage common.ComputationUsage) error {
	ret := _m.Called(usage)

	if len(ret) == 0 {
		panic("no return value specified for MeterComputation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.ComputationUsage) error); ok {
		r0 = rf(usage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_MeterComputation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MeterComputation'
type MockEnvironment_MeterComputation_Call struct {
	*mock.Call
}

// MeterComputation is a helper method to define mock.On call
//   - usage common.ComputationUsage
func (_e *MockEnvironment_Expecter) MeterComputation(usage interface{}) *MockEnvironment_MeterComputation_Call {
	return &MockEnvironment_MeterComputation_Call{Call: _e.mock.On("MeterComputation", usage)}
}

func (_c *MockEnvironment_MeterComputation_Call) Run(run func(usage common.ComputationUsage)) *MockEnvironment_MeterComputation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ComputationUsage))
	})
	return _c
}

func (_c *MockEnvironment_MeterComputation_Call) Return(_a0 error) *MockEnvironment_MeterComputation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_MeterComputation_Call) RunAndReturn(run func(common.ComputationUsage) error) *MockEnvironment_MeterComputation_Call {
	_c.Call.Return(run)
	return _c
}

// MeterEmittedEvent provides a mock function with given fields: byteSize
func (_m *MockEnvironment) MeterEmittedEvent(byteSize uint64) error {
	ret := _m.Called(byteSize)

	if len(ret) == 0 {
		panic("no return value specified for MeterEmittedEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(byteSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_MeterEmittedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MeterEmittedEvent'
type MockEnvironment_MeterEmittedEvent_Call struct {
	*mock.Call
}

// MeterEmittedEvent is a helper method to define mock.On call
//   - byteSize uint64
func (_e *MockEnvironment_Expecter) MeterEmittedEvent(byteSize interface{}) *MockEnvironment_MeterEmittedEvent_Call {
	return &MockEnvironment_MeterEmittedEvent_Call{Call: _e.mock.On("MeterEmittedEvent", byteSize)}
}

func (_c *MockEnvironment_MeterEmittedEvent_Call) Run(run func(byteSize uint64)) *MockEnvironment_MeterEmittedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockEnvironment_MeterEmittedEvent_Call) Return(_a0 error) *MockEnvironment_MeterEmittedEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_MeterEmittedEvent_Call) RunAndReturn(run func(uint64) error) *MockEnvironment_MeterEmittedEvent_Call {
	_c.Call.Return(run)
	return _c
}

// MeterMemory provides a mock function with given fields: usage
func (_m *MockEnvironment) MeterMemory(usage common.MemoryUsage) error {
	ret := _m.Called(usage)

	if len(ret) == 0 {
		panic("no return value specified for MeterMemory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.MemoryUsage) error); ok {
		r0 = rf(usage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_MeterMemory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MeterMemory'
type MockEnvironment_MeterMemory_Call struct {
	*mock.Call
}

// MeterMemory is a helper method to define mock.On call
//   - usage common.MemoryUsage
func (_e *MockEnvironment_Expecter) MeterMemory(usage interface{}) *MockEnvironment_MeterMemory_Call {
	return &MockEnvironment_MeterMemory_Call{Call: _e.mock.On("MeterMemory", usage)}
}

func (_c *MockEnvironment_MeterMemory_Call) Run(run func(usage common.MemoryUsage)) *MockEnvironment_MeterMemory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.MemoryUsage))
	})
	return _c
}

func (_c *MockEnvironment_MeterMemory_Call) Return(_a0 error) *MockEnvironment_MeterMemory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_MeterMemory_Call) RunAndReturn(run func(common.MemoryUsage) error) *MockEnvironment_MeterMemory_Call {
	_c.Call.Return(run)
	return _c
}

// MinimumRequiredVersion provides a mock function with no fields
func (_m *MockEnvironment) MinimumRequiredVersion() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinimumRequiredVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_MinimumRequiredVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MinimumRequiredVersion'
type MockEnvironment_MinimumRequiredVersion_Call struct {
	*mock.Call
}

// MinimumRequiredVersion is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) MinimumRequiredVersion() *MockEnvironment_MinimumRequiredVersion_Call {
	return &MockEnvironment_MinimumRequiredVersion_Call{Call: _e.mock.On("MinimumRequiredVersion")}
}

func (_c *MockEnvironment_MinimumRequiredVersion_Call) Run(run func()) *MockEnvironment_MinimumRequiredVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_MinimumRequiredVersion_Call) Return(_a0 string, _a1 error) *MockEnvironment_MinimumRequiredVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_MinimumRequiredVersion_Call) RunAndReturn(run func() (string, error)) *MockEnvironment_MinimumRequiredVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ProgramLog provides a mock function with given fields: _a0
func (_m *MockEnvironment) ProgramLog(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProgramLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_ProgramLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProgramLog'
type MockEnvironment_ProgramLog_Call struct {
	*mock.Call
}

// ProgramLog is a helper method to define mock.On call
//   - _a0 string
func (_e *MockEnvironment_Expecter) ProgramLog(_a0 interface{}) *MockEnvironment_ProgramLog_Call {
	return &MockEnvironment_ProgramLog_Call{Call: _e.mock.On("ProgramLog", _a0)}
}

func (_c *MockEnvironment_ProgramLog_Call) Run(run func(_a0 string)) *MockEnvironment_ProgramLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEnvironment_ProgramLog_Call) Return(_a0 error) *MockEnvironment_ProgramLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ProgramLog_Call) RunAndReturn(run func(string) error) *MockEnvironment_ProgramLog_Call {
	_c.Call.Return(run)
	return _c
}

// RandomSourceHistory provides a mock function with no fields
func (_m *MockEnvironment) RandomSourceHistory() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RandomSourceHistory")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_RandomSourceHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomSourceHistory'
type MockEnvironment_RandomSourceHistory_Call struct {
	*mock.Call
}

// RandomSourceHistory is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) RandomSourceHistory() *MockEnvironment_RandomSourceHistory_Call {
	return &MockEnvironment_RandomSourceHistory_Call{Call: _e.mock.On("RandomSourceHistory")}
}

func (_c *MockEnvironment_RandomSourceHistory_Call) Run(run func()) *MockEnvironment_RandomSourceHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_RandomSourceHistory_Call) Return(_a0 []byte, _a1 error) *MockEnvironment_RandomSourceHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_RandomSourceHistory_Call) RunAndReturn(run func() ([]byte, error)) *MockEnvironment_RandomSourceHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRandom provides a mock function with given fields: _a0
func (_m *MockEnvironment) ReadRandom(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadRandom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_ReadRandom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRandom'
type MockEnvironment_ReadRandom_Call struct {
	*mock.Call
}

// ReadRandom is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockEnvironment_Expecter) ReadRandom(_a0 interface{}) *MockEnvironment_ReadRandom_Call {
	return &MockEnvironment_ReadRandom_Call{Call: _e.mock.On("ReadRandom", _a0)}
}

func (_c *MockEnvironment_ReadRandom_Call) Run(run func(_a0 []byte)) *MockEnvironment_ReadRandom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockEnvironment_ReadRandom_Call) Return(_a0 error) *MockEnvironment_ReadRandom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ReadRandom_Call) RunAndReturn(run func([]byte) error) *MockEnvironment_ReadRandom_Call {
	_c.Call.Return(run)
	return _c
}

// RecordTrace provides a mock function with given fields: operation, location, duration, attrs
func (_m *MockEnvironment) RecordTrace(operation string, location common.Location, duration time.Duration, attrs []attribute.KeyValue) {
	_m.Called(operation, location, duration, attrs)
}

// MockEnvironment_RecordTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordTrace'
type MockEnvironment_RecordTrace_Call struct {
	*mock.Call
}

// RecordTrace is a helper method to define mock.On call
//   - operation string
//   - location common.Location
//   - duration time.Duration
//   - attrs []attribute.KeyValue
func (_e *MockEnvironment_Expecter) RecordTrace(operation interface{}, location interface{}, duration interface{}, attrs interface{}) *MockEnvironment_RecordTrace_Call {
	return &MockEnvironment_RecordTrace_Call{Call: _e.mock.On("RecordTrace", operation, location, duration, attrs)}
}

func (_c *MockEnvironment_RecordTrace_Call) Run(run func(operation string, location common.Location, duration time.Duration, attrs []attribute.KeyValue)) *MockEnvironment_RecordTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(common.Location), args[2].(time.Duration), args[3].([]attribute.KeyValue))
	})
	return _c
}

func (_c *MockEnvironment_RecordTrace_Call) Return() *MockEnvironment_RecordTrace_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_RecordTrace_Call) RunAndReturn(run func(string, common.Location, time.Duration, []attribute.KeyValue)) *MockEnvironment_RecordTrace_Call {
	_c.Run(run)
	return _c
}

// RecoverProgram provides a mock function with given fields: program, location
func (_m *MockEnvironment) RecoverProgram(program *ast.Program, location common.Location) ([]byte, error) {
	ret := _m.Called(program, location)

	if len(ret) == 0 {
		panic("no return value specified for RecoverProgram")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*ast.Program, common.Location) ([]byte, error)); ok {
		return rf(program, location)
	}
	if rf, ok := ret.Get(0).(func(*ast.Program, common.Location) []byte); ok {
		r0 = rf(program, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*ast.Program, common.Location) error); ok {
		r1 = rf(program, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_RecoverProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverProgram'
type MockEnvironment_RecoverProgram_Call struct {
	*mock.Call
}

// RecoverProgram is a helper method to define mock.On call
//   - program *ast.Program
//   - location common.Location
func (_e *MockEnvironment_Expecter) RecoverProgram(program interface{}, location interface{}) *MockEnvironment_RecoverProgram_Call {
	return &MockEnvironment_RecoverProgram_Call{Call: _e.mock.On("RecoverProgram", program, location)}
}

func (_c *MockEnvironment_RecoverProgram_Call) Run(run func(program *ast.Program, location common.Location)) *MockEnvironment_RecoverProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ast.Program), args[1].(common.Location))
	})
	return _c
}

func (_c *MockEnvironment_RecoverProgram_Call) Return(_a0 []byte, _a1 error) *MockEnvironment_RecoverProgram_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_RecoverProgram_Call) RunAndReturn(run func(*ast.Program, common.Location) ([]byte, error)) *MockEnvironment_RecoverProgram_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAccountContractCode provides a mock function with given fields: location
func (_m *MockEnvironment) RemoveAccountContractCode(location common.AddressLocation) error {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAccountContractCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AddressLocation) error); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_RemoveAccountContractCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAccountContractCode'
type MockEnvironment_RemoveAccountContractCode_Call struct {
	*mock.Call
}

// RemoveAccountContractCode is a helper method to define mock.On call
//   - location common.AddressLocation
func (_e *MockEnvironment_Expecter) RemoveAccountContractCode(location interface{}) *MockEnvironment_RemoveAccountContractCode_Call {
	return &MockEnvironment_RemoveAccountContractCode_Call{Call: _e.mock.On("RemoveAccountContractCode", location)}
}

func (_c *MockEnvironment_RemoveAccountContractCode_Call) Run(run func(location common.AddressLocation)) *MockEnvironment_RemoveAccountContractCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.AddressLocation))
	})
	return _c
}

func (_c *MockEnvironment_RemoveAccountContractCode_Call) Return(err error) *MockEnvironment_RemoveAccountContractCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnvironment_RemoveAccountContractCode_Call) RunAndReturn(run func(common.AddressLocation) error) *MockEnvironment_RemoveAccountContractCode_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockEnvironment) Reset() {
	_m.Called()
}

// MockEnvironment_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockEnvironment_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) Reset() *MockEnvironment_Reset_Call {
	return &MockEnvironment_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockEnvironment_Reset_Call) Run(run func()) *MockEnvironment_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_Reset_Call) Return() *MockEnvironment_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_Reset_Call) RunAndReturn(run func()) *MockEnvironment_Reset_Call {
	_c.Run(run)
	return _c
}

// ResolveLocation provides a mock function with given fields: identifiers, location
func (_m *MockEnvironment) ResolveLocation(identifiers []ast.Identifier, location common.Location) ([]sema.ResolvedLocation, error) {
	ret := _m.Called(identifiers, location)

	if len(ret) == 0 {
		panic("no return value specified for ResolveLocation")
	}

	var r0 []sema.ResolvedLocation
	var r1 error
	if rf, ok := ret.Get(0).(func([]ast.Identifier, common.Location) ([]sema.ResolvedLocation, error)); ok {
		return rf(identifiers, location)
	}
	if rf, ok := ret.Get(0).(func([]ast.Identifier, common.Location) []sema.ResolvedLocation); ok {
		r0 = rf(identifiers, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sema.ResolvedLocation)
		}
	}

	if rf, ok := ret.Get(1).(func([]ast.Identifier, common.Location) error); ok {
		r1 = rf(identifiers, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_ResolveLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveLocation'
type MockEnvironment_ResolveLocation_Call struct {
	*mock.Call
}

// ResolveLocation is a helper method to define mock.On call
//   - identifiers []ast.Identifier
//   - location common.Location
func (_e *MockEnvironment_Expecter) ResolveLocation(identifiers interface{}, location interface{}) *MockEnvironment_ResolveLocation_Call {
	return &MockEnvironment_ResolveLocation_Call{Call: _e.mock.On("ResolveLocation", identifiers, location)}
}

func (_c *MockEnvironment_ResolveLocation_Call) Run(run func(identifiers []ast.Identifier, location common.Location)) *MockEnvironment_ResolveLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]ast.Identifier), args[1].(common.Location))
	})
	return _c
}

func (_c *MockEnvironment_ResolveLocation_Call) Return(_a0 []sema.ResolvedLocation, _a1 error) *MockEnvironment_ResolveLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_ResolveLocation_Call) RunAndReturn(run func([]ast.Identifier, common.Location) ([]sema.ResolvedLocation, error)) *MockEnvironment_ResolveLocation_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceOwnerChanged provides a mock function with given fields: _a0, resource, oldOwner, newOwner
func (_m *MockEnvironment) ResourceOwnerChanged(_a0 *interpreter.Interpreter, resource *interpreter.CompositeValue, oldOwner common.Address, newOwner common.Address) {
	_m.Called(_a0, resource, oldOwner, newOwner)
}

// MockEnvironment_ResourceOwnerChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceOwnerChanged'
type MockEnvironment_ResourceOwnerChanged_Call struct {
	*mock.Call
}

// ResourceOwnerChanged is a helper method to define mock.On call
//   - _a0 *interpreter.Interpreter
//   - resource *interpreter.CompositeValue
//   - oldOwner common.Address
//   - newOwner common.Address
func (_e *MockEnvironment_Expecter) ResourceOwnerChanged(_a0 interface{}, resource interface{}, oldOwner interface{}, newOwner interface{}) *MockEnvironment_ResourceOwnerChanged_Call {
	return &MockEnvironment_ResourceOwnerChanged_Call{Call: _e.mock.On("ResourceOwnerChanged", _a0, resource, oldOwner, newOwner)}
}

func (_c *MockEnvironment_ResourceOwnerChanged_Call) Run(run func(_a0 *interpreter.Interpreter, resource *interpreter.CompositeValue, oldOwner common.Address, newOwner common.Address)) *MockEnvironment_ResourceOwnerChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*interpreter.Interpreter), args[1].(*interpreter.CompositeValue), args[2].(common.Address), args[3].(common.Address))
	})
	return _c
}

func (_c *MockEnvironment_ResourceOwnerChanged_Call) Return() *MockEnvironment_ResourceOwnerChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_ResourceOwnerChanged_Call) RunAndReturn(run func(*interpreter.Interpreter, *interpreter.CompositeValue, common.Address, common.Address)) *MockEnvironment_ResourceOwnerChanged_Call {
	_c.Run(run)
	return _c
}

// ReturnCadenceRuntime provides a mock function with given fields: _a0
func (_m *MockEnvironment) ReturnCadenceRuntime(_a0 *runtime.ReusableCadenceRuntime) {
	_m.Called(_a0)
}

// MockEnvironment_ReturnCadenceRuntime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnCadenceRuntime'
type MockEnvironment_ReturnCadenceRuntime_Call struct {
	*mock.Call
}

// ReturnCadenceRuntime is a helper method to define mock.On call
//   - _a0 *runtime.ReusableCadenceRuntime
func (_e *MockEnvironment_Expecter) ReturnCadenceRuntime(_a0 interface{}) *MockEnvironment_ReturnCadenceRuntime_Call {
	return &MockEnvironment_ReturnCadenceRuntime_Call{Call: _e.mock.On("ReturnCadenceRuntime", _a0)}
}

func (_c *MockEnvironment_ReturnCadenceRuntime_Call) Run(run func(_a0 *runtime.ReusableCadenceRuntime)) *MockEnvironment_ReturnCadenceRuntime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*runtime.ReusableCadenceRuntime))
	})
	return _c
}

func (_c *MockEnvironment_ReturnCadenceRuntime_Call) Return() *MockEnvironment_ReturnCadenceRuntime_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_ReturnCadenceRuntime_Call) RunAndReturn(run func(*runtime.ReusableCadenceRuntime)) *MockEnvironment_ReturnCadenceRuntime_Call {
	_c.Run(run)
	return _c
}

// RevokeAccountKey provides a mock function with given fields: address, index
func (_m *MockEnvironment) RevokeAccountKey(address common.Address, index uint32) (*stdlib.AccountKey, error) {
	ret := _m.Called(address, index)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccountKey")
	}

	var r0 *stdlib.AccountKey
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, uint32) (*stdlib.AccountKey, error)); ok {
		return rf(address, index)
	}
	if rf, ok := ret.Get(0).(func(common.Address, uint32) *stdlib.AccountKey); ok {
		r0 = rf(address, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stdlib.AccountKey)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, uint32) error); ok {
		r1 = rf(address, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_RevokeAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccountKey'
type MockEnvironment_RevokeAccountKey_Call struct {
	*mock.Call
}

// RevokeAccountKey is a helper method to define mock.On call
//   - address common.Address
//   - index uint32
func (_e *MockEnvironment_Expecter) RevokeAccountKey(address interface{}, index interface{}) *MockEnvironment_RevokeAccountKey_Call {
	return &MockEnvironment_RevokeAccountKey_Call{Call: _e.mock.On("RevokeAccountKey", address, index)}
}

func (_c *MockEnvironment_RevokeAccountKey_Call) Run(run func(address common.Address, index uint32)) *MockEnvironment_RevokeAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(uint32))
	})
	return _c
}

func (_c *MockEnvironment_RevokeAccountKey_Call) Return(_a0 *stdlib.AccountKey, _a1 error) *MockEnvironment_RevokeAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_RevokeAccountKey_Call) RunAndReturn(run func(common.Address, uint32) (*stdlib.AccountKey, error)) *MockEnvironment_RevokeAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// RuntimeSetNumberOfAccounts provides a mock function with given fields: count
func (_m *MockEnvironment) RuntimeSetNumberOfAccounts(count uint64) {
	_m.Called(count)
}

// MockEnvironment_RuntimeSetNumberOfAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeSetNumberOfAccounts'
type MockEnvironment_RuntimeSetNumberOfAccounts_Call struct {
	*mock.Call
}

// RuntimeSetNumberOfAccounts is a helper method to define mock.On call
//   - count uint64
func (_e *MockEnvironment_Expecter) RuntimeSetNumberOfAccounts(count interface{}) *MockEnvironment_RuntimeSetNumberOfAccounts_Call {
	return &MockEnvironment_RuntimeSetNumberOfAccounts_Call{Call: _e.mock.On("RuntimeSetNumberOfAccounts", count)}
}

func (_c *MockEnvironment_RuntimeSetNumberOfAccounts_Call) Run(run func(count uint64)) *MockEnvironment_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockEnvironment_RuntimeSetNumberOfAccounts_Call) Return() *MockEnvironment_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_RuntimeSetNumberOfAccounts_Call) RunAndReturn(run func(uint64)) *MockEnvironment_RuntimeSetNumberOfAccounts_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionChecked provides a mock function with given fields: _a0
func (_m *MockEnvironment) RuntimeTransactionChecked(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockEnvironment_RuntimeTransactionChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionChecked'
type MockEnvironment_RuntimeTransactionChecked_Call struct {
	*mock.Call
}

// RuntimeTransactionChecked is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockEnvironment_Expecter) RuntimeTransactionChecked(_a0 interface{}) *MockEnvironment_RuntimeTransactionChecked_Call {
	return &MockEnvironment_RuntimeTransactionChecked_Call{Call: _e.mock.On("RuntimeTransactionChecked", _a0)}
}

func (_c *MockEnvironment_RuntimeTransactionChecked_Call) Run(run func(_a0 time.Duration)) *MockEnvironment_RuntimeTransactionChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionChecked_Call) Return() *MockEnvironment_RuntimeTransactionChecked_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionChecked_Call) RunAndReturn(run func(time.Duration)) *MockEnvironment_RuntimeTransactionChecked_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionInterpreted provides a mock function with given fields: _a0
func (_m *MockEnvironment) RuntimeTransactionInterpreted(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockEnvironment_RuntimeTransactionInterpreted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionInterpreted'
type MockEnvironment_RuntimeTransactionInterpreted_Call struct {
	*mock.Call
}

// RuntimeTransactionInterpreted is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockEnvironment_Expecter) RuntimeTransactionInterpreted(_a0 interface{}) *MockEnvironment_RuntimeTransactionInterpreted_Call {
	return &MockEnvironment_RuntimeTransactionInterpreted_Call{Call: _e.mock.On("RuntimeTransactionInterpreted", _a0)}
}

func (_c *MockEnvironment_RuntimeTransactionInterpreted_Call) Run(run func(_a0 time.Duration)) *MockEnvironment_RuntimeTransactionInterpreted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionInterpreted_Call) Return() *MockEnvironment_RuntimeTransactionInterpreted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionInterpreted_Call) RunAndReturn(run func(time.Duration)) *MockEnvironment_RuntimeTransactionInterpreted_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionParsed provides a mock function with given fields: _a0
func (_m *MockEnvironment) RuntimeTransactionParsed(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockEnvironment_RuntimeTransactionParsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionParsed'
type MockEnvironment_RuntimeTransactionParsed_Call struct {
	*mock.Call
}

// RuntimeTransactionParsed is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockEnvironment_Expecter) RuntimeTransactionParsed(_a0 interface{}) *MockEnvironment_RuntimeTransactionParsed_Call {
	return &MockEnvironment_RuntimeTransactionParsed_Call{Call: _e.mock.On("RuntimeTransactionParsed", _a0)}
}

func (_c *MockEnvironment_RuntimeTransactionParsed_Call) Run(run func(_a0 time.Duration)) *MockEnvironment_RuntimeTransactionParsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionParsed_Call) Return() *MockEnvironment_RuntimeTransactionParsed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionParsed_Call) RunAndReturn(run func(time.Duration)) *MockEnvironment_RuntimeTransactionParsed_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheHit provides a mock function with no fields
func (_m *MockEnvironment) RuntimeTransactionProgramsCacheHit() {
	_m.Called()
}

// MockEnvironment_RuntimeTransactionProgramsCacheHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheHit'
type MockEnvironment_RuntimeTransactionProgramsCacheHit_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheHit is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) RuntimeTransactionProgramsCacheHit() *MockEnvironment_RuntimeTransactionProgramsCacheHit_Call {
	return &MockEnvironment_RuntimeTransactionProgramsCacheHit_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheHit")}
}

func (_c *MockEnvironment_RuntimeTransactionProgramsCacheHit_Call) Run(run func()) *MockEnvironment_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionProgramsCacheHit_Call) Return() *MockEnvironment_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionProgramsCacheHit_Call) RunAndReturn(run func()) *MockEnvironment_RuntimeTransactionProgramsCacheHit_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheMiss provides a mock function with no fields
func (_m *MockEnvironment) RuntimeTransactionProgramsCacheMiss() {
	_m.Called()
}

// MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheMiss'
type MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheMiss is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) RuntimeTransactionProgramsCacheMiss() *MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call {
	return &MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheMiss")}
}

func (_c *MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call) Run(run func()) *MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call) Return() *MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call) RunAndReturn(run func()) *MockEnvironment_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Run(run)
	return _c
}

// ServiceEvents provides a mock function with no fields
func (_m *MockEnvironment) ServiceEvents() flow.EventsList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceEvents")
	}

	var r0 flow.EventsList
	if rf, ok := ret.Get(0).(func() flow.EventsList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.EventsList)
		}
	}

	return r0
}

// MockEnvironment_ServiceEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceEvents'
type MockEnvironment_ServiceEvents_Call struct {
	*mock.Call
}

// ServiceEvents is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) ServiceEvents() *MockEnvironment_ServiceEvents_Call {
	return &MockEnvironment_ServiceEvents_Call{Call: _e.mock.On("ServiceEvents")}
}

func (_c *MockEnvironment_ServiceEvents_Call) Run(run func()) *MockEnvironment_ServiceEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_ServiceEvents_Call) Return(_a0 flow.EventsList) *MockEnvironment_ServiceEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ServiceEvents_Call) RunAndReturn(run func() flow.EventsList) *MockEnvironment_ServiceEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SetInterpreterSharedState provides a mock function with given fields: state
func (_m *MockEnvironment) SetInterpreterSharedState(state *interpreter.SharedState) {
	_m.Called(state)
}

// MockEnvironment_SetInterpreterSharedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInterpreterSharedState'
type MockEnvironment_SetInterpreterSharedState_Call struct {
	*mock.Call
}

// SetInterpreterSharedState is a helper method to define mock.On call
//   - state *interpreter.SharedState
func (_e *MockEnvironment_Expecter) SetInterpreterSharedState(state interface{}) *MockEnvironment_SetInterpreterSharedState_Call {
	return &MockEnvironment_SetInterpreterSharedState_Call{Call: _e.mock.On("SetInterpreterSharedState", state)}
}

func (_c *MockEnvironment_SetInterpreterSharedState_Call) Run(run func(state *interpreter.SharedState)) *MockEnvironment_SetInterpreterSharedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*interpreter.SharedState))
	})
	return _c
}

func (_c *MockEnvironment_SetInterpreterSharedState_Call) Return() *MockEnvironment_SetInterpreterSharedState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_SetInterpreterSharedState_Call) RunAndReturn(run func(*interpreter.SharedState)) *MockEnvironment_SetInterpreterSharedState_Call {
	_c.Run(run)
	return _c
}

// SetNumberOfDeployedCOAs provides a mock function with given fields: count
func (_m *MockEnvironment) SetNumberOfDeployedCOAs(count uint64) {
	_m.Called(count)
}

// MockEnvironment_SetNumberOfDeployedCOAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNumberOfDeployedCOAs'
type MockEnvironment_SetNumberOfDeployedCOAs_Call struct {
	*mock.Call
}

// SetNumberOfDeployedCOAs is a helper method to define mock.On call
//   - count uint64
func (_e *MockEnvironment_Expecter) SetNumberOfDeployedCOAs(count interface{}) *MockEnvironment_SetNumberOfDeployedCOAs_Call {
	return &MockEnvironment_SetNumberOfDeployedCOAs_Call{Call: _e.mock.On("SetNumberOfDeployedCOAs", count)}
}

func (_c *MockEnvironment_SetNumberOfDeployedCOAs_Call) Run(run func(count uint64)) *MockEnvironment_SetNumberOfDeployedCOAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockEnvironment_SetNumberOfDeployedCOAs_Call) Return() *MockEnvironment_SetNumberOfDeployedCOAs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnvironment_SetNumberOfDeployedCOAs_Call) RunAndReturn(run func(uint64)) *MockEnvironment_SetNumberOfDeployedCOAs_Call {
	_c.Run(run)
	return _c
}

// SetValue provides a mock function with given fields: owner, key, value
func (_m *MockEnvironment) SetValue(owner []byte, key []byte, value []byte) error {
	ret := _m.Called(owner, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) error); ok {
		r0 = rf(owner, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_SetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetValue'
type MockEnvironment_SetValue_Call struct {
	*mock.Call
}

// SetValue is a helper method to define mock.On call
//   - owner []byte
//   - key []byte
//   - value []byte
func (_e *MockEnvironment_Expecter) SetValue(owner interface{}, key interface{}, value interface{}) *MockEnvironment_SetValue_Call {
	return &MockEnvironment_SetValue_Call{Call: _e.mock.On("SetValue", owner, key, value)}
}

func (_c *MockEnvironment_SetValue_Call) Run(run func(owner []byte, key []byte, value []byte)) *MockEnvironment_SetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockEnvironment_SetValue_Call) Return(err error) *MockEnvironment_SetValue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnvironment_SetValue_Call) RunAndReturn(run func([]byte, []byte, []byte) error) *MockEnvironment_SetValue_Call {
	_c.Call.Return(run)
	return _c
}

// StartChildSpan provides a mock function with given fields: name, options
func (_m *MockEnvironment) StartChildSpan(name trace.SpanName, options ...oteltrace.SpanStartOption) tracing.TracerSpan {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartChildSpan")
	}

	var r0 tracing.TracerSpan
	if rf, ok := ret.Get(0).(func(trace.SpanName, ...oteltrace.SpanStartOption) tracing.TracerSpan); ok {
		r0 = rf(name, options...)
	} else {
		r0 = ret.Get(0).(tracing.TracerSpan)
	}

	return r0
}

// MockEnvironment_StartChildSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartChildSpan'
type MockEnvironment_StartChildSpan_Call struct {
	*mock.Call
}

// StartChildSpan is a helper method to define mock.On call
//   - name trace.SpanName
//   - options ...oteltrace.SpanStartOption
func (_e *MockEnvironment_Expecter) StartChildSpan(name interface{}, options ...interface{}) *MockEnvironment_StartChildSpan_Call {
	return &MockEnvironment_StartChildSpan_Call{Call: _e.mock.On("StartChildSpan",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockEnvironment_StartChildSpan_Call) Run(run func(name trace.SpanName, options ...oteltrace.SpanStartOption)) *MockEnvironment_StartChildSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oteltrace.SpanStartOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(oteltrace.SpanStartOption)
			}
		}
		run(args[0].(trace.SpanName), variadicArgs...)
	})
	return _c
}

func (_c *MockEnvironment_StartChildSpan_Call) Return(_a0 tracing.TracerSpan) *MockEnvironment_StartChildSpan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_StartChildSpan_Call) RunAndReturn(run func(trace.SpanName, ...oteltrace.SpanStartOption) tracing.TracerSpan) *MockEnvironment_StartChildSpan_Call {
	_c.Call.Return(run)
	return _c
}

// TotalEmittedEventBytes provides a mock function with no fields
func (_m *MockEnvironment) TotalEmittedEventBytes() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalEmittedEventBytes")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockEnvironment_TotalEmittedEventBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalEmittedEventBytes'
type MockEnvironment_TotalEmittedEventBytes_Call struct {
	*mock.Call
}

// TotalEmittedEventBytes is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) TotalEmittedEventBytes() *MockEnvironment_TotalEmittedEventBytes_Call {
	return &MockEnvironment_TotalEmittedEventBytes_Call{Call: _e.mock.On("TotalEmittedEventBytes")}
}

func (_c *MockEnvironment_TotalEmittedEventBytes_Call) Run(run func()) *MockEnvironment_TotalEmittedEventBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_TotalEmittedEventBytes_Call) Return(_a0 uint64) *MockEnvironment_TotalEmittedEventBytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_TotalEmittedEventBytes_Call) RunAndReturn(run func() uint64) *MockEnvironment_TotalEmittedEventBytes_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionFeesEnabled provides a mock function with no fields
func (_m *MockEnvironment) TransactionFeesEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionFeesEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEnvironment_TransactionFeesEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionFeesEnabled'
type MockEnvironment_TransactionFeesEnabled_Call struct {
	*mock.Call
}

// TransactionFeesEnabled is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) TransactionFeesEnabled() *MockEnvironment_TransactionFeesEnabled_Call {
	return &MockEnvironment_TransactionFeesEnabled_Call{Call: _e.mock.On("TransactionFeesEnabled")}
}

func (_c *MockEnvironment_TransactionFeesEnabled_Call) Run(run func()) *MockEnvironment_TransactionFeesEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_TransactionFeesEnabled_Call) Return(_a0 bool) *MockEnvironment_TransactionFeesEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_TransactionFeesEnabled_Call) RunAndReturn(run func() bool) *MockEnvironment_TransactionFeesEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// TxID provides a mock function with no fields
func (_m *MockEnvironment) TxID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockEnvironment_TxID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxID'
type MockEnvironment_TxID_Call struct {
	*mock.Call
}

// TxID is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) TxID() *MockEnvironment_TxID_Call {
	return &MockEnvironment_TxID_Call{Call: _e.mock.On("TxID")}
}

func (_c *MockEnvironment_TxID_Call) Run(run func()) *MockEnvironment_TxID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_TxID_Call) Return(_a0 flow.Identifier) *MockEnvironment_TxID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_TxID_Call) RunAndReturn(run func() flow.Identifier) *MockEnvironment_TxID_Call {
	_c.Call.Return(run)
	return _c
}

// TxIndex provides a mock function with no fields
func (_m *MockEnvironment) TxIndex() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxIndex")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MockEnvironment_TxIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxIndex'
type MockEnvironment_TxIndex_Call struct {
	*mock.Call
}

// TxIndex is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) TxIndex() *MockEnvironment_TxIndex_Call {
	return &MockEnvironment_TxIndex_Call{Call: _e.mock.On("TxIndex")}
}

func (_c *MockEnvironment_TxIndex_Call) Run(run func()) *MockEnvironment_TxIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_TxIndex_Call) Return(_a0 uint32) *MockEnvironment_TxIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_TxIndex_Call) RunAndReturn(run func() uint32) *MockEnvironment_TxIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountContractCode provides a mock function with given fields: location, code
func (_m *MockEnvironment) UpdateAccountContractCode(location common.AddressLocation, code []byte) error {
	ret := _m.Called(location, code)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountContractCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.AddressLocation, []byte) error); ok {
		r0 = rf(location, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_UpdateAccountContractCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountContractCode'
type MockEnvironment_UpdateAccountContractCode_Call struct {
	*mock.Call
}

// UpdateAccountContractCode is a helper method to define mock.On call
//   - location common.AddressLocation
//   - code []byte
func (_e *MockEnvironment_Expecter) UpdateAccountContractCode(location interface{}, code interface{}) *MockEnvironment_UpdateAccountContractCode_Call {
	return &MockEnvironment_UpdateAccountContractCode_Call{Call: _e.mock.On("UpdateAccountContractCode", location, code)}
}

func (_c *MockEnvironment_UpdateAccountContractCode_Call) Run(run func(location common.AddressLocation, code []byte)) *MockEnvironment_UpdateAccountContractCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.AddressLocation), args[1].([]byte))
	})
	return _c
}

func (_c *MockEnvironment_UpdateAccountContractCode_Call) Return(err error) *MockEnvironment_UpdateAccountContractCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnvironment_UpdateAccountContractCode_Call) RunAndReturn(run func(common.AddressLocation, []byte) error) *MockEnvironment_UpdateAccountContractCode_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccountCapabilitiesGet provides a mock function with given fields: context, locationRange, address, path, wantedBorrowType, capabilityBorrowType
func (_m *MockEnvironment) ValidateAccountCapabilitiesGet(context interpreter.AccountCapabilityGetValidationContext, locationRange interpreter.LocationRange, address interpreter.AddressValue, path interpreter.PathValue, wantedBorrowType *sema.ReferenceType, capabilityBorrowType *sema.ReferenceType) (bool, error) {
	ret := _m.Called(context, locationRange, address, path, wantedBorrowType, capabilityBorrowType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccountCapabilitiesGet")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interpreter.AccountCapabilityGetValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *sema.ReferenceType, *sema.ReferenceType) (bool, error)); ok {
		return rf(context, locationRange, address, path, wantedBorrowType, capabilityBorrowType)
	}
	if rf, ok := ret.Get(0).(func(interpreter.AccountCapabilityGetValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *sema.ReferenceType, *sema.ReferenceType) bool); ok {
		r0 = rf(context, locationRange, address, path, wantedBorrowType, capabilityBorrowType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interpreter.AccountCapabilityGetValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *sema.ReferenceType, *sema.ReferenceType) error); ok {
		r1 = rf(context, locationRange, address, path, wantedBorrowType, capabilityBorrowType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_ValidateAccountCapabilitiesGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccountCapabilitiesGet'
type MockEnvironment_ValidateAccountCapabilitiesGet_Call struct {
	*mock.Call
}

// ValidateAccountCapabilitiesGet is a helper method to define mock.On call
//   - context interpreter.AccountCapabilityGetValidationContext
//   - locationRange interpreter.LocationRange
//   - address interpreter.AddressValue
//   - path interpreter.PathValue
//   - wantedBorrowType *sema.ReferenceType
//   - capabilityBorrowType *sema.ReferenceType
func (_e *MockEnvironment_Expecter) ValidateAccountCapabilitiesGet(context interface{}, locationRange interface{}, address interface{}, path interface{}, wantedBorrowType interface{}, capabilityBorrowType interface{}) *MockEnvironment_ValidateAccountCapabilitiesGet_Call {
	return &MockEnvironment_ValidateAccountCapabilitiesGet_Call{Call: _e.mock.On("ValidateAccountCapabilitiesGet", context, locationRange, address, path, wantedBorrowType, capabilityBorrowType)}
}

func (_c *MockEnvironment_ValidateAccountCapabilitiesGet_Call) Run(run func(context interpreter.AccountCapabilityGetValidationContext, locationRange interpreter.LocationRange, address interpreter.AddressValue, path interpreter.PathValue, wantedBorrowType *sema.ReferenceType, capabilityBorrowType *sema.ReferenceType)) *MockEnvironment_ValidateAccountCapabilitiesGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interpreter.AccountCapabilityGetValidationContext), args[1].(interpreter.LocationRange), args[2].(interpreter.AddressValue), args[3].(interpreter.PathValue), args[4].(*sema.ReferenceType), args[5].(*sema.ReferenceType))
	})
	return _c
}

func (_c *MockEnvironment_ValidateAccountCapabilitiesGet_Call) Return(_a0 bool, _a1 error) *MockEnvironment_ValidateAccountCapabilitiesGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_ValidateAccountCapabilitiesGet_Call) RunAndReturn(run func(interpreter.AccountCapabilityGetValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *sema.ReferenceType, *sema.ReferenceType) (bool, error)) *MockEnvironment_ValidateAccountCapabilitiesGet_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccountCapabilitiesPublish provides a mock function with given fields: context, locationRange, address, path, capabilityBorrowType
func (_m *MockEnvironment) ValidateAccountCapabilitiesPublish(context interpreter.AccountCapabilityPublishValidationContext, locationRange interpreter.LocationRange, address interpreter.AddressValue, path interpreter.PathValue, capabilityBorrowType *interpreter.ReferenceStaticType) (bool, error) {
	ret := _m.Called(context, locationRange, address, path, capabilityBorrowType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccountCapabilitiesPublish")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interpreter.AccountCapabilityPublishValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *interpreter.ReferenceStaticType) (bool, error)); ok {
		return rf(context, locationRange, address, path, capabilityBorrowType)
	}
	if rf, ok := ret.Get(0).(func(interpreter.AccountCapabilityPublishValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *interpreter.ReferenceStaticType) bool); ok {
		r0 = rf(context, locationRange, address, path, capabilityBorrowType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interpreter.AccountCapabilityPublishValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *interpreter.ReferenceStaticType) error); ok {
		r1 = rf(context, locationRange, address, path, capabilityBorrowType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_ValidateAccountCapabilitiesPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccountCapabilitiesPublish'
type MockEnvironment_ValidateAccountCapabilitiesPublish_Call struct {
	*mock.Call
}

// ValidateAccountCapabilitiesPublish is a helper method to define mock.On call
//   - context interpreter.AccountCapabilityPublishValidationContext
//   - locationRange interpreter.LocationRange
//   - address interpreter.AddressValue
//   - path interpreter.PathValue
//   - capabilityBorrowType *interpreter.ReferenceStaticType
func (_e *MockEnvironment_Expecter) ValidateAccountCapabilitiesPublish(context interface{}, locationRange interface{}, address interface{}, path interface{}, capabilityBorrowType interface{}) *MockEnvironment_ValidateAccountCapabilitiesPublish_Call {
	return &MockEnvironment_ValidateAccountCapabilitiesPublish_Call{Call: _e.mock.On("ValidateAccountCapabilitiesPublish", context, locationRange, address, path, capabilityBorrowType)}
}

func (_c *MockEnvironment_ValidateAccountCapabilitiesPublish_Call) Run(run func(context interpreter.AccountCapabilityPublishValidationContext, locationRange interpreter.LocationRange, address interpreter.AddressValue, path interpreter.PathValue, capabilityBorrowType *interpreter.ReferenceStaticType)) *MockEnvironment_ValidateAccountCapabilitiesPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interpreter.AccountCapabilityPublishValidationContext), args[1].(interpreter.LocationRange), args[2].(interpreter.AddressValue), args[3].(interpreter.PathValue), args[4].(*interpreter.ReferenceStaticType))
	})
	return _c
}

func (_c *MockEnvironment_ValidateAccountCapabilitiesPublish_Call) Return(_a0 bool, _a1 error) *MockEnvironment_ValidateAccountCapabilitiesPublish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_ValidateAccountCapabilitiesPublish_Call) RunAndReturn(run func(interpreter.AccountCapabilityPublishValidationContext, interpreter.LocationRange, interpreter.AddressValue, interpreter.PathValue, *interpreter.ReferenceStaticType) (bool, error)) *MockEnvironment_ValidateAccountCapabilitiesPublish_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePublicKey provides a mock function with given fields: key
func (_m *MockEnvironment) ValidatePublicKey(key *stdlib.PublicKey) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePublicKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*stdlib.PublicKey) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnvironment_ValidatePublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePublicKey'
type MockEnvironment_ValidatePublicKey_Call struct {
	*mock.Call
}

// ValidatePublicKey is a helper method to define mock.On call
//   - key *stdlib.PublicKey
func (_e *MockEnvironment_Expecter) ValidatePublicKey(key interface{}) *MockEnvironment_ValidatePublicKey_Call {
	return &MockEnvironment_ValidatePublicKey_Call{Call: _e.mock.On("ValidatePublicKey", key)}
}

func (_c *MockEnvironment_ValidatePublicKey_Call) Run(run func(key *stdlib.PublicKey)) *MockEnvironment_ValidatePublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*stdlib.PublicKey))
	})
	return _c
}

func (_c *MockEnvironment_ValidatePublicKey_Call) Return(_a0 error) *MockEnvironment_ValidatePublicKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironment_ValidatePublicKey_Call) RunAndReturn(run func(*stdlib.PublicKey) error) *MockEnvironment_ValidatePublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// ValueExists provides a mock function with given fields: owner, key
func (_m *MockEnvironment) ValueExists(owner []byte, key []byte) (bool, error) {
	ret := _m.Called(owner, key)

	if len(ret) == 0 {
		panic("no return value specified for ValueExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) (bool, error)); ok {
		return rf(owner, key)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(owner, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(owner, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_ValueExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValueExists'
type MockEnvironment_ValueExists_Call struct {
	*mock.Call
}

// ValueExists is a helper method to define mock.On call
//   - owner []byte
//   - key []byte
func (_e *MockEnvironment_Expecter) ValueExists(owner interface{}, key interface{}) *MockEnvironment_ValueExists_Call {
	return &MockEnvironment_ValueExists_Call{Call: _e.mock.On("ValueExists", owner, key)}
}

func (_c *MockEnvironment_ValueExists_Call) Run(run func(owner []byte, key []byte)) *MockEnvironment_ValueExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockEnvironment_ValueExists_Call) Return(exists bool, err error) *MockEnvironment_ValueExists_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockEnvironment_ValueExists_Call) RunAndReturn(run func([]byte, []byte) (bool, error)) *MockEnvironment_ValueExists_Call {
	_c.Call.Return(run)
	return _c
}

// VerifySignature provides a mock function with given fields: signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm
func (_m *MockEnvironment) VerifySignature(signature []byte, tag string, signedData []byte, publicKey []byte, signatureAlgorithm sema.SignatureAlgorithm, hashAlgorithm sema.HashAlgorithm) (bool, error) {
	ret := _m.Called(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)

	if len(ret) == 0 {
		panic("no return value specified for VerifySignature")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) (bool, error)); ok {
		return rf(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)
	}
	if rf, ok := ret.Get(0).(func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) bool); ok {
		r0 = rf(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) error); ok {
		r1 = rf(signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnvironment_VerifySignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySignature'
type MockEnvironment_VerifySignature_Call struct {
	*mock.Call
}

// VerifySignature is a helper method to define mock.On call
//   - signature []byte
//   - tag string
//   - signedData []byte
//   - publicKey []byte
//   - signatureAlgorithm sema.SignatureAlgorithm
//   - hashAlgorithm sema.HashAlgorithm
func (_e *MockEnvironment_Expecter) VerifySignature(signature interface{}, tag interface{}, signedData interface{}, publicKey interface{}, signatureAlgorithm interface{}, hashAlgorithm interface{}) *MockEnvironment_VerifySignature_Call {
	return &MockEnvironment_VerifySignature_Call{Call: _e.mock.On("VerifySignature", signature, tag, signedData, publicKey, signatureAlgorithm, hashAlgorithm)}
}

func (_c *MockEnvironment_VerifySignature_Call) Run(run func(signature []byte, tag string, signedData []byte, publicKey []byte, signatureAlgorithm sema.SignatureAlgorithm, hashAlgorithm sema.HashAlgorithm)) *MockEnvironment_VerifySignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].([]byte), args[3].([]byte), args[4].(sema.SignatureAlgorithm), args[5].(sema.HashAlgorithm))
	})
	return _c
}

func (_c *MockEnvironment_VerifySignature_Call) Return(_a0 bool, _a1 error) *MockEnvironment_VerifySignature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnvironment_VerifySignature_Call) RunAndReturn(run func([]byte, string, []byte, []byte, sema.SignatureAlgorithm, sema.HashAlgorithm) (bool, error)) *MockEnvironment_VerifySignature_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnvironment creates a new instance of MockEnvironment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnvironment {
	mock := &MockEnvironment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
