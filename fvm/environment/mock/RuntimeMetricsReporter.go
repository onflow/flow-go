// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRuntimeMetricsReporter is an autogenerated mock type for the RuntimeMetricsReporter type
type MockRuntimeMetricsReporter struct {
	mock.Mock
}

type MockRuntimeMetricsReporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntimeMetricsReporter) EXPECT() *MockRuntimeMetricsReporter_Expecter {
	return &MockRuntimeMetricsReporter_Expecter{mock: &_m.Mock}
}

// RuntimeSetNumberOfAccounts provides a mock function with given fields: count
func (_m *MockRuntimeMetricsReporter) RuntimeSetNumberOfAccounts(count uint64) {
	_m.Called(count)
}

// MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeSetNumberOfAccounts'
type MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call struct {
	*mock.Call
}

// RuntimeSetNumberOfAccounts is a helper method to define mock.On call
//   - count uint64
func (_e *MockRuntimeMetricsReporter_Expecter) RuntimeSetNumberOfAccounts(count interface{}) *MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	return &MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call{Call: _e.mock.On("RuntimeSetNumberOfAccounts", count)}
}

func (_c *MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call) Run(run func(count uint64)) *MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call) Return() *MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call) RunAndReturn(run func(uint64)) *MockRuntimeMetricsReporter_RuntimeSetNumberOfAccounts_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionChecked provides a mock function with given fields: _a0
func (_m *MockRuntimeMetricsReporter) RuntimeTransactionChecked(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionChecked'
type MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call struct {
	*mock.Call
}

// RuntimeTransactionChecked is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockRuntimeMetricsReporter_Expecter) RuntimeTransactionChecked(_a0 interface{}) *MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call {
	return &MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call{Call: _e.mock.On("RuntimeTransactionChecked", _a0)}
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call) Run(run func(_a0 time.Duration)) *MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call) Return() *MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call) RunAndReturn(run func(time.Duration)) *MockRuntimeMetricsReporter_RuntimeTransactionChecked_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionInterpreted provides a mock function with given fields: _a0
func (_m *MockRuntimeMetricsReporter) RuntimeTransactionInterpreted(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionInterpreted'
type MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call struct {
	*mock.Call
}

// RuntimeTransactionInterpreted is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockRuntimeMetricsReporter_Expecter) RuntimeTransactionInterpreted(_a0 interface{}) *MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call {
	return &MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call{Call: _e.mock.On("RuntimeTransactionInterpreted", _a0)}
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call) Run(run func(_a0 time.Duration)) *MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call) Return() *MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call) RunAndReturn(run func(time.Duration)) *MockRuntimeMetricsReporter_RuntimeTransactionInterpreted_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionParsed provides a mock function with given fields: _a0
func (_m *MockRuntimeMetricsReporter) RuntimeTransactionParsed(_a0 time.Duration) {
	_m.Called(_a0)
}

// MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionParsed'
type MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call struct {
	*mock.Call
}

// RuntimeTransactionParsed is a helper method to define mock.On call
//   - _a0 time.Duration
func (_e *MockRuntimeMetricsReporter_Expecter) RuntimeTransactionParsed(_a0 interface{}) *MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call {
	return &MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call{Call: _e.mock.On("RuntimeTransactionParsed", _a0)}
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call) Run(run func(_a0 time.Duration)) *MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call) Return() *MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call) RunAndReturn(run func(time.Duration)) *MockRuntimeMetricsReporter_RuntimeTransactionParsed_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheHit provides a mock function with no fields
func (_m *MockRuntimeMetricsReporter) RuntimeTransactionProgramsCacheHit() {
	_m.Called()
}

// MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheHit'
type MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheHit is a helper method to define mock.On call
func (_e *MockRuntimeMetricsReporter_Expecter) RuntimeTransactionProgramsCacheHit() *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	return &MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheHit")}
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call) Run(run func()) *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call) Return() *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call) RunAndReturn(run func()) *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheHit_Call {
	_c.Run(run)
	return _c
}

// RuntimeTransactionProgramsCacheMiss provides a mock function with no fields
func (_m *MockRuntimeMetricsReporter) RuntimeTransactionProgramsCacheMiss() {
	_m.Called()
}

// MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeTransactionProgramsCacheMiss'
type MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call struct {
	*mock.Call
}

// RuntimeTransactionProgramsCacheMiss is a helper method to define mock.On call
func (_e *MockRuntimeMetricsReporter_Expecter) RuntimeTransactionProgramsCacheMiss() *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	return &MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call{Call: _e.mock.On("RuntimeTransactionProgramsCacheMiss")}
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call) Run(run func()) *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call) Return() *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call) RunAndReturn(run func()) *MockRuntimeMetricsReporter_RuntimeTransactionProgramsCacheMiss_Call {
	_c.Run(run)
	return _c
}

// NewMockRuntimeMetricsReporter creates a new instance of MockRuntimeMetricsReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntimeMetricsReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntimeMetricsReporter {
	mock := &MockRuntimeMetricsReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
