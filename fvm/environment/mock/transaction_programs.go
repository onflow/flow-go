// Code generated by mockery v2.13.1. DO NOT EDIT.

package mock

import (
	common "github.com/onflow/cadence/runtime/common"

	interpreter "github.com/onflow/cadence/runtime/interpreter"

	mock "github.com/stretchr/testify/mock"

	state "github.com/onflow/flow-go/fvm/state"
)

// TransactionPrograms is an autogenerated mock type for the TransactionPrograms type
type TransactionPrograms struct {
	mock.Mock
}

// Get provides a mock function with given fields: loc
func (_m *TransactionPrograms) Get(loc common.Location) (*interpreter.Program, *state.State, bool) {
	ret := _m.Called(loc)

	var r0 *interpreter.Program
	if rf, ok := ret.Get(0).(func(common.Location) *interpreter.Program); ok {
		r0 = rf(loc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interpreter.Program)
		}
	}

	var r1 *state.State
	if rf, ok := ret.Get(1).(func(common.Location) *state.State); ok {
		r1 = rf(loc)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*state.State)
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(common.Location) bool); ok {
		r2 = rf(loc)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// Set provides a mock function with given fields: loc, prog, _a2
func (_m *TransactionPrograms) Set(loc common.Location, prog *interpreter.Program, _a2 *state.State) {
	_m.Called(loc, prog, _a2)
}

type mockConstructorTestingTNewTransactionPrograms interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionPrograms creates a new instance of TransactionPrograms. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionPrograms(t mockConstructorTestingTNewTransactionPrograms) *TransactionPrograms {
	mock := &TransactionPrograms{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
