// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	cadence "github.com/onflow/cadence"

	mock "github.com/stretchr/testify/mock"
)

// MockEventEncoder is an autogenerated mock type for the EventEncoder type
type MockEventEncoder struct {
	mock.Mock
}

type MockEventEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventEncoder) EXPECT() *MockEventEncoder_Expecter {
	return &MockEventEncoder_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function with given fields: event
func (_m *MockEventEncoder) Encode(event cadence.Event) ([]byte, error) {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(cadence.Event) ([]byte, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(cadence.Event) []byte); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(cadence.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventEncoder_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockEventEncoder_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - event cadence.Event
func (_e *MockEventEncoder_Expecter) Encode(event interface{}) *MockEventEncoder_Encode_Call {
	return &MockEventEncoder_Encode_Call{Call: _e.mock.On("Encode", event)}
}

func (_c *MockEventEncoder_Encode_Call) Run(run func(event cadence.Event)) *MockEventEncoder_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cadence.Event))
	})
	return _c
}

func (_c *MockEventEncoder_Encode_Call) Return(_a0 []byte, _a1 error) *MockEventEncoder_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventEncoder_Encode_Call) RunAndReturn(run func(cadence.Event) ([]byte, error)) *MockEventEncoder_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventEncoder creates a new instance of MockEventEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventEncoder {
	mock := &MockEventEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
