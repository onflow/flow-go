// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	io "io"

	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

type MockReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReader) EXPECT() *MockReader_Expecter {
	return &MockReader_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *MockReader) Get(key []byte) ([]byte, io.Closer, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 io.Closer
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, io.Closer, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) io.Closer); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Closer)
		}
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockReader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockReader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *MockReader_Expecter) Get(key interface{}) *MockReader_Get_Call {
	return &MockReader_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockReader_Get_Call) Run(run func(key []byte)) *MockReader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockReader_Get_Call) Return(value []byte, closer io.Closer, err error) *MockReader_Get_Call {
	_c.Call.Return(value, closer, err)
	return _c
}

func (_c *MockReader_Get_Call) RunAndReturn(run func([]byte) ([]byte, io.Closer, error)) *MockReader_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewIter provides a mock function with given fields: startPrefix, endPrefix, ops
func (_m *MockReader) NewIter(startPrefix []byte, endPrefix []byte, ops storage.IteratorOption) (storage.Iterator, error) {
	ret := _m.Called(startPrefix, endPrefix, ops)

	if len(ret) == 0 {
		panic("no return value specified for NewIter")
	}

	var r0 storage.Iterator
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, storage.IteratorOption) (storage.Iterator, error)); ok {
		return rf(startPrefix, endPrefix, ops)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte, storage.IteratorOption) storage.Iterator); ok {
		r0 = rf(startPrefix, endPrefix, ops)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Iterator)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte, storage.IteratorOption) error); ok {
		r1 = rf(startPrefix, endPrefix, ops)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_NewIter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewIter'
type MockReader_NewIter_Call struct {
	*mock.Call
}

// NewIter is a helper method to define mock.On call
//   - startPrefix []byte
//   - endPrefix []byte
//   - ops storage.IteratorOption
func (_e *MockReader_Expecter) NewIter(startPrefix interface{}, endPrefix interface{}, ops interface{}) *MockReader_NewIter_Call {
	return &MockReader_NewIter_Call{Call: _e.mock.On("NewIter", startPrefix, endPrefix, ops)}
}

func (_c *MockReader_NewIter_Call) Run(run func(startPrefix []byte, endPrefix []byte, ops storage.IteratorOption)) *MockReader_NewIter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte), args[2].(storage.IteratorOption))
	})
	return _c
}

func (_c *MockReader_NewIter_Call) Return(_a0 storage.Iterator, _a1 error) *MockReader_NewIter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_NewIter_Call) RunAndReturn(run func([]byte, []byte, storage.IteratorOption) (storage.Iterator, error)) *MockReader_NewIter_Call {
	_c.Call.Return(run)
	return _c
}

// NewSeeker provides a mock function with no fields
func (_m *MockReader) NewSeeker() storage.Seeker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewSeeker")
	}

	var r0 storage.Seeker
	if rf, ok := ret.Get(0).(func() storage.Seeker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Seeker)
		}
	}

	return r0
}

// MockReader_NewSeeker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSeeker'
type MockReader_NewSeeker_Call struct {
	*mock.Call
}

// NewSeeker is a helper method to define mock.On call
func (_e *MockReader_Expecter) NewSeeker() *MockReader_NewSeeker_Call {
	return &MockReader_NewSeeker_Call{Call: _e.mock.On("NewSeeker")}
}

func (_c *MockReader_NewSeeker_Call) Run(run func()) *MockReader_NewSeeker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReader_NewSeeker_Call) Return(_a0 storage.Seeker) *MockReader_NewSeeker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReader_NewSeeker_Call) RunAndReturn(run func() storage.Seeker) *MockReader_NewSeeker_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
