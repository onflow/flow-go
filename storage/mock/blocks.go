// Code generated by mockery. DO NOT EDIT.

package mock

import (
	lockctx "github.com/jordanschalm/lockctx"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// Blocks is an autogenerated mock type for the Blocks type
type Blocks struct {
	mock.Mock
}

// BatchIndexBlockContainingCollectionGuarantees provides a mock function with given fields: lctx, rw, blockID, collIDs
func (_m *Blocks) BatchIndexBlockContainingCollectionGuarantees(lctx lockctx.Proof, rw storage.ReaderBatchWriter, blockID flow.Identifier, collIDs []flow.Identifier) error {
	ret := _m.Called(lctx, rw, blockID, collIDs)

	if len(ret) == 0 {
		panic("no return value specified for BatchIndexBlockContainingCollectionGuarantees")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(lockctx.Proof, storage.ReaderBatchWriter, flow.Identifier, []flow.Identifier) error); ok {
		r0 = rf(lctx, rw, blockID, collIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchStore provides a mock function with given fields: lctx, rw, proposal
func (_m *Blocks) BatchStore(lctx lockctx.Proof, rw storage.ReaderBatchWriter, proposal *flow.Proposal) error {
	ret := _m.Called(lctx, rw, proposal)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(lockctx.Proof, storage.ReaderBatchWriter, *flow.Proposal) error); ok {
		r0 = rf(lctx, rw, proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByCollectionID provides a mock function with given fields: collID
func (_m *Blocks) ByCollectionID(collID flow.Identifier) (*flow.Block, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for ByCollectionID")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Block, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Block); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByHeight provides a mock function with given fields: height
func (_m *Blocks) ByHeight(height uint64) (*flow.Block, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for ByHeight")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.Block, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByID provides a mock function with given fields: blockID
func (_m *Blocks) ByID(blockID flow.Identifier) (*flow.Block, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Block, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Block); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByView provides a mock function with given fields: view
func (_m *Blocks) ByView(view uint64) (*flow.Block, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for ByView")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.Block, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.Block); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposalByHeight provides a mock function with given fields: height
func (_m *Blocks) ProposalByHeight(height uint64) (*flow.Proposal, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for ProposalByHeight")
	}

	var r0 *flow.Proposal
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.Proposal, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.Proposal); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Proposal)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposalByID provides a mock function with given fields: blockID
func (_m *Blocks) ProposalByID(blockID flow.Identifier) (*flow.Proposal, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ProposalByID")
	}

	var r0 *flow.Proposal
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Proposal, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Proposal); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Proposal)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposalByView provides a mock function with given fields: view
func (_m *Blocks) ProposalByView(view uint64) (*flow.Proposal, error) {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for ProposalByView")
	}

	var r0 *flow.Proposal
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.Proposal, error)); ok {
		return rf(view)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.Proposal); ok {
		r0 = rf(view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Proposal)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlocks creates a new instance of Blocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blocks {
	mock := &Blocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
