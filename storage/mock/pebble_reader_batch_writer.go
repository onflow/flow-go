// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	pebble "github.com/cockroachdb/pebble"
	mock "github.com/stretchr/testify/mock"
)

// PebbleReaderBatchWriter is an autogenerated mock type for the PebbleReaderBatchWriter type
type PebbleReaderBatchWriter struct {
	mock.Mock
}

// AddCallback provides a mock function with given fields: _a0
func (_m *PebbleReaderBatchWriter) AddCallback(_a0 func()) {
	_m.Called(_a0)
}

// IndexedBatch provides a mock function with given fields:
func (_m *PebbleReaderBatchWriter) IndexedBatch() *pebble.Batch {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IndexedBatch")
	}

	var r0 *pebble.Batch
	if rf, ok := ret.Get(0).(func() *pebble.Batch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pebble.Batch)
		}
	}

	return r0
}

// ReaderWriter provides a mock function with given fields:
func (_m *PebbleReaderBatchWriter) ReaderWriter() (pebble.Reader, pebble.Writer) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReaderWriter")
	}

	var r0 pebble.Reader
	var r1 pebble.Writer
	if rf, ok := ret.Get(0).(func() (pebble.Reader, pebble.Writer)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() pebble.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pebble.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func() pebble.Writer); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(pebble.Writer)
		}
	}

	return r0, r1
}

// NewPebbleReaderBatchWriter creates a new instance of PebbleReaderBatchWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPebbleReaderBatchWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *PebbleReaderBatchWriter {
	mock := &PebbleReaderBatchWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
