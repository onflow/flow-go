// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// MockBatch is an autogenerated mock type for the Batch type
type MockBatch struct {
	mock.Mock
}

type MockBatch_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBatch) EXPECT() *MockBatch_Expecter {
	return &MockBatch_Expecter{mock: &_m.Mock}
}

// AddCallback provides a mock function with given fields: _a0
func (_m *MockBatch) AddCallback(_a0 func(error)) {
	_m.Called(_a0)
}

// MockBatch_AddCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCallback'
type MockBatch_AddCallback_Call struct {
	*mock.Call
}

// AddCallback is a helper method to define mock.On call
//   - _a0 func(error)
func (_e *MockBatch_Expecter) AddCallback(_a0 interface{}) *MockBatch_AddCallback_Call {
	return &MockBatch_AddCallback_Call{Call: _e.mock.On("AddCallback", _a0)}
}

func (_c *MockBatch_AddCallback_Call) Run(run func(_a0 func(error))) *MockBatch_AddCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(error)))
	})
	return _c
}

func (_c *MockBatch_AddCallback_Call) Return() *MockBatch_AddCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBatch_AddCallback_Call) RunAndReturn(run func(func(error))) *MockBatch_AddCallback_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockBatch) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBatch_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBatch_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBatch_Expecter) Close() *MockBatch_Close_Call {
	return &MockBatch_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBatch_Close_Call) Run(run func()) *MockBatch_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBatch_Close_Call) Return(_a0 error) *MockBatch_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBatch_Close_Call) RunAndReturn(run func() error) *MockBatch_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with no fields
func (_m *MockBatch) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBatch_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockBatch_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockBatch_Expecter) Commit() *MockBatch_Commit_Call {
	return &MockBatch_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockBatch_Commit_Call) Run(run func()) *MockBatch_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBatch_Commit_Call) Return(_a0 error) *MockBatch_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBatch_Commit_Call) RunAndReturn(run func() error) *MockBatch_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalReader provides a mock function with no fields
func (_m *MockBatch) GlobalReader() storage.Reader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalReader")
	}

	var r0 storage.Reader
	if rf, ok := ret.Get(0).(func() storage.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Reader)
		}
	}

	return r0
}

// MockBatch_GlobalReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalReader'
type MockBatch_GlobalReader_Call struct {
	*mock.Call
}

// GlobalReader is a helper method to define mock.On call
func (_e *MockBatch_Expecter) GlobalReader() *MockBatch_GlobalReader_Call {
	return &MockBatch_GlobalReader_Call{Call: _e.mock.On("GlobalReader")}
}

func (_c *MockBatch_GlobalReader_Call) Run(run func()) *MockBatch_GlobalReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBatch_GlobalReader_Call) Return(_a0 storage.Reader) *MockBatch_GlobalReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBatch_GlobalReader_Call) RunAndReturn(run func() storage.Reader) *MockBatch_GlobalReader_Call {
	_c.Call.Return(run)
	return _c
}

// Lock provides a mock function with given fields: _a0
func (_m *MockBatch) Lock(_a0 *sync.Mutex) {
	_m.Called(_a0)
}

// MockBatch_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockBatch_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - _a0 *sync.Mutex
func (_e *MockBatch_Expecter) Lock(_a0 interface{}) *MockBatch_Lock_Call {
	return &MockBatch_Lock_Call{Call: _e.mock.On("Lock", _a0)}
}

func (_c *MockBatch_Lock_Call) Run(run func(_a0 *sync.Mutex)) *MockBatch_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sync.Mutex))
	})
	return _c
}

func (_c *MockBatch_Lock_Call) Return() *MockBatch_Lock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBatch_Lock_Call) RunAndReturn(run func(*sync.Mutex)) *MockBatch_Lock_Call {
	_c.Run(run)
	return _c
}

// Writer provides a mock function with no fields
func (_m *MockBatch) Writer() storage.Writer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Writer")
	}

	var r0 storage.Writer
	if rf, ok := ret.Get(0).(func() storage.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Writer)
		}
	}

	return r0
}

// MockBatch_Writer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Writer'
type MockBatch_Writer_Call struct {
	*mock.Call
}

// Writer is a helper method to define mock.On call
func (_e *MockBatch_Expecter) Writer() *MockBatch_Writer_Call {
	return &MockBatch_Writer_Call{Call: _e.mock.On("Writer")}
}

func (_c *MockBatch_Writer_Call) Run(run func()) *MockBatch_Writer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBatch_Writer_Call) Return(_a0 storage.Writer) *MockBatch_Writer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBatch_Writer_Call) RunAndReturn(run func() storage.Writer) *MockBatch_Writer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBatch creates a new instance of MockBatch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBatch {
	mock := &MockBatch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
