// Code generated by mockery. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// StoredChunkDataPacks is an autogenerated mock type for the StoredChunkDataPacks type
type StoredChunkDataPacks struct {
	mock.Mock
}

// BatchRemove provides a mock function with given fields: chunkDataPackIDs, rw
func (_m *StoredChunkDataPacks) BatchRemove(chunkDataPackIDs []flow.Identifier, rw storage.ReaderBatchWriter) error {
	ret := _m.Called(chunkDataPackIDs, rw)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(chunkDataPackIDs, rw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByID provides a mock function with given fields: id
func (_m *StoredChunkDataPacks) ByID(id flow.Identifier) (*storage.StoredChunkDataPack, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *storage.StoredChunkDataPack
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*storage.StoredChunkDataPack, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *storage.StoredChunkDataPack); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.StoredChunkDataPack)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: chunkDataPackIDs
func (_m *StoredChunkDataPacks) Remove(chunkDataPackIDs []flow.Identifier) error {
	ret := _m.Called(chunkDataPackIDs)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]flow.Identifier) error); ok {
		r0 = rf(chunkDataPackIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreChunkDataPacks provides a mock function with given fields: cs
func (_m *StoredChunkDataPacks) StoreChunkDataPacks(cs []*storage.StoredChunkDataPack) ([]flow.Identifier, error) {
	ret := _m.Called(cs)

	if len(ret) == 0 {
		panic("no return value specified for StoreChunkDataPacks")
	}

	var r0 []flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func([]*storage.StoredChunkDataPack) ([]flow.Identifier, error)); ok {
		return rf(cs)
	}
	if rf, ok := ret.Get(0).(func([]*storage.StoredChunkDataPack) []flow.Identifier); ok {
		r0 = rf(cs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func([]*storage.StoredChunkDataPack) error); ok {
		r1 = rf(cs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStoredChunkDataPacks creates a new instance of StoredChunkDataPacks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoredChunkDataPacks(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoredChunkDataPacks {
	mock := &StoredChunkDataPacks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
