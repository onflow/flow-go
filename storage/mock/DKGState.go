// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockDKGState is an autogenerated mock type for the DKGState type
type MockDKGState struct {
	mock.Mock
}

type MockDKGState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDKGState) EXPECT() *MockDKGState_Expecter {
	return &MockDKGState_Expecter{mock: &_m.Mock}
}

// CommitMyBeaconPrivateKey provides a mock function with given fields: epochCounter, commit
func (_m *MockDKGState) CommitMyBeaconPrivateKey(epochCounter uint64, commit *flow.EpochCommit) error {
	ret := _m.Called(epochCounter, commit)

	if len(ret) == 0 {
		panic("no return value specified for CommitMyBeaconPrivateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *flow.EpochCommit) error); ok {
		r0 = rf(epochCounter, commit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGState_CommitMyBeaconPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitMyBeaconPrivateKey'
type MockDKGState_CommitMyBeaconPrivateKey_Call struct {
	*mock.Call
}

// CommitMyBeaconPrivateKey is a helper method to define mock.On call
//   - epochCounter uint64
//   - commit *flow.EpochCommit
func (_e *MockDKGState_Expecter) CommitMyBeaconPrivateKey(epochCounter interface{}, commit interface{}) *MockDKGState_CommitMyBeaconPrivateKey_Call {
	return &MockDKGState_CommitMyBeaconPrivateKey_Call{Call: _e.mock.On("CommitMyBeaconPrivateKey", epochCounter, commit)}
}

func (_c *MockDKGState_CommitMyBeaconPrivateKey_Call) Run(run func(epochCounter uint64, commit *flow.EpochCommit)) *MockDKGState_CommitMyBeaconPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(*flow.EpochCommit))
	})
	return _c
}

func (_c *MockDKGState_CommitMyBeaconPrivateKey_Call) Return(_a0 error) *MockDKGState_CommitMyBeaconPrivateKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGState_CommitMyBeaconPrivateKey_Call) RunAndReturn(run func(uint64, *flow.EpochCommit) error) *MockDKGState_CommitMyBeaconPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetDKGState provides a mock function with given fields: epochCounter
func (_m *MockDKGState) GetDKGState(epochCounter uint64) (flow.DKGState, error) {
	ret := _m.Called(epochCounter)

	if len(ret) == 0 {
		panic("no return value specified for GetDKGState")
	}

	var r0 flow.DKGState
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (flow.DKGState, error)); ok {
		return rf(epochCounter)
	}
	if rf, ok := ret.Get(0).(func(uint64) flow.DKGState); ok {
		r0 = rf(epochCounter)
	} else {
		r0 = ret.Get(0).(flow.DKGState)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(epochCounter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKGState_GetDKGState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDKGState'
type MockDKGState_GetDKGState_Call struct {
	*mock.Call
}

// GetDKGState is a helper method to define mock.On call
//   - epochCounter uint64
func (_e *MockDKGState_Expecter) GetDKGState(epochCounter interface{}) *MockDKGState_GetDKGState_Call {
	return &MockDKGState_GetDKGState_Call{Call: _e.mock.On("GetDKGState", epochCounter)}
}

func (_c *MockDKGState_GetDKGState_Call) Run(run func(epochCounter uint64)) *MockDKGState_GetDKGState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDKGState_GetDKGState_Call) Return(_a0 flow.DKGState, _a1 error) *MockDKGState_GetDKGState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKGState_GetDKGState_Call) RunAndReturn(run func(uint64) (flow.DKGState, error)) *MockDKGState_GetDKGState_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMyBeaconPrivateKey provides a mock function with given fields: epochCounter, key
func (_m *MockDKGState) InsertMyBeaconPrivateKey(epochCounter uint64, key crypto.PrivateKey) error {
	ret := _m.Called(epochCounter, key)

	if len(ret) == 0 {
		panic("no return value specified for InsertMyBeaconPrivateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, crypto.PrivateKey) error); ok {
		r0 = rf(epochCounter, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGState_InsertMyBeaconPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMyBeaconPrivateKey'
type MockDKGState_InsertMyBeaconPrivateKey_Call struct {
	*mock.Call
}

// InsertMyBeaconPrivateKey is a helper method to define mock.On call
//   - epochCounter uint64
//   - key crypto.PrivateKey
func (_e *MockDKGState_Expecter) InsertMyBeaconPrivateKey(epochCounter interface{}, key interface{}) *MockDKGState_InsertMyBeaconPrivateKey_Call {
	return &MockDKGState_InsertMyBeaconPrivateKey_Call{Call: _e.mock.On("InsertMyBeaconPrivateKey", epochCounter, key)}
}

func (_c *MockDKGState_InsertMyBeaconPrivateKey_Call) Run(run func(epochCounter uint64, key crypto.PrivateKey)) *MockDKGState_InsertMyBeaconPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(crypto.PrivateKey))
	})
	return _c
}

func (_c *MockDKGState_InsertMyBeaconPrivateKey_Call) Return(_a0 error) *MockDKGState_InsertMyBeaconPrivateKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGState_InsertMyBeaconPrivateKey_Call) RunAndReturn(run func(uint64, crypto.PrivateKey) error) *MockDKGState_InsertMyBeaconPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// IsDKGStarted provides a mock function with given fields: epochCounter
func (_m *MockDKGState) IsDKGStarted(epochCounter uint64) (bool, error) {
	ret := _m.Called(epochCounter)

	if len(ret) == 0 {
		panic("no return value specified for IsDKGStarted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bool, error)); ok {
		return rf(epochCounter)
	}
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(epochCounter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(epochCounter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKGState_IsDKGStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDKGStarted'
type MockDKGState_IsDKGStarted_Call struct {
	*mock.Call
}

// IsDKGStarted is a helper method to define mock.On call
//   - epochCounter uint64
func (_e *MockDKGState_Expecter) IsDKGStarted(epochCounter interface{}) *MockDKGState_IsDKGStarted_Call {
	return &MockDKGState_IsDKGStarted_Call{Call: _e.mock.On("IsDKGStarted", epochCounter)}
}

func (_c *MockDKGState_IsDKGStarted_Call) Run(run func(epochCounter uint64)) *MockDKGState_IsDKGStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDKGState_IsDKGStarted_Call) Return(_a0 bool, _a1 error) *MockDKGState_IsDKGStarted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKGState_IsDKGStarted_Call) RunAndReturn(run func(uint64) (bool, error)) *MockDKGState_IsDKGStarted_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveMyBeaconPrivateKey provides a mock function with given fields: epochCounter
func (_m *MockDKGState) RetrieveMyBeaconPrivateKey(epochCounter uint64) (crypto.PrivateKey, bool, error) {
	ret := _m.Called(epochCounter)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveMyBeaconPrivateKey")
	}

	var r0 crypto.PrivateKey
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (crypto.PrivateKey, bool, error)); ok {
		return rf(epochCounter)
	}
	if rf, ok := ret.Get(0).(func(uint64) crypto.PrivateKey); ok {
		r0 = rf(epochCounter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(epochCounter)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(epochCounter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDKGState_RetrieveMyBeaconPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveMyBeaconPrivateKey'
type MockDKGState_RetrieveMyBeaconPrivateKey_Call struct {
	*mock.Call
}

// RetrieveMyBeaconPrivateKey is a helper method to define mock.On call
//   - epochCounter uint64
func (_e *MockDKGState_Expecter) RetrieveMyBeaconPrivateKey(epochCounter interface{}) *MockDKGState_RetrieveMyBeaconPrivateKey_Call {
	return &MockDKGState_RetrieveMyBeaconPrivateKey_Call{Call: _e.mock.On("RetrieveMyBeaconPrivateKey", epochCounter)}
}

func (_c *MockDKGState_RetrieveMyBeaconPrivateKey_Call) Run(run func(epochCounter uint64)) *MockDKGState_RetrieveMyBeaconPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDKGState_RetrieveMyBeaconPrivateKey_Call) Return(key crypto.PrivateKey, safe bool, err error) *MockDKGState_RetrieveMyBeaconPrivateKey_Call {
	_c.Call.Return(key, safe, err)
	return _c
}

func (_c *MockDKGState_RetrieveMyBeaconPrivateKey_Call) RunAndReturn(run func(uint64) (crypto.PrivateKey, bool, error)) *MockDKGState_RetrieveMyBeaconPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// SetDKGState provides a mock function with given fields: epochCounter, newState
func (_m *MockDKGState) SetDKGState(epochCounter uint64, newState flow.DKGState) error {
	ret := _m.Called(epochCounter, newState)

	if len(ret) == 0 {
		panic("no return value specified for SetDKGState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, flow.DKGState) error); ok {
		r0 = rf(epochCounter, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDKGState_SetDKGState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDKGState'
type MockDKGState_SetDKGState_Call struct {
	*mock.Call
}

// SetDKGState is a helper method to define mock.On call
//   - epochCounter uint64
//   - newState flow.DKGState
func (_e *MockDKGState_Expecter) SetDKGState(epochCounter interface{}, newState interface{}) *MockDKGState_SetDKGState_Call {
	return &MockDKGState_SetDKGState_Call{Call: _e.mock.On("SetDKGState", epochCounter, newState)}
}

func (_c *MockDKGState_SetDKGState_Call) Run(run func(epochCounter uint64, newState flow.DKGState)) *MockDKGState_SetDKGState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.DKGState))
	})
	return _c
}

func (_c *MockDKGState_SetDKGState_Call) Return(_a0 error) *MockDKGState_SetDKGState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDKGState_SetDKGState_Call) RunAndReturn(run func(uint64, flow.DKGState) error) *MockDKGState_SetDKGState_Call {
	_c.Call.Return(run)
	return _c
}

// UnsafeRetrieveMyBeaconPrivateKey provides a mock function with given fields: epochCounter
func (_m *MockDKGState) UnsafeRetrieveMyBeaconPrivateKey(epochCounter uint64) (crypto.PrivateKey, error) {
	ret := _m.Called(epochCounter)

	if len(ret) == 0 {
		panic("no return value specified for UnsafeRetrieveMyBeaconPrivateKey")
	}

	var r0 crypto.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (crypto.PrivateKey, error)); ok {
		return rf(epochCounter)
	}
	if rf, ok := ret.Get(0).(func(uint64) crypto.PrivateKey); ok {
		r0 = rf(epochCounter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(epochCounter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsafeRetrieveMyBeaconPrivateKey'
type MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call struct {
	*mock.Call
}

// UnsafeRetrieveMyBeaconPrivateKey is a helper method to define mock.On call
//   - epochCounter uint64
func (_e *MockDKGState_Expecter) UnsafeRetrieveMyBeaconPrivateKey(epochCounter interface{}) *MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call {
	return &MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call{Call: _e.mock.On("UnsafeRetrieveMyBeaconPrivateKey", epochCounter)}
}

func (_c *MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call) Run(run func(epochCounter uint64)) *MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call) Return(_a0 crypto.PrivateKey, _a1 error) *MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call) RunAndReturn(run func(uint64) (crypto.PrivateKey, error)) *MockDKGState_UnsafeRetrieveMyBeaconPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDKGState creates a new instance of MockDKGState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDKGState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDKGState {
	mock := &MockDKGState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
