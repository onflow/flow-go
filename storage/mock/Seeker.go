// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockSeeker is an autogenerated mock type for the Seeker type
type MockSeeker struct {
	mock.Mock
}

type MockSeeker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSeeker) EXPECT() *MockSeeker_Expecter {
	return &MockSeeker_Expecter{mock: &_m.Mock}
}

// SeekLE provides a mock function with given fields: startPrefix, key
func (_m *MockSeeker) SeekLE(startPrefix []byte, key []byte) ([]byte, error) {
	ret := _m.Called(startPrefix, key)

	if len(ret) == 0 {
		panic("no return value specified for SeekLE")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) ([]byte, error)); ok {
		return rf(startPrefix, key)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(startPrefix, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(startPrefix, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeeker_SeekLE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SeekLE'
type MockSeeker_SeekLE_Call struct {
	*mock.Call
}

// SeekLE is a helper method to define mock.On call
//   - startPrefix []byte
//   - key []byte
func (_e *MockSeeker_Expecter) SeekLE(startPrefix interface{}, key interface{}) *MockSeeker_SeekLE_Call {
	return &MockSeeker_SeekLE_Call{Call: _e.mock.On("SeekLE", startPrefix, key)}
}

func (_c *MockSeeker_SeekLE_Call) Run(run func(startPrefix []byte, key []byte)) *MockSeeker_SeekLE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockSeeker_SeekLE_Call) Return(_a0 []byte, _a1 error) *MockSeeker_SeekLE_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeeker_SeekLE_Call) RunAndReturn(run func([]byte, []byte) ([]byte, error)) *MockSeeker_SeekLE_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSeeker creates a new instance of MockSeeker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSeeker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSeeker {
	mock := &MockSeeker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
