// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// MockBlocks is an autogenerated mock type for the Blocks type
type MockBlocks struct {
	mock.Mock
}

type MockBlocks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlocks) EXPECT() *MockBlocks_Expecter {
	return &MockBlocks_Expecter{mock: &_m.Mock}
}

// ByCollectionID provides a mock function with given fields: collID
func (_m *MockBlocks) ByCollectionID(collID flow.Identifier) (*flow.Block, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for ByCollectionID")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Block, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Block); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_ByCollectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByCollectionID'
type MockBlocks_ByCollectionID_Call struct {
	*mock.Call
}

// ByCollectionID is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockBlocks_Expecter) ByCollectionID(collID interface{}) *MockBlocks_ByCollectionID_Call {
	return &MockBlocks_ByCollectionID_Call{Call: _e.mock.On("ByCollectionID", collID)}
}

func (_c *MockBlocks_ByCollectionID_Call) Run(run func(collID flow.Identifier)) *MockBlocks_ByCollectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBlocks_ByCollectionID_Call) Return(_a0 *flow.Block, _a1 error) *MockBlocks_ByCollectionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_ByCollectionID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Block, error)) *MockBlocks_ByCollectionID_Call {
	_c.Call.Return(run)
	return _c
}

// ByHeight provides a mock function with given fields: height
func (_m *MockBlocks) ByHeight(height uint64) (*flow.Block, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for ByHeight")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.Block, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_ByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByHeight'
type MockBlocks_ByHeight_Call struct {
	*mock.Call
}

// ByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockBlocks_Expecter) ByHeight(height interface{}) *MockBlocks_ByHeight_Call {
	return &MockBlocks_ByHeight_Call{Call: _e.mock.On("ByHeight", height)}
}

func (_c *MockBlocks_ByHeight_Call) Run(run func(height uint64)) *MockBlocks_ByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockBlocks_ByHeight_Call) Return(_a0 *flow.Block, _a1 error) *MockBlocks_ByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_ByHeight_Call) RunAndReturn(run func(uint64) (*flow.Block, error)) *MockBlocks_ByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: blockID
func (_m *MockBlocks) ByID(blockID flow.Identifier) (*flow.Block, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Block, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Block); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlocks_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockBlocks_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockBlocks_Expecter) ByID(blockID interface{}) *MockBlocks_ByID_Call {
	return &MockBlocks_ByID_Call{Call: _e.mock.On("ByID", blockID)}
}

func (_c *MockBlocks_ByID_Call) Run(run func(blockID flow.Identifier)) *MockBlocks_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBlocks_ByID_Call) Return(_a0 *flow.Block, _a1 error) *MockBlocks_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlocks_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Block, error)) *MockBlocks_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// IndexBlockForCollections provides a mock function with given fields: blockID, collIDs
func (_m *MockBlocks) IndexBlockForCollections(blockID flow.Identifier, collIDs []flow.Identifier) error {
	ret := _m.Called(blockID, collIDs)

	if len(ret) == 0 {
		panic("no return value specified for IndexBlockForCollections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, []flow.Identifier) error); ok {
		r0 = rf(blockID, collIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocks_IndexBlockForCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexBlockForCollections'
type MockBlocks_IndexBlockForCollections_Call struct {
	*mock.Call
}

// IndexBlockForCollections is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - collIDs []flow.Identifier
func (_e *MockBlocks_Expecter) IndexBlockForCollections(blockID interface{}, collIDs interface{}) *MockBlocks_IndexBlockForCollections_Call {
	return &MockBlocks_IndexBlockForCollections_Call{Call: _e.mock.On("IndexBlockForCollections", blockID, collIDs)}
}

func (_c *MockBlocks_IndexBlockForCollections_Call) Run(run func(blockID flow.Identifier, collIDs []flow.Identifier)) *MockBlocks_IndexBlockForCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].([]flow.Identifier))
	})
	return _c
}

func (_c *MockBlocks_IndexBlockForCollections_Call) Return(_a0 error) *MockBlocks_IndexBlockForCollections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_IndexBlockForCollections_Call) RunAndReturn(run func(flow.Identifier, []flow.Identifier) error) *MockBlocks_IndexBlockForCollections_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: block
func (_m *MockBlocks) Store(block *flow.Block) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Block) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlocks_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockBlocks_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - block *flow.Block
func (_e *MockBlocks_Expecter) Store(block interface{}) *MockBlocks_Store_Call {
	return &MockBlocks_Store_Call{Call: _e.mock.On("Store", block)}
}

func (_c *MockBlocks_Store_Call) Run(run func(block *flow.Block)) *MockBlocks_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Block))
	})
	return _c
}

func (_c *MockBlocks_Store_Call) Return(_a0 error) *MockBlocks_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_Store_Call) RunAndReturn(run func(*flow.Block) error) *MockBlocks_Store_Call {
	_c.Call.Return(run)
	return _c
}

// StoreTx provides a mock function with given fields: block
func (_m *MockBlocks) StoreTx(block *flow.Block) func(*transaction.Tx) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for StoreTx")
	}

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(*flow.Block) func(*transaction.Tx) error); ok {
		r0 = rf(block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

// MockBlocks_StoreTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreTx'
type MockBlocks_StoreTx_Call struct {
	*mock.Call
}

// StoreTx is a helper method to define mock.On call
//   - block *flow.Block
func (_e *MockBlocks_Expecter) StoreTx(block interface{}) *MockBlocks_StoreTx_Call {
	return &MockBlocks_StoreTx_Call{Call: _e.mock.On("StoreTx", block)}
}

func (_c *MockBlocks_StoreTx_Call) Run(run func(block *flow.Block)) *MockBlocks_StoreTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Block))
	})
	return _c
}

func (_c *MockBlocks_StoreTx_Call) Return(_a0 func(*transaction.Tx) error) *MockBlocks_StoreTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlocks_StoreTx_Call) RunAndReturn(run func(*flow.Block) func(*transaction.Tx) error) *MockBlocks_StoreTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlocks creates a new instance of MockBlocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlocks {
	mock := &MockBlocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
