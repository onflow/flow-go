// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockResultApprovals is an autogenerated mock type for the ResultApprovals type
type MockResultApprovals struct {
	mock.Mock
}

type MockResultApprovals_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResultApprovals) EXPECT() *MockResultApprovals_Expecter {
	return &MockResultApprovals_Expecter{mock: &_m.Mock}
}

// ByChunk provides a mock function with given fields: resultID, chunkIndex
func (_m *MockResultApprovals) ByChunk(resultID flow.Identifier, chunkIndex uint64) (*flow.ResultApproval, error) {
	ret := _m.Called(resultID, chunkIndex)

	if len(ret) == 0 {
		panic("no return value specified for ByChunk")
	}

	var r0 *flow.ResultApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64) (*flow.ResultApproval, error)); ok {
		return rf(resultID, chunkIndex)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64) *flow.ResultApproval); ok {
		r0 = rf(resultID, chunkIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ResultApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, uint64) error); ok {
		r1 = rf(resultID, chunkIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResultApprovals_ByChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByChunk'
type MockResultApprovals_ByChunk_Call struct {
	*mock.Call
}

// ByChunk is a helper method to define mock.On call
//   - resultID flow.Identifier
//   - chunkIndex uint64
func (_e *MockResultApprovals_Expecter) ByChunk(resultID interface{}, chunkIndex interface{}) *MockResultApprovals_ByChunk_Call {
	return &MockResultApprovals_ByChunk_Call{Call: _e.mock.On("ByChunk", resultID, chunkIndex)}
}

func (_c *MockResultApprovals_ByChunk_Call) Run(run func(resultID flow.Identifier, chunkIndex uint64)) *MockResultApprovals_ByChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(uint64))
	})
	return _c
}

func (_c *MockResultApprovals_ByChunk_Call) Return(_a0 *flow.ResultApproval, _a1 error) *MockResultApprovals_ByChunk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResultApprovals_ByChunk_Call) RunAndReturn(run func(flow.Identifier, uint64) (*flow.ResultApproval, error)) *MockResultApprovals_ByChunk_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: approvalID
func (_m *MockResultApprovals) ByID(approvalID flow.Identifier) (*flow.ResultApproval, error) {
	ret := _m.Called(approvalID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.ResultApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ResultApproval, error)); ok {
		return rf(approvalID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ResultApproval); ok {
		r0 = rf(approvalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ResultApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(approvalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResultApprovals_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockResultApprovals_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - approvalID flow.Identifier
func (_e *MockResultApprovals_Expecter) ByID(approvalID interface{}) *MockResultApprovals_ByID_Call {
	return &MockResultApprovals_ByID_Call{Call: _e.mock.On("ByID", approvalID)}
}

func (_c *MockResultApprovals_ByID_Call) Run(run func(approvalID flow.Identifier)) *MockResultApprovals_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockResultApprovals_ByID_Call) Return(_a0 *flow.ResultApproval, _a1 error) *MockResultApprovals_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResultApprovals_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ResultApproval, error)) *MockResultApprovals_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: resultID, chunkIndex, approvalID
func (_m *MockResultApprovals) Index(resultID flow.Identifier, chunkIndex uint64, approvalID flow.Identifier) error {
	ret := _m.Called(resultID, chunkIndex, approvalID)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64, flow.Identifier) error); ok {
		r0 = rf(resultID, chunkIndex, approvalID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResultApprovals_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockResultApprovals_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - resultID flow.Identifier
//   - chunkIndex uint64
//   - approvalID flow.Identifier
func (_e *MockResultApprovals_Expecter) Index(resultID interface{}, chunkIndex interface{}, approvalID interface{}) *MockResultApprovals_Index_Call {
	return &MockResultApprovals_Index_Call{Call: _e.mock.On("Index", resultID, chunkIndex, approvalID)}
}

func (_c *MockResultApprovals_Index_Call) Run(run func(resultID flow.Identifier, chunkIndex uint64, approvalID flow.Identifier)) *MockResultApprovals_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(uint64), args[2].(flow.Identifier))
	})
	return _c
}

func (_c *MockResultApprovals_Index_Call) Return(_a0 error) *MockResultApprovals_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResultApprovals_Index_Call) RunAndReturn(run func(flow.Identifier, uint64, flow.Identifier) error) *MockResultApprovals_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: result
func (_m *MockResultApprovals) Store(result *flow.ResultApproval) error {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ResultApproval) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResultApprovals_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockResultApprovals_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - result *flow.ResultApproval
func (_e *MockResultApprovals_Expecter) Store(result interface{}) *MockResultApprovals_Store_Call {
	return &MockResultApprovals_Store_Call{Call: _e.mock.On("Store", result)}
}

func (_c *MockResultApprovals_Store_Call) Run(run func(result *flow.ResultApproval)) *MockResultApprovals_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ResultApproval))
	})
	return _c
}

func (_c *MockResultApprovals_Store_Call) Return(_a0 error) *MockResultApprovals_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResultApprovals_Store_Call) RunAndReturn(run func(*flow.ResultApproval) error) *MockResultApprovals_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResultApprovals creates a new instance of MockResultApprovals. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResultApprovals(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResultApprovals {
	mock := &MockResultApprovals{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
