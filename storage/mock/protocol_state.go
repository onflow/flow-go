// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// ProtocolState is an autogenerated mock type for the ProtocolState type
type ProtocolState struct {
	mock.Mock
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *ProtocolState) ByBlockID(blockID flow.Identifier) (*flow.RichProtocolStateEntry, error) {
	ret := _m.Called(blockID)

	var r0 *flow.RichProtocolStateEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.RichProtocolStateEntry, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.RichProtocolStateEntry); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichProtocolStateEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByID provides a mock function with given fields: id
func (_m *ProtocolState) ByID(id flow.Identifier) (*flow.RichProtocolStateEntry, error) {
	ret := _m.Called(id)

	var r0 *flow.RichProtocolStateEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.RichProtocolStateEntry, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.RichProtocolStateEntry); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichProtocolStateEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Index provides a mock function with given fields: blockID, protocolStateID
func (_m *ProtocolState) Index(blockID flow.Identifier, protocolStateID flow.Identifier) func(*transaction.Tx) error {
	ret := _m.Called(blockID, protocolStateID)

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) func(*transaction.Tx) error); ok {
		r0 = rf(blockID, protocolStateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

// StoreTx provides a mock function with given fields: protocolStateID, protocolState
func (_m *ProtocolState) StoreTx(protocolStateID flow.Identifier, protocolState *flow.ProtocolStateEntry) func(*transaction.Tx) error {
	ret := _m.Called(protocolStateID, protocolState)

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(flow.Identifier, *flow.ProtocolStateEntry) func(*transaction.Tx) error); ok {
		r0 = rf(protocolStateID, protocolState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

type mockConstructorTestingTNewProtocolState interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolState creates a new instance of ProtocolState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolState(t mockConstructorTestingTNewProtocolState) *ProtocolState {
	mock := &ProtocolState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
