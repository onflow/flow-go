// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockLedgerVerifier is an autogenerated mock type for the LedgerVerifier type
type MockLedgerVerifier struct {
	mock.Mock
}

type MockLedgerVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLedgerVerifier) EXPECT() *MockLedgerVerifier_Expecter {
	return &MockLedgerVerifier_Expecter{mock: &_m.Mock}
}

// VerifyRegistersProof provides a mock function with given fields: registerIDs, stateCommitment, values, proof
func (_m *MockLedgerVerifier) VerifyRegistersProof(registerIDs []flow.RegisterID, stateCommitment flow.StateCommitment, values [][]byte, proof [][]byte) (bool, error) {
	ret := _m.Called(registerIDs, stateCommitment, values, proof)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRegistersProof")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, flow.StateCommitment, [][]byte, [][]byte) (bool, error)); ok {
		return rf(registerIDs, stateCommitment, values, proof)
	}
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, flow.StateCommitment, [][]byte, [][]byte) bool); ok {
		r0 = rf(registerIDs, stateCommitment, values, proof)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]flow.RegisterID, flow.StateCommitment, [][]byte, [][]byte) error); ok {
		r1 = rf(registerIDs, stateCommitment, values, proof)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLedgerVerifier_VerifyRegistersProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyRegistersProof'
type MockLedgerVerifier_VerifyRegistersProof_Call struct {
	*mock.Call
}

// VerifyRegistersProof is a helper method to define mock.On call
//   - registerIDs []flow.RegisterID
//   - stateCommitment flow.StateCommitment
//   - values [][]byte
//   - proof [][]byte
func (_e *MockLedgerVerifier_Expecter) VerifyRegistersProof(registerIDs interface{}, stateCommitment interface{}, values interface{}, proof interface{}) *MockLedgerVerifier_VerifyRegistersProof_Call {
	return &MockLedgerVerifier_VerifyRegistersProof_Call{Call: _e.mock.On("VerifyRegistersProof", registerIDs, stateCommitment, values, proof)}
}

func (_c *MockLedgerVerifier_VerifyRegistersProof_Call) Run(run func(registerIDs []flow.RegisterID, stateCommitment flow.StateCommitment, values [][]byte, proof [][]byte)) *MockLedgerVerifier_VerifyRegistersProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.RegisterID), args[1].(flow.StateCommitment), args[2].([][]byte), args[3].([][]byte))
	})
	return _c
}

func (_c *MockLedgerVerifier_VerifyRegistersProof_Call) Return(verified bool, err error) *MockLedgerVerifier_VerifyRegistersProof_Call {
	_c.Call.Return(verified, err)
	return _c
}

func (_c *MockLedgerVerifier_VerifyRegistersProof_Call) RunAndReturn(run func([]flow.RegisterID, flow.StateCommitment, [][]byte, [][]byte) (bool, error)) *MockLedgerVerifier_VerifyRegistersProof_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLedgerVerifier creates a new instance of MockLedgerVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLedgerVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLedgerVerifier {
	mock := &MockLedgerVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
