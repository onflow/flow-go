// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// IterItem is an autogenerated mock type for the IterItem type
type IterItem struct {
	mock.Mock
}

// Key provides a mock function with given fields:
func (_m *IterItem) Key() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// KeyCopy provides a mock function with given fields: dst
func (_m *IterItem) KeyCopy(dst []byte) []byte {
	ret := _m.Called(dst)

	if len(ret) == 0 {
		panic("no return value specified for KeyCopy")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(dst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Value provides a mock function with given fields: _a0
func (_m *IterItem) Value(_a0 func([]byte) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func([]byte) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIterItem creates a new instance of IterItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIterItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *IterItem {
	mock := &IterItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
