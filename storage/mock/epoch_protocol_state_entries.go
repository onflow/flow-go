// Code generated by mockery. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// EpochProtocolStateEntries is an autogenerated mock type for the EpochProtocolStateEntries type
type EpochProtocolStateEntries struct {
	mock.Mock
}

// BatchIndex provides a mock function with given fields: rw, blockID, epochProtocolStateID
func (_m *EpochProtocolStateEntries) BatchIndex(rw storage.ReaderBatchWriter, blockID flow.Identifier, epochProtocolStateID flow.Identifier) error {
	ret := _m.Called(rw, blockID, epochProtocolStateID)

	if len(ret) == 0 {
		panic("no return value specified for BatchIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.ReaderBatchWriter, flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(rw, blockID, epochProtocolStateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchStore provides a mock function with given fields: w, epochProtocolStateID, epochProtocolStateEntry
func (_m *EpochProtocolStateEntries) BatchStore(w storage.Writer, epochProtocolStateID flow.Identifier, epochProtocolStateEntry *flow.MinEpochStateEntry) error {
	ret := _m.Called(w, epochProtocolStateID, epochProtocolStateEntry)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.Writer, flow.Identifier, *flow.MinEpochStateEntry) error); ok {
		r0 = rf(w, epochProtocolStateID, epochProtocolStateEntry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *EpochProtocolStateEntries) ByBlockID(blockID flow.Identifier) (*flow.RichEpochStateEntry, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *flow.RichEpochStateEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.RichEpochStateEntry, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.RichEpochStateEntry); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichEpochStateEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByID provides a mock function with given fields: id
func (_m *EpochProtocolStateEntries) ByID(id flow.Identifier) (*flow.RichEpochStateEntry, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.RichEpochStateEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.RichEpochStateEntry, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.RichEpochStateEntry); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichEpochStateEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEpochProtocolStateEntries creates a new instance of EpochProtocolStateEntries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEpochProtocolStateEntries(t interface {
	mock.TestingT
	Cleanup(func())
}) *EpochProtocolStateEntries {
	mock := &EpochProtocolStateEntries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
