// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockTransactions is an autogenerated mock type for the Transactions type
type MockTransactions struct {
	mock.Mock
}

type MockTransactions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactions) EXPECT() *MockTransactions_Expecter {
	return &MockTransactions_Expecter{mock: &_m.Mock}
}

// BatchStore provides a mock function with given fields: tx, batch
func (_m *MockTransactions) BatchStore(tx *flow.TransactionBody, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(tx, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.TransactionBody, storage.ReaderBatchWriter) error); ok {
		r0 = rf(tx, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactions_BatchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStore'
type MockTransactions_BatchStore_Call struct {
	*mock.Call
}

// BatchStore is a helper method to define mock.On call
//   - tx *flow.TransactionBody
//   - batch storage.ReaderBatchWriter
func (_e *MockTransactions_Expecter) BatchStore(tx interface{}, batch interface{}) *MockTransactions_BatchStore_Call {
	return &MockTransactions_BatchStore_Call{Call: _e.mock.On("BatchStore", tx, batch)}
}

func (_c *MockTransactions_BatchStore_Call) Run(run func(tx *flow.TransactionBody, batch storage.ReaderBatchWriter)) *MockTransactions_BatchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TransactionBody), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockTransactions_BatchStore_Call) Return(_a0 error) *MockTransactions_BatchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactions_BatchStore_Call) RunAndReturn(run func(*flow.TransactionBody, storage.ReaderBatchWriter) error) *MockTransactions_BatchStore_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: txID
func (_m *MockTransactions) ByID(txID flow.Identifier) (*flow.TransactionBody, error) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.TransactionBody
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.TransactionBody, error)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.TransactionBody); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionBody)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactions_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockTransactions_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockTransactions_Expecter) ByID(txID interface{}) *MockTransactions_ByID_Call {
	return &MockTransactions_ByID_Call{Call: _e.mock.On("ByID", txID)}
}

func (_c *MockTransactions_ByID_Call) Run(run func(txID flow.Identifier)) *MockTransactions_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactions_ByID_Call) Return(_a0 *flow.TransactionBody, _a1 error) *MockTransactions_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactions_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.TransactionBody, error)) *MockTransactions_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: tx
func (_m *MockTransactions) Store(tx *flow.TransactionBody) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.TransactionBody) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactions_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockTransactions_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - tx *flow.TransactionBody
func (_e *MockTransactions_Expecter) Store(tx interface{}) *MockTransactions_Store_Call {
	return &MockTransactions_Store_Call{Call: _e.mock.On("Store", tx)}
}

func (_c *MockTransactions_Store_Call) Run(run func(tx *flow.TransactionBody)) *MockTransactions_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TransactionBody))
	})
	return _c
}

func (_c *MockTransactions_Store_Call) Return(_a0 error) *MockTransactions_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactions_Store_Call) RunAndReturn(run func(*flow.TransactionBody) error) *MockTransactions_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactions creates a new instance of MockTransactions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactions {
	mock := &MockTransactions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
