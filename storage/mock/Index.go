// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockIndex is an autogenerated mock type for the Index type
type MockIndex struct {
	mock.Mock
}

type MockIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndex) EXPECT() *MockIndex_Expecter {
	return &MockIndex_Expecter{mock: &_m.Mock}
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockIndex) ByBlockID(blockID flow.Identifier) (*flow.Index, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *flow.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Index, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Index); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndex_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockIndex_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockIndex_Expecter) ByBlockID(blockID interface{}) *MockIndex_ByBlockID_Call {
	return &MockIndex_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockIndex_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockIndex_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockIndex_ByBlockID_Call) Return(_a0 *flow.Index, _a1 error) *MockIndex_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndex_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Index, error)) *MockIndex_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: blockID, index
func (_m *MockIndex) Store(blockID flow.Identifier, index *flow.Index) error {
	ret := _m.Called(blockID, index)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, *flow.Index) error); ok {
		r0 = rf(blockID, index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndex_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockIndex_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - index *flow.Index
func (_e *MockIndex_Expecter) Store(blockID interface{}, index interface{}) *MockIndex_Store_Call {
	return &MockIndex_Store_Call{Call: _e.mock.On("Store", blockID, index)}
}

func (_c *MockIndex_Store_Call) Run(run func(blockID flow.Identifier, index *flow.Index)) *MockIndex_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(*flow.Index))
	})
	return _c
}

func (_c *MockIndex_Store_Call) Return(_a0 error) *MockIndex_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndex_Store_Call) RunAndReturn(run func(flow.Identifier, *flow.Index) error) *MockIndex_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndex creates a new instance of MockIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndex {
	mock := &MockIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
