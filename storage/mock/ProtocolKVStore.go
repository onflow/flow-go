// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// MockProtocolKVStore is an autogenerated mock type for the ProtocolKVStore type
type MockProtocolKVStore struct {
	mock.Mock
}

type MockProtocolKVStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProtocolKVStore) EXPECT() *MockProtocolKVStore_Expecter {
	return &MockProtocolKVStore_Expecter{mock: &_m.Mock}
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockProtocolKVStore) ByBlockID(blockID flow.Identifier) (*flow.PSKeyValueStoreData, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *flow.PSKeyValueStoreData
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.PSKeyValueStoreData, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.PSKeyValueStoreData); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.PSKeyValueStoreData)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProtocolKVStore_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockProtocolKVStore_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockProtocolKVStore_Expecter) ByBlockID(blockID interface{}) *MockProtocolKVStore_ByBlockID_Call {
	return &MockProtocolKVStore_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockProtocolKVStore_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockProtocolKVStore_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockProtocolKVStore_ByBlockID_Call) Return(_a0 *flow.PSKeyValueStoreData, _a1 error) *MockProtocolKVStore_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProtocolKVStore_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (*flow.PSKeyValueStoreData, error)) *MockProtocolKVStore_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: id
func (_m *MockProtocolKVStore) ByID(id flow.Identifier) (*flow.PSKeyValueStoreData, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.PSKeyValueStoreData
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.PSKeyValueStoreData, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.PSKeyValueStoreData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.PSKeyValueStoreData)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProtocolKVStore_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockProtocolKVStore_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockProtocolKVStore_Expecter) ByID(id interface{}) *MockProtocolKVStore_ByID_Call {
	return &MockProtocolKVStore_ByID_Call{Call: _e.mock.On("ByID", id)}
}

func (_c *MockProtocolKVStore_ByID_Call) Run(run func(id flow.Identifier)) *MockProtocolKVStore_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockProtocolKVStore_ByID_Call) Return(_a0 *flow.PSKeyValueStoreData, _a1 error) *MockProtocolKVStore_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProtocolKVStore_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.PSKeyValueStoreData, error)) *MockProtocolKVStore_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// IndexTx provides a mock function with given fields: blockID, stateID
func (_m *MockProtocolKVStore) IndexTx(blockID flow.Identifier, stateID flow.Identifier) func(*transaction.Tx) error {
	ret := _m.Called(blockID, stateID)

	if len(ret) == 0 {
		panic("no return value specified for IndexTx")
	}

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) func(*transaction.Tx) error); ok {
		r0 = rf(blockID, stateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

// MockProtocolKVStore_IndexTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexTx'
type MockProtocolKVStore_IndexTx_Call struct {
	*mock.Call
}

// IndexTx is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - stateID flow.Identifier
func (_e *MockProtocolKVStore_Expecter) IndexTx(blockID interface{}, stateID interface{}) *MockProtocolKVStore_IndexTx_Call {
	return &MockProtocolKVStore_IndexTx_Call{Call: _e.mock.On("IndexTx", blockID, stateID)}
}

func (_c *MockProtocolKVStore_IndexTx_Call) Run(run func(blockID flow.Identifier, stateID flow.Identifier)) *MockProtocolKVStore_IndexTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockProtocolKVStore_IndexTx_Call) Return(_a0 func(*transaction.Tx) error) *MockProtocolKVStore_IndexTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtocolKVStore_IndexTx_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) func(*transaction.Tx) error) *MockProtocolKVStore_IndexTx_Call {
	_c.Call.Return(run)
	return _c
}

// StoreTx provides a mock function with given fields: stateID, data
func (_m *MockProtocolKVStore) StoreTx(stateID flow.Identifier, data *flow.PSKeyValueStoreData) func(*transaction.Tx) error {
	ret := _m.Called(stateID, data)

	if len(ret) == 0 {
		panic("no return value specified for StoreTx")
	}

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(flow.Identifier, *flow.PSKeyValueStoreData) func(*transaction.Tx) error); ok {
		r0 = rf(stateID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

// MockProtocolKVStore_StoreTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreTx'
type MockProtocolKVStore_StoreTx_Call struct {
	*mock.Call
}

// StoreTx is a helper method to define mock.On call
//   - stateID flow.Identifier
//   - data *flow.PSKeyValueStoreData
func (_e *MockProtocolKVStore_Expecter) StoreTx(stateID interface{}, data interface{}) *MockProtocolKVStore_StoreTx_Call {
	return &MockProtocolKVStore_StoreTx_Call{Call: _e.mock.On("StoreTx", stateID, data)}
}

func (_c *MockProtocolKVStore_StoreTx_Call) Run(run func(stateID flow.Identifier, data *flow.PSKeyValueStoreData)) *MockProtocolKVStore_StoreTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(*flow.PSKeyValueStoreData))
	})
	return _c
}

func (_c *MockProtocolKVStore_StoreTx_Call) Return(_a0 func(*transaction.Tx) error) *MockProtocolKVStore_StoreTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProtocolKVStore_StoreTx_Call) RunAndReturn(run func(flow.Identifier, *flow.PSKeyValueStoreData) func(*transaction.Tx) error) *MockProtocolKVStore_StoreTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProtocolKVStore creates a new instance of MockProtocolKVStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProtocolKVStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProtocolKVStore {
	mock := &MockProtocolKVStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
