// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// Headers is an autogenerated mock type for the Headers type
type Headers struct {
	mock.Mock
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *Headers) ByBlockID(blockID flow.Identifier) (*flow.Header, error) {
	ret := _m.Called(blockID)

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Header); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByHeight provides a mock function with given fields: height
func (_m *Headers) ByHeight(height uint64) (*flow.Header, error) {
	ret := _m.Called(height)

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func(uint64) *flow.Header); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByParentID provides a mock function with given fields: parentID
func (_m *Headers) ByParentID(parentID flow.Identifier) ([]*flow.Header, error) {
	ret := _m.Called(parentID)

	var r0 []*flow.Header
	if rf, ok := ret.Get(0).(func(flow.Identifier) []*flow.Header); ok {
		r0 = rf(parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IDByChunkID provides a mock function with given fields: chunkID
func (_m *Headers) IDByChunkID(chunkID flow.Identifier) (flow.Identifier, error) {
	ret := _m.Called(chunkID)

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.Identifier); ok {
		r0 = rf(chunkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(chunkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexByChunkID provides a mock function with given fields: headerID, chunkID
func (_m *Headers) IndexByChunkID(headerID flow.Identifier, chunkID flow.Identifier) error {
	ret := _m.Called(headerID, chunkID)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(headerID, chunkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: header
func (_m *Headers) Store(header *flow.Header) error {
	ret := _m.Called(header)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Header) error); ok {
		r0 = rf(header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
