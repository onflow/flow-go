// Code generated by mockery. DO NOT EDIT.

package mock

import (
	lockctx "github.com/jordanschalm/lockctx"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// ScheduledTransactions is an autogenerated mock type for the ScheduledTransactions type
type ScheduledTransactions struct {
	mock.Mock
}

// BatchIndex provides a mock function with given fields: lctx, blockID, txID, scheduledTxID, batch
func (_m *ScheduledTransactions) BatchIndex(lctx lockctx.Proof, blockID flow.Identifier, txID flow.Identifier, scheduledTxID uint64, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(lctx, blockID, txID, scheduledTxID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(lockctx.Proof, flow.Identifier, flow.Identifier, uint64, storage.ReaderBatchWriter) error); ok {
		r0 = rf(lctx, blockID, txID, scheduledTxID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockIDByTransactionID provides a mock function with given fields: txID
func (_m *ScheduledTransactions) BlockIDByTransactionID(txID flow.Identifier) (flow.Identifier, error) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for BlockIDByTransactionID")
	}

	var r0 flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.Identifier, error)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.Identifier); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionIDByID provides a mock function with given fields: scheduledTxID
func (_m *ScheduledTransactions) TransactionIDByID(scheduledTxID uint64) (flow.Identifier, error) {
	ret := _m.Called(scheduledTxID)

	if len(ret) == 0 {
		panic("no return value specified for TransactionIDByID")
	}

	var r0 flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (flow.Identifier, error)); ok {
		return rf(scheduledTxID)
	}
	if rf, ok := ret.Get(0).(func(uint64) flow.Identifier); ok {
		r0 = rf(scheduledTxID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(scheduledTxID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScheduledTransactions creates a new instance of ScheduledTransactions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduledTransactions(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduledTransactions {
	mock := &ScheduledTransactions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
