// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// VersionBeacons is an autogenerated mock type for the VersionBeacons type
type VersionBeacons struct {
	mock.Mock
}

// Highest provides a mock function with given fields: belowOrEqualTo
func (_m *VersionBeacons) Highest(belowOrEqualTo uint64) (*flow.SealedVersionBeacon, error) {
	ret := _m.Called(belowOrEqualTo)

	var r0 *flow.SealedVersionBeacon
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.SealedVersionBeacon, error)); ok {
		return rf(belowOrEqualTo)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.SealedVersionBeacon); ok {
		r0 = rf(belowOrEqualTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.SealedVersionBeacon)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(belowOrEqualTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVersionBeacons interface {
	mock.TestingT
	Cleanup(func())
}

// NewVersionBeacons creates a new instance of VersionBeacons. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVersionBeacons(t mockConstructorTestingTNewVersionBeacons) *VersionBeacons {
	mock := &VersionBeacons{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
