// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockEvents is an autogenerated mock type for the Events type
type MockEvents struct {
	mock.Mock
}

type MockEvents_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvents) EXPECT() *MockEvents_Expecter {
	return &MockEvents_Expecter{mock: &_m.Mock}
}

// BatchRemoveByBlockID provides a mock function with given fields: blockID, batch
func (_m *MockEvents) BatchRemoveByBlockID(blockID flow.Identifier, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemoveByBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvents_BatchRemoveByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRemoveByBlockID'
type MockEvents_BatchRemoveByBlockID_Call struct {
	*mock.Call
}

// BatchRemoveByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - batch storage.ReaderBatchWriter
func (_e *MockEvents_Expecter) BatchRemoveByBlockID(blockID interface{}, batch interface{}) *MockEvents_BatchRemoveByBlockID_Call {
	return &MockEvents_BatchRemoveByBlockID_Call{Call: _e.mock.On("BatchRemoveByBlockID", blockID, batch)}
}

func (_c *MockEvents_BatchRemoveByBlockID_Call) Run(run func(blockID flow.Identifier, batch storage.ReaderBatchWriter)) *MockEvents_BatchRemoveByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockEvents_BatchRemoveByBlockID_Call) Return(_a0 error) *MockEvents_BatchRemoveByBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvents_BatchRemoveByBlockID_Call) RunAndReturn(run func(flow.Identifier, storage.ReaderBatchWriter) error) *MockEvents_BatchRemoveByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// BatchStore provides a mock function with given fields: blockID, events, batch
func (_m *MockEvents) BatchStore(blockID flow.Identifier, events []flow.EventsList, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, events, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, []flow.EventsList, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, events, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvents_BatchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStore'
type MockEvents_BatchStore_Call struct {
	*mock.Call
}

// BatchStore is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - events []flow.EventsList
//   - batch storage.ReaderBatchWriter
func (_e *MockEvents_Expecter) BatchStore(blockID interface{}, events interface{}, batch interface{}) *MockEvents_BatchStore_Call {
	return &MockEvents_BatchStore_Call{Call: _e.mock.On("BatchStore", blockID, events, batch)}
}

func (_c *MockEvents_BatchStore_Call) Run(run func(blockID flow.Identifier, events []flow.EventsList, batch storage.ReaderBatchWriter)) *MockEvents_BatchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].([]flow.EventsList), args[2].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockEvents_BatchStore_Call) Return(_a0 error) *MockEvents_BatchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvents_BatchStore_Call) RunAndReturn(run func(flow.Identifier, []flow.EventsList, storage.ReaderBatchWriter) error) *MockEvents_BatchStore_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockEvents) ByBlockID(blockID flow.Identifier) ([]flow.Event, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 []flow.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]flow.Event, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []flow.Event); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEvents_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockEvents_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockEvents_Expecter) ByBlockID(blockID interface{}) *MockEvents_ByBlockID_Call {
	return &MockEvents_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockEvents_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockEvents_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockEvents_ByBlockID_Call) Return(_a0 []flow.Event, _a1 error) *MockEvents_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEvents_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) ([]flow.Event, error)) *MockEvents_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockIDEventType provides a mock function with given fields: blockID, eventType
func (_m *MockEvents) ByBlockIDEventType(blockID flow.Identifier, eventType flow.EventType) ([]flow.Event, error) {
	ret := _m.Called(blockID, eventType)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockIDEventType")
	}

	var r0 []flow.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.EventType) ([]flow.Event, error)); ok {
		return rf(blockID, eventType)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.EventType) []flow.Event); ok {
		r0 = rf(blockID, eventType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, flow.EventType) error); ok {
		r1 = rf(blockID, eventType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEvents_ByBlockIDEventType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockIDEventType'
type MockEvents_ByBlockIDEventType_Call struct {
	*mock.Call
}

// ByBlockIDEventType is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - eventType flow.EventType
func (_e *MockEvents_Expecter) ByBlockIDEventType(blockID interface{}, eventType interface{}) *MockEvents_ByBlockIDEventType_Call {
	return &MockEvents_ByBlockIDEventType_Call{Call: _e.mock.On("ByBlockIDEventType", blockID, eventType)}
}

func (_c *MockEvents_ByBlockIDEventType_Call) Run(run func(blockID flow.Identifier, eventType flow.EventType)) *MockEvents_ByBlockIDEventType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.EventType))
	})
	return _c
}

func (_c *MockEvents_ByBlockIDEventType_Call) Return(_a0 []flow.Event, _a1 error) *MockEvents_ByBlockIDEventType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEvents_ByBlockIDEventType_Call) RunAndReturn(run func(flow.Identifier, flow.EventType) ([]flow.Event, error)) *MockEvents_ByBlockIDEventType_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockIDTransactionID provides a mock function with given fields: blockID, transactionID
func (_m *MockEvents) ByBlockIDTransactionID(blockID flow.Identifier, transactionID flow.Identifier) ([]flow.Event, error) {
	ret := _m.Called(blockID, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockIDTransactionID")
	}

	var r0 []flow.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) ([]flow.Event, error)); ok {
		return rf(blockID, transactionID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) []flow.Event); ok {
		r0 = rf(blockID, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, flow.Identifier) error); ok {
		r1 = rf(blockID, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEvents_ByBlockIDTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockIDTransactionID'
type MockEvents_ByBlockIDTransactionID_Call struct {
	*mock.Call
}

// ByBlockIDTransactionID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - transactionID flow.Identifier
func (_e *MockEvents_Expecter) ByBlockIDTransactionID(blockID interface{}, transactionID interface{}) *MockEvents_ByBlockIDTransactionID_Call {
	return &MockEvents_ByBlockIDTransactionID_Call{Call: _e.mock.On("ByBlockIDTransactionID", blockID, transactionID)}
}

func (_c *MockEvents_ByBlockIDTransactionID_Call) Run(run func(blockID flow.Identifier, transactionID flow.Identifier)) *MockEvents_ByBlockIDTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockEvents_ByBlockIDTransactionID_Call) Return(_a0 []flow.Event, _a1 error) *MockEvents_ByBlockIDTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEvents_ByBlockIDTransactionID_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) ([]flow.Event, error)) *MockEvents_ByBlockIDTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockIDTransactionIndex provides a mock function with given fields: blockID, txIndex
func (_m *MockEvents) ByBlockIDTransactionIndex(blockID flow.Identifier, txIndex uint32) ([]flow.Event, error) {
	ret := _m.Called(blockID, txIndex)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockIDTransactionIndex")
	}

	var r0 []flow.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint32) ([]flow.Event, error)); ok {
		return rf(blockID, txIndex)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint32) []flow.Event); ok {
		r0 = rf(blockID, txIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, uint32) error); ok {
		r1 = rf(blockID, txIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEvents_ByBlockIDTransactionIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockIDTransactionIndex'
type MockEvents_ByBlockIDTransactionIndex_Call struct {
	*mock.Call
}

// ByBlockIDTransactionIndex is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - txIndex uint32
func (_e *MockEvents_Expecter) ByBlockIDTransactionIndex(blockID interface{}, txIndex interface{}) *MockEvents_ByBlockIDTransactionIndex_Call {
	return &MockEvents_ByBlockIDTransactionIndex_Call{Call: _e.mock.On("ByBlockIDTransactionIndex", blockID, txIndex)}
}

func (_c *MockEvents_ByBlockIDTransactionIndex_Call) Run(run func(blockID flow.Identifier, txIndex uint32)) *MockEvents_ByBlockIDTransactionIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(uint32))
	})
	return _c
}

func (_c *MockEvents_ByBlockIDTransactionIndex_Call) Return(_a0 []flow.Event, _a1 error) *MockEvents_ByBlockIDTransactionIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEvents_ByBlockIDTransactionIndex_Call) RunAndReturn(run func(flow.Identifier, uint32) ([]flow.Event, error)) *MockEvents_ByBlockIDTransactionIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: blockID, blockEvents
func (_m *MockEvents) Store(blockID flow.Identifier, blockEvents []flow.EventsList) error {
	ret := _m.Called(blockID, blockEvents)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, []flow.EventsList) error); ok {
		r0 = rf(blockID, blockEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvents_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockEvents_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - blockEvents []flow.EventsList
func (_e *MockEvents_Expecter) Store(blockID interface{}, blockEvents interface{}) *MockEvents_Store_Call {
	return &MockEvents_Store_Call{Call: _e.mock.On("Store", blockID, blockEvents)}
}

func (_c *MockEvents_Store_Call) Run(run func(blockID flow.Identifier, blockEvents []flow.EventsList)) *MockEvents_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].([]flow.EventsList))
	})
	return _c
}

func (_c *MockEvents_Store_Call) Return(_a0 error) *MockEvents_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvents_Store_Call) RunAndReturn(run func(flow.Identifier, []flow.EventsList) error) *MockEvents_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEvents creates a new instance of MockEvents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvents(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvents {
	mock := &MockEvents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
