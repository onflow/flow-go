// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockGuarantees is an autogenerated mock type for the Guarantees type
type MockGuarantees struct {
	mock.Mock
}

type MockGuarantees_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGuarantees) EXPECT() *MockGuarantees_Expecter {
	return &MockGuarantees_Expecter{mock: &_m.Mock}
}

// ByCollectionID provides a mock function with given fields: collID
func (_m *MockGuarantees) ByCollectionID(collID flow.Identifier) (*flow.CollectionGuarantee, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for ByCollectionID")
	}

	var r0 *flow.CollectionGuarantee
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.CollectionGuarantee, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.CollectionGuarantee); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.CollectionGuarantee)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGuarantees_ByCollectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByCollectionID'
type MockGuarantees_ByCollectionID_Call struct {
	*mock.Call
}

// ByCollectionID is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockGuarantees_Expecter) ByCollectionID(collID interface{}) *MockGuarantees_ByCollectionID_Call {
	return &MockGuarantees_ByCollectionID_Call{Call: _e.mock.On("ByCollectionID", collID)}
}

func (_c *MockGuarantees_ByCollectionID_Call) Run(run func(collID flow.Identifier)) *MockGuarantees_ByCollectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockGuarantees_ByCollectionID_Call) Return(_a0 *flow.CollectionGuarantee, _a1 error) *MockGuarantees_ByCollectionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGuarantees_ByCollectionID_Call) RunAndReturn(run func(flow.Identifier) (*flow.CollectionGuarantee, error)) *MockGuarantees_ByCollectionID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: guarantee
func (_m *MockGuarantees) Store(guarantee *flow.CollectionGuarantee) error {
	ret := _m.Called(guarantee)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.CollectionGuarantee) error); ok {
		r0 = rf(guarantee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGuarantees_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockGuarantees_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - guarantee *flow.CollectionGuarantee
func (_e *MockGuarantees_Expecter) Store(guarantee interface{}) *MockGuarantees_Store_Call {
	return &MockGuarantees_Store_Call{Call: _e.mock.On("Store", guarantee)}
}

func (_c *MockGuarantees_Store_Call) Run(run func(guarantee *flow.CollectionGuarantee)) *MockGuarantees_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.CollectionGuarantee))
	})
	return _c
}

func (_c *MockGuarantees_Store_Call) Return(_a0 error) *MockGuarantees_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGuarantees_Store_Call) RunAndReturn(run func(*flow.CollectionGuarantee) error) *MockGuarantees_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGuarantees creates a new instance of MockGuarantees. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGuarantees(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGuarantees {
	mock := &MockGuarantees{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
