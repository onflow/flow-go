// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	cluster "github.com/onflow/flow-go/model/cluster"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockClusterBlocks is an autogenerated mock type for the ClusterBlocks type
type MockClusterBlocks struct {
	mock.Mock
}

type MockClusterBlocks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterBlocks) EXPECT() *MockClusterBlocks_Expecter {
	return &MockClusterBlocks_Expecter{mock: &_m.Mock}
}

// ByHeight provides a mock function with given fields: height
func (_m *MockClusterBlocks) ByHeight(height uint64) (*cluster.Block, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for ByHeight")
	}

	var r0 *cluster.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*cluster.Block, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *cluster.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterBlocks_ByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByHeight'
type MockClusterBlocks_ByHeight_Call struct {
	*mock.Call
}

// ByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockClusterBlocks_Expecter) ByHeight(height interface{}) *MockClusterBlocks_ByHeight_Call {
	return &MockClusterBlocks_ByHeight_Call{Call: _e.mock.On("ByHeight", height)}
}

func (_c *MockClusterBlocks_ByHeight_Call) Run(run func(height uint64)) *MockClusterBlocks_ByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockClusterBlocks_ByHeight_Call) Return(_a0 *cluster.Block, _a1 error) *MockClusterBlocks_ByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterBlocks_ByHeight_Call) RunAndReturn(run func(uint64) (*cluster.Block, error)) *MockClusterBlocks_ByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: blockID
func (_m *MockClusterBlocks) ByID(blockID flow.Identifier) (*cluster.Block, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *cluster.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*cluster.Block, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *cluster.Block); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterBlocks_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockClusterBlocks_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockClusterBlocks_Expecter) ByID(blockID interface{}) *MockClusterBlocks_ByID_Call {
	return &MockClusterBlocks_ByID_Call{Call: _e.mock.On("ByID", blockID)}
}

func (_c *MockClusterBlocks_ByID_Call) Run(run func(blockID flow.Identifier)) *MockClusterBlocks_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockClusterBlocks_ByID_Call) Return(_a0 *cluster.Block, _a1 error) *MockClusterBlocks_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterBlocks_ByID_Call) RunAndReturn(run func(flow.Identifier) (*cluster.Block, error)) *MockClusterBlocks_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: block
func (_m *MockClusterBlocks) Store(block *cluster.Block) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*cluster.Block) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterBlocks_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockClusterBlocks_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - block *cluster.Block
func (_e *MockClusterBlocks_Expecter) Store(block interface{}) *MockClusterBlocks_Store_Call {
	return &MockClusterBlocks_Store_Call{Call: _e.mock.On("Store", block)}
}

func (_c *MockClusterBlocks_Store_Call) Run(run func(block *cluster.Block)) *MockClusterBlocks_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cluster.Block))
	})
	return _c
}

func (_c *MockClusterBlocks_Store_Call) Return(_a0 error) *MockClusterBlocks_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterBlocks_Store_Call) RunAndReturn(run func(*cluster.Block) error) *MockClusterBlocks_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterBlocks creates a new instance of MockClusterBlocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterBlocks {
	mock := &MockClusterBlocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
