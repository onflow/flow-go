// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockVersionBeacons is an autogenerated mock type for the VersionBeacons type
type MockVersionBeacons struct {
	mock.Mock
}

type MockVersionBeacons_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionBeacons) EXPECT() *MockVersionBeacons_Expecter {
	return &MockVersionBeacons_Expecter{mock: &_m.Mock}
}

// Highest provides a mock function with given fields: belowOrEqualTo
func (_m *MockVersionBeacons) Highest(belowOrEqualTo uint64) (*flow.SealedVersionBeacon, error) {
	ret := _m.Called(belowOrEqualTo)

	if len(ret) == 0 {
		panic("no return value specified for Highest")
	}

	var r0 *flow.SealedVersionBeacon
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.SealedVersionBeacon, error)); ok {
		return rf(belowOrEqualTo)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.SealedVersionBeacon); ok {
		r0 = rf(belowOrEqualTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.SealedVersionBeacon)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(belowOrEqualTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVersionBeacons_Highest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Highest'
type MockVersionBeacons_Highest_Call struct {
	*mock.Call
}

// Highest is a helper method to define mock.On call
//   - belowOrEqualTo uint64
func (_e *MockVersionBeacons_Expecter) Highest(belowOrEqualTo interface{}) *MockVersionBeacons_Highest_Call {
	return &MockVersionBeacons_Highest_Call{Call: _e.mock.On("Highest", belowOrEqualTo)}
}

func (_c *MockVersionBeacons_Highest_Call) Run(run func(belowOrEqualTo uint64)) *MockVersionBeacons_Highest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockVersionBeacons_Highest_Call) Return(_a0 *flow.SealedVersionBeacon, _a1 error) *MockVersionBeacons_Highest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVersionBeacons_Highest_Call) RunAndReturn(run func(uint64) (*flow.SealedVersionBeacon, error)) *MockVersionBeacons_Highest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVersionBeacons creates a new instance of MockVersionBeacons. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionBeacons(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionBeacons {
	mock := &MockVersionBeacons{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
