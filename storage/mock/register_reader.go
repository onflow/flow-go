// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// RegisterReader is an autogenerated mock type for the RegisterReader type
type RegisterReader struct {
	mock.Mock
}

// Get provides a mock function with given fields: ID, height
func (_m *RegisterReader) Get(ID flow.RegisterID, height uint64) ([]byte, error) {
	ret := _m.Called(ID, height)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.RegisterID, uint64) ([]byte, error)); ok {
		return rf(ID, height)
	}
	if rf, ok := ret.Get(0).(func(flow.RegisterID, uint64) []byte); ok {
		r0 = rf(ID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.RegisterID, uint64) error); ok {
		r1 = rf(ID, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegisterReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterReader creates a new instance of RegisterReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterReader(t mockConstructorTestingTNewRegisterReader) *RegisterReader {
	mock := &RegisterReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
