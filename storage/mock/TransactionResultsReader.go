// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionResultsReader is an autogenerated mock type for the TransactionResultsReader type
type MockTransactionResultsReader struct {
	mock.Mock
}

type MockTransactionResultsReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionResultsReader) EXPECT() *MockTransactionResultsReader_Expecter {
	return &MockTransactionResultsReader_Expecter{mock: &_m.Mock}
}

// ByBlockID provides a mock function with given fields: id
func (_m *MockTransactionResultsReader) ByBlockID(id flow.Identifier) ([]flow.TransactionResult, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 []flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]flow.TransactionResult, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []flow.TransactionResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionResultsReader_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockTransactionResultsReader_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockTransactionResultsReader_Expecter) ByBlockID(id interface{}) *MockTransactionResultsReader_ByBlockID_Call {
	return &MockTransactionResultsReader_ByBlockID_Call{Call: _e.mock.On("ByBlockID", id)}
}

func (_c *MockTransactionResultsReader_ByBlockID_Call) Run(run func(id flow.Identifier)) *MockTransactionResultsReader_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionResultsReader_ByBlockID_Call) Return(_a0 []flow.TransactionResult, _a1 error) *MockTransactionResultsReader_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionResultsReader_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) ([]flow.TransactionResult, error)) *MockTransactionResultsReader_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockIDTransactionID provides a mock function with given fields: blockID, transactionID
func (_m *MockTransactionResultsReader) ByBlockIDTransactionID(blockID flow.Identifier, transactionID flow.Identifier) (*flow.TransactionResult, error) {
	ret := _m.Called(blockID, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockIDTransactionID")
	}

	var r0 *flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) (*flow.TransactionResult, error)); ok {
		return rf(blockID, transactionID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) *flow.TransactionResult); ok {
		r0 = rf(blockID, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, flow.Identifier) error); ok {
		r1 = rf(blockID, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionResultsReader_ByBlockIDTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockIDTransactionID'
type MockTransactionResultsReader_ByBlockIDTransactionID_Call struct {
	*mock.Call
}

// ByBlockIDTransactionID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - transactionID flow.Identifier
func (_e *MockTransactionResultsReader_Expecter) ByBlockIDTransactionID(blockID interface{}, transactionID interface{}) *MockTransactionResultsReader_ByBlockIDTransactionID_Call {
	return &MockTransactionResultsReader_ByBlockIDTransactionID_Call{Call: _e.mock.On("ByBlockIDTransactionID", blockID, transactionID)}
}

func (_c *MockTransactionResultsReader_ByBlockIDTransactionID_Call) Run(run func(blockID flow.Identifier, transactionID flow.Identifier)) *MockTransactionResultsReader_ByBlockIDTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionResultsReader_ByBlockIDTransactionID_Call) Return(_a0 *flow.TransactionResult, _a1 error) *MockTransactionResultsReader_ByBlockIDTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionResultsReader_ByBlockIDTransactionID_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) (*flow.TransactionResult, error)) *MockTransactionResultsReader_ByBlockIDTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockIDTransactionIndex provides a mock function with given fields: blockID, txIndex
func (_m *MockTransactionResultsReader) ByBlockIDTransactionIndex(blockID flow.Identifier, txIndex uint32) (*flow.TransactionResult, error) {
	ret := _m.Called(blockID, txIndex)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockIDTransactionIndex")
	}

	var r0 *flow.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint32) (*flow.TransactionResult, error)); ok {
		return rf(blockID, txIndex)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint32) *flow.TransactionResult); ok {
		r0 = rf(blockID, txIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, uint32) error); ok {
		r1 = rf(blockID, txIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionResultsReader_ByBlockIDTransactionIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockIDTransactionIndex'
type MockTransactionResultsReader_ByBlockIDTransactionIndex_Call struct {
	*mock.Call
}

// ByBlockIDTransactionIndex is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - txIndex uint32
func (_e *MockTransactionResultsReader_Expecter) ByBlockIDTransactionIndex(blockID interface{}, txIndex interface{}) *MockTransactionResultsReader_ByBlockIDTransactionIndex_Call {
	return &MockTransactionResultsReader_ByBlockIDTransactionIndex_Call{Call: _e.mock.On("ByBlockIDTransactionIndex", blockID, txIndex)}
}

func (_c *MockTransactionResultsReader_ByBlockIDTransactionIndex_Call) Run(run func(blockID flow.Identifier, txIndex uint32)) *MockTransactionResultsReader_ByBlockIDTransactionIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(uint32))
	})
	return _c
}

func (_c *MockTransactionResultsReader_ByBlockIDTransactionIndex_Call) Return(_a0 *flow.TransactionResult, _a1 error) *MockTransactionResultsReader_ByBlockIDTransactionIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionResultsReader_ByBlockIDTransactionIndex_Call) RunAndReturn(run func(flow.Identifier, uint32) (*flow.TransactionResult, error)) *MockTransactionResultsReader_ByBlockIDTransactionIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionResultsReader creates a new instance of MockTransactionResultsReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionResultsReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionResultsReader {
	mock := &MockTransactionResultsReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
