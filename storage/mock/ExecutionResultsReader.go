// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// MockExecutionResultsReader is an autogenerated mock type for the ExecutionResultsReader type
type MockExecutionResultsReader struct {
	mock.Mock
}

type MockExecutionResultsReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionResultsReader) EXPECT() *MockExecutionResultsReader_Expecter {
	return &MockExecutionResultsReader_Expecter{mock: &_m.Mock}
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockExecutionResultsReader) ByBlockID(blockID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionResultsReader_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockExecutionResultsReader_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockExecutionResultsReader_Expecter) ByBlockID(blockID interface{}) *MockExecutionResultsReader_ByBlockID_Call {
	return &MockExecutionResultsReader_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockExecutionResultsReader_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockExecutionResultsReader_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResultsReader_ByBlockID_Call) Return(_a0 *flow.ExecutionResult, _a1 error) *MockExecutionResultsReader_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionResultsReader_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ExecutionResult, error)) *MockExecutionResultsReader_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: resultID
func (_m *MockExecutionResultsReader) ByID(resultID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(resultID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(resultID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(resultID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionResultsReader_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockExecutionResultsReader_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - resultID flow.Identifier
func (_e *MockExecutionResultsReader_Expecter) ByID(resultID interface{}) *MockExecutionResultsReader_ByID_Call {
	return &MockExecutionResultsReader_ByID_Call{Call: _e.mock.On("ByID", resultID)}
}

func (_c *MockExecutionResultsReader_ByID_Call) Run(run func(resultID flow.Identifier)) *MockExecutionResultsReader_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResultsReader_ByID_Call) Return(_a0 *flow.ExecutionResult, _a1 error) *MockExecutionResultsReader_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionResultsReader_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ExecutionResult, error)) *MockExecutionResultsReader_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// ByIDTx provides a mock function with given fields: resultID
func (_m *MockExecutionResultsReader) ByIDTx(resultID flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error) {
	ret := _m.Called(resultID)

	if len(ret) == 0 {
		panic("no return value specified for ByIDTx")
	}

	var r0 func(*transaction.Tx) (*flow.ExecutionResult, error)
	if rf, ok := ret.Get(0).(func(flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error)); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) (*flow.ExecutionResult, error))
		}
	}

	return r0
}

// MockExecutionResultsReader_ByIDTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByIDTx'
type MockExecutionResultsReader_ByIDTx_Call struct {
	*mock.Call
}

// ByIDTx is a helper method to define mock.On call
//   - resultID flow.Identifier
func (_e *MockExecutionResultsReader_Expecter) ByIDTx(resultID interface{}) *MockExecutionResultsReader_ByIDTx_Call {
	return &MockExecutionResultsReader_ByIDTx_Call{Call: _e.mock.On("ByIDTx", resultID)}
}

func (_c *MockExecutionResultsReader_ByIDTx_Call) Run(run func(resultID flow.Identifier)) *MockExecutionResultsReader_ByIDTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResultsReader_ByIDTx_Call) Return(_a0 func(*transaction.Tx) (*flow.ExecutionResult, error)) *MockExecutionResultsReader_ByIDTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResultsReader_ByIDTx_Call) RunAndReturn(run func(flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error)) *MockExecutionResultsReader_ByIDTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionResultsReader creates a new instance of MockExecutionResultsReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionResultsReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionResultsReader {
	mock := &MockExecutionResultsReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
