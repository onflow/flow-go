// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// ChunkDataPacks is an autogenerated mock type for the ChunkDataPacks type
type ChunkDataPacks struct {
	mock.Mock
}

// BatchRemove provides a mock function with given fields: chunkID, batch
func (_m *ChunkDataPacks) BatchRemove(chunkID flow.Identifier, batch storage.BatchStorage) error {
	ret := _m.Called(chunkID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.BatchStorage) error); ok {
		r0 = rf(chunkID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByChunkID provides a mock function with given fields: chunkID
func (_m *ChunkDataPacks) ByChunkID(chunkID flow.Identifier) (*flow.ChunkDataPack, error) {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for ByChunkID")
	}

	var r0 *flow.ChunkDataPack
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ChunkDataPack, error)); ok {
		return rf(chunkID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ChunkDataPack); ok {
		r0 = rf(chunkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ChunkDataPack)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(chunkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: cs
func (_m *ChunkDataPacks) Remove(cs []flow.Identifier) error {
	ret := _m.Called(cs)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]flow.Identifier) error); ok {
		r0 = rf(cs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: cs
func (_m *ChunkDataPacks) Store(cs []*flow.ChunkDataPack) error {
	ret := _m.Called(cs)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*flow.ChunkDataPack) error); ok {
		r0 = rf(cs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChunkDataPacks creates a new instance of ChunkDataPacks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChunkDataPacks(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChunkDataPacks {
	mock := &ChunkDataPacks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
