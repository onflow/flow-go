// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockNodeDisallowList is an autogenerated mock type for the NodeDisallowList type
type MockNodeDisallowList struct {
	mock.Mock
}

type MockNodeDisallowList_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeDisallowList) EXPECT() *MockNodeDisallowList_Expecter {
	return &MockNodeDisallowList_Expecter{mock: &_m.Mock}
}

// Retrieve provides a mock function with given fields: disallowList
func (_m *MockNodeDisallowList) Retrieve(disallowList *map[flow.Identifier]struct{}) error {
	ret := _m.Called(disallowList)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*map[flow.Identifier]struct{}) error); ok {
		r0 = rf(disallowList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodeDisallowList_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockNodeDisallowList_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - disallowList *map[flow.Identifier]struct{}
func (_e *MockNodeDisallowList_Expecter) Retrieve(disallowList interface{}) *MockNodeDisallowList_Retrieve_Call {
	return &MockNodeDisallowList_Retrieve_Call{Call: _e.mock.On("Retrieve", disallowList)}
}

func (_c *MockNodeDisallowList_Retrieve_Call) Run(run func(disallowList *map[flow.Identifier]struct{})) *MockNodeDisallowList_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*map[flow.Identifier]struct{}))
	})
	return _c
}

func (_c *MockNodeDisallowList_Retrieve_Call) Return(_a0 error) *MockNodeDisallowList_Retrieve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeDisallowList_Retrieve_Call) RunAndReturn(run func(*map[flow.Identifier]struct{}) error) *MockNodeDisallowList_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: disallowList
func (_m *MockNodeDisallowList) Store(disallowList map[flow.Identifier]struct{}) error {
	ret := _m.Called(disallowList)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[flow.Identifier]struct{}) error); ok {
		r0 = rf(disallowList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodeDisallowList_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockNodeDisallowList_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - disallowList map[flow.Identifier]struct{}
func (_e *MockNodeDisallowList_Expecter) Store(disallowList interface{}) *MockNodeDisallowList_Store_Call {
	return &MockNodeDisallowList_Store_Call{Call: _e.mock.On("Store", disallowList)}
}

func (_c *MockNodeDisallowList_Store_Call) Run(run func(disallowList map[flow.Identifier]struct{})) *MockNodeDisallowList_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[flow.Identifier]struct{}))
	})
	return _c
}

func (_c *MockNodeDisallowList_Store_Call) Return(_a0 error) *MockNodeDisallowList_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeDisallowList_Store_Call) RunAndReturn(run func(map[flow.Identifier]struct{}) error) *MockNodeDisallowList_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeDisallowList creates a new instance of MockNodeDisallowList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeDisallowList(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeDisallowList {
	mock := &MockNodeDisallowList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
