// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockCollections is an autogenerated mock type for the Collections type
type MockCollections struct {
	mock.Mock
}

type MockCollections_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollections) EXPECT() *MockCollections_Expecter {
	return &MockCollections_Expecter{mock: &_m.Mock}
}

// BatchStoreLightAndIndexByTransaction provides a mock function with given fields: collection, batch
func (_m *MockCollections) BatchStoreLightAndIndexByTransaction(collection *flow.LightCollection, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(collection, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStoreLightAndIndexByTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.LightCollection, storage.ReaderBatchWriter) error); ok {
		r0 = rf(collection, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollections_BatchStoreLightAndIndexByTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStoreLightAndIndexByTransaction'
type MockCollections_BatchStoreLightAndIndexByTransaction_Call struct {
	*mock.Call
}

// BatchStoreLightAndIndexByTransaction is a helper method to define mock.On call
//   - collection *flow.LightCollection
//   - batch storage.ReaderBatchWriter
func (_e *MockCollections_Expecter) BatchStoreLightAndIndexByTransaction(collection interface{}, batch interface{}) *MockCollections_BatchStoreLightAndIndexByTransaction_Call {
	return &MockCollections_BatchStoreLightAndIndexByTransaction_Call{Call: _e.mock.On("BatchStoreLightAndIndexByTransaction", collection, batch)}
}

func (_c *MockCollections_BatchStoreLightAndIndexByTransaction_Call) Run(run func(collection *flow.LightCollection, batch storage.ReaderBatchWriter)) *MockCollections_BatchStoreLightAndIndexByTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.LightCollection), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockCollections_BatchStoreLightAndIndexByTransaction_Call) Return(_a0 error) *MockCollections_BatchStoreLightAndIndexByTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollections_BatchStoreLightAndIndexByTransaction_Call) RunAndReturn(run func(*flow.LightCollection, storage.ReaderBatchWriter) error) *MockCollections_BatchStoreLightAndIndexByTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: collID
func (_m *MockCollections) ByID(collID flow.Identifier) (*flow.Collection, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Collection, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Collection); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollections_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockCollections_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockCollections_Expecter) ByID(collID interface{}) *MockCollections_ByID_Call {
	return &MockCollections_ByID_Call{Call: _e.mock.On("ByID", collID)}
}

func (_c *MockCollections_ByID_Call) Run(run func(collID flow.Identifier)) *MockCollections_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCollections_ByID_Call) Return(_a0 *flow.Collection, _a1 error) *MockCollections_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollections_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Collection, error)) *MockCollections_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// LightByID provides a mock function with given fields: collID
func (_m *MockCollections) LightByID(collID flow.Identifier) (*flow.LightCollection, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for LightByID")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.LightCollection, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.LightCollection); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollections_LightByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LightByID'
type MockCollections_LightByID_Call struct {
	*mock.Call
}

// LightByID is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockCollections_Expecter) LightByID(collID interface{}) *MockCollections_LightByID_Call {
	return &MockCollections_LightByID_Call{Call: _e.mock.On("LightByID", collID)}
}

func (_c *MockCollections_LightByID_Call) Run(run func(collID flow.Identifier)) *MockCollections_LightByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCollections_LightByID_Call) Return(_a0 *flow.LightCollection, _a1 error) *MockCollections_LightByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollections_LightByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.LightCollection, error)) *MockCollections_LightByID_Call {
	_c.Call.Return(run)
	return _c
}

// LightByTransactionID provides a mock function with given fields: txID
func (_m *MockCollections) LightByTransactionID(txID flow.Identifier) (*flow.LightCollection, error) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for LightByTransactionID")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.LightCollection, error)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.LightCollection); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollections_LightByTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LightByTransactionID'
type MockCollections_LightByTransactionID_Call struct {
	*mock.Call
}

// LightByTransactionID is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockCollections_Expecter) LightByTransactionID(txID interface{}) *MockCollections_LightByTransactionID_Call {
	return &MockCollections_LightByTransactionID_Call{Call: _e.mock.On("LightByTransactionID", txID)}
}

func (_c *MockCollections_LightByTransactionID_Call) Run(run func(txID flow.Identifier)) *MockCollections_LightByTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCollections_LightByTransactionID_Call) Return(_a0 *flow.LightCollection, _a1 error) *MockCollections_LightByTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollections_LightByTransactionID_Call) RunAndReturn(run func(flow.Identifier) (*flow.LightCollection, error)) *MockCollections_LightByTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: collID
func (_m *MockCollections) Remove(collID flow.Identifier) error {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(collID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollections_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockCollections_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockCollections_Expecter) Remove(collID interface{}) *MockCollections_Remove_Call {
	return &MockCollections_Remove_Call{Call: _e.mock.On("Remove", collID)}
}

func (_c *MockCollections_Remove_Call) Run(run func(collID flow.Identifier)) *MockCollections_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCollections_Remove_Call) Return(_a0 error) *MockCollections_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollections_Remove_Call) RunAndReturn(run func(flow.Identifier) error) *MockCollections_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: collection
func (_m *MockCollections) Store(collection *flow.Collection) error {
	ret := _m.Called(collection)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Collection) error); ok {
		r0 = rf(collection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollections_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockCollections_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - collection *flow.Collection
func (_e *MockCollections_Expecter) Store(collection interface{}) *MockCollections_Store_Call {
	return &MockCollections_Store_Call{Call: _e.mock.On("Store", collection)}
}

func (_c *MockCollections_Store_Call) Run(run func(collection *flow.Collection)) *MockCollections_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Collection))
	})
	return _c
}

func (_c *MockCollections_Store_Call) Return(_a0 error) *MockCollections_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollections_Store_Call) RunAndReturn(run func(*flow.Collection) error) *MockCollections_Store_Call {
	_c.Call.Return(run)
	return _c
}

// StoreLightAndIndexByTransaction provides a mock function with given fields: collection
func (_m *MockCollections) StoreLightAndIndexByTransaction(collection *flow.LightCollection) error {
	ret := _m.Called(collection)

	if len(ret) == 0 {
		panic("no return value specified for StoreLightAndIndexByTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.LightCollection) error); ok {
		r0 = rf(collection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollections_StoreLightAndIndexByTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreLightAndIndexByTransaction'
type MockCollections_StoreLightAndIndexByTransaction_Call struct {
	*mock.Call
}

// StoreLightAndIndexByTransaction is a helper method to define mock.On call
//   - collection *flow.LightCollection
func (_e *MockCollections_Expecter) StoreLightAndIndexByTransaction(collection interface{}) *MockCollections_StoreLightAndIndexByTransaction_Call {
	return &MockCollections_StoreLightAndIndexByTransaction_Call{Call: _e.mock.On("StoreLightAndIndexByTransaction", collection)}
}

func (_c *MockCollections_StoreLightAndIndexByTransaction_Call) Run(run func(collection *flow.LightCollection)) *MockCollections_StoreLightAndIndexByTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.LightCollection))
	})
	return _c
}

func (_c *MockCollections_StoreLightAndIndexByTransaction_Call) Return(_a0 error) *MockCollections_StoreLightAndIndexByTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollections_StoreLightAndIndexByTransaction_Call) RunAndReturn(run func(*flow.LightCollection) error) *MockCollections_StoreLightAndIndexByTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollections creates a new instance of MockCollections. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollections(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollections {
	mock := &MockCollections{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
