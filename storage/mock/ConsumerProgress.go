// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockConsumerProgress is an autogenerated mock type for the ConsumerProgress type
type MockConsumerProgress struct {
	mock.Mock
}

type MockConsumerProgress_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerProgress) EXPECT() *MockConsumerProgress_Expecter {
	return &MockConsumerProgress_Expecter{mock: &_m.Mock}
}

// BatchSetProcessedIndex provides a mock function with given fields: processed, batch
func (_m *MockConsumerProgress) BatchSetProcessedIndex(processed uint64, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(processed, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchSetProcessedIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, storage.ReaderBatchWriter) error); ok {
		r0 = rf(processed, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumerProgress_BatchSetProcessedIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchSetProcessedIndex'
type MockConsumerProgress_BatchSetProcessedIndex_Call struct {
	*mock.Call
}

// BatchSetProcessedIndex is a helper method to define mock.On call
//   - processed uint64
//   - batch storage.ReaderBatchWriter
func (_e *MockConsumerProgress_Expecter) BatchSetProcessedIndex(processed interface{}, batch interface{}) *MockConsumerProgress_BatchSetProcessedIndex_Call {
	return &MockConsumerProgress_BatchSetProcessedIndex_Call{Call: _e.mock.On("BatchSetProcessedIndex", processed, batch)}
}

func (_c *MockConsumerProgress_BatchSetProcessedIndex_Call) Run(run func(processed uint64, batch storage.ReaderBatchWriter)) *MockConsumerProgress_BatchSetProcessedIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockConsumerProgress_BatchSetProcessedIndex_Call) Return(_a0 error) *MockConsumerProgress_BatchSetProcessedIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerProgress_BatchSetProcessedIndex_Call) RunAndReturn(run func(uint64, storage.ReaderBatchWriter) error) *MockConsumerProgress_BatchSetProcessedIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessedIndex provides a mock function with no fields
func (_m *MockConsumerProgress) ProcessedIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessedIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerProgress_ProcessedIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessedIndex'
type MockConsumerProgress_ProcessedIndex_Call struct {
	*mock.Call
}

// ProcessedIndex is a helper method to define mock.On call
func (_e *MockConsumerProgress_Expecter) ProcessedIndex() *MockConsumerProgress_ProcessedIndex_Call {
	return &MockConsumerProgress_ProcessedIndex_Call{Call: _e.mock.On("ProcessedIndex")}
}

func (_c *MockConsumerProgress_ProcessedIndex_Call) Run(run func()) *MockConsumerProgress_ProcessedIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerProgress_ProcessedIndex_Call) Return(_a0 uint64, _a1 error) *MockConsumerProgress_ProcessedIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerProgress_ProcessedIndex_Call) RunAndReturn(run func() (uint64, error)) *MockConsumerProgress_ProcessedIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetProcessedIndex provides a mock function with given fields: processed
func (_m *MockConsumerProgress) SetProcessedIndex(processed uint64) error {
	ret := _m.Called(processed)

	if len(ret) == 0 {
		panic("no return value specified for SetProcessedIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(processed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumerProgress_SetProcessedIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProcessedIndex'
type MockConsumerProgress_SetProcessedIndex_Call struct {
	*mock.Call
}

// SetProcessedIndex is a helper method to define mock.On call
//   - processed uint64
func (_e *MockConsumerProgress_Expecter) SetProcessedIndex(processed interface{}) *MockConsumerProgress_SetProcessedIndex_Call {
	return &MockConsumerProgress_SetProcessedIndex_Call{Call: _e.mock.On("SetProcessedIndex", processed)}
}

func (_c *MockConsumerProgress_SetProcessedIndex_Call) Run(run func(processed uint64)) *MockConsumerProgress_SetProcessedIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockConsumerProgress_SetProcessedIndex_Call) Return(_a0 error) *MockConsumerProgress_SetProcessedIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerProgress_SetProcessedIndex_Call) RunAndReturn(run func(uint64) error) *MockConsumerProgress_SetProcessedIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumerProgress creates a new instance of MockConsumerProgress. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerProgress(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerProgress {
	mock := &MockConsumerProgress{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
