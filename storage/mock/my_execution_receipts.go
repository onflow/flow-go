// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MyExecutionReceipts is an autogenerated mock type for the MyExecutionReceipts type
type MyExecutionReceipts struct {
	mock.Mock
}

// BatchRemoveIndexByBlockID provides a mock function with given fields: blockID, batch
func (_m *MyExecutionReceipts) BatchRemoveIndexByBlockID(blockID flow.Identifier, batch storage.BatchStorage) error {
	ret := _m.Called(blockID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemoveIndexByBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.BatchStorage) error); ok {
		r0 = rf(blockID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchStoreMyReceipt provides a mock function with given fields: receipt, batch
func (_m *MyExecutionReceipts) BatchStoreMyReceipt(receipt *flow.ExecutionReceipt, batch storage.BatchStorage) error {
	ret := _m.Called(receipt, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStoreMyReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt, storage.BatchStorage) error); ok {
		r0 = rf(receipt, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MyReceipt provides a mock function with given fields: blockID
func (_m *MyExecutionReceipts) MyReceipt(blockID flow.Identifier) (*flow.ExecutionReceipt, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for MyReceipt")
	}

	var r0 *flow.ExecutionReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ExecutionReceipt, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionReceipt); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionReceipt)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreMyReceipt provides a mock function with given fields: receipt
func (_m *MyExecutionReceipts) StoreMyReceipt(receipt *flow.ExecutionReceipt) error {
	ret := _m.Called(receipt)

	if len(ret) == 0 {
		panic("no return value specified for StoreMyReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt) error); ok {
		r0 = rf(receipt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMyExecutionReceipts creates a new instance of MyExecutionReceipts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMyExecutionReceipts(t interface {
	mock.TestingT
	Cleanup(func())
}) *MyExecutionReceipts {
	mock := &MyExecutionReceipts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
