// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockIterItem is an autogenerated mock type for the IterItem type
type MockIterItem struct {
	mock.Mock
}

type MockIterItem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIterItem) EXPECT() *MockIterItem_Expecter {
	return &MockIterItem_Expecter{mock: &_m.Mock}
}

// Key provides a mock function with no fields
func (_m *MockIterItem) Key() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockIterItem_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockIterItem_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockIterItem_Expecter) Key() *MockIterItem_Key_Call {
	return &MockIterItem_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockIterItem_Key_Call) Run(run func()) *MockIterItem_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterItem_Key_Call) Return(_a0 []byte) *MockIterItem_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterItem_Key_Call) RunAndReturn(run func() []byte) *MockIterItem_Key_Call {
	_c.Call.Return(run)
	return _c
}

// KeyCopy provides a mock function with given fields: dst
func (_m *MockIterItem) KeyCopy(dst []byte) []byte {
	ret := _m.Called(dst)

	if len(ret) == 0 {
		panic("no return value specified for KeyCopy")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(dst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockIterItem_KeyCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyCopy'
type MockIterItem_KeyCopy_Call struct {
	*mock.Call
}

// KeyCopy is a helper method to define mock.On call
//   - dst []byte
func (_e *MockIterItem_Expecter) KeyCopy(dst interface{}) *MockIterItem_KeyCopy_Call {
	return &MockIterItem_KeyCopy_Call{Call: _e.mock.On("KeyCopy", dst)}
}

func (_c *MockIterItem_KeyCopy_Call) Run(run func(dst []byte)) *MockIterItem_KeyCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockIterItem_KeyCopy_Call) Return(_a0 []byte) *MockIterItem_KeyCopy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterItem_KeyCopy_Call) RunAndReturn(run func([]byte) []byte) *MockIterItem_KeyCopy_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields: _a0
func (_m *MockIterItem) Value(_a0 func([]byte) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func([]byte) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIterItem_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockIterItem_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - _a0 func([]byte) error
func (_e *MockIterItem_Expecter) Value(_a0 interface{}) *MockIterItem_Value_Call {
	return &MockIterItem_Value_Call{Call: _e.mock.On("Value", _a0)}
}

func (_c *MockIterItem_Value_Call) Run(run func(_a0 func([]byte) error)) *MockIterItem_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func([]byte) error))
	})
	return _c
}

func (_c *MockIterItem_Value_Call) Return(_a0 error) *MockIterItem_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterItem_Value_Call) RunAndReturn(run func(func([]byte) error) error) *MockIterItem_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIterItem creates a new instance of MockIterItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIterItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIterItem {
	mock := &MockIterItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
