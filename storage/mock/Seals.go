// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockSeals is an autogenerated mock type for the Seals type
type MockSeals struct {
	mock.Mock
}

type MockSeals_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSeals) EXPECT() *MockSeals_Expecter {
	return &MockSeals_Expecter{mock: &_m.Mock}
}

// ByID provides a mock function with given fields: sealID
func (_m *MockSeals) ByID(sealID flow.Identifier) (*flow.Seal, error) {
	ret := _m.Called(sealID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.Seal
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Seal, error)); ok {
		return rf(sealID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Seal); ok {
		r0 = rf(sealID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Seal)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(sealID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeals_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockSeals_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - sealID flow.Identifier
func (_e *MockSeals_Expecter) ByID(sealID interface{}) *MockSeals_ByID_Call {
	return &MockSeals_ByID_Call{Call: _e.mock.On("ByID", sealID)}
}

func (_c *MockSeals_ByID_Call) Run(run func(sealID flow.Identifier)) *MockSeals_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockSeals_ByID_Call) Return(_a0 *flow.Seal, _a1 error) *MockSeals_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeals_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Seal, error)) *MockSeals_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizedSealForBlock provides a mock function with given fields: blockID
func (_m *MockSeals) FinalizedSealForBlock(blockID flow.Identifier) (*flow.Seal, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for FinalizedSealForBlock")
	}

	var r0 *flow.Seal
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Seal, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Seal); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Seal)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeals_FinalizedSealForBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizedSealForBlock'
type MockSeals_FinalizedSealForBlock_Call struct {
	*mock.Call
}

// FinalizedSealForBlock is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockSeals_Expecter) FinalizedSealForBlock(blockID interface{}) *MockSeals_FinalizedSealForBlock_Call {
	return &MockSeals_FinalizedSealForBlock_Call{Call: _e.mock.On("FinalizedSealForBlock", blockID)}
}

func (_c *MockSeals_FinalizedSealForBlock_Call) Run(run func(blockID flow.Identifier)) *MockSeals_FinalizedSealForBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockSeals_FinalizedSealForBlock_Call) Return(_a0 *flow.Seal, _a1 error) *MockSeals_FinalizedSealForBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeals_FinalizedSealForBlock_Call) RunAndReturn(run func(flow.Identifier) (*flow.Seal, error)) *MockSeals_FinalizedSealForBlock_Call {
	_c.Call.Return(run)
	return _c
}

// HighestInFork provides a mock function with given fields: blockID
func (_m *MockSeals) HighestInFork(blockID flow.Identifier) (*flow.Seal, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for HighestInFork")
	}

	var r0 *flow.Seal
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Seal, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Seal); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Seal)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeals_HighestInFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HighestInFork'
type MockSeals_HighestInFork_Call struct {
	*mock.Call
}

// HighestInFork is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockSeals_Expecter) HighestInFork(blockID interface{}) *MockSeals_HighestInFork_Call {
	return &MockSeals_HighestInFork_Call{Call: _e.mock.On("HighestInFork", blockID)}
}

func (_c *MockSeals_HighestInFork_Call) Run(run func(blockID flow.Identifier)) *MockSeals_HighestInFork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockSeals_HighestInFork_Call) Return(_a0 *flow.Seal, _a1 error) *MockSeals_HighestInFork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeals_HighestInFork_Call) RunAndReturn(run func(flow.Identifier) (*flow.Seal, error)) *MockSeals_HighestInFork_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: seal
func (_m *MockSeals) Store(seal *flow.Seal) error {
	ret := _m.Called(seal)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Seal) error); ok {
		r0 = rf(seal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSeals_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockSeals_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - seal *flow.Seal
func (_e *MockSeals_Expecter) Store(seal interface{}) *MockSeals_Store_Call {
	return &MockSeals_Store_Call{Call: _e.mock.On("Store", seal)}
}

func (_c *MockSeals_Store_Call) Run(run func(seal *flow.Seal)) *MockSeals_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Seal))
	})
	return _c
}

func (_c *MockSeals_Store_Call) Return(_a0 error) *MockSeals_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSeals_Store_Call) RunAndReturn(run func(*flow.Seal) error) *MockSeals_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSeals creates a new instance of MockSeals. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSeals(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSeals {
	mock := &MockSeals{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
