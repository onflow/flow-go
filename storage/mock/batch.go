// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// Batch is an autogenerated mock type for the Batch type
type Batch struct {
	mock.Mock
}

// AddCallback provides a mock function with given fields: _a0
func (_m *Batch) AddCallback(_a0 func(error)) {
	_m.Called(_a0)
}

// Close provides a mock function with given fields:
func (_m *Batch) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Batch) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalReader provides a mock function with given fields:
func (_m *Batch) GlobalReader() storage.Reader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalReader")
	}

	var r0 storage.Reader
	if rf, ok := ret.Get(0).(func() storage.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Reader)
		}
	}

	return r0
}

// Writer provides a mock function with given fields:
func (_m *Batch) Writer() storage.Writer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Writer")
	}

	var r0 storage.Writer
	if rf, ok := ret.Get(0).(func() storage.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Writer)
		}
	}

	return r0
}

// NewBatch creates a new instance of Batch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Batch {
	mock := &Batch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
