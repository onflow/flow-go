// Code generated by mockery. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// EpochCommits is an autogenerated mock type for the EpochCommits type
type EpochCommits struct {
	mock.Mock
}

// BatchStore provides a mock function with given fields: rw, commit
func (_m *EpochCommits) BatchStore(rw storage.ReaderBatchWriter, commit *flow.EpochCommit) error {
	ret := _m.Called(rw, commit)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.ReaderBatchWriter, *flow.EpochCommit) error); ok {
		r0 = rf(rw, commit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByID provides a mock function with given fields: _a0
func (_m *EpochCommits) ByID(_a0 flow.Identifier) (*flow.EpochCommit, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.EpochCommit
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.EpochCommit, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.EpochCommit); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEpochCommits creates a new instance of EpochCommits. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEpochCommits(t interface {
	mock.TestingT
	Cleanup(func())
}) *EpochCommits {
	mock := &EpochCommits{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
