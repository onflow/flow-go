// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// NewBatch provides a mock function with no fields
func (_m *MockDB) NewBatch() storage.Batch {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewBatch")
	}

	var r0 storage.Batch
	if rf, ok := ret.Get(0).(func() storage.Batch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Batch)
		}
	}

	return r0
}

// MockDB_NewBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBatch'
type MockDB_NewBatch_Call struct {
	*mock.Call
}

// NewBatch is a helper method to define mock.On call
func (_e *MockDB_Expecter) NewBatch() *MockDB_NewBatch_Call {
	return &MockDB_NewBatch_Call{Call: _e.mock.On("NewBatch")}
}

func (_c *MockDB_NewBatch_Call) Run(run func()) *MockDB_NewBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_NewBatch_Call) Return(_a0 storage.Batch) *MockDB_NewBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_NewBatch_Call) RunAndReturn(run func() storage.Batch) *MockDB_NewBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Reader provides a mock function with no fields
func (_m *MockDB) Reader() storage.Reader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reader")
	}

	var r0 storage.Reader
	if rf, ok := ret.Get(0).(func() storage.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Reader)
		}
	}

	return r0
}

// MockDB_Reader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reader'
type MockDB_Reader_Call struct {
	*mock.Call
}

// Reader is a helper method to define mock.On call
func (_e *MockDB_Expecter) Reader() *MockDB_Reader_Call {
	return &MockDB_Reader_Call{Call: _e.mock.On("Reader")}
}

func (_c *MockDB_Reader_Call) Run(run func()) *MockDB_Reader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_Reader_Call) Return(_a0 storage.Reader) *MockDB_Reader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_Reader_Call) RunAndReturn(run func() storage.Reader) *MockDB_Reader_Call {
	_c.Call.Return(run)
	return _c
}

// WithReaderBatchWriter provides a mock function with given fields: _a0
func (_m *MockDB) WithReaderBatchWriter(_a0 func(storage.ReaderBatchWriter) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithReaderBatchWriter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(storage.ReaderBatchWriter) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDB_WithReaderBatchWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithReaderBatchWriter'
type MockDB_WithReaderBatchWriter_Call struct {
	*mock.Call
}

// WithReaderBatchWriter is a helper method to define mock.On call
//   - _a0 func(storage.ReaderBatchWriter) error
func (_e *MockDB_Expecter) WithReaderBatchWriter(_a0 interface{}) *MockDB_WithReaderBatchWriter_Call {
	return &MockDB_WithReaderBatchWriter_Call{Call: _e.mock.On("WithReaderBatchWriter", _a0)}
}

func (_c *MockDB_WithReaderBatchWriter_Call) Run(run func(_a0 func(storage.ReaderBatchWriter) error)) *MockDB_WithReaderBatchWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(storage.ReaderBatchWriter) error))
	})
	return _c
}

func (_c *MockDB_WithReaderBatchWriter_Call) Return(_a0 error) *MockDB_WithReaderBatchWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDB_WithReaderBatchWriter_Call) RunAndReturn(run func(func(storage.ReaderBatchWriter) error) error) *MockDB_WithReaderBatchWriter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
