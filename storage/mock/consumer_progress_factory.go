// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerProgressFactory is an autogenerated mock type for the ConsumerProgressFactory type
type ConsumerProgressFactory struct {
	mock.Mock
}

// InitConsumer provides a mock function with given fields: defaultIndex
func (_m *ConsumerProgressFactory) InitConsumer(defaultIndex uint64) (storage.ConsumerProgress, error) {
	ret := _m.Called(defaultIndex)

	if len(ret) == 0 {
		panic("no return value specified for InitConsumer")
	}

	var r0 storage.ConsumerProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (storage.ConsumerProgress, error)); ok {
		return rf(defaultIndex)
	}
	if rf, ok := ret.Get(0).(func(uint64) storage.ConsumerProgress); ok {
		r0 = rf(defaultIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ConsumerProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(defaultIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsumerProgressFactory creates a new instance of ConsumerProgressFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerProgressFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerProgressFactory {
	mock := &ConsumerProgressFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
