// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// BatchStorage is an autogenerated mock type for the BatchStorage type
type BatchStorage struct {
	mock.Mock
}

// Flush provides a mock function with given fields:
func (_m *BatchStorage) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReader provides a mock function with given fields:
func (_m *BatchStorage) GetReader() storage.Reader {
	ret := _m.Called()

	var r0 storage.Reader
	if rf, ok := ret.Get(0).(func() storage.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Reader)
		}
	}

	return r0
}

// GetWriter provides a mock function with given fields:
func (_m *BatchStorage) GetWriter() storage.BatchWriter {
	ret := _m.Called()

	var r0 storage.BatchWriter
	if rf, ok := ret.Get(0).(func() storage.BatchWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.BatchWriter)
		}
	}

	return r0
}

// OnSucceed provides a mock function with given fields: callback
func (_m *BatchStorage) OnSucceed(callback func()) {
	_m.Called(callback)
}

type mockConstructorTestingTNewBatchStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchStorage creates a new instance of BatchStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchStorage(t mockConstructorTestingTNewBatchStorage) *BatchStorage {
	mock := &BatchStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
