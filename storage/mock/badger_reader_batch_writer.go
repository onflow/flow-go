// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	badger "github.com/dgraph-io/badger/v2"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// BadgerReaderBatchWriter is an autogenerated mock type for the BadgerReaderBatchWriter type
type BadgerReaderBatchWriter struct {
	mock.Mock
}

// AddCallback provides a mock function with given fields: _a0
func (_m *BadgerReaderBatchWriter) AddCallback(_a0 func(error)) {
	_m.Called(_a0)
}

// BadgerWriteBatch provides a mock function with given fields:
func (_m *BadgerReaderBatchWriter) BadgerWriteBatch() *badger.WriteBatch {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BadgerWriteBatch")
	}

	var r0 *badger.WriteBatch
	if rf, ok := ret.Get(0).(func() *badger.WriteBatch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*badger.WriteBatch)
		}
	}

	return r0
}

// GlobalReader provides a mock function with given fields:
func (_m *BadgerReaderBatchWriter) GlobalReader() storage.Reader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalReader")
	}

	var r0 storage.Reader
	if rf, ok := ret.Get(0).(func() storage.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Reader)
		}
	}

	return r0
}

// Writer provides a mock function with given fields:
func (_m *BadgerReaderBatchWriter) Writer() storage.Writer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Writer")
	}

	var r0 storage.Writer
	if rf, ok := ret.Get(0).(func() storage.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Writer)
		}
	}

	return r0
}

// NewBadgerReaderBatchWriter creates a new instance of BadgerReaderBatchWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBadgerReaderBatchWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BadgerReaderBatchWriter {
	mock := &BadgerReaderBatchWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
