// Code generated by mockery. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// LatestPersistedSealedResult is an autogenerated mock type for the LatestPersistedSealedResult type
type LatestPersistedSealedResult struct {
	mock.Mock
}

// BatchSet provides a mock function with given fields: resultID, height, batch
func (_m *LatestPersistedSealedResult) BatchSet(resultID flow.Identifier, height uint64, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(resultID, height, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64, storage.ReaderBatchWriter) error); ok {
		r0 = rf(resultID, height, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Latest provides a mock function with no fields
func (_m *LatestPersistedSealedResult) Latest() (flow.Identifier, uint64) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Latest")
	}

	var r0 flow.Identifier
	var r1 uint64
	if rf, ok := ret.Get(0).(func() (flow.Identifier, uint64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func() uint64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// NewLatestPersistedSealedResult creates a new instance of LatestPersistedSealedResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLatestPersistedSealedResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *LatestPersistedSealedResult {
	mock := &LatestPersistedSealedResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
