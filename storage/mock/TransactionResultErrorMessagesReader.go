// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionResultErrorMessagesReader is an autogenerated mock type for the TransactionResultErrorMessagesReader type
type MockTransactionResultErrorMessagesReader struct {
	mock.Mock
}

type MockTransactionResultErrorMessagesReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionResultErrorMessagesReader) EXPECT() *MockTransactionResultErrorMessagesReader_Expecter {
	return &MockTransactionResultErrorMessagesReader_Expecter{mock: &_m.Mock}
}

// ByBlockID provides a mock function with given fields: id
func (_m *MockTransactionResultErrorMessagesReader) ByBlockID(id flow.Identifier) ([]flow.TransactionResultErrorMessage, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 []flow.TransactionResultErrorMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]flow.TransactionResultErrorMessage, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []flow.TransactionResultErrorMessage); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.TransactionResultErrorMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionResultErrorMessagesReader_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockTransactionResultErrorMessagesReader_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockTransactionResultErrorMessagesReader_Expecter) ByBlockID(id interface{}) *MockTransactionResultErrorMessagesReader_ByBlockID_Call {
	return &MockTransactionResultErrorMessagesReader_ByBlockID_Call{Call: _e.mock.On("ByBlockID", id)}
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockID_Call) Run(run func(id flow.Identifier)) *MockTransactionResultErrorMessagesReader_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockID_Call) Return(_a0 []flow.TransactionResultErrorMessage, _a1 error) *MockTransactionResultErrorMessagesReader_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) ([]flow.TransactionResultErrorMessage, error)) *MockTransactionResultErrorMessagesReader_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockIDTransactionID provides a mock function with given fields: blockID, transactionID
func (_m *MockTransactionResultErrorMessagesReader) ByBlockIDTransactionID(blockID flow.Identifier, transactionID flow.Identifier) (*flow.TransactionResultErrorMessage, error) {
	ret := _m.Called(blockID, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockIDTransactionID")
	}

	var r0 *flow.TransactionResultErrorMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) (*flow.TransactionResultErrorMessage, error)); ok {
		return rf(blockID, transactionID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) *flow.TransactionResultErrorMessage); ok {
		r0 = rf(blockID, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResultErrorMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, flow.Identifier) error); ok {
		r1 = rf(blockID, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockIDTransactionID'
type MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call struct {
	*mock.Call
}

// ByBlockIDTransactionID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - transactionID flow.Identifier
func (_e *MockTransactionResultErrorMessagesReader_Expecter) ByBlockIDTransactionID(blockID interface{}, transactionID interface{}) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call {
	return &MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call{Call: _e.mock.On("ByBlockIDTransactionID", blockID, transactionID)}
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call) Run(run func(blockID flow.Identifier, transactionID flow.Identifier)) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call) Return(_a0 *flow.TransactionResultErrorMessage, _a1 error) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) (*flow.TransactionResultErrorMessage, error)) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockIDTransactionIndex provides a mock function with given fields: blockID, txIndex
func (_m *MockTransactionResultErrorMessagesReader) ByBlockIDTransactionIndex(blockID flow.Identifier, txIndex uint32) (*flow.TransactionResultErrorMessage, error) {
	ret := _m.Called(blockID, txIndex)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockIDTransactionIndex")
	}

	var r0 *flow.TransactionResultErrorMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint32) (*flow.TransactionResultErrorMessage, error)); ok {
		return rf(blockID, txIndex)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint32) *flow.TransactionResultErrorMessage); ok {
		r0 = rf(blockID, txIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResultErrorMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, uint32) error); ok {
		r1 = rf(blockID, txIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockIDTransactionIndex'
type MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call struct {
	*mock.Call
}

// ByBlockIDTransactionIndex is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - txIndex uint32
func (_e *MockTransactionResultErrorMessagesReader_Expecter) ByBlockIDTransactionIndex(blockID interface{}, txIndex interface{}) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call {
	return &MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call{Call: _e.mock.On("ByBlockIDTransactionIndex", blockID, txIndex)}
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call) Run(run func(blockID flow.Identifier, txIndex uint32)) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(uint32))
	})
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call) Return(_a0 *flow.TransactionResultErrorMessage, _a1 error) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call) RunAndReturn(run func(flow.Identifier, uint32) (*flow.TransactionResultErrorMessage, error)) *MockTransactionResultErrorMessagesReader_ByBlockIDTransactionIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: blockID
func (_m *MockTransactionResultErrorMessagesReader) Exists(blockID flow.Identifier) (bool, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (bool, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionResultErrorMessagesReader_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockTransactionResultErrorMessagesReader_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockTransactionResultErrorMessagesReader_Expecter) Exists(blockID interface{}) *MockTransactionResultErrorMessagesReader_Exists_Call {
	return &MockTransactionResultErrorMessagesReader_Exists_Call{Call: _e.mock.On("Exists", blockID)}
}

func (_c *MockTransactionResultErrorMessagesReader_Exists_Call) Run(run func(blockID flow.Identifier)) *MockTransactionResultErrorMessagesReader_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_Exists_Call) Return(_a0 bool, _a1 error) *MockTransactionResultErrorMessagesReader_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionResultErrorMessagesReader_Exists_Call) RunAndReturn(run func(flow.Identifier) (bool, error)) *MockTransactionResultErrorMessagesReader_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionResultErrorMessagesReader creates a new instance of MockTransactionResultErrorMessagesReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionResultErrorMessagesReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionResultErrorMessagesReader {
	mock := &MockTransactionResultErrorMessagesReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
