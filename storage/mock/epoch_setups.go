// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// EpochSetups is an autogenerated mock type for the EpochSetups type
type EpochSetups struct {
	mock.Mock
}

// BatchStore provides a mock function with given fields: rw, setup
func (_m *EpochSetups) BatchStore(rw storage.ReaderBatchWriter, setup *flow.EpochSetup) error {
	ret := _m.Called(rw, setup)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.ReaderBatchWriter, *flow.EpochSetup) error); ok {
		r0 = rf(rw, setup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByID provides a mock function with given fields: _a0
func (_m *EpochSetups) ByID(_a0 flow.Identifier) (*flow.EpochSetup, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.EpochSetup
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.EpochSetup, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.EpochSetup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochSetup)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEpochSetups creates a new instance of EpochSetups. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEpochSetups(t interface {
	mock.TestingT
	Cleanup(func())
}) *EpochSetups {
	mock := &EpochSetups{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
