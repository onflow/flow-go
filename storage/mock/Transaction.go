// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

type MockTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransaction) EXPECT() *MockTransaction_Expecter {
	return &MockTransaction_Expecter{mock: &_m.Mock}
}

// Set provides a mock function with given fields: key, val
func (_m *MockTransaction) Set(key []byte, val []byte) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransaction_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockTransaction_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key []byte
//   - val []byte
func (_e *MockTransaction_Expecter) Set(key interface{}, val interface{}) *MockTransaction_Set_Call {
	return &MockTransaction_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *MockTransaction_Set_Call) Run(run func(key []byte, val []byte)) *MockTransaction_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockTransaction_Set_Call) Return(_a0 error) *MockTransaction_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Set_Call) RunAndReturn(run func([]byte, []byte) error) *MockTransaction_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransaction creates a new instance of MockTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransaction {
	mock := &MockTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
