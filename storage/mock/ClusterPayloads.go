// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	cluster "github.com/onflow/flow-go/model/cluster"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockClusterPayloads is an autogenerated mock type for the ClusterPayloads type
type MockClusterPayloads struct {
	mock.Mock
}

type MockClusterPayloads_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterPayloads) EXPECT() *MockClusterPayloads_Expecter {
	return &MockClusterPayloads_Expecter{mock: &_m.Mock}
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockClusterPayloads) ByBlockID(blockID flow.Identifier) (*cluster.Payload, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *cluster.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*cluster.Payload, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *cluster.Payload); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.Payload)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPayloads_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockClusterPayloads_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockClusterPayloads_Expecter) ByBlockID(blockID interface{}) *MockClusterPayloads_ByBlockID_Call {
	return &MockClusterPayloads_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockClusterPayloads_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockClusterPayloads_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockClusterPayloads_ByBlockID_Call) Return(_a0 *cluster.Payload, _a1 error) *MockClusterPayloads_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPayloads_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (*cluster.Payload, error)) *MockClusterPayloads_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: blockID, payload
func (_m *MockClusterPayloads) Store(blockID flow.Identifier, payload *cluster.Payload) error {
	ret := _m.Called(blockID, payload)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, *cluster.Payload) error); ok {
		r0 = rf(blockID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterPayloads_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockClusterPayloads_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - payload *cluster.Payload
func (_e *MockClusterPayloads_Expecter) Store(blockID interface{}, payload interface{}) *MockClusterPayloads_Store_Call {
	return &MockClusterPayloads_Store_Call{Call: _e.mock.On("Store", blockID, payload)}
}

func (_c *MockClusterPayloads_Store_Call) Run(run func(blockID flow.Identifier, payload *cluster.Payload)) *MockClusterPayloads_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(*cluster.Payload))
	})
	return _c
}

func (_c *MockClusterPayloads_Store_Call) Return(_a0 error) *MockClusterPayloads_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterPayloads_Store_Call) RunAndReturn(run func(flow.Identifier, *cluster.Payload) error) *MockClusterPayloads_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterPayloads creates a new instance of MockClusterPayloads. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterPayloads(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterPayloads {
	mock := &MockClusterPayloads{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
