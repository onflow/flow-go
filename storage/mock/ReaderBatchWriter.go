// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// MockReaderBatchWriter is an autogenerated mock type for the ReaderBatchWriter type
type MockReaderBatchWriter struct {
	mock.Mock
}

type MockReaderBatchWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReaderBatchWriter) EXPECT() *MockReaderBatchWriter_Expecter {
	return &MockReaderBatchWriter_Expecter{mock: &_m.Mock}
}

// AddCallback provides a mock function with given fields: _a0
func (_m *MockReaderBatchWriter) AddCallback(_a0 func(error)) {
	_m.Called(_a0)
}

// MockReaderBatchWriter_AddCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCallback'
type MockReaderBatchWriter_AddCallback_Call struct {
	*mock.Call
}

// AddCallback is a helper method to define mock.On call
//   - _a0 func(error)
func (_e *MockReaderBatchWriter_Expecter) AddCallback(_a0 interface{}) *MockReaderBatchWriter_AddCallback_Call {
	return &MockReaderBatchWriter_AddCallback_Call{Call: _e.mock.On("AddCallback", _a0)}
}

func (_c *MockReaderBatchWriter_AddCallback_Call) Run(run func(_a0 func(error))) *MockReaderBatchWriter_AddCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(error)))
	})
	return _c
}

func (_c *MockReaderBatchWriter_AddCallback_Call) Return() *MockReaderBatchWriter_AddCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReaderBatchWriter_AddCallback_Call) RunAndReturn(run func(func(error))) *MockReaderBatchWriter_AddCallback_Call {
	_c.Run(run)
	return _c
}

// GlobalReader provides a mock function with no fields
func (_m *MockReaderBatchWriter) GlobalReader() storage.Reader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalReader")
	}

	var r0 storage.Reader
	if rf, ok := ret.Get(0).(func() storage.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Reader)
		}
	}

	return r0
}

// MockReaderBatchWriter_GlobalReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalReader'
type MockReaderBatchWriter_GlobalReader_Call struct {
	*mock.Call
}

// GlobalReader is a helper method to define mock.On call
func (_e *MockReaderBatchWriter_Expecter) GlobalReader() *MockReaderBatchWriter_GlobalReader_Call {
	return &MockReaderBatchWriter_GlobalReader_Call{Call: _e.mock.On("GlobalReader")}
}

func (_c *MockReaderBatchWriter_GlobalReader_Call) Run(run func()) *MockReaderBatchWriter_GlobalReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReaderBatchWriter_GlobalReader_Call) Return(_a0 storage.Reader) *MockReaderBatchWriter_GlobalReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReaderBatchWriter_GlobalReader_Call) RunAndReturn(run func() storage.Reader) *MockReaderBatchWriter_GlobalReader_Call {
	_c.Call.Return(run)
	return _c
}

// Lock provides a mock function with given fields: _a0
func (_m *MockReaderBatchWriter) Lock(_a0 *sync.Mutex) {
	_m.Called(_a0)
}

// MockReaderBatchWriter_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockReaderBatchWriter_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - _a0 *sync.Mutex
func (_e *MockReaderBatchWriter_Expecter) Lock(_a0 interface{}) *MockReaderBatchWriter_Lock_Call {
	return &MockReaderBatchWriter_Lock_Call{Call: _e.mock.On("Lock", _a0)}
}

func (_c *MockReaderBatchWriter_Lock_Call) Run(run func(_a0 *sync.Mutex)) *MockReaderBatchWriter_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sync.Mutex))
	})
	return _c
}

func (_c *MockReaderBatchWriter_Lock_Call) Return() *MockReaderBatchWriter_Lock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReaderBatchWriter_Lock_Call) RunAndReturn(run func(*sync.Mutex)) *MockReaderBatchWriter_Lock_Call {
	_c.Run(run)
	return _c
}

// Writer provides a mock function with no fields
func (_m *MockReaderBatchWriter) Writer() storage.Writer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Writer")
	}

	var r0 storage.Writer
	if rf, ok := ret.Get(0).(func() storage.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Writer)
		}
	}

	return r0
}

// MockReaderBatchWriter_Writer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Writer'
type MockReaderBatchWriter_Writer_Call struct {
	*mock.Call
}

// Writer is a helper method to define mock.On call
func (_e *MockReaderBatchWriter_Expecter) Writer() *MockReaderBatchWriter_Writer_Call {
	return &MockReaderBatchWriter_Writer_Call{Call: _e.mock.On("Writer")}
}

func (_c *MockReaderBatchWriter_Writer_Call) Run(run func()) *MockReaderBatchWriter_Writer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReaderBatchWriter_Writer_Call) Return(_a0 storage.Writer) *MockReaderBatchWriter_Writer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReaderBatchWriter_Writer_Call) RunAndReturn(run func() storage.Writer) *MockReaderBatchWriter_Writer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReaderBatchWriter creates a new instance of MockReaderBatchWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReaderBatchWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReaderBatchWriter {
	mock := &MockReaderBatchWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
