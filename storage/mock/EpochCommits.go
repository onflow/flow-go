// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// MockEpochCommits is an autogenerated mock type for the EpochCommits type
type MockEpochCommits struct {
	mock.Mock
}

type MockEpochCommits_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpochCommits) EXPECT() *MockEpochCommits_Expecter {
	return &MockEpochCommits_Expecter{mock: &_m.Mock}
}

// ByID provides a mock function with given fields: _a0
func (_m *MockEpochCommits) ByID(_a0 flow.Identifier) (*flow.EpochCommit, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.EpochCommit
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.EpochCommit, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.EpochCommit); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.EpochCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpochCommits_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockEpochCommits_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockEpochCommits_Expecter) ByID(_a0 interface{}) *MockEpochCommits_ByID_Call {
	return &MockEpochCommits_ByID_Call{Call: _e.mock.On("ByID", _a0)}
}

func (_c *MockEpochCommits_ByID_Call) Run(run func(_a0 flow.Identifier)) *MockEpochCommits_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockEpochCommits_ByID_Call) Return(_a0 *flow.EpochCommit, _a1 error) *MockEpochCommits_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpochCommits_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.EpochCommit, error)) *MockEpochCommits_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// StoreTx provides a mock function with given fields: commit
func (_m *MockEpochCommits) StoreTx(commit *flow.EpochCommit) func(*transaction.Tx) error {
	ret := _m.Called(commit)

	if len(ret) == 0 {
		panic("no return value specified for StoreTx")
	}

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(*flow.EpochCommit) func(*transaction.Tx) error); ok {
		r0 = rf(commit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

// MockEpochCommits_StoreTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreTx'
type MockEpochCommits_StoreTx_Call struct {
	*mock.Call
}

// StoreTx is a helper method to define mock.On call
//   - commit *flow.EpochCommit
func (_e *MockEpochCommits_Expecter) StoreTx(commit interface{}) *MockEpochCommits_StoreTx_Call {
	return &MockEpochCommits_StoreTx_Call{Call: _e.mock.On("StoreTx", commit)}
}

func (_c *MockEpochCommits_StoreTx_Call) Run(run func(commit *flow.EpochCommit)) *MockEpochCommits_StoreTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.EpochCommit))
	})
	return _c
}

func (_c *MockEpochCommits_StoreTx_Call) Return(_a0 func(*transaction.Tx) error) *MockEpochCommits_StoreTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochCommits_StoreTx_Call) RunAndReturn(run func(*flow.EpochCommit) func(*transaction.Tx) error) *MockEpochCommits_StoreTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEpochCommits creates a new instance of MockEpochCommits. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpochCommits(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpochCommits {
	mock := &MockEpochCommits{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
