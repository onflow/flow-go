// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockHeightIndex is an autogenerated mock type for the HeightIndex type
type MockHeightIndex struct {
	mock.Mock
}

type MockHeightIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeightIndex) EXPECT() *MockHeightIndex_Expecter {
	return &MockHeightIndex_Expecter{mock: &_m.Mock}
}

// FirstHeight provides a mock function with no fields
func (_m *MockHeightIndex) FirstHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FirstHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeightIndex_FirstHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstHeight'
type MockHeightIndex_FirstHeight_Call struct {
	*mock.Call
}

// FirstHeight is a helper method to define mock.On call
func (_e *MockHeightIndex_Expecter) FirstHeight() *MockHeightIndex_FirstHeight_Call {
	return &MockHeightIndex_FirstHeight_Call{Call: _e.mock.On("FirstHeight")}
}

func (_c *MockHeightIndex_FirstHeight_Call) Run(run func()) *MockHeightIndex_FirstHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeightIndex_FirstHeight_Call) Return(_a0 uint64, _a1 error) *MockHeightIndex_FirstHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeightIndex_FirstHeight_Call) RunAndReturn(run func() (uint64, error)) *MockHeightIndex_FirstHeight_Call {
	_c.Call.Return(run)
	return _c
}

// LatestHeight provides a mock function with no fields
func (_m *MockHeightIndex) LatestHeight() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeightIndex_LatestHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestHeight'
type MockHeightIndex_LatestHeight_Call struct {
	*mock.Call
}

// LatestHeight is a helper method to define mock.On call
func (_e *MockHeightIndex_Expecter) LatestHeight() *MockHeightIndex_LatestHeight_Call {
	return &MockHeightIndex_LatestHeight_Call{Call: _e.mock.On("LatestHeight")}
}

func (_c *MockHeightIndex_LatestHeight_Call) Run(run func()) *MockHeightIndex_LatestHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeightIndex_LatestHeight_Call) Return(_a0 uint64, _a1 error) *MockHeightIndex_LatestHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeightIndex_LatestHeight_Call) RunAndReturn(run func() (uint64, error)) *MockHeightIndex_LatestHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SetLatestHeight provides a mock function with given fields: height
func (_m *MockHeightIndex) SetLatestHeight(height uint64) error {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeightIndex_SetLatestHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLatestHeight'
type MockHeightIndex_SetLatestHeight_Call struct {
	*mock.Call
}

// SetLatestHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockHeightIndex_Expecter) SetLatestHeight(height interface{}) *MockHeightIndex_SetLatestHeight_Call {
	return &MockHeightIndex_SetLatestHeight_Call{Call: _e.mock.On("SetLatestHeight", height)}
}

func (_c *MockHeightIndex_SetLatestHeight_Call) Run(run func(height uint64)) *MockHeightIndex_SetLatestHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockHeightIndex_SetLatestHeight_Call) Return(_a0 error) *MockHeightIndex_SetLatestHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeightIndex_SetLatestHeight_Call) RunAndReturn(run func(uint64) error) *MockHeightIndex_SetLatestHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHeightIndex creates a new instance of MockHeightIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeightIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeightIndex {
	mock := &MockHeightIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
