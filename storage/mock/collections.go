// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	lockctx "github.com/jordanschalm/lockctx"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// Collections is an autogenerated mock type for the Collections type
type Collections struct {
	mock.Mock
}

// BatchStoreAndIndexByTransaction provides a mock function with given fields: lctx, collection, batch
func (_m *Collections) BatchStoreAndIndexByTransaction(lctx lockctx.Proof, collection *flow.Collection, batch storage.ReaderBatchWriter) (*flow.LightCollection, error) {
	ret := _m.Called(lctx, collection, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStoreAndIndexByTransaction")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(lockctx.Proof, *flow.Collection, storage.ReaderBatchWriter) (*flow.LightCollection, error)); ok {
		return rf(lctx, collection, batch)
	}
	if rf, ok := ret.Get(0).(func(lockctx.Proof, *flow.Collection, storage.ReaderBatchWriter) *flow.LightCollection); ok {
		r0 = rf(lctx, collection, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(lockctx.Proof, *flow.Collection, storage.ReaderBatchWriter) error); ok {
		r1 = rf(lctx, collection, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByID provides a mock function with given fields: collID
func (_m *Collections) ByID(collID flow.Identifier) (*flow.Collection, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Collection, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Collection); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LightByID provides a mock function with given fields: collID
func (_m *Collections) LightByID(collID flow.Identifier) (*flow.LightCollection, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for LightByID")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.LightCollection, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.LightCollection); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LightByTransactionID provides a mock function with given fields: txID
func (_m *Collections) LightByTransactionID(txID flow.Identifier) (*flow.LightCollection, error) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for LightByTransactionID")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.LightCollection, error)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.LightCollection); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: collID
func (_m *Collections) Remove(collID flow.Identifier) error {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(collID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: collection
func (_m *Collections) Store(collection *flow.Collection) (*flow.LightCollection, error) {
	ret := _m.Called(collection)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.Collection) (*flow.LightCollection, error)); ok {
		return rf(collection)
	}
	if rf, ok := ret.Get(0).(func(*flow.Collection) *flow.LightCollection); ok {
		r0 = rf(collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.Collection) error); ok {
		r1 = rf(collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreAndIndexByTransaction provides a mock function with given fields: lctx, collection
func (_m *Collections) StoreAndIndexByTransaction(lctx lockctx.Proof, collection *flow.Collection) (*flow.LightCollection, error) {
	ret := _m.Called(lctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for StoreAndIndexByTransaction")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(lockctx.Proof, *flow.Collection) (*flow.LightCollection, error)); ok {
		return rf(lctx, collection)
	}
	if rf, ok := ret.Get(0).(func(lockctx.Proof, *flow.Collection) *flow.LightCollection); ok {
		r0 = rf(lctx, collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(lockctx.Proof, *flow.Collection) error); ok {
		r1 = rf(lctx, collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCollections creates a new instance of Collections. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollections(t interface {
	mock.TestingT
	Cleanup(func())
}) *Collections {
	mock := &Collections{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
