// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// ExecutionForkEvidence is an autogenerated mock type for the ExecutionForkEvidence type
type ExecutionForkEvidence struct {
	mock.Mock
}

// Retrieve provides a mock function with no fields
func (_m *ExecutionForkEvidence) Retrieve() ([]*flow.IncorporatedResultSeal, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 []*flow.IncorporatedResultSeal
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*flow.IncorporatedResultSeal, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*flow.IncorporatedResultSeal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.IncorporatedResultSeal)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreIfNotExists provides a mock function with given fields: conflictingSeals
func (_m *ExecutionForkEvidence) StoreIfNotExists(conflictingSeals []*flow.IncorporatedResultSeal) error {
	ret := _m.Called(conflictingSeals)

	if len(ret) == 0 {
		panic("no return value specified for StoreIfNotExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*flow.IncorporatedResultSeal) error); ok {
		r0 = rf(conflictingSeals)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExecutionForkEvidence creates a new instance of ExecutionForkEvidence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionForkEvidence(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionForkEvidence {
	mock := &ExecutionForkEvidence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
