// Code generated by mockery v2.13.0. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// Payloads is an autogenerated mock type for the Payloads type
type Payloads struct {
	mock.Mock
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *Payloads) ByBlockID(blockID flow.Identifier) (*flow.Payload, error) {
	ret := _m.Called(blockID)

	var r0 *flow.Payload
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Payload); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: blockID, payload
func (_m *Payloads) Store(blockID flow.Identifier, payload *flow.Payload) error {
	ret := _m.Called(blockID, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, *flow.Payload) error); ok {
		r0 = rf(blockID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewPayloadsT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPayloads creates a new instance of Payloads. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPayloads(t NewPayloadsT) *Payloads {
	mock := &Payloads{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
