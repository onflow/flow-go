// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	chunks "github.com/onflow/flow-go/model/chunks"
	mock "github.com/stretchr/testify/mock"
)

// MockChunksQueue is an autogenerated mock type for the ChunksQueue type
type MockChunksQueue struct {
	mock.Mock
}

type MockChunksQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunksQueue) EXPECT() *MockChunksQueue_Expecter {
	return &MockChunksQueue_Expecter{mock: &_m.Mock}
}

// AtIndex provides a mock function with given fields: index
func (_m *MockChunksQueue) AtIndex(index uint64) (*chunks.Locator, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for AtIndex")
	}

	var r0 *chunks.Locator
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*chunks.Locator, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) *chunks.Locator); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chunks.Locator)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunksQueue_AtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AtIndex'
type MockChunksQueue_AtIndex_Call struct {
	*mock.Call
}

// AtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *MockChunksQueue_Expecter) AtIndex(index interface{}) *MockChunksQueue_AtIndex_Call {
	return &MockChunksQueue_AtIndex_Call{Call: _e.mock.On("AtIndex", index)}
}

func (_c *MockChunksQueue_AtIndex_Call) Run(run func(index uint64)) *MockChunksQueue_AtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockChunksQueue_AtIndex_Call) Return(_a0 *chunks.Locator, _a1 error) *MockChunksQueue_AtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunksQueue_AtIndex_Call) RunAndReturn(run func(uint64) (*chunks.Locator, error)) *MockChunksQueue_AtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// LatestIndex provides a mock function with no fields
func (_m *MockChunksQueue) LatestIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunksQueue_LatestIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestIndex'
type MockChunksQueue_LatestIndex_Call struct {
	*mock.Call
}

// LatestIndex is a helper method to define mock.On call
func (_e *MockChunksQueue_Expecter) LatestIndex() *MockChunksQueue_LatestIndex_Call {
	return &MockChunksQueue_LatestIndex_Call{Call: _e.mock.On("LatestIndex")}
}

func (_c *MockChunksQueue_LatestIndex_Call) Run(run func()) *MockChunksQueue_LatestIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunksQueue_LatestIndex_Call) Return(_a0 uint64, _a1 error) *MockChunksQueue_LatestIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunksQueue_LatestIndex_Call) RunAndReturn(run func() (uint64, error)) *MockChunksQueue_LatestIndex_Call {
	_c.Call.Return(run)
	return _c
}

// StoreChunkLocator provides a mock function with given fields: locator
func (_m *MockChunksQueue) StoreChunkLocator(locator *chunks.Locator) (bool, error) {
	ret := _m.Called(locator)

	if len(ret) == 0 {
		panic("no return value specified for StoreChunkLocator")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*chunks.Locator) (bool, error)); ok {
		return rf(locator)
	}
	if rf, ok := ret.Get(0).(func(*chunks.Locator) bool); ok {
		r0 = rf(locator)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*chunks.Locator) error); ok {
		r1 = rf(locator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunksQueue_StoreChunkLocator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreChunkLocator'
type MockChunksQueue_StoreChunkLocator_Call struct {
	*mock.Call
}

// StoreChunkLocator is a helper method to define mock.On call
//   - locator *chunks.Locator
func (_e *MockChunksQueue_Expecter) StoreChunkLocator(locator interface{}) *MockChunksQueue_StoreChunkLocator_Call {
	return &MockChunksQueue_StoreChunkLocator_Call{Call: _e.mock.On("StoreChunkLocator", locator)}
}

func (_c *MockChunksQueue_StoreChunkLocator_Call) Run(run func(locator *chunks.Locator)) *MockChunksQueue_StoreChunkLocator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*chunks.Locator))
	})
	return _c
}

func (_c *MockChunksQueue_StoreChunkLocator_Call) Return(_a0 bool, _a1 error) *MockChunksQueue_StoreChunkLocator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunksQueue_StoreChunkLocator_Call) RunAndReturn(run func(*chunks.Locator) (bool, error)) *MockChunksQueue_StoreChunkLocator_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunksQueue creates a new instance of MockChunksQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunksQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunksQueue {
	mock := &MockChunksQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
