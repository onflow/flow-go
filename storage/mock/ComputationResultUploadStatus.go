// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockComputationResultUploadStatus is an autogenerated mock type for the ComputationResultUploadStatus type
type MockComputationResultUploadStatus struct {
	mock.Mock
}

type MockComputationResultUploadStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComputationResultUploadStatus) EXPECT() *MockComputationResultUploadStatus_Expecter {
	return &MockComputationResultUploadStatus_Expecter{mock: &_m.Mock}
}

// ByID provides a mock function with given fields: blockID
func (_m *MockComputationResultUploadStatus) ByID(blockID flow.Identifier) (bool, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (bool, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComputationResultUploadStatus_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockComputationResultUploadStatus_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockComputationResultUploadStatus_Expecter) ByID(blockID interface{}) *MockComputationResultUploadStatus_ByID_Call {
	return &MockComputationResultUploadStatus_ByID_Call{Call: _e.mock.On("ByID", blockID)}
}

func (_c *MockComputationResultUploadStatus_ByID_Call) Run(run func(blockID flow.Identifier)) *MockComputationResultUploadStatus_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockComputationResultUploadStatus_ByID_Call) Return(_a0 bool, _a1 error) *MockComputationResultUploadStatus_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComputationResultUploadStatus_ByID_Call) RunAndReturn(run func(flow.Identifier) (bool, error)) *MockComputationResultUploadStatus_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDsByUploadStatus provides a mock function with given fields: targetUploadStatus
func (_m *MockComputationResultUploadStatus) GetIDsByUploadStatus(targetUploadStatus bool) ([]flow.Identifier, error) {
	ret := _m.Called(targetUploadStatus)

	if len(ret) == 0 {
		panic("no return value specified for GetIDsByUploadStatus")
	}

	var r0 []flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]flow.Identifier, error)); ok {
		return rf(targetUploadStatus)
	}
	if rf, ok := ret.Get(0).(func(bool) []flow.Identifier); ok {
		r0 = rf(targetUploadStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(targetUploadStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComputationResultUploadStatus_GetIDsByUploadStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDsByUploadStatus'
type MockComputationResultUploadStatus_GetIDsByUploadStatus_Call struct {
	*mock.Call
}

// GetIDsByUploadStatus is a helper method to define mock.On call
//   - targetUploadStatus bool
func (_e *MockComputationResultUploadStatus_Expecter) GetIDsByUploadStatus(targetUploadStatus interface{}) *MockComputationResultUploadStatus_GetIDsByUploadStatus_Call {
	return &MockComputationResultUploadStatus_GetIDsByUploadStatus_Call{Call: _e.mock.On("GetIDsByUploadStatus", targetUploadStatus)}
}

func (_c *MockComputationResultUploadStatus_GetIDsByUploadStatus_Call) Run(run func(targetUploadStatus bool)) *MockComputationResultUploadStatus_GetIDsByUploadStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockComputationResultUploadStatus_GetIDsByUploadStatus_Call) Return(_a0 []flow.Identifier, _a1 error) *MockComputationResultUploadStatus_GetIDsByUploadStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComputationResultUploadStatus_GetIDsByUploadStatus_Call) RunAndReturn(run func(bool) ([]flow.Identifier, error)) *MockComputationResultUploadStatus_GetIDsByUploadStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: blockID
func (_m *MockComputationResultUploadStatus) Remove(blockID flow.Identifier) error {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputationResultUploadStatus_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockComputationResultUploadStatus_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockComputationResultUploadStatus_Expecter) Remove(blockID interface{}) *MockComputationResultUploadStatus_Remove_Call {
	return &MockComputationResultUploadStatus_Remove_Call{Call: _e.mock.On("Remove", blockID)}
}

func (_c *MockComputationResultUploadStatus_Remove_Call) Run(run func(blockID flow.Identifier)) *MockComputationResultUploadStatus_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockComputationResultUploadStatus_Remove_Call) Return(_a0 error) *MockComputationResultUploadStatus_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputationResultUploadStatus_Remove_Call) RunAndReturn(run func(flow.Identifier) error) *MockComputationResultUploadStatus_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: blockID, wasUploadCompleted
func (_m *MockComputationResultUploadStatus) Upsert(blockID flow.Identifier, wasUploadCompleted bool) error {
	ret := _m.Called(blockID, wasUploadCompleted)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, bool) error); ok {
		r0 = rf(blockID, wasUploadCompleted)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComputationResultUploadStatus_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockComputationResultUploadStatus_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - wasUploadCompleted bool
func (_e *MockComputationResultUploadStatus_Expecter) Upsert(blockID interface{}, wasUploadCompleted interface{}) *MockComputationResultUploadStatus_Upsert_Call {
	return &MockComputationResultUploadStatus_Upsert_Call{Call: _e.mock.On("Upsert", blockID, wasUploadCompleted)}
}

func (_c *MockComputationResultUploadStatus_Upsert_Call) Run(run func(blockID flow.Identifier, wasUploadCompleted bool)) *MockComputationResultUploadStatus_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(bool))
	})
	return _c
}

func (_c *MockComputationResultUploadStatus_Upsert_Call) Return(_a0 error) *MockComputationResultUploadStatus_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComputationResultUploadStatus_Upsert_Call) RunAndReturn(run func(flow.Identifier, bool) error) *MockComputationResultUploadStatus_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComputationResultUploadStatus creates a new instance of MockComputationResultUploadStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComputationResultUploadStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComputationResultUploadStatus {
	mock := &MockComputationResultUploadStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
