// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockServiceEvents is an autogenerated mock type for the ServiceEvents type
type MockServiceEvents struct {
	mock.Mock
}

type MockServiceEvents_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceEvents) EXPECT() *MockServiceEvents_Expecter {
	return &MockServiceEvents_Expecter{mock: &_m.Mock}
}

// BatchRemoveByBlockID provides a mock function with given fields: blockID, batch
func (_m *MockServiceEvents) BatchRemoveByBlockID(blockID flow.Identifier, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemoveByBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceEvents_BatchRemoveByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRemoveByBlockID'
type MockServiceEvents_BatchRemoveByBlockID_Call struct {
	*mock.Call
}

// BatchRemoveByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - batch storage.ReaderBatchWriter
func (_e *MockServiceEvents_Expecter) BatchRemoveByBlockID(blockID interface{}, batch interface{}) *MockServiceEvents_BatchRemoveByBlockID_Call {
	return &MockServiceEvents_BatchRemoveByBlockID_Call{Call: _e.mock.On("BatchRemoveByBlockID", blockID, batch)}
}

func (_c *MockServiceEvents_BatchRemoveByBlockID_Call) Run(run func(blockID flow.Identifier, batch storage.ReaderBatchWriter)) *MockServiceEvents_BatchRemoveByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockServiceEvents_BatchRemoveByBlockID_Call) Return(_a0 error) *MockServiceEvents_BatchRemoveByBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceEvents_BatchRemoveByBlockID_Call) RunAndReturn(run func(flow.Identifier, storage.ReaderBatchWriter) error) *MockServiceEvents_BatchRemoveByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// BatchStore provides a mock function with given fields: blockID, events, batch
func (_m *MockServiceEvents) BatchStore(blockID flow.Identifier, events []flow.Event, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, events, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, []flow.Event, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, events, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceEvents_BatchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStore'
type MockServiceEvents_BatchStore_Call struct {
	*mock.Call
}

// BatchStore is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - events []flow.Event
//   - batch storage.ReaderBatchWriter
func (_e *MockServiceEvents_Expecter) BatchStore(blockID interface{}, events interface{}, batch interface{}) *MockServiceEvents_BatchStore_Call {
	return &MockServiceEvents_BatchStore_Call{Call: _e.mock.On("BatchStore", blockID, events, batch)}
}

func (_c *MockServiceEvents_BatchStore_Call) Run(run func(blockID flow.Identifier, events []flow.Event, batch storage.ReaderBatchWriter)) *MockServiceEvents_BatchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].([]flow.Event), args[2].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockServiceEvents_BatchStore_Call) Return(_a0 error) *MockServiceEvents_BatchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceEvents_BatchStore_Call) RunAndReturn(run func(flow.Identifier, []flow.Event, storage.ReaderBatchWriter) error) *MockServiceEvents_BatchStore_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockServiceEvents) ByBlockID(blockID flow.Identifier) ([]flow.Event, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 []flow.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]flow.Event, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []flow.Event); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceEvents_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockServiceEvents_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockServiceEvents_Expecter) ByBlockID(blockID interface{}) *MockServiceEvents_ByBlockID_Call {
	return &MockServiceEvents_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockServiceEvents_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockServiceEvents_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockServiceEvents_ByBlockID_Call) Return(_a0 []flow.Event, _a1 error) *MockServiceEvents_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceEvents_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) ([]flow.Event, error)) *MockServiceEvents_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceEvents creates a new instance of MockServiceEvents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceEvents(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceEvents {
	mock := &MockServiceEvents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
