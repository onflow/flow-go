// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockLedger is an autogenerated mock type for the Ledger type
type MockLedger struct {
	mock.Mock
}

type MockLedger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLedger) EXPECT() *MockLedger_Expecter {
	return &MockLedger_Expecter{mock: &_m.Mock}
}

// EmptyStateCommitment provides a mock function with no fields
func (_m *MockLedger) EmptyStateCommitment() flow.StateCommitment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EmptyStateCommitment")
	}

	var r0 flow.StateCommitment
	if rf, ok := ret.Get(0).(func() flow.StateCommitment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	return r0
}

// MockLedger_EmptyStateCommitment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmptyStateCommitment'
type MockLedger_EmptyStateCommitment_Call struct {
	*mock.Call
}

// EmptyStateCommitment is a helper method to define mock.On call
func (_e *MockLedger_Expecter) EmptyStateCommitment() *MockLedger_EmptyStateCommitment_Call {
	return &MockLedger_EmptyStateCommitment_Call{Call: _e.mock.On("EmptyStateCommitment")}
}

func (_c *MockLedger_EmptyStateCommitment_Call) Run(run func()) *MockLedger_EmptyStateCommitment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLedger_EmptyStateCommitment_Call) Return(_a0 flow.StateCommitment) *MockLedger_EmptyStateCommitment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLedger_EmptyStateCommitment_Call) RunAndReturn(run func() flow.StateCommitment) *MockLedger_EmptyStateCommitment_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisters provides a mock function with given fields: registerIDs, stateCommitment
func (_m *MockLedger) GetRegisters(registerIDs []flow.RegisterID, stateCommitment flow.StateCommitment) ([][]byte, error) {
	ret := _m.Called(registerIDs, stateCommitment)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisters")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, flow.StateCommitment) ([][]byte, error)); ok {
		return rf(registerIDs, stateCommitment)
	}
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, flow.StateCommitment) [][]byte); ok {
		r0 = rf(registerIDs, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]flow.RegisterID, flow.StateCommitment) error); ok {
		r1 = rf(registerIDs, stateCommitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLedger_GetRegisters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisters'
type MockLedger_GetRegisters_Call struct {
	*mock.Call
}

// GetRegisters is a helper method to define mock.On call
//   - registerIDs []flow.RegisterID
//   - stateCommitment flow.StateCommitment
func (_e *MockLedger_Expecter) GetRegisters(registerIDs interface{}, stateCommitment interface{}) *MockLedger_GetRegisters_Call {
	return &MockLedger_GetRegisters_Call{Call: _e.mock.On("GetRegisters", registerIDs, stateCommitment)}
}

func (_c *MockLedger_GetRegisters_Call) Run(run func(registerIDs []flow.RegisterID, stateCommitment flow.StateCommitment)) *MockLedger_GetRegisters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.RegisterID), args[1].(flow.StateCommitment))
	})
	return _c
}

func (_c *MockLedger_GetRegisters_Call) Return(values [][]byte, err error) *MockLedger_GetRegisters_Call {
	_c.Call.Return(values, err)
	return _c
}

func (_c *MockLedger_GetRegisters_Call) RunAndReturn(run func([]flow.RegisterID, flow.StateCommitment) ([][]byte, error)) *MockLedger_GetRegisters_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegistersWithProof provides a mock function with given fields: registerIDs, stateCommitment
func (_m *MockLedger) GetRegistersWithProof(registerIDs []flow.RegisterID, stateCommitment flow.StateCommitment) ([][]byte, [][]byte, error) {
	ret := _m.Called(registerIDs, stateCommitment)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistersWithProof")
	}

	var r0 [][]byte
	var r1 [][]byte
	var r2 error
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, flow.StateCommitment) ([][]byte, [][]byte, error)); ok {
		return rf(registerIDs, stateCommitment)
	}
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, flow.StateCommitment) [][]byte); ok {
		r0 = rf(registerIDs, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]flow.RegisterID, flow.StateCommitment) [][]byte); ok {
		r1 = rf(registerIDs, stateCommitment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([][]byte)
		}
	}

	if rf, ok := ret.Get(2).(func([]flow.RegisterID, flow.StateCommitment) error); ok {
		r2 = rf(registerIDs, stateCommitment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLedger_GetRegistersWithProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistersWithProof'
type MockLedger_GetRegistersWithProof_Call struct {
	*mock.Call
}

// GetRegistersWithProof is a helper method to define mock.On call
//   - registerIDs []flow.RegisterID
//   - stateCommitment flow.StateCommitment
func (_e *MockLedger_Expecter) GetRegistersWithProof(registerIDs interface{}, stateCommitment interface{}) *MockLedger_GetRegistersWithProof_Call {
	return &MockLedger_GetRegistersWithProof_Call{Call: _e.mock.On("GetRegistersWithProof", registerIDs, stateCommitment)}
}

func (_c *MockLedger_GetRegistersWithProof_Call) Run(run func(registerIDs []flow.RegisterID, stateCommitment flow.StateCommitment)) *MockLedger_GetRegistersWithProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.RegisterID), args[1].(flow.StateCommitment))
	})
	return _c
}

func (_c *MockLedger_GetRegistersWithProof_Call) Return(values [][]byte, proofs [][]byte, err error) *MockLedger_GetRegistersWithProof_Call {
	_c.Call.Return(values, proofs, err)
	return _c
}

func (_c *MockLedger_GetRegistersWithProof_Call) RunAndReturn(run func([]flow.RegisterID, flow.StateCommitment) ([][]byte, [][]byte, error)) *MockLedger_GetRegistersWithProof_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRegisters provides a mock function with given fields: registerIDs, values, stateCommitment
func (_m *MockLedger) UpdateRegisters(registerIDs []flow.RegisterID, values [][]byte, stateCommitment flow.StateCommitment) (flow.StateCommitment, error) {
	ret := _m.Called(registerIDs, values, stateCommitment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRegisters")
	}

	var r0 flow.StateCommitment
	var r1 error
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, [][]byte, flow.StateCommitment) (flow.StateCommitment, error)); ok {
		return rf(registerIDs, values, stateCommitment)
	}
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, [][]byte, flow.StateCommitment) flow.StateCommitment); ok {
		r0 = rf(registerIDs, values, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	if rf, ok := ret.Get(1).(func([]flow.RegisterID, [][]byte, flow.StateCommitment) error); ok {
		r1 = rf(registerIDs, values, stateCommitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLedger_UpdateRegisters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRegisters'
type MockLedger_UpdateRegisters_Call struct {
	*mock.Call
}

// UpdateRegisters is a helper method to define mock.On call
//   - registerIDs []flow.RegisterID
//   - values [][]byte
//   - stateCommitment flow.StateCommitment
func (_e *MockLedger_Expecter) UpdateRegisters(registerIDs interface{}, values interface{}, stateCommitment interface{}) *MockLedger_UpdateRegisters_Call {
	return &MockLedger_UpdateRegisters_Call{Call: _e.mock.On("UpdateRegisters", registerIDs, values, stateCommitment)}
}

func (_c *MockLedger_UpdateRegisters_Call) Run(run func(registerIDs []flow.RegisterID, values [][]byte, stateCommitment flow.StateCommitment)) *MockLedger_UpdateRegisters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.RegisterID), args[1].([][]byte), args[2].(flow.StateCommitment))
	})
	return _c
}

func (_c *MockLedger_UpdateRegisters_Call) Return(newStateCommitment flow.StateCommitment, err error) *MockLedger_UpdateRegisters_Call {
	_c.Call.Return(newStateCommitment, err)
	return _c
}

func (_c *MockLedger_UpdateRegisters_Call) RunAndReturn(run func([]flow.RegisterID, [][]byte, flow.StateCommitment) (flow.StateCommitment, error)) *MockLedger_UpdateRegisters_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRegistersWithProof provides a mock function with given fields: registerIDs, values, stateCommitment
func (_m *MockLedger) UpdateRegistersWithProof(registerIDs []flow.RegisterID, values [][]byte, stateCommitment flow.StateCommitment) (flow.StateCommitment, [][]byte, error) {
	ret := _m.Called(registerIDs, values, stateCommitment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRegistersWithProof")
	}

	var r0 flow.StateCommitment
	var r1 [][]byte
	var r2 error
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, [][]byte, flow.StateCommitment) (flow.StateCommitment, [][]byte, error)); ok {
		return rf(registerIDs, values, stateCommitment)
	}
	if rf, ok := ret.Get(0).(func([]flow.RegisterID, [][]byte, flow.StateCommitment) flow.StateCommitment); ok {
		r0 = rf(registerIDs, values, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	if rf, ok := ret.Get(1).(func([]flow.RegisterID, [][]byte, flow.StateCommitment) [][]byte); ok {
		r1 = rf(registerIDs, values, stateCommitment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([][]byte)
		}
	}

	if rf, ok := ret.Get(2).(func([]flow.RegisterID, [][]byte, flow.StateCommitment) error); ok {
		r2 = rf(registerIDs, values, stateCommitment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLedger_UpdateRegistersWithProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRegistersWithProof'
type MockLedger_UpdateRegistersWithProof_Call struct {
	*mock.Call
}

// UpdateRegistersWithProof is a helper method to define mock.On call
//   - registerIDs []flow.RegisterID
//   - values [][]byte
//   - stateCommitment flow.StateCommitment
func (_e *MockLedger_Expecter) UpdateRegistersWithProof(registerIDs interface{}, values interface{}, stateCommitment interface{}) *MockLedger_UpdateRegistersWithProof_Call {
	return &MockLedger_UpdateRegistersWithProof_Call{Call: _e.mock.On("UpdateRegistersWithProof", registerIDs, values, stateCommitment)}
}

func (_c *MockLedger_UpdateRegistersWithProof_Call) Run(run func(registerIDs []flow.RegisterID, values [][]byte, stateCommitment flow.StateCommitment)) *MockLedger_UpdateRegistersWithProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.RegisterID), args[1].([][]byte), args[2].(flow.StateCommitment))
	})
	return _c
}

func (_c *MockLedger_UpdateRegistersWithProof_Call) Return(newStateCommitment flow.StateCommitment, proofs [][]byte, err error) *MockLedger_UpdateRegistersWithProof_Call {
	_c.Call.Return(newStateCommitment, proofs, err)
	return _c
}

func (_c *MockLedger_UpdateRegistersWithProof_Call) RunAndReturn(run func([]flow.RegisterID, [][]byte, flow.StateCommitment) (flow.StateCommitment, [][]byte, error)) *MockLedger_UpdateRegistersWithProof_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLedger creates a new instance of MockLedger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLedger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLedger {
	mock := &MockLedger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
