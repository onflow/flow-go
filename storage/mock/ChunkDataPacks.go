// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockChunkDataPacks is an autogenerated mock type for the ChunkDataPacks type
type MockChunkDataPacks struct {
	mock.Mock
}

type MockChunkDataPacks_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkDataPacks) EXPECT() *MockChunkDataPacks_Expecter {
	return &MockChunkDataPacks_Expecter{mock: &_m.Mock}
}

// BatchRemove provides a mock function with given fields: chunkID, batch
func (_m *MockChunkDataPacks) BatchRemove(chunkID flow.Identifier, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(chunkID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(chunkID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChunkDataPacks_BatchRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRemove'
type MockChunkDataPacks_BatchRemove_Call struct {
	*mock.Call
}

// BatchRemove is a helper method to define mock.On call
//   - chunkID flow.Identifier
//   - batch storage.ReaderBatchWriter
func (_e *MockChunkDataPacks_Expecter) BatchRemove(chunkID interface{}, batch interface{}) *MockChunkDataPacks_BatchRemove_Call {
	return &MockChunkDataPacks_BatchRemove_Call{Call: _e.mock.On("BatchRemove", chunkID, batch)}
}

func (_c *MockChunkDataPacks_BatchRemove_Call) Run(run func(chunkID flow.Identifier, batch storage.ReaderBatchWriter)) *MockChunkDataPacks_BatchRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockChunkDataPacks_BatchRemove_Call) Return(_a0 error) *MockChunkDataPacks_BatchRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_BatchRemove_Call) RunAndReturn(run func(flow.Identifier, storage.ReaderBatchWriter) error) *MockChunkDataPacks_BatchRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ByChunkID provides a mock function with given fields: chunkID
func (_m *MockChunkDataPacks) ByChunkID(chunkID flow.Identifier) (*flow.ChunkDataPack, error) {
	ret := _m.Called(chunkID)

	if len(ret) == 0 {
		panic("no return value specified for ByChunkID")
	}

	var r0 *flow.ChunkDataPack
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ChunkDataPack, error)); ok {
		return rf(chunkID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ChunkDataPack); ok {
		r0 = rf(chunkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ChunkDataPack)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(chunkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChunkDataPacks_ByChunkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByChunkID'
type MockChunkDataPacks_ByChunkID_Call struct {
	*mock.Call
}

// ByChunkID is a helper method to define mock.On call
//   - chunkID flow.Identifier
func (_e *MockChunkDataPacks_Expecter) ByChunkID(chunkID interface{}) *MockChunkDataPacks_ByChunkID_Call {
	return &MockChunkDataPacks_ByChunkID_Call{Call: _e.mock.On("ByChunkID", chunkID)}
}

func (_c *MockChunkDataPacks_ByChunkID_Call) Run(run func(chunkID flow.Identifier)) *MockChunkDataPacks_ByChunkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkDataPacks_ByChunkID_Call) Return(_a0 *flow.ChunkDataPack, _a1 error) *MockChunkDataPacks_ByChunkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChunkDataPacks_ByChunkID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ChunkDataPack, error)) *MockChunkDataPacks_ByChunkID_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: cs
func (_m *MockChunkDataPacks) Remove(cs []flow.Identifier) error {
	ret := _m.Called(cs)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]flow.Identifier) error); ok {
		r0 = rf(cs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChunkDataPacks_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockChunkDataPacks_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - cs []flow.Identifier
func (_e *MockChunkDataPacks_Expecter) Remove(cs interface{}) *MockChunkDataPacks_Remove_Call {
	return &MockChunkDataPacks_Remove_Call{Call: _e.mock.On("Remove", cs)}
}

func (_c *MockChunkDataPacks_Remove_Call) Run(run func(cs []flow.Identifier)) *MockChunkDataPacks_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]flow.Identifier))
	})
	return _c
}

func (_c *MockChunkDataPacks_Remove_Call) Return(_a0 error) *MockChunkDataPacks_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_Remove_Call) RunAndReturn(run func([]flow.Identifier) error) *MockChunkDataPacks_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: cs
func (_m *MockChunkDataPacks) Store(cs []*flow.ChunkDataPack) error {
	ret := _m.Called(cs)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*flow.ChunkDataPack) error); ok {
		r0 = rf(cs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChunkDataPacks_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockChunkDataPacks_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - cs []*flow.ChunkDataPack
func (_e *MockChunkDataPacks_Expecter) Store(cs interface{}) *MockChunkDataPacks_Store_Call {
	return &MockChunkDataPacks_Store_Call{Call: _e.mock.On("Store", cs)}
}

func (_c *MockChunkDataPacks_Store_Call) Run(run func(cs []*flow.ChunkDataPack)) *MockChunkDataPacks_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*flow.ChunkDataPack))
	})
	return _c
}

func (_c *MockChunkDataPacks_Store_Call) Return(_a0 error) *MockChunkDataPacks_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPacks_Store_Call) RunAndReturn(run func([]*flow.ChunkDataPack) error) *MockChunkDataPacks_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkDataPacks creates a new instance of MockChunkDataPacks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkDataPacks(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkDataPacks {
	mock := &MockChunkDataPacks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
