// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// ExecutionResults is an autogenerated mock type for the ExecutionResults type
type ExecutionResults struct {
	mock.Mock
}

// BatchIndex provides a mock function with given fields: blockID, resultID, batch
func (_m *ExecutionResults) BatchIndex(blockID flow.Identifier, resultID flow.Identifier, batch storage.BatchStorage) error {
	ret := _m.Called(blockID, resultID, batch)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier, storage.BatchStorage) error); ok {
		r0 = rf(blockID, resultID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchStore provides a mock function with given fields: result, batch
func (_m *ExecutionResults) BatchStore(result *flow.ExecutionResult, batch storage.BatchStorage) error {
	ret := _m.Called(result, batch)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult, storage.BatchStorage) error); ok {
		r0 = rf(result, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *ExecutionResults) ByBlockID(blockID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(blockID)

	var r0 *flow.ExecutionResult
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByID provides a mock function with given fields: resultID
func (_m *ExecutionResults) ByID(resultID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(resultID)

	var r0 *flow.ExecutionResult
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(resultID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByIDTx provides a mock function with given fields: resultID
func (_m *ExecutionResults) ByIDTx(resultID flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error) {
	ret := _m.Called(resultID)

	var r0 func(*transaction.Tx) (*flow.ExecutionResult, error)
	if rf, ok := ret.Get(0).(func(flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error)); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) (*flow.ExecutionResult, error))
		}
	}

	return r0
}

// ForceIndex provides a mock function with given fields: blockID, resultID
func (_m *ExecutionResults) ForceIndex(blockID flow.Identifier, resultID flow.Identifier) error {
	ret := _m.Called(blockID, resultID)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(blockID, resultID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Index provides a mock function with given fields: blockID, resultID
func (_m *ExecutionResults) Index(blockID flow.Identifier, resultID flow.Identifier) error {
	ret := _m.Called(blockID, resultID)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(blockID, resultID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: result
func (_m *ExecutionResults) Store(result *flow.ExecutionResult) error {
	ret := _m.Called(result)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
