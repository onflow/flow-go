// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	cluster "github.com/onflow/flow-go/model/cluster"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// ClusterBlocks is an autogenerated mock type for the ClusterBlocks type
type ClusterBlocks struct {
	mock.Mock
}

// ByID provides a mock function with given fields: blockID
func (_m *ClusterBlocks) ByID(blockID flow.Identifier) (*flow.GenericBlock[cluster.Payload], error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.GenericBlock[cluster.Payload]
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.GenericBlock[cluster.Payload], error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.GenericBlock[cluster.Payload]); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.GenericBlock[cluster.Payload])
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposalByHeight provides a mock function with given fields: height
func (_m *ClusterBlocks) ProposalByHeight(height uint64) (*cluster.Proposal, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for ProposalByHeight")
	}

	var r0 *cluster.Proposal
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*cluster.Proposal, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *cluster.Proposal); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.Proposal)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposalByID provides a mock function with given fields: blockID
func (_m *ClusterBlocks) ProposalByID(blockID flow.Identifier) (*cluster.Proposal, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ProposalByID")
	}

	var r0 *cluster.Proposal
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*cluster.Proposal, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *cluster.Proposal); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.Proposal)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClusterBlocks creates a new instance of ClusterBlocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterBlocks {
	mock := &ClusterBlocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
