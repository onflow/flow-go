// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockMyExecutionReceipts is an autogenerated mock type for the MyExecutionReceipts type
type MockMyExecutionReceipts struct {
	mock.Mock
}

type MockMyExecutionReceipts_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMyExecutionReceipts) EXPECT() *MockMyExecutionReceipts_Expecter {
	return &MockMyExecutionReceipts_Expecter{mock: &_m.Mock}
}

// BatchRemoveIndexByBlockID provides a mock function with given fields: blockID, batch
func (_m *MockMyExecutionReceipts) BatchRemoveIndexByBlockID(blockID flow.Identifier, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemoveIndexByBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRemoveIndexByBlockID'
type MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call struct {
	*mock.Call
}

// BatchRemoveIndexByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - batch storage.ReaderBatchWriter
func (_e *MockMyExecutionReceipts_Expecter) BatchRemoveIndexByBlockID(blockID interface{}, batch interface{}) *MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call {
	return &MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call{Call: _e.mock.On("BatchRemoveIndexByBlockID", blockID, batch)}
}

func (_c *MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call) Run(run func(blockID flow.Identifier, batch storage.ReaderBatchWriter)) *MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call) Return(_a0 error) *MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call) RunAndReturn(run func(flow.Identifier, storage.ReaderBatchWriter) error) *MockMyExecutionReceipts_BatchRemoveIndexByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// BatchStoreMyReceipt provides a mock function with given fields: receipt, batch
func (_m *MockMyExecutionReceipts) BatchStoreMyReceipt(receipt *flow.ExecutionReceipt, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(receipt, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStoreMyReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt, storage.ReaderBatchWriter) error); ok {
		r0 = rf(receipt, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMyExecutionReceipts_BatchStoreMyReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStoreMyReceipt'
type MockMyExecutionReceipts_BatchStoreMyReceipt_Call struct {
	*mock.Call
}

// BatchStoreMyReceipt is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
//   - batch storage.ReaderBatchWriter
func (_e *MockMyExecutionReceipts_Expecter) BatchStoreMyReceipt(receipt interface{}, batch interface{}) *MockMyExecutionReceipts_BatchStoreMyReceipt_Call {
	return &MockMyExecutionReceipts_BatchStoreMyReceipt_Call{Call: _e.mock.On("BatchStoreMyReceipt", receipt, batch)}
}

func (_c *MockMyExecutionReceipts_BatchStoreMyReceipt_Call) Run(run func(receipt *flow.ExecutionReceipt, batch storage.ReaderBatchWriter)) *MockMyExecutionReceipts_BatchStoreMyReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockMyExecutionReceipts_BatchStoreMyReceipt_Call) Return(_a0 error) *MockMyExecutionReceipts_BatchStoreMyReceipt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMyExecutionReceipts_BatchStoreMyReceipt_Call) RunAndReturn(run func(*flow.ExecutionReceipt, storage.ReaderBatchWriter) error) *MockMyExecutionReceipts_BatchStoreMyReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// MyReceipt provides a mock function with given fields: blockID
func (_m *MockMyExecutionReceipts) MyReceipt(blockID flow.Identifier) (*flow.ExecutionReceipt, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for MyReceipt")
	}

	var r0 *flow.ExecutionReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ExecutionReceipt, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionReceipt); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionReceipt)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMyExecutionReceipts_MyReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MyReceipt'
type MockMyExecutionReceipts_MyReceipt_Call struct {
	*mock.Call
}

// MyReceipt is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockMyExecutionReceipts_Expecter) MyReceipt(blockID interface{}) *MockMyExecutionReceipts_MyReceipt_Call {
	return &MockMyExecutionReceipts_MyReceipt_Call{Call: _e.mock.On("MyReceipt", blockID)}
}

func (_c *MockMyExecutionReceipts_MyReceipt_Call) Run(run func(blockID flow.Identifier)) *MockMyExecutionReceipts_MyReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockMyExecutionReceipts_MyReceipt_Call) Return(_a0 *flow.ExecutionReceipt, _a1 error) *MockMyExecutionReceipts_MyReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMyExecutionReceipts_MyReceipt_Call) RunAndReturn(run func(flow.Identifier) (*flow.ExecutionReceipt, error)) *MockMyExecutionReceipts_MyReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMyExecutionReceipts creates a new instance of MockMyExecutionReceipts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMyExecutionReceipts(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMyExecutionReceipts {
	mock := &MockMyExecutionReceipts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
