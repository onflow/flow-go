// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockCommits is an autogenerated mock type for the Commits type
type MockCommits struct {
	mock.Mock
}

type MockCommits_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommits) EXPECT() *MockCommits_Expecter {
	return &MockCommits_Expecter{mock: &_m.Mock}
}

// BatchRemoveByBlockID provides a mock function with given fields: blockID, batch
func (_m *MockCommits) BatchRemoveByBlockID(blockID flow.Identifier, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemoveByBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommits_BatchRemoveByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRemoveByBlockID'
type MockCommits_BatchRemoveByBlockID_Call struct {
	*mock.Call
}

// BatchRemoveByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - batch storage.ReaderBatchWriter
func (_e *MockCommits_Expecter) BatchRemoveByBlockID(blockID interface{}, batch interface{}) *MockCommits_BatchRemoveByBlockID_Call {
	return &MockCommits_BatchRemoveByBlockID_Call{Call: _e.mock.On("BatchRemoveByBlockID", blockID, batch)}
}

func (_c *MockCommits_BatchRemoveByBlockID_Call) Run(run func(blockID flow.Identifier, batch storage.ReaderBatchWriter)) *MockCommits_BatchRemoveByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockCommits_BatchRemoveByBlockID_Call) Return(_a0 error) *MockCommits_BatchRemoveByBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommits_BatchRemoveByBlockID_Call) RunAndReturn(run func(flow.Identifier, storage.ReaderBatchWriter) error) *MockCommits_BatchRemoveByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// BatchStore provides a mock function with given fields: blockID, commit, batch
func (_m *MockCommits) BatchStore(blockID flow.Identifier, commit flow.StateCommitment, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, commit, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.StateCommitment, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, commit, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommits_BatchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStore'
type MockCommits_BatchStore_Call struct {
	*mock.Call
}

// BatchStore is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - commit flow.StateCommitment
//   - batch storage.ReaderBatchWriter
func (_e *MockCommits_Expecter) BatchStore(blockID interface{}, commit interface{}, batch interface{}) *MockCommits_BatchStore_Call {
	return &MockCommits_BatchStore_Call{Call: _e.mock.On("BatchStore", blockID, commit, batch)}
}

func (_c *MockCommits_BatchStore_Call) Run(run func(blockID flow.Identifier, commit flow.StateCommitment, batch storage.ReaderBatchWriter)) *MockCommits_BatchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.StateCommitment), args[2].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockCommits_BatchStore_Call) Return(_a0 error) *MockCommits_BatchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommits_BatchStore_Call) RunAndReturn(run func(flow.Identifier, flow.StateCommitment, storage.ReaderBatchWriter) error) *MockCommits_BatchStore_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockCommits) ByBlockID(blockID flow.Identifier) (flow.StateCommitment, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 flow.StateCommitment
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.StateCommitment, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.StateCommitment); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommits_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockCommits_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockCommits_Expecter) ByBlockID(blockID interface{}) *MockCommits_ByBlockID_Call {
	return &MockCommits_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockCommits_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockCommits_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCommits_ByBlockID_Call) Return(_a0 flow.StateCommitment, _a1 error) *MockCommits_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommits_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (flow.StateCommitment, error)) *MockCommits_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: blockID, commit
func (_m *MockCommits) Store(blockID flow.Identifier, commit flow.StateCommitment) error {
	ret := _m.Called(blockID, commit)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.StateCommitment) error); ok {
		r0 = rf(blockID, commit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommits_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockCommits_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - commit flow.StateCommitment
func (_e *MockCommits_Expecter) Store(blockID interface{}, commit interface{}) *MockCommits_Store_Call {
	return &MockCommits_Store_Call{Call: _e.mock.On("Store", blockID, commit)}
}

func (_c *MockCommits_Store_Call) Run(run func(blockID flow.Identifier, commit flow.StateCommitment)) *MockCommits_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.StateCommitment))
	})
	return _c
}

func (_c *MockCommits_Store_Call) Return(_a0 error) *MockCommits_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommits_Store_Call) RunAndReturn(run func(flow.Identifier, flow.StateCommitment) error) *MockCommits_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommits creates a new instance of MockCommits. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommits(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommits {
	mock := &MockCommits{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
