// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// MockExecutionResults is an autogenerated mock type for the ExecutionResults type
type MockExecutionResults struct {
	mock.Mock
}

type MockExecutionResults_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionResults) EXPECT() *MockExecutionResults_Expecter {
	return &MockExecutionResults_Expecter{mock: &_m.Mock}
}

// BatchIndex provides a mock function with given fields: blockID, resultID, batch
func (_m *MockExecutionResults) BatchIndex(blockID flow.Identifier, resultID flow.Identifier, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, resultID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, resultID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionResults_BatchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchIndex'
type MockExecutionResults_BatchIndex_Call struct {
	*mock.Call
}

// BatchIndex is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - resultID flow.Identifier
//   - batch storage.ReaderBatchWriter
func (_e *MockExecutionResults_Expecter) BatchIndex(blockID interface{}, resultID interface{}, batch interface{}) *MockExecutionResults_BatchIndex_Call {
	return &MockExecutionResults_BatchIndex_Call{Call: _e.mock.On("BatchIndex", blockID, resultID, batch)}
}

func (_c *MockExecutionResults_BatchIndex_Call) Run(run func(blockID flow.Identifier, resultID flow.Identifier, batch storage.ReaderBatchWriter)) *MockExecutionResults_BatchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier), args[2].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockExecutionResults_BatchIndex_Call) Return(_a0 error) *MockExecutionResults_BatchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResults_BatchIndex_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier, storage.ReaderBatchWriter) error) *MockExecutionResults_BatchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// BatchRemoveIndexByBlockID provides a mock function with given fields: blockID, batch
func (_m *MockExecutionResults) BatchRemoveIndexByBlockID(blockID flow.Identifier, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(blockID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemoveIndexByBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, storage.ReaderBatchWriter) error); ok {
		r0 = rf(blockID, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionResults_BatchRemoveIndexByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchRemoveIndexByBlockID'
type MockExecutionResults_BatchRemoveIndexByBlockID_Call struct {
	*mock.Call
}

// BatchRemoveIndexByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - batch storage.ReaderBatchWriter
func (_e *MockExecutionResults_Expecter) BatchRemoveIndexByBlockID(blockID interface{}, batch interface{}) *MockExecutionResults_BatchRemoveIndexByBlockID_Call {
	return &MockExecutionResults_BatchRemoveIndexByBlockID_Call{Call: _e.mock.On("BatchRemoveIndexByBlockID", blockID, batch)}
}

func (_c *MockExecutionResults_BatchRemoveIndexByBlockID_Call) Run(run func(blockID flow.Identifier, batch storage.ReaderBatchWriter)) *MockExecutionResults_BatchRemoveIndexByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockExecutionResults_BatchRemoveIndexByBlockID_Call) Return(_a0 error) *MockExecutionResults_BatchRemoveIndexByBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResults_BatchRemoveIndexByBlockID_Call) RunAndReturn(run func(flow.Identifier, storage.ReaderBatchWriter) error) *MockExecutionResults_BatchRemoveIndexByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// BatchStore provides a mock function with given fields: result, batch
func (_m *MockExecutionResults) BatchStore(result *flow.ExecutionResult, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(result, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult, storage.ReaderBatchWriter) error); ok {
		r0 = rf(result, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionResults_BatchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStore'
type MockExecutionResults_BatchStore_Call struct {
	*mock.Call
}

// BatchStore is a helper method to define mock.On call
//   - result *flow.ExecutionResult
//   - batch storage.ReaderBatchWriter
func (_e *MockExecutionResults_Expecter) BatchStore(result interface{}, batch interface{}) *MockExecutionResults_BatchStore_Call {
	return &MockExecutionResults_BatchStore_Call{Call: _e.mock.On("BatchStore", result, batch)}
}

func (_c *MockExecutionResults_BatchStore_Call) Run(run func(result *flow.ExecutionResult, batch storage.ReaderBatchWriter)) *MockExecutionResults_BatchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionResult), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockExecutionResults_BatchStore_Call) Return(_a0 error) *MockExecutionResults_BatchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResults_BatchStore_Call) RunAndReturn(run func(*flow.ExecutionResult, storage.ReaderBatchWriter) error) *MockExecutionResults_BatchStore_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockExecutionResults) ByBlockID(blockID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionResults_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockExecutionResults_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockExecutionResults_Expecter) ByBlockID(blockID interface{}) *MockExecutionResults_ByBlockID_Call {
	return &MockExecutionResults_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockExecutionResults_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockExecutionResults_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResults_ByBlockID_Call) Return(_a0 *flow.ExecutionResult, _a1 error) *MockExecutionResults_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionResults_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ExecutionResult, error)) *MockExecutionResults_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: resultID
func (_m *MockExecutionResults) ByID(resultID flow.Identifier) (*flow.ExecutionResult, error) {
	ret := _m.Called(resultID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ExecutionResult, error)); ok {
		return rf(resultID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionResult); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(resultID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionResults_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockExecutionResults_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - resultID flow.Identifier
func (_e *MockExecutionResults_Expecter) ByID(resultID interface{}) *MockExecutionResults_ByID_Call {
	return &MockExecutionResults_ByID_Call{Call: _e.mock.On("ByID", resultID)}
}

func (_c *MockExecutionResults_ByID_Call) Run(run func(resultID flow.Identifier)) *MockExecutionResults_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResults_ByID_Call) Return(_a0 *flow.ExecutionResult, _a1 error) *MockExecutionResults_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionResults_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ExecutionResult, error)) *MockExecutionResults_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// ByIDTx provides a mock function with given fields: resultID
func (_m *MockExecutionResults) ByIDTx(resultID flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error) {
	ret := _m.Called(resultID)

	if len(ret) == 0 {
		panic("no return value specified for ByIDTx")
	}

	var r0 func(*transaction.Tx) (*flow.ExecutionResult, error)
	if rf, ok := ret.Get(0).(func(flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error)); ok {
		r0 = rf(resultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) (*flow.ExecutionResult, error))
		}
	}

	return r0
}

// MockExecutionResults_ByIDTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByIDTx'
type MockExecutionResults_ByIDTx_Call struct {
	*mock.Call
}

// ByIDTx is a helper method to define mock.On call
//   - resultID flow.Identifier
func (_e *MockExecutionResults_Expecter) ByIDTx(resultID interface{}) *MockExecutionResults_ByIDTx_Call {
	return &MockExecutionResults_ByIDTx_Call{Call: _e.mock.On("ByIDTx", resultID)}
}

func (_c *MockExecutionResults_ByIDTx_Call) Run(run func(resultID flow.Identifier)) *MockExecutionResults_ByIDTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResults_ByIDTx_Call) Return(_a0 func(*transaction.Tx) (*flow.ExecutionResult, error)) *MockExecutionResults_ByIDTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResults_ByIDTx_Call) RunAndReturn(run func(flow.Identifier) func(*transaction.Tx) (*flow.ExecutionResult, error)) *MockExecutionResults_ByIDTx_Call {
	_c.Call.Return(run)
	return _c
}

// ForceIndex provides a mock function with given fields: blockID, resultID
func (_m *MockExecutionResults) ForceIndex(blockID flow.Identifier, resultID flow.Identifier) error {
	ret := _m.Called(blockID, resultID)

	if len(ret) == 0 {
		panic("no return value specified for ForceIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(blockID, resultID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionResults_ForceIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceIndex'
type MockExecutionResults_ForceIndex_Call struct {
	*mock.Call
}

// ForceIndex is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - resultID flow.Identifier
func (_e *MockExecutionResults_Expecter) ForceIndex(blockID interface{}, resultID interface{}) *MockExecutionResults_ForceIndex_Call {
	return &MockExecutionResults_ForceIndex_Call{Call: _e.mock.On("ForceIndex", blockID, resultID)}
}

func (_c *MockExecutionResults_ForceIndex_Call) Run(run func(blockID flow.Identifier, resultID flow.Identifier)) *MockExecutionResults_ForceIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResults_ForceIndex_Call) Return(_a0 error) *MockExecutionResults_ForceIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResults_ForceIndex_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) error) *MockExecutionResults_ForceIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: blockID, resultID
func (_m *MockExecutionResults) Index(blockID flow.Identifier, resultID flow.Identifier) error {
	ret := _m.Called(blockID, resultID)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, flow.Identifier) error); ok {
		r0 = rf(blockID, resultID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionResults_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockExecutionResults_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - blockID flow.Identifier
//   - resultID flow.Identifier
func (_e *MockExecutionResults_Expecter) Index(blockID interface{}, resultID interface{}) *MockExecutionResults_Index_Call {
	return &MockExecutionResults_Index_Call{Call: _e.mock.On("Index", blockID, resultID)}
}

func (_c *MockExecutionResults_Index_Call) Run(run func(blockID flow.Identifier, resultID flow.Identifier)) *MockExecutionResults_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionResults_Index_Call) Return(_a0 error) *MockExecutionResults_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResults_Index_Call) RunAndReturn(run func(flow.Identifier, flow.Identifier) error) *MockExecutionResults_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: result
func (_m *MockExecutionResults) Store(result *flow.ExecutionResult) error {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionResult) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionResults_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockExecutionResults_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - result *flow.ExecutionResult
func (_e *MockExecutionResults_Expecter) Store(result interface{}) *MockExecutionResults_Store_Call {
	return &MockExecutionResults_Store_Call{Call: _e.mock.On("Store", result)}
}

func (_c *MockExecutionResults_Store_Call) Run(run func(result *flow.ExecutionResult)) *MockExecutionResults_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionResult))
	})
	return _c
}

func (_c *MockExecutionResults_Store_Call) Return(_a0 error) *MockExecutionResults_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionResults_Store_Call) RunAndReturn(run func(*flow.ExecutionResult) error) *MockExecutionResults_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionResults creates a new instance of MockExecutionResults. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionResults(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionResults {
	mock := &MockExecutionResults{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
