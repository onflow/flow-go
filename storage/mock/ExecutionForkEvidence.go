// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockExecutionForkEvidence is an autogenerated mock type for the ExecutionForkEvidence type
type MockExecutionForkEvidence struct {
	mock.Mock
}

type MockExecutionForkEvidence_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionForkEvidence) EXPECT() *MockExecutionForkEvidence_Expecter {
	return &MockExecutionForkEvidence_Expecter{mock: &_m.Mock}
}

// Retrieve provides a mock function with no fields
func (_m *MockExecutionForkEvidence) Retrieve() ([]*flow.IncorporatedResultSeal, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 []*flow.IncorporatedResultSeal
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*flow.IncorporatedResultSeal, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*flow.IncorporatedResultSeal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.IncorporatedResultSeal)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionForkEvidence_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockExecutionForkEvidence_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
func (_e *MockExecutionForkEvidence_Expecter) Retrieve() *MockExecutionForkEvidence_Retrieve_Call {
	return &MockExecutionForkEvidence_Retrieve_Call{Call: _e.mock.On("Retrieve")}
}

func (_c *MockExecutionForkEvidence_Retrieve_Call) Run(run func()) *MockExecutionForkEvidence_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionForkEvidence_Retrieve_Call) Return(_a0 []*flow.IncorporatedResultSeal, _a1 error) *MockExecutionForkEvidence_Retrieve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionForkEvidence_Retrieve_Call) RunAndReturn(run func() ([]*flow.IncorporatedResultSeal, error)) *MockExecutionForkEvidence_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// StoreIfNotExists provides a mock function with given fields: conflictingSeals
func (_m *MockExecutionForkEvidence) StoreIfNotExists(conflictingSeals []*flow.IncorporatedResultSeal) error {
	ret := _m.Called(conflictingSeals)

	if len(ret) == 0 {
		panic("no return value specified for StoreIfNotExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*flow.IncorporatedResultSeal) error); ok {
		r0 = rf(conflictingSeals)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionForkEvidence_StoreIfNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreIfNotExists'
type MockExecutionForkEvidence_StoreIfNotExists_Call struct {
	*mock.Call
}

// StoreIfNotExists is a helper method to define mock.On call
//   - conflictingSeals []*flow.IncorporatedResultSeal
func (_e *MockExecutionForkEvidence_Expecter) StoreIfNotExists(conflictingSeals interface{}) *MockExecutionForkEvidence_StoreIfNotExists_Call {
	return &MockExecutionForkEvidence_StoreIfNotExists_Call{Call: _e.mock.On("StoreIfNotExists", conflictingSeals)}
}

func (_c *MockExecutionForkEvidence_StoreIfNotExists_Call) Run(run func(conflictingSeals []*flow.IncorporatedResultSeal)) *MockExecutionForkEvidence_StoreIfNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*flow.IncorporatedResultSeal))
	})
	return _c
}

func (_c *MockExecutionForkEvidence_StoreIfNotExists_Call) Return(_a0 error) *MockExecutionForkEvidence_StoreIfNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionForkEvidence_StoreIfNotExists_Call) RunAndReturn(run func([]*flow.IncorporatedResultSeal) error) *MockExecutionForkEvidence_StoreIfNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionForkEvidence creates a new instance of MockExecutionForkEvidence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionForkEvidence(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionForkEvidence {
	mock := &MockExecutionForkEvidence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
