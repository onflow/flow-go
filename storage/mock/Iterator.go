// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockIterator is an autogenerated mock type for the Iterator type
type MockIterator struct {
	mock.Mock
}

type MockIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIterator) EXPECT() *MockIterator_Expecter {
	return &MockIterator_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockIterator) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIterator_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIterator_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIterator_Expecter) Close() *MockIterator_Close_Call {
	return &MockIterator_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIterator_Close_Call) Run(run func()) *MockIterator_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_Close_Call) Return(_a0 error) *MockIterator_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterator_Close_Call) RunAndReturn(run func() error) *MockIterator_Close_Call {
	_c.Call.Return(run)
	return _c
}

// First provides a mock function with no fields
func (_m *MockIterator) First() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIterator_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type MockIterator_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
func (_e *MockIterator_Expecter) First() *MockIterator_First_Call {
	return &MockIterator_First_Call{Call: _e.mock.On("First")}
}

func (_c *MockIterator_First_Call) Run(run func()) *MockIterator_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_First_Call) Return(_a0 bool) *MockIterator_First_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterator_First_Call) RunAndReturn(run func() bool) *MockIterator_First_Call {
	_c.Call.Return(run)
	return _c
}

// IterItem provides a mock function with no fields
func (_m *MockIterator) IterItem() storage.IterItem {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IterItem")
	}

	var r0 storage.IterItem
	if rf, ok := ret.Get(0).(func() storage.IterItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.IterItem)
		}
	}

	return r0
}

// MockIterator_IterItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterItem'
type MockIterator_IterItem_Call struct {
	*mock.Call
}

// IterItem is a helper method to define mock.On call
func (_e *MockIterator_Expecter) IterItem() *MockIterator_IterItem_Call {
	return &MockIterator_IterItem_Call{Call: _e.mock.On("IterItem")}
}

func (_c *MockIterator_IterItem_Call) Run(run func()) *MockIterator_IterItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_IterItem_Call) Return(_a0 storage.IterItem) *MockIterator_IterItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterator_IterItem_Call) RunAndReturn(run func() storage.IterItem) *MockIterator_IterItem_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockIterator) Next() {
	_m.Called()
}

// MockIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockIterator_Expecter) Next() *MockIterator_Next_Call {
	return &MockIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockIterator_Next_Call) Run(run func()) *MockIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_Next_Call) Return() *MockIterator_Next_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIterator_Next_Call) RunAndReturn(run func()) *MockIterator_Next_Call {
	_c.Run(run)
	return _c
}

// Valid provides a mock function with no fields
func (_m *MockIterator) Valid() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Valid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIterator_Valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Valid'
type MockIterator_Valid_Call struct {
	*mock.Call
}

// Valid is a helper method to define mock.On call
func (_e *MockIterator_Expecter) Valid() *MockIterator_Valid_Call {
	return &MockIterator_Valid_Call{Call: _e.mock.On("Valid")}
}

func (_c *MockIterator_Valid_Call) Run(run func()) *MockIterator_Valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_Valid_Call) Return(_a0 bool) *MockIterator_Valid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterator_Valid_Call) RunAndReturn(run func() bool) *MockIterator_Valid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIterator creates a new instance of MockIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIterator {
	mock := &MockIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
