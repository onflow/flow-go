// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockCollectionsReader is an autogenerated mock type for the CollectionsReader type
type MockCollectionsReader struct {
	mock.Mock
}

type MockCollectionsReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionsReader) EXPECT() *MockCollectionsReader_Expecter {
	return &MockCollectionsReader_Expecter{mock: &_m.Mock}
}

// ByID provides a mock function with given fields: collID
func (_m *MockCollectionsReader) ByID(collID flow.Identifier) (*flow.Collection, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Collection, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Collection); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollectionsReader_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockCollectionsReader_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockCollectionsReader_Expecter) ByID(collID interface{}) *MockCollectionsReader_ByID_Call {
	return &MockCollectionsReader_ByID_Call{Call: _e.mock.On("ByID", collID)}
}

func (_c *MockCollectionsReader_ByID_Call) Run(run func(collID flow.Identifier)) *MockCollectionsReader_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCollectionsReader_ByID_Call) Return(_a0 *flow.Collection, _a1 error) *MockCollectionsReader_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollectionsReader_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Collection, error)) *MockCollectionsReader_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// LightByID provides a mock function with given fields: collID
func (_m *MockCollectionsReader) LightByID(collID flow.Identifier) (*flow.LightCollection, error) {
	ret := _m.Called(collID)

	if len(ret) == 0 {
		panic("no return value specified for LightByID")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.LightCollection, error)); ok {
		return rf(collID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.LightCollection); ok {
		r0 = rf(collID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(collID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollectionsReader_LightByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LightByID'
type MockCollectionsReader_LightByID_Call struct {
	*mock.Call
}

// LightByID is a helper method to define mock.On call
//   - collID flow.Identifier
func (_e *MockCollectionsReader_Expecter) LightByID(collID interface{}) *MockCollectionsReader_LightByID_Call {
	return &MockCollectionsReader_LightByID_Call{Call: _e.mock.On("LightByID", collID)}
}

func (_c *MockCollectionsReader_LightByID_Call) Run(run func(collID flow.Identifier)) *MockCollectionsReader_LightByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCollectionsReader_LightByID_Call) Return(_a0 *flow.LightCollection, _a1 error) *MockCollectionsReader_LightByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollectionsReader_LightByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.LightCollection, error)) *MockCollectionsReader_LightByID_Call {
	_c.Call.Return(run)
	return _c
}

// LightByTransactionID provides a mock function with given fields: txID
func (_m *MockCollectionsReader) LightByTransactionID(txID flow.Identifier) (*flow.LightCollection, error) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for LightByTransactionID")
	}

	var r0 *flow.LightCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.LightCollection, error)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.LightCollection); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.LightCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollectionsReader_LightByTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LightByTransactionID'
type MockCollectionsReader_LightByTransactionID_Call struct {
	*mock.Call
}

// LightByTransactionID is a helper method to define mock.On call
//   - txID flow.Identifier
func (_e *MockCollectionsReader_Expecter) LightByTransactionID(txID interface{}) *MockCollectionsReader_LightByTransactionID_Call {
	return &MockCollectionsReader_LightByTransactionID_Call{Call: _e.mock.On("LightByTransactionID", txID)}
}

func (_c *MockCollectionsReader_LightByTransactionID_Call) Run(run func(txID flow.Identifier)) *MockCollectionsReader_LightByTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockCollectionsReader_LightByTransactionID_Call) Return(_a0 *flow.LightCollection, _a1 error) *MockCollectionsReader_LightByTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollectionsReader_LightByTransactionID_Call) RunAndReturn(run func(flow.Identifier) (*flow.LightCollection, error)) *MockCollectionsReader_LightByTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollectionsReader creates a new instance of MockCollectionsReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectionsReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectionsReader {
	mock := &MockCollectionsReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
