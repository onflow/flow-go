// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	badger "github.com/dgraph-io/badger/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockBatchStorage is an autogenerated mock type for the BatchStorage type
type MockBatchStorage struct {
	mock.Mock
}

type MockBatchStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBatchStorage) EXPECT() *MockBatchStorage_Expecter {
	return &MockBatchStorage_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with no fields
func (_m *MockBatchStorage) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBatchStorage_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockBatchStorage_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockBatchStorage_Expecter) Flush() *MockBatchStorage_Flush_Call {
	return &MockBatchStorage_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockBatchStorage_Flush_Call) Run(run func()) *MockBatchStorage_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBatchStorage_Flush_Call) Return(_a0 error) *MockBatchStorage_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBatchStorage_Flush_Call) RunAndReturn(run func() error) *MockBatchStorage_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// GetWriter provides a mock function with no fields
func (_m *MockBatchStorage) GetWriter() *badger.WriteBatch {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWriter")
	}

	var r0 *badger.WriteBatch
	if rf, ok := ret.Get(0).(func() *badger.WriteBatch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*badger.WriteBatch)
		}
	}

	return r0
}

// MockBatchStorage_GetWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWriter'
type MockBatchStorage_GetWriter_Call struct {
	*mock.Call
}

// GetWriter is a helper method to define mock.On call
func (_e *MockBatchStorage_Expecter) GetWriter() *MockBatchStorage_GetWriter_Call {
	return &MockBatchStorage_GetWriter_Call{Call: _e.mock.On("GetWriter")}
}

func (_c *MockBatchStorage_GetWriter_Call) Run(run func()) *MockBatchStorage_GetWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBatchStorage_GetWriter_Call) Return(_a0 *badger.WriteBatch) *MockBatchStorage_GetWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBatchStorage_GetWriter_Call) RunAndReturn(run func() *badger.WriteBatch) *MockBatchStorage_GetWriter_Call {
	_c.Call.Return(run)
	return _c
}

// OnSucceed provides a mock function with given fields: callback
func (_m *MockBatchStorage) OnSucceed(callback func()) {
	_m.Called(callback)
}

// MockBatchStorage_OnSucceed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSucceed'
type MockBatchStorage_OnSucceed_Call struct {
	*mock.Call
}

// OnSucceed is a helper method to define mock.On call
//   - callback func()
func (_e *MockBatchStorage_Expecter) OnSucceed(callback interface{}) *MockBatchStorage_OnSucceed_Call {
	return &MockBatchStorage_OnSucceed_Call{Call: _e.mock.On("OnSucceed", callback)}
}

func (_c *MockBatchStorage_OnSucceed_Call) Run(run func(callback func())) *MockBatchStorage_OnSucceed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockBatchStorage_OnSucceed_Call) Return() *MockBatchStorage_OnSucceed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBatchStorage_OnSucceed_Call) RunAndReturn(run func(func())) *MockBatchStorage_OnSucceed_Call {
	_c.Run(run)
	return _c
}

// NewMockBatchStorage creates a new instance of MockBatchStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBatchStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBatchStorage {
	mock := &MockBatchStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
