// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	storage "github.com/onflow/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockConsumerProgressInitializer is an autogenerated mock type for the ConsumerProgressInitializer type
type MockConsumerProgressInitializer struct {
	mock.Mock
}

type MockConsumerProgressInitializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerProgressInitializer) EXPECT() *MockConsumerProgressInitializer_Expecter {
	return &MockConsumerProgressInitializer_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function with given fields: defaultIndex
func (_m *MockConsumerProgressInitializer) Initialize(defaultIndex uint64) (storage.ConsumerProgress, error) {
	ret := _m.Called(defaultIndex)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 storage.ConsumerProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (storage.ConsumerProgress, error)); ok {
		return rf(defaultIndex)
	}
	if rf, ok := ret.Get(0).(func(uint64) storage.ConsumerProgress); ok {
		r0 = rf(defaultIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ConsumerProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(defaultIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerProgressInitializer_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockConsumerProgressInitializer_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - defaultIndex uint64
func (_e *MockConsumerProgressInitializer_Expecter) Initialize(defaultIndex interface{}) *MockConsumerProgressInitializer_Initialize_Call {
	return &MockConsumerProgressInitializer_Initialize_Call{Call: _e.mock.On("Initialize", defaultIndex)}
}

func (_c *MockConsumerProgressInitializer_Initialize_Call) Run(run func(defaultIndex uint64)) *MockConsumerProgressInitializer_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockConsumerProgressInitializer_Initialize_Call) Return(_a0 storage.ConsumerProgress, _a1 error) *MockConsumerProgressInitializer_Initialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerProgressInitializer_Initialize_Call) RunAndReturn(run func(uint64) (storage.ConsumerProgress, error)) *MockConsumerProgressInitializer_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumerProgressInitializer creates a new instance of MockConsumerProgressInitializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerProgressInitializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerProgressInitializer {
	mock := &MockConsumerProgressInitializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
