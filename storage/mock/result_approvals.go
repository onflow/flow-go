// Code generated by mockery. DO NOT EDIT.

package mock

import (
	lockctx "github.com/jordanschalm/lockctx"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// ResultApprovals is an autogenerated mock type for the ResultApprovals type
type ResultApprovals struct {
	mock.Mock
}

// ByChunk provides a mock function with given fields: resultID, chunkIndex
func (_m *ResultApprovals) ByChunk(resultID flow.Identifier, chunkIndex uint64) (*flow.ResultApproval, error) {
	ret := _m.Called(resultID, chunkIndex)

	if len(ret) == 0 {
		panic("no return value specified for ByChunk")
	}

	var r0 *flow.ResultApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64) (*flow.ResultApproval, error)); ok {
		return rf(resultID, chunkIndex)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64) *flow.ResultApproval); ok {
		r0 = rf(resultID, chunkIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ResultApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, uint64) error); ok {
		r1 = rf(resultID, chunkIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByID provides a mock function with given fields: approvalID
func (_m *ResultApprovals) ByID(approvalID flow.Identifier) (*flow.ResultApproval, error) {
	ret := _m.Called(approvalID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.ResultApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ResultApproval, error)); ok {
		return rf(approvalID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ResultApproval); ok {
		r0 = rf(approvalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ResultApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(approvalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreMyApproval provides a mock function with given fields: approval
func (_m *ResultApprovals) StoreMyApproval(approval *flow.ResultApproval) func(lockctx.Proof) error {
	ret := _m.Called(approval)

	if len(ret) == 0 {
		panic("no return value specified for StoreMyApproval")
	}

	var r0 func(lockctx.Proof) error
	if rf, ok := ret.Get(0).(func(*flow.ResultApproval) func(lockctx.Proof) error); ok {
		r0 = rf(approval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(lockctx.Proof) error)
		}
	}

	return r0
}

// NewResultApprovals creates a new instance of ResultApprovals. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResultApprovals(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResultApprovals {
	mock := &ResultApprovals{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
