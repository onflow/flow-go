// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockHeaders is an autogenerated mock type for the Headers type
type MockHeaders struct {
	mock.Mock
}

type MockHeaders_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeaders) EXPECT() *MockHeaders_Expecter {
	return &MockHeaders_Expecter{mock: &_m.Mock}
}

// BlockIDByHeight provides a mock function with given fields: height
func (_m *MockHeaders) BlockIDByHeight(height uint64) (flow.Identifier, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for BlockIDByHeight")
	}

	var r0 flow.Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (flow.Identifier, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) flow.Identifier); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeaders_BlockIDByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockIDByHeight'
type MockHeaders_BlockIDByHeight_Call struct {
	*mock.Call
}

// BlockIDByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockHeaders_Expecter) BlockIDByHeight(height interface{}) *MockHeaders_BlockIDByHeight_Call {
	return &MockHeaders_BlockIDByHeight_Call{Call: _e.mock.On("BlockIDByHeight", height)}
}

func (_c *MockHeaders_BlockIDByHeight_Call) Run(run func(height uint64)) *MockHeaders_BlockIDByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockHeaders_BlockIDByHeight_Call) Return(_a0 flow.Identifier, _a1 error) *MockHeaders_BlockIDByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeaders_BlockIDByHeight_Call) RunAndReturn(run func(uint64) (flow.Identifier, error)) *MockHeaders_BlockIDByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockHeaders) ByBlockID(blockID flow.Identifier) (*flow.Header, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.Header, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Header); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeaders_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockHeaders_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockHeaders_Expecter) ByBlockID(blockID interface{}) *MockHeaders_ByBlockID_Call {
	return &MockHeaders_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockHeaders_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockHeaders_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockHeaders_ByBlockID_Call) Return(_a0 *flow.Header, _a1 error) *MockHeaders_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeaders_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (*flow.Header, error)) *MockHeaders_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByHeight provides a mock function with given fields: height
func (_m *MockHeaders) ByHeight(height uint64) (*flow.Header, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for ByHeight")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*flow.Header, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *flow.Header); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeaders_ByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByHeight'
type MockHeaders_ByHeight_Call struct {
	*mock.Call
}

// ByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockHeaders_Expecter) ByHeight(height interface{}) *MockHeaders_ByHeight_Call {
	return &MockHeaders_ByHeight_Call{Call: _e.mock.On("ByHeight", height)}
}

func (_c *MockHeaders_ByHeight_Call) Run(run func(height uint64)) *MockHeaders_ByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockHeaders_ByHeight_Call) Return(_a0 *flow.Header, _a1 error) *MockHeaders_ByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeaders_ByHeight_Call) RunAndReturn(run func(uint64) (*flow.Header, error)) *MockHeaders_ByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ByParentID provides a mock function with given fields: parentID
func (_m *MockHeaders) ByParentID(parentID flow.Identifier) ([]*flow.Header, error) {
	ret := _m.Called(parentID)

	if len(ret) == 0 {
		panic("no return value specified for ByParentID")
	}

	var r0 []*flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]*flow.Header, error)); ok {
		return rf(parentID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []*flow.Header); ok {
		r0 = rf(parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeaders_ByParentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByParentID'
type MockHeaders_ByParentID_Call struct {
	*mock.Call
}

// ByParentID is a helper method to define mock.On call
//   - parentID flow.Identifier
func (_e *MockHeaders_Expecter) ByParentID(parentID interface{}) *MockHeaders_ByParentID_Call {
	return &MockHeaders_ByParentID_Call{Call: _e.mock.On("ByParentID", parentID)}
}

func (_c *MockHeaders_ByParentID_Call) Run(run func(parentID flow.Identifier)) *MockHeaders_ByParentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockHeaders_ByParentID_Call) Return(_a0 []*flow.Header, _a1 error) *MockHeaders_ByParentID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeaders_ByParentID_Call) RunAndReturn(run func(flow.Identifier) ([]*flow.Header, error)) *MockHeaders_ByParentID_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: blockID
func (_m *MockHeaders) Exists(blockID flow.Identifier) (bool, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (bool, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHeaders_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockHeaders_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockHeaders_Expecter) Exists(blockID interface{}) *MockHeaders_Exists_Call {
	return &MockHeaders_Exists_Call{Call: _e.mock.On("Exists", blockID)}
}

func (_c *MockHeaders_Exists_Call) Run(run func(blockID flow.Identifier)) *MockHeaders_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockHeaders_Exists_Call) Return(_a0 bool, _a1 error) *MockHeaders_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHeaders_Exists_Call) RunAndReturn(run func(flow.Identifier) (bool, error)) *MockHeaders_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: header
func (_m *MockHeaders) Store(header *flow.Header) error {
	ret := _m.Called(header)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Header) error); ok {
		r0 = rf(header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHeaders_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockHeaders_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - header *flow.Header
func (_e *MockHeaders_Expecter) Store(header interface{}) *MockHeaders_Store_Call {
	return &MockHeaders_Store_Call{Call: _e.mock.On("Store", header)}
}

func (_c *MockHeaders_Store_Call) Run(run func(header *flow.Header)) *MockHeaders_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header))
	})
	return _c
}

func (_c *MockHeaders_Store_Call) Return(_a0 error) *MockHeaders_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHeaders_Store_Call) RunAndReturn(run func(*flow.Header) error) *MockHeaders_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHeaders creates a new instance of MockHeaders. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeaders(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeaders {
	mock := &MockHeaders{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
