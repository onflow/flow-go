// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// MockQuorumCertificates is an autogenerated mock type for the QuorumCertificates type
type MockQuorumCertificates struct {
	mock.Mock
}

type MockQuorumCertificates_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuorumCertificates) EXPECT() *MockQuorumCertificates_Expecter {
	return &MockQuorumCertificates_Expecter{mock: &_m.Mock}
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockQuorumCertificates) ByBlockID(blockID flow.Identifier) (*flow.QuorumCertificate, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 *flow.QuorumCertificate
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.QuorumCertificate, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.QuorumCertificate); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.QuorumCertificate)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuorumCertificates_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockQuorumCertificates_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockQuorumCertificates_Expecter) ByBlockID(blockID interface{}) *MockQuorumCertificates_ByBlockID_Call {
	return &MockQuorumCertificates_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockQuorumCertificates_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockQuorumCertificates_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockQuorumCertificates_ByBlockID_Call) Return(_a0 *flow.QuorumCertificate, _a1 error) *MockQuorumCertificates_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuorumCertificates_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (*flow.QuorumCertificate, error)) *MockQuorumCertificates_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// StoreTx provides a mock function with given fields: qc
func (_m *MockQuorumCertificates) StoreTx(qc *flow.QuorumCertificate) func(*transaction.Tx) error {
	ret := _m.Called(qc)

	if len(ret) == 0 {
		panic("no return value specified for StoreTx")
	}

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(*flow.QuorumCertificate) func(*transaction.Tx) error); ok {
		r0 = rf(qc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

// MockQuorumCertificates_StoreTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreTx'
type MockQuorumCertificates_StoreTx_Call struct {
	*mock.Call
}

// StoreTx is a helper method to define mock.On call
//   - qc *flow.QuorumCertificate
func (_e *MockQuorumCertificates_Expecter) StoreTx(qc interface{}) *MockQuorumCertificates_StoreTx_Call {
	return &MockQuorumCertificates_StoreTx_Call{Call: _e.mock.On("StoreTx", qc)}
}

func (_c *MockQuorumCertificates_StoreTx_Call) Run(run func(qc *flow.QuorumCertificate)) *MockQuorumCertificates_StoreTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.QuorumCertificate))
	})
	return _c
}

func (_c *MockQuorumCertificates_StoreTx_Call) Return(_a0 func(*transaction.Tx) error) *MockQuorumCertificates_StoreTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuorumCertificates_StoreTx_Call) RunAndReturn(run func(*flow.QuorumCertificate) func(*transaction.Tx) error) *MockQuorumCertificates_StoreTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuorumCertificates creates a new instance of MockQuorumCertificates. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuorumCertificates(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuorumCertificates {
	mock := &MockQuorumCertificates{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
