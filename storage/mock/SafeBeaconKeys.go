// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	crypto "github.com/onflow/crypto"
	mock "github.com/stretchr/testify/mock"
)

// MockSafeBeaconKeys is an autogenerated mock type for the SafeBeaconKeys type
type MockSafeBeaconKeys struct {
	mock.Mock
}

type MockSafeBeaconKeys_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSafeBeaconKeys) EXPECT() *MockSafeBeaconKeys_Expecter {
	return &MockSafeBeaconKeys_Expecter{mock: &_m.Mock}
}

// RetrieveMyBeaconPrivateKey provides a mock function with given fields: epochCounter
func (_m *MockSafeBeaconKeys) RetrieveMyBeaconPrivateKey(epochCounter uint64) (crypto.PrivateKey, bool, error) {
	ret := _m.Called(epochCounter)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveMyBeaconPrivateKey")
	}

	var r0 crypto.PrivateKey
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (crypto.PrivateKey, bool, error)); ok {
		return rf(epochCounter)
	}
	if rf, ok := ret.Get(0).(func(uint64) crypto.PrivateKey); ok {
		r0 = rf(epochCounter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(epochCounter)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(epochCounter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveMyBeaconPrivateKey'
type MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call struct {
	*mock.Call
}

// RetrieveMyBeaconPrivateKey is a helper method to define mock.On call
//   - epochCounter uint64
func (_e *MockSafeBeaconKeys_Expecter) RetrieveMyBeaconPrivateKey(epochCounter interface{}) *MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call {
	return &MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call{Call: _e.mock.On("RetrieveMyBeaconPrivateKey", epochCounter)}
}

func (_c *MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call) Run(run func(epochCounter uint64)) *MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call) Return(key crypto.PrivateKey, safe bool, err error) *MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call {
	_c.Call.Return(key, safe, err)
	return _c
}

func (_c *MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call) RunAndReturn(run func(uint64) (crypto.PrivateKey, bool, error)) *MockSafeBeaconKeys_RetrieveMyBeaconPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSafeBeaconKeys creates a new instance of MockSafeBeaconKeys. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSafeBeaconKeys(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSafeBeaconKeys {
	mock := &MockSafeBeaconKeys{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
