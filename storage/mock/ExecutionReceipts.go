// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/onflow/flow-go/storage"
)

// MockExecutionReceipts is an autogenerated mock type for the ExecutionReceipts type
type MockExecutionReceipts struct {
	mock.Mock
}

type MockExecutionReceipts_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionReceipts) EXPECT() *MockExecutionReceipts_Expecter {
	return &MockExecutionReceipts_Expecter{mock: &_m.Mock}
}

// BatchStore provides a mock function with given fields: receipt, batch
func (_m *MockExecutionReceipts) BatchStore(receipt *flow.ExecutionReceipt, batch storage.ReaderBatchWriter) error {
	ret := _m.Called(receipt, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt, storage.ReaderBatchWriter) error); ok {
		r0 = rf(receipt, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionReceipts_BatchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStore'
type MockExecutionReceipts_BatchStore_Call struct {
	*mock.Call
}

// BatchStore is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
//   - batch storage.ReaderBatchWriter
func (_e *MockExecutionReceipts_Expecter) BatchStore(receipt interface{}, batch interface{}) *MockExecutionReceipts_BatchStore_Call {
	return &MockExecutionReceipts_BatchStore_Call{Call: _e.mock.On("BatchStore", receipt, batch)}
}

func (_c *MockExecutionReceipts_BatchStore_Call) Run(run func(receipt *flow.ExecutionReceipt, batch storage.ReaderBatchWriter)) *MockExecutionReceipts_BatchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt), args[1].(storage.ReaderBatchWriter))
	})
	return _c
}

func (_c *MockExecutionReceipts_BatchStore_Call) Return(_a0 error) *MockExecutionReceipts_BatchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionReceipts_BatchStore_Call) RunAndReturn(run func(*flow.ExecutionReceipt, storage.ReaderBatchWriter) error) *MockExecutionReceipts_BatchStore_Call {
	_c.Call.Return(run)
	return _c
}

// ByBlockID provides a mock function with given fields: blockID
func (_m *MockExecutionReceipts) ByBlockID(blockID flow.Identifier) (flow.ExecutionReceiptList, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for ByBlockID")
	}

	var r0 flow.ExecutionReceiptList
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.ExecutionReceiptList, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.ExecutionReceiptList); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.ExecutionReceiptList)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionReceipts_ByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByBlockID'
type MockExecutionReceipts_ByBlockID_Call struct {
	*mock.Call
}

// ByBlockID is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockExecutionReceipts_Expecter) ByBlockID(blockID interface{}) *MockExecutionReceipts_ByBlockID_Call {
	return &MockExecutionReceipts_ByBlockID_Call{Call: _e.mock.On("ByBlockID", blockID)}
}

func (_c *MockExecutionReceipts_ByBlockID_Call) Run(run func(blockID flow.Identifier)) *MockExecutionReceipts_ByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionReceipts_ByBlockID_Call) Return(_a0 flow.ExecutionReceiptList, _a1 error) *MockExecutionReceipts_ByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionReceipts_ByBlockID_Call) RunAndReturn(run func(flow.Identifier) (flow.ExecutionReceiptList, error)) *MockExecutionReceipts_ByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ByID provides a mock function with given fields: receiptID
func (_m *MockExecutionReceipts) ByID(receiptID flow.Identifier) (*flow.ExecutionReceipt, error) {
	ret := _m.Called(receiptID)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *flow.ExecutionReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (*flow.ExecutionReceipt, error)); ok {
		return rf(receiptID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.ExecutionReceipt); ok {
		r0 = rf(receiptID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionReceipt)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(receiptID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionReceipts_ByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByID'
type MockExecutionReceipts_ByID_Call struct {
	*mock.Call
}

// ByID is a helper method to define mock.On call
//   - receiptID flow.Identifier
func (_e *MockExecutionReceipts_Expecter) ByID(receiptID interface{}) *MockExecutionReceipts_ByID_Call {
	return &MockExecutionReceipts_ByID_Call{Call: _e.mock.On("ByID", receiptID)}
}

func (_c *MockExecutionReceipts_ByID_Call) Run(run func(receiptID flow.Identifier)) *MockExecutionReceipts_ByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionReceipts_ByID_Call) Return(_a0 *flow.ExecutionReceipt, _a1 error) *MockExecutionReceipts_ByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionReceipts_ByID_Call) RunAndReturn(run func(flow.Identifier) (*flow.ExecutionReceipt, error)) *MockExecutionReceipts_ByID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: receipt
func (_m *MockExecutionReceipts) Store(receipt *flow.ExecutionReceipt) error {
	ret := _m.Called(receipt)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt) error); ok {
		r0 = rf(receipt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionReceipts_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockExecutionReceipts_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
func (_e *MockExecutionReceipts_Expecter) Store(receipt interface{}) *MockExecutionReceipts_Store_Call {
	return &MockExecutionReceipts_Store_Call{Call: _e.mock.On("Store", receipt)}
}

func (_c *MockExecutionReceipts_Store_Call) Run(run func(receipt *flow.ExecutionReceipt)) *MockExecutionReceipts_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt))
	})
	return _c
}

func (_c *MockExecutionReceipts_Store_Call) Return(_a0 error) *MockExecutionReceipts_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionReceipts_Store_Call) RunAndReturn(run func(*flow.ExecutionReceipt) error) *MockExecutionReceipts_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionReceipts creates a new instance of MockExecutionReceipts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionReceipts(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionReceipts {
	mock := &MockExecutionReceipts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
