syntax = "proto3";

package net;

import "google/protobuf/empty.proto";

option go_package = "insecure";

// to compile this file, run:
// protoc insecure/attacker.proto --go_out=plugins=grpc:.

// CorruptNetwork allows an attacker to register itself on it, and send messages on behalf of a corrupt node.
service CorruptNetwork {
  // ConnectAttacker registers an attacker to the corrupt network.
  rpc ConnectAttacker(google.protobuf.Empty) returns (stream Message) {}

  // ProcessAttackerMessage is the central place for the corrupt network to process messages from an attacker.
  rpc ProcessAttackerMessage(stream Message) returns (google.protobuf.Empty) {}
}

// Message represents the messages exchanged between the CorruptNetwork (server) and Attacker (client).
// This is a wrapper for both egress and ingress messages.
message Message {
  EgressMessage Egress = 1;
  IngressMessage Ingress = 2;
}

// EgressMessage represents an outgoing message from a corrupt node to another (honest or corrupt) node.
// The exchanged message is between the CorruptConduitFactory and Attacker.
message EgressMessage {
  string ChannelID = 1;

  // CorruptOriginID represents the corrupt node id where the outgoing message is coming from.
  bytes CorruptOriginID = 2;
  uint32 TargetNum = 3;
  repeated bytes TargetIDs = 4;
  bytes Payload = 5;
  Protocol protocol = 6;
}

// IngressMessage represents an incoming message from another node (honest or corrupt) to a corrupt node.
message IngressMessage {
  string ChannelID = 1;

  // OriginID represents the node id where the incoming message is coming from - that node could be corrupt or honest.
  bytes OriginID = 2;
  bytes CorruptTargetID = 3;
  bytes Payload = 4;
}

enum Protocol {
  UNKNOWN = 0;
  UNICAST = 1;
  MULTICAST = 2;
  PUBLISH = 3;
}
