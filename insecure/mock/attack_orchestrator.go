// Code generated by mockery v1.0.0. DO NOT EDIT.

package mockinsecure

import (
	insecure "github.com/onflow/flow-go/insecure"
	flow "github.com/onflow/flow-go/model/flow"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// AttackOrchestrator is an autogenerated mock type for the AttackOrchestrator type
type AttackOrchestrator struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *AttackOrchestrator) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// HandleEventFromCorruptedNode provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *AttackOrchestrator) HandleEventFromCorruptedNode(_a0 flow.Identifier, _a1 network.Channel, _a2 interface{}, _a3 insecure.Protocol, _a4 uint32, _a5 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a5))
	for _i := range _a5 {
		_va[_i] = _a5[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3, _a4)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, network.Channel, interface{}, insecure.Protocol, uint32, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *AttackOrchestrator) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *AttackOrchestrator) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}
