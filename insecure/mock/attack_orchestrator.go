// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockinsecure

import (
	insecure "github.com/onflow/flow-go/insecure"
	mock "github.com/stretchr/testify/mock"
)

// AttackOrchestrator is an autogenerated mock type for the AttackOrchestrator type
type AttackOrchestrator struct {
	mock.Mock
}

// HandleEgressEvent provides a mock function with given fields: _a0
func (_m *AttackOrchestrator) HandleEgressEvent(_a0 *insecure.EgressEvent) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HandleEgressEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*insecure.EgressEvent) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleIngressEvent provides a mock function with given fields: _a0
func (_m *AttackOrchestrator) HandleIngressEvent(_a0 *insecure.IngressEvent) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HandleIngressEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*insecure.IngressEvent) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: _a0
func (_m *AttackOrchestrator) Register(_a0 insecure.OrchestratorNetwork) {
	_m.Called(_a0)
}

// NewAttackOrchestrator creates a new instance of AttackOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttackOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttackOrchestrator {
	mock := &AttackOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
