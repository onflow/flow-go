// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockinsecure

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	insecure "github.com/onflow/flow-go/insecure"

	mock "github.com/stretchr/testify/mock"
)

// CorruptNetworkClient is an autogenerated mock type for the CorruptNetworkClient type
type CorruptNetworkClient struct {
	mock.Mock
}

// ConnectAttacker provides a mock function with given fields: ctx, in, opts
func (_m *CorruptNetworkClient) ConnectAttacker(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (insecure.CorruptNetwork_ConnectAttackerClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 insecure.CorruptNetwork_ConnectAttackerClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (insecure.CorruptNetwork_ConnectAttackerClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) insecure.CorruptNetwork_ConnectAttackerClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(insecure.CorruptNetwork_ConnectAttackerClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessAttackerMessage provides a mock function with given fields: ctx, opts
func (_m *CorruptNetworkClient) ProcessAttackerMessage(ctx context.Context, opts ...grpc.CallOption) (insecure.CorruptNetwork_ProcessAttackerMessageClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 insecure.CorruptNetwork_ProcessAttackerMessageClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (insecure.CorruptNetwork_ProcessAttackerMessageClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) insecure.CorruptNetwork_ProcessAttackerMessageClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(insecure.CorruptNetwork_ProcessAttackerMessageClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCorruptNetworkClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCorruptNetworkClient creates a new instance of CorruptNetworkClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCorruptNetworkClient(t mockConstructorTestingTNewCorruptNetworkClient) *CorruptNetworkClient {
	mock := &CorruptNetworkClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
