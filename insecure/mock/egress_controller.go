// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockinsecure

import (
	flow "github.com/onflow/flow-go/model/flow"
	channels "github.com/onflow/flow-go/network/channels"

	insecure "github.com/onflow/flow-go/insecure"

	mock "github.com/stretchr/testify/mock"
)

// EgressController is an autogenerated mock type for the EgressController type
type EgressController struct {
	mock.Mock
}

// EngineClosingChannel provides a mock function with given fields: _a0
func (_m *EgressController) EngineClosingChannel(_a0 channels.Channel) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EngineClosingChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleOutgoingEvent provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *EgressController) HandleOutgoingEvent(_a0 interface{}, _a1 channels.Channel, _a2 insecure.Protocol, _a3 uint32, _a4 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a4))
	for _i := range _a4 {
		_va[_i] = _a4[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HandleOutgoingEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, channels.Channel, insecure.Protocol, uint32, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEgressController creates a new instance of EgressController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEgressController(t interface {
	mock.TestingT
	Cleanup(func())
}) *EgressController {
	mock := &EgressController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
