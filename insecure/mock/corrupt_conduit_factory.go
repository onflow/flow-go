// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockinsecure

import (
	context "context"

	channels "github.com/onflow/flow-go/network/channels"

	flow "github.com/onflow/flow-go/model/flow"

	insecure "github.com/onflow/flow-go/insecure"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"
)

// CorruptConduitFactory is an autogenerated mock type for the CorruptConduitFactory type
type CorruptConduitFactory struct {
	mock.Mock
}

// NewConduit provides a mock function with given fields: _a0, _a1
func (_m *CorruptConduitFactory) NewConduit(_a0 context.Context, _a1 channels.Channel) (network.Conduit, error) {
	ret := _m.Called(_a0, _a1)

	var r0 network.Conduit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) (network.Conduit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) network.Conduit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Conduit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, channels.Channel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAdapter provides a mock function with given fields: _a0
func (_m *CorruptConduitFactory) RegisterAdapter(_a0 network.ConduitAdapter) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(network.ConduitAdapter) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterEgressController provides a mock function with given fields: _a0
func (_m *CorruptConduitFactory) RegisterEgressController(_a0 insecure.EgressController) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(insecure.EgressController) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendOnFlowNetwork provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *CorruptConduitFactory) SendOnFlowNetwork(_a0 interface{}, _a1 channels.Channel, _a2 insecure.Protocol, _a3 uint, _a4 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a4))
	for _i := range _a4 {
		_va[_i] = _a4[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, channels.Channel, insecure.Protocol, uint, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnregisterChannel provides a mock function with given fields: _a0
func (_m *CorruptConduitFactory) UnregisterChannel(_a0 channels.Channel) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCorruptConduitFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewCorruptConduitFactory creates a new instance of CorruptConduitFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCorruptConduitFactory(t mockConstructorTestingTNewCorruptConduitFactory) *CorruptConduitFactory {
	mock := &CorruptConduitFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
