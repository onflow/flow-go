// Code generated by mockery v2.12.1. DO NOT EDIT.

package mockinsecure

import (
	context "context"

	insecure "github.com/onflow/flow-go/insecure"
	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// CorruptibleConduitFactory_RegisterAttackerServer is an autogenerated mock type for the CorruptibleConduitFactory_RegisterAttackerServer type
type CorruptibleConduitFactory_RegisterAttackerServer struct {
	mock.Mock
}

// Context provides a mock function with given fields:
func (_m *CorruptibleConduitFactory_RegisterAttackerServer) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// RecvMsg provides a mock function with given fields: m
func (_m *CorruptibleConduitFactory_RegisterAttackerServer) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: _a0
func (_m *CorruptibleConduitFactory_RegisterAttackerServer) Send(_a0 *insecure.Message) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*insecure.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendHeader provides a mock function with given fields: _a0
func (_m *CorruptibleConduitFactory_RegisterAttackerServer) SendHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMsg provides a mock function with given fields: m
func (_m *CorruptibleConduitFactory_RegisterAttackerServer) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHeader provides a mock function with given fields: _a0
func (_m *CorruptibleConduitFactory_RegisterAttackerServer) SetHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTrailer provides a mock function with given fields: _a0
func (_m *CorruptibleConduitFactory_RegisterAttackerServer) SetTrailer(_a0 metadata.MD) {
	_m.Called(_a0)
}

// NewCorruptibleConduitFactory_RegisterAttackerServer creates a new instance of CorruptibleConduitFactory_RegisterAttackerServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCorruptibleConduitFactory_RegisterAttackerServer(t testing.TB) *CorruptibleConduitFactory_RegisterAttackerServer {
	mock := &CorruptibleConduitFactory_RegisterAttackerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
