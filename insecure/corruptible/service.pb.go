// Code generated by protoc-gen-go. DO NOT EDIT.
// source: insecure/corruptible/service.proto

package corruptible

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Protocol int32

const (
	Protocol_UNKNOWN   Protocol = 0
	Protocol_UNICAST   Protocol = 1
	Protocol_MULTICAST Protocol = 2
	Protocol_PUBLISH   Protocol = 3
)

var Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNICAST",
	2: "MULTICAST",
	3: "PUBLISH",
}

var Protocol_value = map[string]int32{
	"UNKNOWN":   0,
	"UNICAST":   1,
	"MULTICAST": 2,
	"PUBLISH":   3,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f4271bd1524ad99, []int{0}
}

// Message is represents the message exchanged between the Zombi and Attacker services.
type Message struct {
	ChannelID            string   `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	OriginID             []byte   `protobuf:"bytes,2,opt,name=OriginID,proto3" json:"OriginID,omitempty"`
	Targets              uint32   `protobuf:"varint,3,opt,name=targets,proto3" json:"targets,omitempty"`
	TargetIDs            [][]byte `protobuf:"bytes,4,rep,name=TargetIDs,proto3" json:"TargetIDs,omitempty"`
	Payload              []byte   `protobuf:"bytes,5,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Type                 string   `protobuf:"bytes,6,opt,name=Type,proto3" json:"Type,omitempty"`
	Protocol             Protocol `protobuf:"varint,7,opt,name=protocol,proto3,enum=corruptible.Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f4271bd1524ad99, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *Message) GetOriginID() []byte {
	if m != nil {
		return m.OriginID
	}
	return nil
}

func (m *Message) GetTargets() uint32 {
	if m != nil {
		return m.Targets
	}
	return 0
}

func (m *Message) GetTargetIDs() [][]byte {
	if m != nil {
		return m.TargetIDs
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Message) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNKNOWN
}

// AttackerRegisterMessage is the message an attacker uses to register itself to the chosen Zombie,
// and takes its control.
type AttackerRegisterMessage struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttackerRegisterMessage) Reset()         { *m = AttackerRegisterMessage{} }
func (m *AttackerRegisterMessage) String() string { return proto.CompactTextString(m) }
func (*AttackerRegisterMessage) ProtoMessage()    {}
func (*AttackerRegisterMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f4271bd1524ad99, []int{1}
}

func (m *AttackerRegisterMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttackerRegisterMessage.Unmarshal(m, b)
}
func (m *AttackerRegisterMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttackerRegisterMessage.Marshal(b, m, deterministic)
}
func (m *AttackerRegisterMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttackerRegisterMessage.Merge(m, src)
}
func (m *AttackerRegisterMessage) XXX_Size() int {
	return xxx_messageInfo_AttackerRegisterMessage.Size(m)
}
func (m *AttackerRegisterMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AttackerRegisterMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AttackerRegisterMessage proto.InternalMessageInfo

func (m *AttackerRegisterMessage) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AttackerRegisterMessage) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

// ActionResponse is used as the gRPC result to denote whether an action was successful on the
// remote Zombie or not.
type ActionResponse struct {
	Complete             bool     `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionResponse) Reset()         { *m = ActionResponse{} }
func (m *ActionResponse) String() string { return proto.CompactTextString(m) }
func (*ActionResponse) ProtoMessage()    {}
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f4271bd1524ad99, []int{2}
}

func (m *ActionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionResponse.Unmarshal(m, b)
}
func (m *ActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionResponse.Marshal(b, m, deterministic)
}
func (m *ActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionResponse.Merge(m, src)
}
func (m *ActionResponse) XXX_Size() int {
	return xxx_messageInfo_ActionResponse.Size(m)
}
func (m *ActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActionResponse proto.InternalMessageInfo

func (m *ActionResponse) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *ActionResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("corruptible.Protocol", Protocol_name, Protocol_value)
	proto.RegisterType((*Message)(nil), "corruptible.Message")
	proto.RegisterType((*AttackerRegisterMessage)(nil), "corruptible.AttackerRegisterMessage")
	proto.RegisterType((*ActionResponse)(nil), "corruptible.ActionResponse")
}

func init() {
	proto.RegisterFile("insecure/corruptible/service.proto", fileDescriptor_0f4271bd1524ad99)
}

var fileDescriptor_0f4271bd1524ad99 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xeb, 0xa4, 0xcd, 0x6e, 0xa6, 0x6d, 0x14, 0x59, 0xa1, 0x58, 0x85, 0xc3, 0x6a, 0xc5,
	0x61, 0xc5, 0x21, 0x15, 0xe1, 0x0c, 0x22, 0x69, 0x0e, 0x2c, 0x34, 0x7f, 0xe4, 0x26, 0xaa, 0xd4,
	0xdb, 0xc6, 0x8c, 0x82, 0xc5, 0x76, 0x6d, 0xd9, 0x2e, 0x52, 0xdf, 0x8a, 0x07, 0xe2, 0x61, 0xd0,
	0x3a, 0x71, 0xda, 0x48, 0x20, 0xa1, 0xde, 0xe6, 0xf3, 0xcc, 0x7c, 0x3b, 0xbf, 0xd9, 0x81, 0x54,
	0x56, 0x16, 0xc5, 0xbd, 0xc1, 0x0b, 0xa1, 0x8c, 0xb9, 0xd7, 0x4e, 0xae, 0x4a, 0xbc, 0xb0, 0x68,
	0x7e, 0x4a, 0x81, 0x7d, 0x6d, 0x94, 0x53, 0xf4, 0xf8, 0x49, 0x2a, 0xfd, 0x4d, 0x20, 0x9a, 0xa0,
	0xb5, 0xc5, 0x1a, 0xe9, 0x6b, 0x68, 0x5f, 0x7e, 0x2f, 0xaa, 0x0a, 0xcb, 0x7c, 0xcc, 0x48, 0x42,
	0xb2, 0x36, 0x7f, 0x7c, 0xa0, 0xe7, 0x10, 0xcf, 0x8c, 0x5c, 0xcb, 0x2a, 0x1f, 0xb3, 0x46, 0x42,
	0xb2, 0x13, 0xbe, 0xd3, 0x94, 0x41, 0xe4, 0x0a, 0xb3, 0x46, 0x67, 0x59, 0x33, 0x21, 0xd9, 0x29,
	0x0f, 0xb2, 0xf6, 0x5c, 0xf8, 0x30, 0x1f, 0x5b, 0x76, 0x98, 0x34, 0xb3, 0x13, 0xfe, 0xf8, 0x50,
	0xf7, 0xcd, 0x8b, 0x87, 0x52, 0x15, 0xdf, 0xd8, 0x91, 0xb7, 0x0c, 0x92, 0x52, 0x38, 0x5c, 0x3c,
	0x68, 0x64, 0x2d, 0x3f, 0x86, 0x8f, 0xe9, 0x3b, 0x88, 0x3d, 0x81, 0x50, 0x25, 0x8b, 0x12, 0x92,
	0x75, 0x06, 0x2f, 0xfa, 0x4f, 0x58, 0xfa, 0xf3, 0x6d, 0x92, 0xef, 0xca, 0xd2, 0x0f, 0xf0, 0x72,
	0xe8, 0x5c, 0x21, 0x7e, 0xa0, 0xe1, 0xb8, 0x96, 0xd6, 0xa1, 0x09, 0xb4, 0x1d, 0x68, 0x48, 0xbd,
	0xc5, 0x6c, 0x48, 0x5d, 0x7f, 0x51, 0x2b, 0xe3, 0x3c, 0x5b, 0x9b, 0xfb, 0x38, 0x1d, 0x41, 0x67,
	0x28, 0x9c, 0x54, 0x15, 0x47, 0xab, 0x55, 0x65, 0xb1, 0xde, 0x82, 0x50, 0x77, 0xba, 0x44, 0x87,
	0xbe, 0x37, 0xe6, 0x3b, 0x4d, 0x7b, 0x70, 0x84, 0xc6, 0x28, 0xb3, 0xb5, 0xd8, 0x88, 0xb7, 0x9f,
	0x20, 0x0e, 0x83, 0xd1, 0x63, 0x88, 0x96, 0xd3, 0xaf, 0xd3, 0xd9, 0xcd, 0xb4, 0x7b, 0xb0, 0x11,
	0xf9, 0xe5, 0xf0, 0x7a, 0xd1, 0x25, 0xf4, 0x14, 0xda, 0x93, 0xe5, 0xd5, 0x62, 0x23, 0x1b, 0x75,
	0x6e, 0xbe, 0x1c, 0x5d, 0xe5, 0xd7, 0x9f, 0xbb, 0xcd, 0xc1, 0x2f, 0x02, 0xad, 0x5b, 0x75, 0xb7,
	0x92, 0x48, 0x6f, 0xa0, 0x1b, 0x38, 0x02, 0x17, 0x7d, 0xb3, 0xb7, 0x84, 0x7f, 0xe0, 0x9e, 0xbf,
	0xda, 0xaf, 0xda, 0xa3, 0x4a, 0x0f, 0xe8, 0x04, 0xce, 0xe6, 0x46, 0x09, 0xb4, 0x36, 0x18, 0x84,
	0x3d, 0xf5, 0xf6, 0x1a, 0xff, 0xcf, 0x6e, 0xf0, 0x05, 0xe2, 0xdd, 0x7c, 0x1f, 0x21, 0x9a, 0xad,
	0xea, 0x13, 0x7c, 0x9e, 0xd7, 0xe8, 0xec, 0xb6, 0xf7, 0xb7, 0xab, 0x5e, 0xb5, 0xfc, 0x5f, 0x7e,
	0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x30, 0x8d, 0xb0, 0xe9, 0xf4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZombieClient is the client API for Zombie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZombieClient interface {
	RegisterAttacker(ctx context.Context, in *AttackerRegisterMessage, opts ...grpc.CallOption) (*ActionResponse, error)
	ProcessAttackerMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ActionResponse, error)
}

type zombieClient struct {
	cc *grpc.ClientConn
}

func NewZombieClient(cc *grpc.ClientConn) ZombieClient {
	return &zombieClient{cc}
}

func (c *zombieClient) RegisterAttacker(ctx context.Context, in *AttackerRegisterMessage, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/corruptible.Zombie/RegisterAttacker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zombieClient) ProcessAttackerMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/corruptible.Zombie/ProcessAttackerMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZombieServer is the server API for Zombie service.
type ZombieServer interface {
	RegisterAttacker(context.Context, *AttackerRegisterMessage) (*ActionResponse, error)
	ProcessAttackerMessage(context.Context, *Message) (*ActionResponse, error)
}

// UnimplementedZombieServer can be embedded to have forward compatible implementations.
type UnimplementedZombieServer struct {
}

func (*UnimplementedZombieServer) RegisterAttacker(ctx context.Context, req *AttackerRegisterMessage) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAttacker not implemented")
}
func (*UnimplementedZombieServer) ProcessAttackerMessage(ctx context.Context, req *Message) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAttackerMessage not implemented")
}

func RegisterZombieServer(s *grpc.Server, srv ZombieServer) {
	s.RegisterService(&_Zombie_serviceDesc, srv)
}

func _Zombie_RegisterAttacker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttackerRegisterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZombieServer).RegisterAttacker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corruptible.Zombie/RegisterAttacker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZombieServer).RegisterAttacker(ctx, req.(*AttackerRegisterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zombie_ProcessAttackerMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZombieServer).ProcessAttackerMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corruptible.Zombie/ProcessAttackerMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZombieServer).ProcessAttackerMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Zombie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "corruptible.Zombie",
	HandlerType: (*ZombieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAttacker",
			Handler:    _Zombie_RegisterAttacker_Handler,
		},
		{
			MethodName: "ProcessAttackerMessage",
			Handler:    _Zombie_ProcessAttackerMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "insecure/corruptible/service.proto",
}

// AttackerClient is the client API for Attacker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttackerClient interface {
	Observe(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ActionResponse, error)
}

type attackerClient struct {
	cc *grpc.ClientConn
}

func NewAttackerClient(cc *grpc.ClientConn) AttackerClient {
	return &attackerClient{cc}
}

func (c *attackerClient) Observe(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/corruptible.Attacker/Observe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttackerServer is the server API for Attacker service.
type AttackerServer interface {
	Observe(context.Context, *Message) (*ActionResponse, error)
}

// UnimplementedAttackerServer can be embedded to have forward compatible implementations.
type UnimplementedAttackerServer struct {
}

func (*UnimplementedAttackerServer) Observe(ctx context.Context, req *Message) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observe not implemented")
}

func RegisterAttackerServer(s *grpc.Server, srv AttackerServer) {
	s.RegisterService(&_Attacker_serviceDesc, srv)
}

func _Attacker_Observe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttackerServer).Observe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corruptible.Attacker/Observe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttackerServer).Observe(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Attacker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "corruptible.Attacker",
	HandlerType: (*AttackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Observe",
			Handler:    _Attacker_Observe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "insecure/corruptible/service.proto",
}
