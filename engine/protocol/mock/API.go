// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow-go/model/access"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

type MockAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPI) EXPECT() *MockAPI_Expecter {
	return &MockAPI_Expecter{mock: &_m.Mock}
}

// GetBlockByHeight provides a mock function with given fields: ctx, height
func (_m *MockAPI) GetBlockByHeight(ctx context.Context, height uint64) (*flow.Block, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.Block, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.Block); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHeight'
type MockAPI_GetBlockByHeight_Call struct {
	*mock.Call
}

// GetBlockByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockAPI_Expecter) GetBlockByHeight(ctx interface{}, height interface{}) *MockAPI_GetBlockByHeight_Call {
	return &MockAPI_GetBlockByHeight_Call{Call: _e.mock.On("GetBlockByHeight", ctx, height)}
}

func (_c *MockAPI_GetBlockByHeight_Call) Run(run func(ctx context.Context, height uint64)) *MockAPI_GetBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetBlockByHeight_Call) Return(_a0 *flow.Block, _a1 error) *MockAPI_GetBlockByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetBlockByHeight_Call) RunAndReturn(run func(context.Context, uint64) (*flow.Block, error)) *MockAPI_GetBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByID provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetBlockByID(ctx context.Context, id flow.Identifier) (*flow.Block, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByID")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Block, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Block); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetBlockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByID'
type MockAPI_GetBlockByID_Call struct {
	*mock.Call
}

// GetBlockByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetBlockByID(ctx interface{}, id interface{}) *MockAPI_GetBlockByID_Call {
	return &MockAPI_GetBlockByID_Call{Call: _e.mock.On("GetBlockByID", ctx, id)}
}

func (_c *MockAPI_GetBlockByID_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetBlockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetBlockByID_Call) Return(_a0 *flow.Block, _a1 error) *MockAPI_GetBlockByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetBlockByID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.Block, error)) *MockAPI_GetBlockByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByHeight provides a mock function with given fields: ctx, height
func (_m *MockAPI) GetBlockHeaderByHeight(ctx context.Context, height uint64) (*flow.Header, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByHeight")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.Header, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.Header); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetBlockHeaderByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByHeight'
type MockAPI_GetBlockHeaderByHeight_Call struct {
	*mock.Call
}

// GetBlockHeaderByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockAPI_Expecter) GetBlockHeaderByHeight(ctx interface{}, height interface{}) *MockAPI_GetBlockHeaderByHeight_Call {
	return &MockAPI_GetBlockHeaderByHeight_Call{Call: _e.mock.On("GetBlockHeaderByHeight", ctx, height)}
}

func (_c *MockAPI_GetBlockHeaderByHeight_Call) Run(run func(ctx context.Context, height uint64)) *MockAPI_GetBlockHeaderByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetBlockHeaderByHeight_Call) Return(_a0 *flow.Header, _a1 error) *MockAPI_GetBlockHeaderByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetBlockHeaderByHeight_Call) RunAndReturn(run func(context.Context, uint64) (*flow.Header, error)) *MockAPI_GetBlockHeaderByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByID provides a mock function with given fields: ctx, id
func (_m *MockAPI) GetBlockHeaderByID(ctx context.Context, id flow.Identifier) (*flow.Header, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByID")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*flow.Header, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *flow.Header); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetBlockHeaderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByID'
type MockAPI_GetBlockHeaderByID_Call struct {
	*mock.Call
}

// GetBlockHeaderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *MockAPI_Expecter) GetBlockHeaderByID(ctx interface{}, id interface{}) *MockAPI_GetBlockHeaderByID_Call {
	return &MockAPI_GetBlockHeaderByID_Call{Call: _e.mock.On("GetBlockHeaderByID", ctx, id)}
}

func (_c *MockAPI_GetBlockHeaderByID_Call) Run(run func(ctx context.Context, id flow.Identifier)) *MockAPI_GetBlockHeaderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetBlockHeaderByID_Call) Return(_a0 *flow.Header, _a1 error) *MockAPI_GetBlockHeaderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetBlockHeaderByID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*flow.Header, error)) *MockAPI_GetBlockHeaderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx, isSealed
func (_m *MockAPI) GetLatestBlock(ctx context.Context, isSealed bool) (*flow.Block, error) {
	ret := _m.Called(ctx, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*flow.Block, error)); ok {
		return rf(ctx, isSealed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *flow.Block); ok {
		r0 = rf(ctx, isSealed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, isSealed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockAPI_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - isSealed bool
func (_e *MockAPI_Expecter) GetLatestBlock(ctx interface{}, isSealed interface{}) *MockAPI_GetLatestBlock_Call {
	return &MockAPI_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", ctx, isSealed)}
}

func (_c *MockAPI_GetLatestBlock_Call) Run(run func(ctx context.Context, isSealed bool)) *MockAPI_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockAPI_GetLatestBlock_Call) Return(_a0 *flow.Block, _a1 error) *MockAPI_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetLatestBlock_Call) RunAndReturn(run func(context.Context, bool) (*flow.Block, error)) *MockAPI_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields: ctx, isSealed
func (_m *MockAPI) GetLatestBlockHeader(ctx context.Context, isSealed bool) (*flow.Header, error) {
	ret := _m.Called(ctx, isSealed)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *flow.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*flow.Header, error)); ok {
		return rf(ctx, isSealed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *flow.Header); ok {
		r0 = rf(ctx, isSealed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, isSealed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type MockAPI_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - isSealed bool
func (_e *MockAPI_Expecter) GetLatestBlockHeader(ctx interface{}, isSealed interface{}) *MockAPI_GetLatestBlockHeader_Call {
	return &MockAPI_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader", ctx, isSealed)}
}

func (_c *MockAPI_GetLatestBlockHeader_Call) Run(run func(ctx context.Context, isSealed bool)) *MockAPI_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockAPI_GetLatestBlockHeader_Call) Return(_a0 *flow.Header, _a1 error) *MockAPI_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetLatestBlockHeader_Call) RunAndReturn(run func(context.Context, bool) (*flow.Header, error)) *MockAPI_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProtocolStateSnapshot provides a mock function with given fields: ctx
func (_m *MockAPI) GetLatestProtocolStateSnapshot(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProtocolStateSnapshot")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetLatestProtocolStateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProtocolStateSnapshot'
type MockAPI_GetLatestProtocolStateSnapshot_Call struct {
	*mock.Call
}

// GetLatestProtocolStateSnapshot is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetLatestProtocolStateSnapshot(ctx interface{}) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	return &MockAPI_GetLatestProtocolStateSnapshot_Call{Call: _e.mock.On("GetLatestProtocolStateSnapshot", ctx)}
}

func (_c *MockAPI_GetLatestProtocolStateSnapshot_Call) Run(run func(ctx context.Context)) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetLatestProtocolStateSnapshot_Call) Return(_a0 []byte, _a1 error) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetLatestProtocolStateSnapshot_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *MockAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkParameters provides a mock function with given fields: ctx
func (_m *MockAPI) GetNetworkParameters(ctx context.Context) access.NetworkParameters {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkParameters")
	}

	var r0 access.NetworkParameters
	if rf, ok := ret.Get(0).(func(context.Context) access.NetworkParameters); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(access.NetworkParameters)
	}

	return r0
}

// MockAPI_GetNetworkParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkParameters'
type MockAPI_GetNetworkParameters_Call struct {
	*mock.Call
}

// GetNetworkParameters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetNetworkParameters(ctx interface{}) *MockAPI_GetNetworkParameters_Call {
	return &MockAPI_GetNetworkParameters_Call{Call: _e.mock.On("GetNetworkParameters", ctx)}
}

func (_c *MockAPI_GetNetworkParameters_Call) Run(run func(ctx context.Context)) *MockAPI_GetNetworkParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetNetworkParameters_Call) Return(_a0 access.NetworkParameters) *MockAPI_GetNetworkParameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_GetNetworkParameters_Call) RunAndReturn(run func(context.Context) access.NetworkParameters) *MockAPI_GetNetworkParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeVersionInfo provides a mock function with given fields: ctx
func (_m *MockAPI) GetNodeVersionInfo(ctx context.Context) (*access.NodeVersionInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeVersionInfo")
	}

	var r0 *access.NodeVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*access.NodeVersionInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *access.NodeVersionInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.NodeVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetNodeVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeVersionInfo'
type MockAPI_GetNodeVersionInfo_Call struct {
	*mock.Call
}

// GetNodeVersionInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) GetNodeVersionInfo(ctx interface{}) *MockAPI_GetNodeVersionInfo_Call {
	return &MockAPI_GetNodeVersionInfo_Call{Call: _e.mock.On("GetNodeVersionInfo", ctx)}
}

func (_c *MockAPI_GetNodeVersionInfo_Call) Run(run func(ctx context.Context)) *MockAPI_GetNodeVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_GetNodeVersionInfo_Call) Return(_a0 *access.NodeVersionInfo, _a1 error) *MockAPI_GetNodeVersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetNodeVersionInfo_Call) RunAndReturn(run func(context.Context) (*access.NodeVersionInfo, error)) *MockAPI_GetNodeVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByBlockID provides a mock function with given fields: ctx, blockID
func (_m *MockAPI) GetProtocolStateSnapshotByBlockID(ctx context.Context, blockID flow.Identifier) ([]byte, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByBlockID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]byte, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []byte); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetProtocolStateSnapshotByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByBlockID'
type MockAPI_GetProtocolStateSnapshotByBlockID_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockAPI_Expecter) GetProtocolStateSnapshotByBlockID(ctx interface{}, blockID interface{}) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	return &MockAPI_GetProtocolStateSnapshotByBlockID_Call{Call: _e.mock.On("GetProtocolStateSnapshotByBlockID", ctx, blockID)}
}

func (_c *MockAPI_GetProtocolStateSnapshotByBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByBlockID_Call) Return(_a0 []byte, _a1 error) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier) ([]byte, error)) *MockAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByHeight provides a mock function with given fields: ctx, blockHeight
func (_m *MockAPI) GetProtocolStateSnapshotByHeight(ctx context.Context, blockHeight uint64) ([]byte, error) {
	ret := _m.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByHeight")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]byte, error)); ok {
		return rf(ctx, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []byte); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetProtocolStateSnapshotByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByHeight'
type MockAPI_GetProtocolStateSnapshotByHeight_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHeight uint64
func (_e *MockAPI_Expecter) GetProtocolStateSnapshotByHeight(ctx interface{}, blockHeight interface{}) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	return &MockAPI_GetProtocolStateSnapshotByHeight_Call{Call: _e.mock.On("GetProtocolStateSnapshotByHeight", ctx, blockHeight)}
}

func (_c *MockAPI_GetProtocolStateSnapshotByHeight_Call) Run(run func(ctx context.Context, blockHeight uint64)) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByHeight_Call) Return(_a0 []byte, _a1 error) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetProtocolStateSnapshotByHeight_Call) RunAndReturn(run func(context.Context, uint64) ([]byte, error)) *MockAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPI creates a new instance of MockAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPI {
	mock := &MockAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
