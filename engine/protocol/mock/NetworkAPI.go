// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow-go/model/access"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockNetworkAPI is an autogenerated mock type for the NetworkAPI type
type MockNetworkAPI struct {
	mock.Mock
}

type MockNetworkAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkAPI) EXPECT() *MockNetworkAPI_Expecter {
	return &MockNetworkAPI_Expecter{mock: &_m.Mock}
}

// GetLatestProtocolStateSnapshot provides a mock function with given fields: ctx
func (_m *MockNetworkAPI) GetLatestProtocolStateSnapshot(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProtocolStateSnapshot")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkAPI_GetLatestProtocolStateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProtocolStateSnapshot'
type MockNetworkAPI_GetLatestProtocolStateSnapshot_Call struct {
	*mock.Call
}

// GetLatestProtocolStateSnapshot is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNetworkAPI_Expecter) GetLatestProtocolStateSnapshot(ctx interface{}) *MockNetworkAPI_GetLatestProtocolStateSnapshot_Call {
	return &MockNetworkAPI_GetLatestProtocolStateSnapshot_Call{Call: _e.mock.On("GetLatestProtocolStateSnapshot", ctx)}
}

func (_c *MockNetworkAPI_GetLatestProtocolStateSnapshot_Call) Run(run func(ctx context.Context)) *MockNetworkAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNetworkAPI_GetLatestProtocolStateSnapshot_Call) Return(_a0 []byte, _a1 error) *MockNetworkAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkAPI_GetLatestProtocolStateSnapshot_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *MockNetworkAPI_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkParameters provides a mock function with given fields: ctx
func (_m *MockNetworkAPI) GetNetworkParameters(ctx context.Context) access.NetworkParameters {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkParameters")
	}

	var r0 access.NetworkParameters
	if rf, ok := ret.Get(0).(func(context.Context) access.NetworkParameters); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(access.NetworkParameters)
	}

	return r0
}

// MockNetworkAPI_GetNetworkParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkParameters'
type MockNetworkAPI_GetNetworkParameters_Call struct {
	*mock.Call
}

// GetNetworkParameters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNetworkAPI_Expecter) GetNetworkParameters(ctx interface{}) *MockNetworkAPI_GetNetworkParameters_Call {
	return &MockNetworkAPI_GetNetworkParameters_Call{Call: _e.mock.On("GetNetworkParameters", ctx)}
}

func (_c *MockNetworkAPI_GetNetworkParameters_Call) Run(run func(ctx context.Context)) *MockNetworkAPI_GetNetworkParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNetworkAPI_GetNetworkParameters_Call) Return(_a0 access.NetworkParameters) *MockNetworkAPI_GetNetworkParameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkAPI_GetNetworkParameters_Call) RunAndReturn(run func(context.Context) access.NetworkParameters) *MockNetworkAPI_GetNetworkParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeVersionInfo provides a mock function with given fields: ctx
func (_m *MockNetworkAPI) GetNodeVersionInfo(ctx context.Context) (*access.NodeVersionInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeVersionInfo")
	}

	var r0 *access.NodeVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*access.NodeVersionInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *access.NodeVersionInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.NodeVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkAPI_GetNodeVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeVersionInfo'
type MockNetworkAPI_GetNodeVersionInfo_Call struct {
	*mock.Call
}

// GetNodeVersionInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNetworkAPI_Expecter) GetNodeVersionInfo(ctx interface{}) *MockNetworkAPI_GetNodeVersionInfo_Call {
	return &MockNetworkAPI_GetNodeVersionInfo_Call{Call: _e.mock.On("GetNodeVersionInfo", ctx)}
}

func (_c *MockNetworkAPI_GetNodeVersionInfo_Call) Run(run func(ctx context.Context)) *MockNetworkAPI_GetNodeVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNetworkAPI_GetNodeVersionInfo_Call) Return(_a0 *access.NodeVersionInfo, _a1 error) *MockNetworkAPI_GetNodeVersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkAPI_GetNodeVersionInfo_Call) RunAndReturn(run func(context.Context) (*access.NodeVersionInfo, error)) *MockNetworkAPI_GetNodeVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByBlockID provides a mock function with given fields: ctx, blockID
func (_m *MockNetworkAPI) GetProtocolStateSnapshotByBlockID(ctx context.Context, blockID flow.Identifier) ([]byte, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByBlockID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]byte, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []byte); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByBlockID'
type MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockNetworkAPI_Expecter) GetProtocolStateSnapshotByBlockID(ctx interface{}, blockID interface{}) *MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call {
	return &MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call{Call: _e.mock.On("GetProtocolStateSnapshotByBlockID", ctx, blockID)}
}

func (_c *MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call) Return(_a0 []byte, _a1 error) *MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier) ([]byte, error)) *MockNetworkAPI_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByHeight provides a mock function with given fields: ctx, blockHeight
func (_m *MockNetworkAPI) GetProtocolStateSnapshotByHeight(ctx context.Context, blockHeight uint64) ([]byte, error) {
	ret := _m.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByHeight")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]byte, error)); ok {
		return rf(ctx, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []byte); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByHeight'
type MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHeight uint64
func (_e *MockNetworkAPI_Expecter) GetProtocolStateSnapshotByHeight(ctx interface{}, blockHeight interface{}) *MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call {
	return &MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call{Call: _e.mock.On("GetProtocolStateSnapshotByHeight", ctx, blockHeight)}
}

func (_c *MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call) Run(run func(ctx context.Context, blockHeight uint64)) *MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call) Return(_a0 []byte, _a1 error) *MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call) RunAndReturn(run func(context.Context, uint64) ([]byte, error)) *MockNetworkAPI_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetworkAPI creates a new instance of MockNetworkAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkAPI {
	mock := &MockNetworkAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
