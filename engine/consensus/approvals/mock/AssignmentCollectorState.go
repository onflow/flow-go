// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	consensus "github.com/onflow/flow-go/engine/consensus"
	approvals "github.com/onflow/flow-go/engine/consensus/approvals"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockAssignmentCollectorState is an autogenerated mock type for the AssignmentCollectorState type
type MockAssignmentCollectorState struct {
	mock.Mock
}

type MockAssignmentCollectorState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssignmentCollectorState) EXPECT() *MockAssignmentCollectorState_Expecter {
	return &MockAssignmentCollectorState_Expecter{mock: &_m.Mock}
}

// Block provides a mock function with no fields
func (_m *MockAssignmentCollectorState) Block() *flow.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// MockAssignmentCollectorState_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type MockAssignmentCollectorState_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
func (_e *MockAssignmentCollectorState_Expecter) Block() *MockAssignmentCollectorState_Block_Call {
	return &MockAssignmentCollectorState_Block_Call{Call: _e.mock.On("Block")}
}

func (_c *MockAssignmentCollectorState_Block_Call) Run(run func()) *MockAssignmentCollectorState_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignmentCollectorState_Block_Call) Return(_a0 *flow.Header) *MockAssignmentCollectorState_Block_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_Block_Call) RunAndReturn(run func() *flow.Header) *MockAssignmentCollectorState_Block_Call {
	_c.Call.Return(run)
	return _c
}

// BlockID provides a mock function with no fields
func (_m *MockAssignmentCollectorState) BlockID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockAssignmentCollectorState_BlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockID'
type MockAssignmentCollectorState_BlockID_Call struct {
	*mock.Call
}

// BlockID is a helper method to define mock.On call
func (_e *MockAssignmentCollectorState_Expecter) BlockID() *MockAssignmentCollectorState_BlockID_Call {
	return &MockAssignmentCollectorState_BlockID_Call{Call: _e.mock.On("BlockID")}
}

func (_c *MockAssignmentCollectorState_BlockID_Call) Run(run func()) *MockAssignmentCollectorState_BlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignmentCollectorState_BlockID_Call) Return(_a0 flow.Identifier) *MockAssignmentCollectorState_BlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_BlockID_Call) RunAndReturn(run func() flow.Identifier) *MockAssignmentCollectorState_BlockID_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEmergencySealing provides a mock function with given fields: observer, finalizedBlockHeight
func (_m *MockAssignmentCollectorState) CheckEmergencySealing(observer consensus.SealingObservation, finalizedBlockHeight uint64) error {
	ret := _m.Called(observer, finalizedBlockHeight)

	if len(ret) == 0 {
		panic("no return value specified for CheckEmergencySealing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(consensus.SealingObservation, uint64) error); ok {
		r0 = rf(observer, finalizedBlockHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssignmentCollectorState_CheckEmergencySealing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEmergencySealing'
type MockAssignmentCollectorState_CheckEmergencySealing_Call struct {
	*mock.Call
}

// CheckEmergencySealing is a helper method to define mock.On call
//   - observer consensus.SealingObservation
//   - finalizedBlockHeight uint64
func (_e *MockAssignmentCollectorState_Expecter) CheckEmergencySealing(observer interface{}, finalizedBlockHeight interface{}) *MockAssignmentCollectorState_CheckEmergencySealing_Call {
	return &MockAssignmentCollectorState_CheckEmergencySealing_Call{Call: _e.mock.On("CheckEmergencySealing", observer, finalizedBlockHeight)}
}

func (_c *MockAssignmentCollectorState_CheckEmergencySealing_Call) Run(run func(observer consensus.SealingObservation, finalizedBlockHeight uint64)) *MockAssignmentCollectorState_CheckEmergencySealing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(consensus.SealingObservation), args[1].(uint64))
	})
	return _c
}

func (_c *MockAssignmentCollectorState_CheckEmergencySealing_Call) Return(_a0 error) *MockAssignmentCollectorState_CheckEmergencySealing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_CheckEmergencySealing_Call) RunAndReturn(run func(consensus.SealingObservation, uint64) error) *MockAssignmentCollectorState_CheckEmergencySealing_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessApproval provides a mock function with given fields: approval
func (_m *MockAssignmentCollectorState) ProcessApproval(approval *flow.ResultApproval) error {
	ret := _m.Called(approval)

	if len(ret) == 0 {
		panic("no return value specified for ProcessApproval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ResultApproval) error); ok {
		r0 = rf(approval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssignmentCollectorState_ProcessApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessApproval'
type MockAssignmentCollectorState_ProcessApproval_Call struct {
	*mock.Call
}

// ProcessApproval is a helper method to define mock.On call
//   - approval *flow.ResultApproval
func (_e *MockAssignmentCollectorState_Expecter) ProcessApproval(approval interface{}) *MockAssignmentCollectorState_ProcessApproval_Call {
	return &MockAssignmentCollectorState_ProcessApproval_Call{Call: _e.mock.On("ProcessApproval", approval)}
}

func (_c *MockAssignmentCollectorState_ProcessApproval_Call) Run(run func(approval *flow.ResultApproval)) *MockAssignmentCollectorState_ProcessApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ResultApproval))
	})
	return _c
}

func (_c *MockAssignmentCollectorState_ProcessApproval_Call) Return(_a0 error) *MockAssignmentCollectorState_ProcessApproval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_ProcessApproval_Call) RunAndReturn(run func(*flow.ResultApproval) error) *MockAssignmentCollectorState_ProcessApproval_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessIncorporatedResult provides a mock function with given fields: incorporatedResult
func (_m *MockAssignmentCollectorState) ProcessIncorporatedResult(incorporatedResult *flow.IncorporatedResult) error {
	ret := _m.Called(incorporatedResult)

	if len(ret) == 0 {
		panic("no return value specified for ProcessIncorporatedResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.IncorporatedResult) error); ok {
		r0 = rf(incorporatedResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssignmentCollectorState_ProcessIncorporatedResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessIncorporatedResult'
type MockAssignmentCollectorState_ProcessIncorporatedResult_Call struct {
	*mock.Call
}

// ProcessIncorporatedResult is a helper method to define mock.On call
//   - incorporatedResult *flow.IncorporatedResult
func (_e *MockAssignmentCollectorState_Expecter) ProcessIncorporatedResult(incorporatedResult interface{}) *MockAssignmentCollectorState_ProcessIncorporatedResult_Call {
	return &MockAssignmentCollectorState_ProcessIncorporatedResult_Call{Call: _e.mock.On("ProcessIncorporatedResult", incorporatedResult)}
}

func (_c *MockAssignmentCollectorState_ProcessIncorporatedResult_Call) Run(run func(incorporatedResult *flow.IncorporatedResult)) *MockAssignmentCollectorState_ProcessIncorporatedResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.IncorporatedResult))
	})
	return _c
}

func (_c *MockAssignmentCollectorState_ProcessIncorporatedResult_Call) Return(_a0 error) *MockAssignmentCollectorState_ProcessIncorporatedResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_ProcessIncorporatedResult_Call) RunAndReturn(run func(*flow.IncorporatedResult) error) *MockAssignmentCollectorState_ProcessIncorporatedResult_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessingStatus provides a mock function with no fields
func (_m *MockAssignmentCollectorState) ProcessingStatus() approvals.ProcessingStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessingStatus")
	}

	var r0 approvals.ProcessingStatus
	if rf, ok := ret.Get(0).(func() approvals.ProcessingStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(approvals.ProcessingStatus)
	}

	return r0
}

// MockAssignmentCollectorState_ProcessingStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessingStatus'
type MockAssignmentCollectorState_ProcessingStatus_Call struct {
	*mock.Call
}

// ProcessingStatus is a helper method to define mock.On call
func (_e *MockAssignmentCollectorState_Expecter) ProcessingStatus() *MockAssignmentCollectorState_ProcessingStatus_Call {
	return &MockAssignmentCollectorState_ProcessingStatus_Call{Call: _e.mock.On("ProcessingStatus")}
}

func (_c *MockAssignmentCollectorState_ProcessingStatus_Call) Run(run func()) *MockAssignmentCollectorState_ProcessingStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignmentCollectorState_ProcessingStatus_Call) Return(_a0 approvals.ProcessingStatus) *MockAssignmentCollectorState_ProcessingStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_ProcessingStatus_Call) RunAndReturn(run func() approvals.ProcessingStatus) *MockAssignmentCollectorState_ProcessingStatus_Call {
	_c.Call.Return(run)
	return _c
}

// RequestMissingApprovals provides a mock function with given fields: observer, maxHeightForRequesting
func (_m *MockAssignmentCollectorState) RequestMissingApprovals(observer consensus.SealingObservation, maxHeightForRequesting uint64) (uint, error) {
	ret := _m.Called(observer, maxHeightForRequesting)

	if len(ret) == 0 {
		panic("no return value specified for RequestMissingApprovals")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(consensus.SealingObservation, uint64) (uint, error)); ok {
		return rf(observer, maxHeightForRequesting)
	}
	if rf, ok := ret.Get(0).(func(consensus.SealingObservation, uint64) uint); ok {
		r0 = rf(observer, maxHeightForRequesting)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(consensus.SealingObservation, uint64) error); ok {
		r1 = rf(observer, maxHeightForRequesting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssignmentCollectorState_RequestMissingApprovals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestMissingApprovals'
type MockAssignmentCollectorState_RequestMissingApprovals_Call struct {
	*mock.Call
}

// RequestMissingApprovals is a helper method to define mock.On call
//   - observer consensus.SealingObservation
//   - maxHeightForRequesting uint64
func (_e *MockAssignmentCollectorState_Expecter) RequestMissingApprovals(observer interface{}, maxHeightForRequesting interface{}) *MockAssignmentCollectorState_RequestMissingApprovals_Call {
	return &MockAssignmentCollectorState_RequestMissingApprovals_Call{Call: _e.mock.On("RequestMissingApprovals", observer, maxHeightForRequesting)}
}

func (_c *MockAssignmentCollectorState_RequestMissingApprovals_Call) Run(run func(observer consensus.SealingObservation, maxHeightForRequesting uint64)) *MockAssignmentCollectorState_RequestMissingApprovals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(consensus.SealingObservation), args[1].(uint64))
	})
	return _c
}

func (_c *MockAssignmentCollectorState_RequestMissingApprovals_Call) Return(_a0 uint, _a1 error) *MockAssignmentCollectorState_RequestMissingApprovals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssignmentCollectorState_RequestMissingApprovals_Call) RunAndReturn(run func(consensus.SealingObservation, uint64) (uint, error)) *MockAssignmentCollectorState_RequestMissingApprovals_Call {
	_c.Call.Return(run)
	return _c
}

// Result provides a mock function with no fields
func (_m *MockAssignmentCollectorState) Result() *flow.ExecutionResult {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 *flow.ExecutionResult
	if rf, ok := ret.Get(0).(func() *flow.ExecutionResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	return r0
}

// MockAssignmentCollectorState_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Result'
type MockAssignmentCollectorState_Result_Call struct {
	*mock.Call
}

// Result is a helper method to define mock.On call
func (_e *MockAssignmentCollectorState_Expecter) Result() *MockAssignmentCollectorState_Result_Call {
	return &MockAssignmentCollectorState_Result_Call{Call: _e.mock.On("Result")}
}

func (_c *MockAssignmentCollectorState_Result_Call) Run(run func()) *MockAssignmentCollectorState_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignmentCollectorState_Result_Call) Return(_a0 *flow.ExecutionResult) *MockAssignmentCollectorState_Result_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_Result_Call) RunAndReturn(run func() *flow.ExecutionResult) *MockAssignmentCollectorState_Result_Call {
	_c.Call.Return(run)
	return _c
}

// ResultID provides a mock function with no fields
func (_m *MockAssignmentCollectorState) ResultID() flow.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResultID")
	}

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// MockAssignmentCollectorState_ResultID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResultID'
type MockAssignmentCollectorState_ResultID_Call struct {
	*mock.Call
}

// ResultID is a helper method to define mock.On call
func (_e *MockAssignmentCollectorState_Expecter) ResultID() *MockAssignmentCollectorState_ResultID_Call {
	return &MockAssignmentCollectorState_ResultID_Call{Call: _e.mock.On("ResultID")}
}

func (_c *MockAssignmentCollectorState_ResultID_Call) Run(run func()) *MockAssignmentCollectorState_ResultID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignmentCollectorState_ResultID_Call) Return(_a0 flow.Identifier) *MockAssignmentCollectorState_ResultID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignmentCollectorState_ResultID_Call) RunAndReturn(run func() flow.Identifier) *MockAssignmentCollectorState_ResultID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssignmentCollectorState creates a new instance of MockAssignmentCollectorState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssignmentCollectorState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssignmentCollectorState {
	mock := &MockAssignmentCollectorState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
