// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	consensus "github.com/onflow/flow-go/engine/consensus"
	approvals "github.com/onflow/flow-go/engine/consensus/approvals"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// AssignmentCollectorState is an autogenerated mock type for the AssignmentCollectorState type
type AssignmentCollectorState struct {
	mock.Mock
}

// Block provides a mock function with given fields:
func (_m *AssignmentCollectorState) Block() *flow.Header {
	ret := _m.Called()

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// BlockID provides a mock function with given fields:
func (_m *AssignmentCollectorState) BlockID() flow.Identifier {
	ret := _m.Called()

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}

// CheckEmergencySealing provides a mock function with given fields: observer, finalizedBlockHeight
func (_m *AssignmentCollectorState) CheckEmergencySealing(observer consensus.SealingObservation, finalizedBlockHeight uint64) error {
	ret := _m.Called(observer, finalizedBlockHeight)

	var r0 error
	if rf, ok := ret.Get(0).(func(consensus.SealingObservation, uint64) error); ok {
		r0 = rf(observer, finalizedBlockHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessApproval provides a mock function with given fields: approval
func (_m *AssignmentCollectorState) ProcessApproval(approval *flow.ResultApproval) error {
	ret := _m.Called(approval)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ResultApproval) error); ok {
		r0 = rf(approval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessIncorporatedResult provides a mock function with given fields: incorporatedResult
func (_m *AssignmentCollectorState) ProcessIncorporatedResult(incorporatedResult *flow.IncorporatedResult) error {
	ret := _m.Called(incorporatedResult)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.IncorporatedResult) error); ok {
		r0 = rf(incorporatedResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessingStatus provides a mock function with given fields:
func (_m *AssignmentCollectorState) ProcessingStatus() approvals.ProcessingStatus {
	ret := _m.Called()

	var r0 approvals.ProcessingStatus
	if rf, ok := ret.Get(0).(func() approvals.ProcessingStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(approvals.ProcessingStatus)
	}

	return r0
}

// RequestMissingApprovals provides a mock function with given fields: observer, maxHeightForRequesting
func (_m *AssignmentCollectorState) RequestMissingApprovals(observer consensus.SealingObservation, maxHeightForRequesting uint64) (uint, error) {
	ret := _m.Called(observer, maxHeightForRequesting)

	var r0 uint
	if rf, ok := ret.Get(0).(func(consensus.SealingObservation, uint64) uint); ok {
		r0 = rf(observer, maxHeightForRequesting)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(consensus.SealingObservation, uint64) error); ok {
		r1 = rf(observer, maxHeightForRequesting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Result provides a mock function with given fields:
func (_m *AssignmentCollectorState) Result() *flow.ExecutionResult {
	ret := _m.Called()

	var r0 *flow.ExecutionResult
	if rf, ok := ret.Get(0).(func() *flow.ExecutionResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ExecutionResult)
		}
	}

	return r0
}

// ResultID provides a mock function with given fields:
func (_m *AssignmentCollectorState) ResultID() flow.Identifier {
	ret := _m.Called()

	var r0 flow.Identifier
	if rf, ok := ret.Get(0).(func() flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.Identifier)
		}
	}

	return r0
}
