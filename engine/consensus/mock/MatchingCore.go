// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockMatchingCore is an autogenerated mock type for the MatchingCore type
type MockMatchingCore struct {
	mock.Mock
}

type MockMatchingCore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchingCore) EXPECT() *MockMatchingCore_Expecter {
	return &MockMatchingCore_Expecter{mock: &_m.Mock}
}

// OnBlockFinalization provides a mock function with no fields
func (_m *MockMatchingCore) OnBlockFinalization() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnBlockFinalization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchingCore_OnBlockFinalization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBlockFinalization'
type MockMatchingCore_OnBlockFinalization_Call struct {
	*mock.Call
}

// OnBlockFinalization is a helper method to define mock.On call
func (_e *MockMatchingCore_Expecter) OnBlockFinalization() *MockMatchingCore_OnBlockFinalization_Call {
	return &MockMatchingCore_OnBlockFinalization_Call{Call: _e.mock.On("OnBlockFinalization")}
}

func (_c *MockMatchingCore_OnBlockFinalization_Call) Run(run func()) *MockMatchingCore_OnBlockFinalization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchingCore_OnBlockFinalization_Call) Return(_a0 error) *MockMatchingCore_OnBlockFinalization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchingCore_OnBlockFinalization_Call) RunAndReturn(run func() error) *MockMatchingCore_OnBlockFinalization_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessReceipt provides a mock function with given fields: receipt
func (_m *MockMatchingCore) ProcessReceipt(receipt *flow.ExecutionReceipt) error {
	ret := _m.Called(receipt)

	if len(ret) == 0 {
		panic("no return value specified for ProcessReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ExecutionReceipt) error); ok {
		r0 = rf(receipt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchingCore_ProcessReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessReceipt'
type MockMatchingCore_ProcessReceipt_Call struct {
	*mock.Call
}

// ProcessReceipt is a helper method to define mock.On call
//   - receipt *flow.ExecutionReceipt
func (_e *MockMatchingCore_Expecter) ProcessReceipt(receipt interface{}) *MockMatchingCore_ProcessReceipt_Call {
	return &MockMatchingCore_ProcessReceipt_Call{Call: _e.mock.On("ProcessReceipt", receipt)}
}

func (_c *MockMatchingCore_ProcessReceipt_Call) Run(run func(receipt *flow.ExecutionReceipt)) *MockMatchingCore_ProcessReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ExecutionReceipt))
	})
	return _c
}

func (_c *MockMatchingCore_ProcessReceipt_Call) Return(_a0 error) *MockMatchingCore_ProcessReceipt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchingCore_ProcessReceipt_Call) RunAndReturn(run func(*flow.ExecutionReceipt) error) *MockMatchingCore_ProcessReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMatchingCore creates a new instance of MockMatchingCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatchingCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatchingCore {
	mock := &MockMatchingCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
