// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	consensus "github.com/onflow/flow-go/engine/consensus"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockSealingTracker is an autogenerated mock type for the SealingTracker type
type MockSealingTracker struct {
	mock.Mock
}

type MockSealingTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSealingTracker) EXPECT() *MockSealingTracker_Expecter {
	return &MockSealingTracker_Expecter{mock: &_m.Mock}
}

// NewSealingObservation provides a mock function with given fields: finalizedBlock, seal, sealedBlock
func (_m *MockSealingTracker) NewSealingObservation(finalizedBlock *flow.Header, seal *flow.Seal, sealedBlock *flow.Header) consensus.SealingObservation {
	ret := _m.Called(finalizedBlock, seal, sealedBlock)

	if len(ret) == 0 {
		panic("no return value specified for NewSealingObservation")
	}

	var r0 consensus.SealingObservation
	if rf, ok := ret.Get(0).(func(*flow.Header, *flow.Seal, *flow.Header) consensus.SealingObservation); ok {
		r0 = rf(finalizedBlock, seal, sealedBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(consensus.SealingObservation)
		}
	}

	return r0
}

// MockSealingTracker_NewSealingObservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSealingObservation'
type MockSealingTracker_NewSealingObservation_Call struct {
	*mock.Call
}

// NewSealingObservation is a helper method to define mock.On call
//   - finalizedBlock *flow.Header
//   - seal *flow.Seal
//   - sealedBlock *flow.Header
func (_e *MockSealingTracker_Expecter) NewSealingObservation(finalizedBlock interface{}, seal interface{}, sealedBlock interface{}) *MockSealingTracker_NewSealingObservation_Call {
	return &MockSealingTracker_NewSealingObservation_Call{Call: _e.mock.On("NewSealingObservation", finalizedBlock, seal, sealedBlock)}
}

func (_c *MockSealingTracker_NewSealingObservation_Call) Run(run func(finalizedBlock *flow.Header, seal *flow.Seal, sealedBlock *flow.Header)) *MockSealingTracker_NewSealingObservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header), args[1].(*flow.Seal), args[2].(*flow.Header))
	})
	return _c
}

func (_c *MockSealingTracker_NewSealingObservation_Call) Return(_a0 consensus.SealingObservation) *MockSealingTracker_NewSealingObservation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSealingTracker_NewSealingObservation_Call) RunAndReturn(run func(*flow.Header, *flow.Seal, *flow.Header) consensus.SealingObservation) *MockSealingTracker_NewSealingObservation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSealingTracker creates a new instance of MockSealingTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSealingTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSealingTracker {
	mock := &MockSealingTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
