// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockSealingCore is an autogenerated mock type for the SealingCore type
type MockSealingCore struct {
	mock.Mock
}

type MockSealingCore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSealingCore) EXPECT() *MockSealingCore_Expecter {
	return &MockSealingCore_Expecter{mock: &_m.Mock}
}

// ProcessApproval provides a mock function with given fields: approval
func (_m *MockSealingCore) ProcessApproval(approval *flow.ResultApproval) error {
	ret := _m.Called(approval)

	if len(ret) == 0 {
		panic("no return value specified for ProcessApproval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.ResultApproval) error); ok {
		r0 = rf(approval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSealingCore_ProcessApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessApproval'
type MockSealingCore_ProcessApproval_Call struct {
	*mock.Call
}

// ProcessApproval is a helper method to define mock.On call
//   - approval *flow.ResultApproval
func (_e *MockSealingCore_Expecter) ProcessApproval(approval interface{}) *MockSealingCore_ProcessApproval_Call {
	return &MockSealingCore_ProcessApproval_Call{Call: _e.mock.On("ProcessApproval", approval)}
}

func (_c *MockSealingCore_ProcessApproval_Call) Run(run func(approval *flow.ResultApproval)) *MockSealingCore_ProcessApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.ResultApproval))
	})
	return _c
}

func (_c *MockSealingCore_ProcessApproval_Call) Return(_a0 error) *MockSealingCore_ProcessApproval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSealingCore_ProcessApproval_Call) RunAndReturn(run func(*flow.ResultApproval) error) *MockSealingCore_ProcessApproval_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessFinalizedBlock provides a mock function with given fields: finalizedBlockID
func (_m *MockSealingCore) ProcessFinalizedBlock(finalizedBlockID flow.Identifier) error {
	ret := _m.Called(finalizedBlockID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessFinalizedBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(finalizedBlockID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSealingCore_ProcessFinalizedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessFinalizedBlock'
type MockSealingCore_ProcessFinalizedBlock_Call struct {
	*mock.Call
}

// ProcessFinalizedBlock is a helper method to define mock.On call
//   - finalizedBlockID flow.Identifier
func (_e *MockSealingCore_Expecter) ProcessFinalizedBlock(finalizedBlockID interface{}) *MockSealingCore_ProcessFinalizedBlock_Call {
	return &MockSealingCore_ProcessFinalizedBlock_Call{Call: _e.mock.On("ProcessFinalizedBlock", finalizedBlockID)}
}

func (_c *MockSealingCore_ProcessFinalizedBlock_Call) Run(run func(finalizedBlockID flow.Identifier)) *MockSealingCore_ProcessFinalizedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockSealingCore_ProcessFinalizedBlock_Call) Return(_a0 error) *MockSealingCore_ProcessFinalizedBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSealingCore_ProcessFinalizedBlock_Call) RunAndReturn(run func(flow.Identifier) error) *MockSealingCore_ProcessFinalizedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessIncorporatedResult provides a mock function with given fields: result
func (_m *MockSealingCore) ProcessIncorporatedResult(result *flow.IncorporatedResult) error {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for ProcessIncorporatedResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.IncorporatedResult) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSealingCore_ProcessIncorporatedResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessIncorporatedResult'
type MockSealingCore_ProcessIncorporatedResult_Call struct {
	*mock.Call
}

// ProcessIncorporatedResult is a helper method to define mock.On call
//   - result *flow.IncorporatedResult
func (_e *MockSealingCore_Expecter) ProcessIncorporatedResult(result interface{}) *MockSealingCore_ProcessIncorporatedResult_Call {
	return &MockSealingCore_ProcessIncorporatedResult_Call{Call: _e.mock.On("ProcessIncorporatedResult", result)}
}

func (_c *MockSealingCore_ProcessIncorporatedResult_Call) Run(run func(result *flow.IncorporatedResult)) *MockSealingCore_ProcessIncorporatedResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.IncorporatedResult))
	})
	return _c
}

func (_c *MockSealingCore_ProcessIncorporatedResult_Call) Return(_a0 error) *MockSealingCore_ProcessIncorporatedResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSealingCore_ProcessIncorporatedResult_Call) RunAndReturn(run func(*flow.IncorporatedResult) error) *MockSealingCore_ProcessIncorporatedResult_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSealingCore creates a new instance of MockSealingCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSealingCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSealingCore {
	mock := &MockSealingCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
