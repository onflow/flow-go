// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockSealingObservation is an autogenerated mock type for the SealingObservation type
type MockSealingObservation struct {
	mock.Mock
}

type MockSealingObservation_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSealingObservation) EXPECT() *MockSealingObservation_Expecter {
	return &MockSealingObservation_Expecter{mock: &_m.Mock}
}

// ApprovalsMissing provides a mock function with given fields: ir, chunksWithMissingApprovals
func (_m *MockSealingObservation) ApprovalsMissing(ir *flow.IncorporatedResult, chunksWithMissingApprovals map[uint64]flow.IdentifierList) {
	_m.Called(ir, chunksWithMissingApprovals)
}

// MockSealingObservation_ApprovalsMissing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApprovalsMissing'
type MockSealingObservation_ApprovalsMissing_Call struct {
	*mock.Call
}

// ApprovalsMissing is a helper method to define mock.On call
//   - ir *flow.IncorporatedResult
//   - chunksWithMissingApprovals map[uint64]flow.IdentifierList
func (_e *MockSealingObservation_Expecter) ApprovalsMissing(ir interface{}, chunksWithMissingApprovals interface{}) *MockSealingObservation_ApprovalsMissing_Call {
	return &MockSealingObservation_ApprovalsMissing_Call{Call: _e.mock.On("ApprovalsMissing", ir, chunksWithMissingApprovals)}
}

func (_c *MockSealingObservation_ApprovalsMissing_Call) Run(run func(ir *flow.IncorporatedResult, chunksWithMissingApprovals map[uint64]flow.IdentifierList)) *MockSealingObservation_ApprovalsMissing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.IncorporatedResult), args[1].(map[uint64]flow.IdentifierList))
	})
	return _c
}

func (_c *MockSealingObservation_ApprovalsMissing_Call) Return() *MockSealingObservation_ApprovalsMissing_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSealingObservation_ApprovalsMissing_Call) RunAndReturn(run func(*flow.IncorporatedResult, map[uint64]flow.IdentifierList)) *MockSealingObservation_ApprovalsMissing_Call {
	_c.Run(run)
	return _c
}

// ApprovalsRequested provides a mock function with given fields: ir, requestCount
func (_m *MockSealingObservation) ApprovalsRequested(ir *flow.IncorporatedResult, requestCount uint) {
	_m.Called(ir, requestCount)
}

// MockSealingObservation_ApprovalsRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApprovalsRequested'
type MockSealingObservation_ApprovalsRequested_Call struct {
	*mock.Call
}

// ApprovalsRequested is a helper method to define mock.On call
//   - ir *flow.IncorporatedResult
//   - requestCount uint
func (_e *MockSealingObservation_Expecter) ApprovalsRequested(ir interface{}, requestCount interface{}) *MockSealingObservation_ApprovalsRequested_Call {
	return &MockSealingObservation_ApprovalsRequested_Call{Call: _e.mock.On("ApprovalsRequested", ir, requestCount)}
}

func (_c *MockSealingObservation_ApprovalsRequested_Call) Run(run func(ir *flow.IncorporatedResult, requestCount uint)) *MockSealingObservation_ApprovalsRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.IncorporatedResult), args[1].(uint))
	})
	return _c
}

func (_c *MockSealingObservation_ApprovalsRequested_Call) Return() *MockSealingObservation_ApprovalsRequested_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSealingObservation_ApprovalsRequested_Call) RunAndReturn(run func(*flow.IncorporatedResult, uint)) *MockSealingObservation_ApprovalsRequested_Call {
	_c.Run(run)
	return _c
}

// Complete provides a mock function with no fields
func (_m *MockSealingObservation) Complete() {
	_m.Called()
}

// MockSealingObservation_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type MockSealingObservation_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
func (_e *MockSealingObservation_Expecter) Complete() *MockSealingObservation_Complete_Call {
	return &MockSealingObservation_Complete_Call{Call: _e.mock.On("Complete")}
}

func (_c *MockSealingObservation_Complete_Call) Run(run func()) *MockSealingObservation_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSealingObservation_Complete_Call) Return() *MockSealingObservation_Complete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSealingObservation_Complete_Call) RunAndReturn(run func()) *MockSealingObservation_Complete_Call {
	_c.Run(run)
	return _c
}

// QualifiesForEmergencySealing provides a mock function with given fields: ir, emergencySealable
func (_m *MockSealingObservation) QualifiesForEmergencySealing(ir *flow.IncorporatedResult, emergencySealable bool) {
	_m.Called(ir, emergencySealable)
}

// MockSealingObservation_QualifiesForEmergencySealing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QualifiesForEmergencySealing'
type MockSealingObservation_QualifiesForEmergencySealing_Call struct {
	*mock.Call
}

// QualifiesForEmergencySealing is a helper method to define mock.On call
//   - ir *flow.IncorporatedResult
//   - emergencySealable bool
func (_e *MockSealingObservation_Expecter) QualifiesForEmergencySealing(ir interface{}, emergencySealable interface{}) *MockSealingObservation_QualifiesForEmergencySealing_Call {
	return &MockSealingObservation_QualifiesForEmergencySealing_Call{Call: _e.mock.On("QualifiesForEmergencySealing", ir, emergencySealable)}
}

func (_c *MockSealingObservation_QualifiesForEmergencySealing_Call) Run(run func(ir *flow.IncorporatedResult, emergencySealable bool)) *MockSealingObservation_QualifiesForEmergencySealing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.IncorporatedResult), args[1].(bool))
	})
	return _c
}

func (_c *MockSealingObservation_QualifiesForEmergencySealing_Call) Return() *MockSealingObservation_QualifiesForEmergencySealing_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSealingObservation_QualifiesForEmergencySealing_Call) RunAndReturn(run func(*flow.IncorporatedResult, bool)) *MockSealingObservation_QualifiesForEmergencySealing_Call {
	_c.Run(run)
	return _c
}

// NewMockSealingObservation creates a new instance of MockSealingObservation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSealingObservation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSealingObservation {
	mock := &MockSealingObservation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
