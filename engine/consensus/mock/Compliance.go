// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	messages "github.com/onflow/flow-go/model/messages"

	mock "github.com/stretchr/testify/mock"
)

// MockCompliance is an autogenerated mock type for the Compliance type
type MockCompliance struct {
	mock.Mock
}

type MockCompliance_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompliance) EXPECT() *MockCompliance_Expecter {
	return &MockCompliance_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockCompliance) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockCompliance_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockCompliance_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockCompliance_Expecter) Done() *MockCompliance_Done_Call {
	return &MockCompliance_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockCompliance_Done_Call) Run(run func()) *MockCompliance_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCompliance_Done_Call) Return(_a0 <-chan struct{}) *MockCompliance_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCompliance_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockCompliance_Done_Call {
	_c.Call.Return(run)
	return _c
}

// OnBlockProposal provides a mock function with given fields: proposal
func (_m *MockCompliance) OnBlockProposal(proposal flow.Slashable[*messages.BlockProposal]) {
	_m.Called(proposal)
}

// MockCompliance_OnBlockProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBlockProposal'
type MockCompliance_OnBlockProposal_Call struct {
	*mock.Call
}

// OnBlockProposal is a helper method to define mock.On call
//   - proposal flow.Slashable[*messages.BlockProposal]
func (_e *MockCompliance_Expecter) OnBlockProposal(proposal interface{}) *MockCompliance_OnBlockProposal_Call {
	return &MockCompliance_OnBlockProposal_Call{Call: _e.mock.On("OnBlockProposal", proposal)}
}

func (_c *MockCompliance_OnBlockProposal_Call) Run(run func(proposal flow.Slashable[*messages.BlockProposal])) *MockCompliance_OnBlockProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Slashable[*messages.BlockProposal]))
	})
	return _c
}

func (_c *MockCompliance_OnBlockProposal_Call) Return() *MockCompliance_OnBlockProposal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCompliance_OnBlockProposal_Call) RunAndReturn(run func(flow.Slashable[*messages.BlockProposal])) *MockCompliance_OnBlockProposal_Call {
	_c.Run(run)
	return _c
}

// OnSyncedBlocks provides a mock function with given fields: blocks
func (_m *MockCompliance) OnSyncedBlocks(blocks flow.Slashable[[]*messages.BlockProposal]) {
	_m.Called(blocks)
}

// MockCompliance_OnSyncedBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSyncedBlocks'
type MockCompliance_OnSyncedBlocks_Call struct {
	*mock.Call
}

// OnSyncedBlocks is a helper method to define mock.On call
//   - blocks flow.Slashable[[]*messages.BlockProposal]
func (_e *MockCompliance_Expecter) OnSyncedBlocks(blocks interface{}) *MockCompliance_OnSyncedBlocks_Call {
	return &MockCompliance_OnSyncedBlocks_Call{Call: _e.mock.On("OnSyncedBlocks", blocks)}
}

func (_c *MockCompliance_OnSyncedBlocks_Call) Run(run func(blocks flow.Slashable[[]*messages.BlockProposal])) *MockCompliance_OnSyncedBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Slashable[[]*messages.BlockProposal]))
	})
	return _c
}

func (_c *MockCompliance_OnSyncedBlocks_Call) Return() *MockCompliance_OnSyncedBlocks_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCompliance_OnSyncedBlocks_Call) RunAndReturn(run func(flow.Slashable[[]*messages.BlockProposal])) *MockCompliance_OnSyncedBlocks_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockCompliance) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockCompliance_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockCompliance_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockCompliance_Expecter) Ready() *MockCompliance_Ready_Call {
	return &MockCompliance_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockCompliance_Ready_Call) Run(run func()) *MockCompliance_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCompliance_Ready_Call) Return(_a0 <-chan struct{}) *MockCompliance_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCompliance_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockCompliance_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockCompliance) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// MockCompliance_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCompliance_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 irrecoverable.SignalerContext
func (_e *MockCompliance_Expecter) Start(_a0 interface{}) *MockCompliance_Start_Call {
	return &MockCompliance_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockCompliance_Start_Call) Run(run func(_a0 irrecoverable.SignalerContext)) *MockCompliance_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(irrecoverable.SignalerContext))
	})
	return _c
}

func (_c *MockCompliance_Start_Call) Return() *MockCompliance_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCompliance_Start_Call) RunAndReturn(run func(irrecoverable.SignalerContext)) *MockCompliance_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockCompliance creates a new instance of MockCompliance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCompliance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCompliance {
	mock := &MockCompliance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
