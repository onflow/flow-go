// Code generated by mockery v2.53.5. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HeightSource is an autogenerated mock type for the HeightSource type
type HeightSource struct {
	mock.Mock
}

// EndHeight provides a mock function with no fields
func (_m *HeightSource) EndHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetItemAtHeight provides a mock function with given fields: ctx, height
func (_m *HeightSource) GetItemAtHeight(ctx context.Context, height uint64) (interface{}, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetItemAtHeight")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (interface{}, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) interface{}); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadyUpToHeight provides a mock function with given fields: ctx
func (_m *HeightSource) ReadyUpToHeight(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadyUpToHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartHeight provides a mock function with no fields
func (_m *HeightSource) StartHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// NewHeightSource creates a new instance of HeightSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHeightSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *HeightSource {
	mock := &HeightSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
