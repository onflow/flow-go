// Code generated by mockery v2.53.5. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Subscription is an autogenerated mock type for the Subscription type
type Subscription struct {
	mock.Mock
}

// Channel provides a mock function with no fields
func (_m *Subscription) Channel() <-chan interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 <-chan interface{}
	if rf, ok := ret.Get(0).(func() <-chan interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan interface{})
		}
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *Subscription) Close() {
	_m.Called()
}

// CloseWithError provides a mock function with given fields: _a0
func (_m *Subscription) CloseWithError(_a0 error) {
	_m.Called(_a0)
}

// Err provides a mock function with no fields
func (_m *Subscription) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with no fields
func (_m *Subscription) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Send provides a mock function with given fields: ctx, value, timeout
func (_m *Subscription) Send(ctx context.Context, value interface{}, timeout time.Duration) error {
	ret := _m.Called(ctx, value, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, value, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscription creates a new instance of Subscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscription {
	mock := &Subscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
