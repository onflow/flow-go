// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockBlockTracker is an autogenerated mock type for the BlockTracker type
type MockBlockTracker struct {
	mock.Mock
}

type MockBlockTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockTracker) EXPECT() *MockBlockTracker_Expecter {
	return &MockBlockTracker_Expecter{mock: &_m.Mock}
}

// GetHighestHeight provides a mock function with given fields: _a0
func (_m *MockBlockTracker) GetHighestHeight(_a0 flow.BlockStatus) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetHighestHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.BlockStatus) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.BlockStatus) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.BlockStatus) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockTracker_GetHighestHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHighestHeight'
type MockBlockTracker_GetHighestHeight_Call struct {
	*mock.Call
}

// GetHighestHeight is a helper method to define mock.On call
//   - _a0 flow.BlockStatus
func (_e *MockBlockTracker_Expecter) GetHighestHeight(_a0 interface{}) *MockBlockTracker_GetHighestHeight_Call {
	return &MockBlockTracker_GetHighestHeight_Call{Call: _e.mock.On("GetHighestHeight", _a0)}
}

func (_c *MockBlockTracker_GetHighestHeight_Call) Run(run func(_a0 flow.BlockStatus)) *MockBlockTracker_GetHighestHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.BlockStatus))
	})
	return _c
}

func (_c *MockBlockTracker_GetHighestHeight_Call) Return(_a0 uint64, _a1 error) *MockBlockTracker_GetHighestHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockTracker_GetHighestHeight_Call) RunAndReturn(run func(flow.BlockStatus) (uint64, error)) *MockBlockTracker_GetHighestHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartHeightFromBlockID provides a mock function with given fields: _a0
func (_m *MockBlockTracker) GetStartHeightFromBlockID(_a0 flow.Identifier) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStartHeightFromBlockID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockTracker_GetStartHeightFromBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartHeightFromBlockID'
type MockBlockTracker_GetStartHeightFromBlockID_Call struct {
	*mock.Call
}

// GetStartHeightFromBlockID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockBlockTracker_Expecter) GetStartHeightFromBlockID(_a0 interface{}) *MockBlockTracker_GetStartHeightFromBlockID_Call {
	return &MockBlockTracker_GetStartHeightFromBlockID_Call{Call: _e.mock.On("GetStartHeightFromBlockID", _a0)}
}

func (_c *MockBlockTracker_GetStartHeightFromBlockID_Call) Run(run func(_a0 flow.Identifier)) *MockBlockTracker_GetStartHeightFromBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockBlockTracker_GetStartHeightFromBlockID_Call) Return(_a0 uint64, _a1 error) *MockBlockTracker_GetStartHeightFromBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockTracker_GetStartHeightFromBlockID_Call) RunAndReturn(run func(flow.Identifier) (uint64, error)) *MockBlockTracker_GetStartHeightFromBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartHeightFromHeight provides a mock function with given fields: _a0
func (_m *MockBlockTracker) GetStartHeightFromHeight(_a0 uint64) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStartHeightFromHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockTracker_GetStartHeightFromHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartHeightFromHeight'
type MockBlockTracker_GetStartHeightFromHeight_Call struct {
	*mock.Call
}

// GetStartHeightFromHeight is a helper method to define mock.On call
//   - _a0 uint64
func (_e *MockBlockTracker_Expecter) GetStartHeightFromHeight(_a0 interface{}) *MockBlockTracker_GetStartHeightFromHeight_Call {
	return &MockBlockTracker_GetStartHeightFromHeight_Call{Call: _e.mock.On("GetStartHeightFromHeight", _a0)}
}

func (_c *MockBlockTracker_GetStartHeightFromHeight_Call) Run(run func(_a0 uint64)) *MockBlockTracker_GetStartHeightFromHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockBlockTracker_GetStartHeightFromHeight_Call) Return(_a0 uint64, _a1 error) *MockBlockTracker_GetStartHeightFromHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockTracker_GetStartHeightFromHeight_Call) RunAndReturn(run func(uint64) (uint64, error)) *MockBlockTracker_GetStartHeightFromHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartHeightFromLatest provides a mock function with given fields: _a0
func (_m *MockBlockTracker) GetStartHeightFromLatest(_a0 context.Context) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStartHeightFromLatest")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockTracker_GetStartHeightFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartHeightFromLatest'
type MockBlockTracker_GetStartHeightFromLatest_Call struct {
	*mock.Call
}

// GetStartHeightFromLatest is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockBlockTracker_Expecter) GetStartHeightFromLatest(_a0 interface{}) *MockBlockTracker_GetStartHeightFromLatest_Call {
	return &MockBlockTracker_GetStartHeightFromLatest_Call{Call: _e.mock.On("GetStartHeightFromLatest", _a0)}
}

func (_c *MockBlockTracker_GetStartHeightFromLatest_Call) Run(run func(_a0 context.Context)) *MockBlockTracker_GetStartHeightFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBlockTracker_GetStartHeightFromLatest_Call) Return(_a0 uint64, _a1 error) *MockBlockTracker_GetStartHeightFromLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockTracker_GetStartHeightFromLatest_Call) RunAndReturn(run func(context.Context) (uint64, error)) *MockBlockTracker_GetStartHeightFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessOnFinalizedBlock provides a mock function with no fields
func (_m *MockBlockTracker) ProcessOnFinalizedBlock() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessOnFinalizedBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlockTracker_ProcessOnFinalizedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessOnFinalizedBlock'
type MockBlockTracker_ProcessOnFinalizedBlock_Call struct {
	*mock.Call
}

// ProcessOnFinalizedBlock is a helper method to define mock.On call
func (_e *MockBlockTracker_Expecter) ProcessOnFinalizedBlock() *MockBlockTracker_ProcessOnFinalizedBlock_Call {
	return &MockBlockTracker_ProcessOnFinalizedBlock_Call{Call: _e.mock.On("ProcessOnFinalizedBlock")}
}

func (_c *MockBlockTracker_ProcessOnFinalizedBlock_Call) Run(run func()) *MockBlockTracker_ProcessOnFinalizedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockTracker_ProcessOnFinalizedBlock_Call) Return(_a0 error) *MockBlockTracker_ProcessOnFinalizedBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockTracker_ProcessOnFinalizedBlock_Call) RunAndReturn(run func() error) *MockBlockTracker_ProcessOnFinalizedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockTracker creates a new instance of MockBlockTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockTracker {
	mock := &MockBlockTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
