// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"

	mock "github.com/stretchr/testify/mock"
)

// MockExecutionDataTracker is an autogenerated mock type for the ExecutionDataTracker type
type MockExecutionDataTracker struct {
	mock.Mock
}

type MockExecutionDataTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionDataTracker) EXPECT() *MockExecutionDataTracker_Expecter {
	return &MockExecutionDataTracker_Expecter{mock: &_m.Mock}
}

// GetHighestHeight provides a mock function with no fields
func (_m *MockExecutionDataTracker) GetHighestHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHighestHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockExecutionDataTracker_GetHighestHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHighestHeight'
type MockExecutionDataTracker_GetHighestHeight_Call struct {
	*mock.Call
}

// GetHighestHeight is a helper method to define mock.On call
func (_e *MockExecutionDataTracker_Expecter) GetHighestHeight() *MockExecutionDataTracker_GetHighestHeight_Call {
	return &MockExecutionDataTracker_GetHighestHeight_Call{Call: _e.mock.On("GetHighestHeight")}
}

func (_c *MockExecutionDataTracker_GetHighestHeight_Call) Run(run func()) *MockExecutionDataTracker_GetHighestHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionDataTracker_GetHighestHeight_Call) Return(_a0 uint64) *MockExecutionDataTracker_GetHighestHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionDataTracker_GetHighestHeight_Call) RunAndReturn(run func() uint64) *MockExecutionDataTracker_GetHighestHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartHeight provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockExecutionDataTracker) GetStartHeight(_a0 context.Context, _a1 flow.Identifier, _a2 uint64) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetStartHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64) (uint64, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64) uint64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, uint64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionDataTracker_GetStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartHeight'
type MockExecutionDataTracker_GetStartHeight_Call struct {
	*mock.Call
}

// GetStartHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 flow.Identifier
//   - _a2 uint64
func (_e *MockExecutionDataTracker_Expecter) GetStartHeight(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockExecutionDataTracker_GetStartHeight_Call {
	return &MockExecutionDataTracker_GetStartHeight_Call{Call: _e.mock.On("GetStartHeight", _a0, _a1, _a2)}
}

func (_c *MockExecutionDataTracker_GetStartHeight_Call) Run(run func(_a0 context.Context, _a1 flow.Identifier, _a2 uint64)) *MockExecutionDataTracker_GetStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(uint64))
	})
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeight_Call) Return(_a0 uint64, _a1 error) *MockExecutionDataTracker_GetStartHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeight_Call) RunAndReturn(run func(context.Context, flow.Identifier, uint64) (uint64, error)) *MockExecutionDataTracker_GetStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartHeightFromBlockID provides a mock function with given fields: _a0
func (_m *MockExecutionDataTracker) GetStartHeightFromBlockID(_a0 flow.Identifier) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStartHeightFromBlockID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionDataTracker_GetStartHeightFromBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartHeightFromBlockID'
type MockExecutionDataTracker_GetStartHeightFromBlockID_Call struct {
	*mock.Call
}

// GetStartHeightFromBlockID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockExecutionDataTracker_Expecter) GetStartHeightFromBlockID(_a0 interface{}) *MockExecutionDataTracker_GetStartHeightFromBlockID_Call {
	return &MockExecutionDataTracker_GetStartHeightFromBlockID_Call{Call: _e.mock.On("GetStartHeightFromBlockID", _a0)}
}

func (_c *MockExecutionDataTracker_GetStartHeightFromBlockID_Call) Run(run func(_a0 flow.Identifier)) *MockExecutionDataTracker_GetStartHeightFromBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeightFromBlockID_Call) Return(_a0 uint64, _a1 error) *MockExecutionDataTracker_GetStartHeightFromBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeightFromBlockID_Call) RunAndReturn(run func(flow.Identifier) (uint64, error)) *MockExecutionDataTracker_GetStartHeightFromBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartHeightFromHeight provides a mock function with given fields: _a0
func (_m *MockExecutionDataTracker) GetStartHeightFromHeight(_a0 uint64) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStartHeightFromHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionDataTracker_GetStartHeightFromHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartHeightFromHeight'
type MockExecutionDataTracker_GetStartHeightFromHeight_Call struct {
	*mock.Call
}

// GetStartHeightFromHeight is a helper method to define mock.On call
//   - _a0 uint64
func (_e *MockExecutionDataTracker_Expecter) GetStartHeightFromHeight(_a0 interface{}) *MockExecutionDataTracker_GetStartHeightFromHeight_Call {
	return &MockExecutionDataTracker_GetStartHeightFromHeight_Call{Call: _e.mock.On("GetStartHeightFromHeight", _a0)}
}

func (_c *MockExecutionDataTracker_GetStartHeightFromHeight_Call) Run(run func(_a0 uint64)) *MockExecutionDataTracker_GetStartHeightFromHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeightFromHeight_Call) Return(_a0 uint64, _a1 error) *MockExecutionDataTracker_GetStartHeightFromHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeightFromHeight_Call) RunAndReturn(run func(uint64) (uint64, error)) *MockExecutionDataTracker_GetStartHeightFromHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartHeightFromLatest provides a mock function with given fields: _a0
func (_m *MockExecutionDataTracker) GetStartHeightFromLatest(_a0 context.Context) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStartHeightFromLatest")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionDataTracker_GetStartHeightFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartHeightFromLatest'
type MockExecutionDataTracker_GetStartHeightFromLatest_Call struct {
	*mock.Call
}

// GetStartHeightFromLatest is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockExecutionDataTracker_Expecter) GetStartHeightFromLatest(_a0 interface{}) *MockExecutionDataTracker_GetStartHeightFromLatest_Call {
	return &MockExecutionDataTracker_GetStartHeightFromLatest_Call{Call: _e.mock.On("GetStartHeightFromLatest", _a0)}
}

func (_c *MockExecutionDataTracker_GetStartHeightFromLatest_Call) Run(run func(_a0 context.Context)) *MockExecutionDataTracker_GetStartHeightFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeightFromLatest_Call) Return(_a0 uint64, _a1 error) *MockExecutionDataTracker_GetStartHeightFromLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionDataTracker_GetStartHeightFromLatest_Call) RunAndReturn(run func(context.Context) (uint64, error)) *MockExecutionDataTracker_GetStartHeightFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// OnExecutionData provides a mock function with given fields: _a0
func (_m *MockExecutionDataTracker) OnExecutionData(_a0 *execution_data.BlockExecutionDataEntity) {
	_m.Called(_a0)
}

// MockExecutionDataTracker_OnExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnExecutionData'
type MockExecutionDataTracker_OnExecutionData_Call struct {
	*mock.Call
}

// OnExecutionData is a helper method to define mock.On call
//   - _a0 *execution_data.BlockExecutionDataEntity
func (_e *MockExecutionDataTracker_Expecter) OnExecutionData(_a0 interface{}) *MockExecutionDataTracker_OnExecutionData_Call {
	return &MockExecutionDataTracker_OnExecutionData_Call{Call: _e.mock.On("OnExecutionData", _a0)}
}

func (_c *MockExecutionDataTracker_OnExecutionData_Call) Run(run func(_a0 *execution_data.BlockExecutionDataEntity)) *MockExecutionDataTracker_OnExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*execution_data.BlockExecutionDataEntity))
	})
	return _c
}

func (_c *MockExecutionDataTracker_OnExecutionData_Call) Return() *MockExecutionDataTracker_OnExecutionData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutionDataTracker_OnExecutionData_Call) RunAndReturn(run func(*execution_data.BlockExecutionDataEntity)) *MockExecutionDataTracker_OnExecutionData_Call {
	_c.Run(run)
	return _c
}

// NewMockExecutionDataTracker creates a new instance of MockExecutionDataTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionDataTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionDataTracker {
	mock := &MockExecutionDataTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
