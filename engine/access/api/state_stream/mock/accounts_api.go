// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"

	state_stream "github.com/onflow/flow-go/engine/access/api/state_stream"

	subscription "github.com/onflow/flow-go/engine/access/subscription"
)

// AccountsAPI is an autogenerated mock type for the AccountsAPI type
type AccountsAPI struct {
	mock.Mock
}

// SubscribeAccountStatusesFromLatestBlock provides a mock function with given fields: ctx, filter, criteria
func (_m *AccountsAPI) SubscribeAccountStatusesFromLatestBlock(ctx context.Context, filter state_stream.AccountStatusFilter, criteria optimistic_sync.Criteria) subscription.Subscription {
	ret := _m.Called(ctx, filter, criteria)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromLatestBlock")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, state_stream.AccountStatusFilter, optimistic_sync.Criteria) subscription.Subscription); ok {
		r0 = rf(ctx, filter, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// SubscribeAccountStatusesFromStartBlockID provides a mock function with given fields: ctx, startBlockID, filter, criteria
func (_m *AccountsAPI) SubscribeAccountStatusesFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, filter state_stream.AccountStatusFilter, criteria optimistic_sync.Criteria) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, filter, criteria)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromStartBlockID")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, state_stream.AccountStatusFilter, optimistic_sync.Criteria) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, filter, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// SubscribeAccountStatusesFromStartHeight provides a mock function with given fields: ctx, startHeight, filter, criteria
func (_m *AccountsAPI) SubscribeAccountStatusesFromStartHeight(ctx context.Context, startHeight uint64, filter state_stream.AccountStatusFilter, criteria optimistic_sync.Criteria) subscription.Subscription {
	ret := _m.Called(ctx, startHeight, filter, criteria)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromStartHeight")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64, state_stream.AccountStatusFilter, optimistic_sync.Criteria) subscription.Subscription); ok {
		r0 = rf(ctx, startHeight, filter, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// NewAccountsAPI creates a new instance of AccountsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountsAPI {
	mock := &AccountsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
