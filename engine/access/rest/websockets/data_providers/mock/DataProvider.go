// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	models "github.com/onflow/flow-go/engine/access/rest/websockets/models"
	mock "github.com/stretchr/testify/mock"
)

// MockDataProvider is an autogenerated mock type for the DataProvider type
type MockDataProvider struct {
	mock.Mock
}

type MockDataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataProvider) EXPECT() *MockDataProvider_Expecter {
	return &MockDataProvider_Expecter{mock: &_m.Mock}
}

// Arguments provides a mock function with no fields
func (_m *MockDataProvider) Arguments() models.Arguments {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Arguments")
	}

	var r0 models.Arguments
	if rf, ok := ret.Get(0).(func() models.Arguments); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Arguments)
		}
	}

	return r0
}

// MockDataProvider_Arguments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Arguments'
type MockDataProvider_Arguments_Call struct {
	*mock.Call
}

// Arguments is a helper method to define mock.On call
func (_e *MockDataProvider_Expecter) Arguments() *MockDataProvider_Arguments_Call {
	return &MockDataProvider_Arguments_Call{Call: _e.mock.On("Arguments")}
}

func (_c *MockDataProvider_Arguments_Call) Run(run func()) *MockDataProvider_Arguments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataProvider_Arguments_Call) Return(_a0 models.Arguments) *MockDataProvider_Arguments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataProvider_Arguments_Call) RunAndReturn(run func() models.Arguments) *MockDataProvider_Arguments_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockDataProvider) Close() {
	_m.Called()
}

// MockDataProvider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDataProvider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDataProvider_Expecter) Close() *MockDataProvider_Close_Call {
	return &MockDataProvider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDataProvider_Close_Call) Run(run func()) *MockDataProvider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataProvider_Close_Call) Return() *MockDataProvider_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDataProvider_Close_Call) RunAndReturn(run func()) *MockDataProvider_Close_Call {
	_c.Run(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockDataProvider) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDataProvider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockDataProvider_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockDataProvider_Expecter) ID() *MockDataProvider_ID_Call {
	return &MockDataProvider_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockDataProvider_ID_Call) Run(run func()) *MockDataProvider_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataProvider_ID_Call) Return(_a0 string) *MockDataProvider_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataProvider_ID_Call) RunAndReturn(run func() string) *MockDataProvider_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *MockDataProvider) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataProvider_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockDataProvider_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockDataProvider_Expecter) Run() *MockDataProvider_Run_Call {
	return &MockDataProvider_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockDataProvider_Run_Call) Run(run func()) *MockDataProvider_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataProvider_Run_Call) Return(_a0 error) *MockDataProvider_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataProvider_Run_Call) RunAndReturn(run func() error) *MockDataProvider_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with no fields
func (_m *MockDataProvider) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDataProvider_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type MockDataProvider_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *MockDataProvider_Expecter) Topic() *MockDataProvider_Topic_Call {
	return &MockDataProvider_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *MockDataProvider_Topic_Call) Run(run func()) *MockDataProvider_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataProvider_Topic_Call) Return(_a0 string) *MockDataProvider_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataProvider_Topic_Call) RunAndReturn(run func() string) *MockDataProvider_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataProvider creates a new instance of MockDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataProvider {
	mock := &MockDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
