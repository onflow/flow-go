// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	data_providers "github.com/onflow/flow-go/engine/access/rest/websockets/data_providers"
	mock "github.com/stretchr/testify/mock"

	models "github.com/onflow/flow-go/engine/access/rest/websockets/models"
)

// MockDataProviderFactory is an autogenerated mock type for the DataProviderFactory type
type MockDataProviderFactory struct {
	mock.Mock
}

type MockDataProviderFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataProviderFactory) EXPECT() *MockDataProviderFactory_Expecter {
	return &MockDataProviderFactory_Expecter{mock: &_m.Mock}
}

// NewDataProvider provides a mock function with given fields: ctx, subID, topic, args, stream
func (_m *MockDataProviderFactory) NewDataProvider(ctx context.Context, subID string, topic string, args models.Arguments, stream chan<- interface{}) (data_providers.DataProvider, error) {
	ret := _m.Called(ctx, subID, topic, args, stream)

	if len(ret) == 0 {
		panic("no return value specified for NewDataProvider")
	}

	var r0 data_providers.DataProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.Arguments, chan<- interface{}) (data_providers.DataProvider, error)); ok {
		return rf(ctx, subID, topic, args, stream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.Arguments, chan<- interface{}) data_providers.DataProvider); ok {
		r0 = rf(ctx, subID, topic, args, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data_providers.DataProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, models.Arguments, chan<- interface{}) error); ok {
		r1 = rf(ctx, subID, topic, args, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataProviderFactory_NewDataProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDataProvider'
type MockDataProviderFactory_NewDataProvider_Call struct {
	*mock.Call
}

// NewDataProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - subID string
//   - topic string
//   - args models.Arguments
//   - stream chan<- interface{}
func (_e *MockDataProviderFactory_Expecter) NewDataProvider(ctx interface{}, subID interface{}, topic interface{}, args interface{}, stream interface{}) *MockDataProviderFactory_NewDataProvider_Call {
	return &MockDataProviderFactory_NewDataProvider_Call{Call: _e.mock.On("NewDataProvider", ctx, subID, topic, args, stream)}
}

func (_c *MockDataProviderFactory_NewDataProvider_Call) Run(run func(ctx context.Context, subID string, topic string, args models.Arguments, stream chan<- interface{})) *MockDataProviderFactory_NewDataProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(models.Arguments), args[4].(chan<- interface{}))
	})
	return _c
}

func (_c *MockDataProviderFactory_NewDataProvider_Call) Return(_a0 data_providers.DataProvider, _a1 error) *MockDataProviderFactory_NewDataProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataProviderFactory_NewDataProvider_Call) RunAndReturn(run func(context.Context, string, string, models.Arguments, chan<- interface{}) (data_providers.DataProvider, error)) *MockDataProviderFactory_NewDataProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataProviderFactory creates a new instance of MockDataProviderFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataProviderFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataProviderFactory {
	mock := &MockDataProviderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
