// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockWebsocketConnection is an autogenerated mock type for the WebsocketConnection type
type MockWebsocketConnection struct {
	mock.Mock
}

type MockWebsocketConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebsocketConnection) EXPECT() *MockWebsocketConnection_Expecter {
	return &MockWebsocketConnection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockWebsocketConnection) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebsocketConnection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWebsocketConnection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWebsocketConnection_Expecter) Close() *MockWebsocketConnection_Close_Call {
	return &MockWebsocketConnection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWebsocketConnection_Close_Call) Run(run func()) *MockWebsocketConnection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWebsocketConnection_Close_Call) Return(_a0 error) *MockWebsocketConnection_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebsocketConnection_Close_Call) RunAndReturn(run func() error) *MockWebsocketConnection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ReadJSON provides a mock function with given fields: v
func (_m *MockWebsocketConnection) ReadJSON(v interface{}) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for ReadJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebsocketConnection_ReadJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadJSON'
type MockWebsocketConnection_ReadJSON_Call struct {
	*mock.Call
}

// ReadJSON is a helper method to define mock.On call
//   - v interface{}
func (_e *MockWebsocketConnection_Expecter) ReadJSON(v interface{}) *MockWebsocketConnection_ReadJSON_Call {
	return &MockWebsocketConnection_ReadJSON_Call{Call: _e.mock.On("ReadJSON", v)}
}

func (_c *MockWebsocketConnection_ReadJSON_Call) Run(run func(v interface{})) *MockWebsocketConnection_ReadJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockWebsocketConnection_ReadJSON_Call) Return(_a0 error) *MockWebsocketConnection_ReadJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebsocketConnection_ReadJSON_Call) RunAndReturn(run func(interface{}) error) *MockWebsocketConnection_ReadJSON_Call {
	_c.Call.Return(run)
	return _c
}

// SetPongHandler provides a mock function with given fields: h
func (_m *MockWebsocketConnection) SetPongHandler(h func(string) error) {
	_m.Called(h)
}

// MockWebsocketConnection_SetPongHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPongHandler'
type MockWebsocketConnection_SetPongHandler_Call struct {
	*mock.Call
}

// SetPongHandler is a helper method to define mock.On call
//   - h func(string) error
func (_e *MockWebsocketConnection_Expecter) SetPongHandler(h interface{}) *MockWebsocketConnection_SetPongHandler_Call {
	return &MockWebsocketConnection_SetPongHandler_Call{Call: _e.mock.On("SetPongHandler", h)}
}

func (_c *MockWebsocketConnection_SetPongHandler_Call) Run(run func(h func(string) error)) *MockWebsocketConnection_SetPongHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string) error))
	})
	return _c
}

func (_c *MockWebsocketConnection_SetPongHandler_Call) Return() *MockWebsocketConnection_SetPongHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWebsocketConnection_SetPongHandler_Call) RunAndReturn(run func(func(string) error)) *MockWebsocketConnection_SetPongHandler_Call {
	_c.Run(run)
	return _c
}

// SetReadDeadline provides a mock function with given fields: deadline
func (_m *MockWebsocketConnection) SetReadDeadline(deadline time.Time) error {
	ret := _m.Called(deadline)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(deadline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebsocketConnection_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type MockWebsocketConnection_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - deadline time.Time
func (_e *MockWebsocketConnection_Expecter) SetReadDeadline(deadline interface{}) *MockWebsocketConnection_SetReadDeadline_Call {
	return &MockWebsocketConnection_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", deadline)}
}

func (_c *MockWebsocketConnection_SetReadDeadline_Call) Run(run func(deadline time.Time)) *MockWebsocketConnection_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockWebsocketConnection_SetReadDeadline_Call) Return(_a0 error) *MockWebsocketConnection_SetReadDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebsocketConnection_SetReadDeadline_Call) RunAndReturn(run func(time.Time) error) *MockWebsocketConnection_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteDeadline provides a mock function with given fields: deadline
func (_m *MockWebsocketConnection) SetWriteDeadline(deadline time.Time) error {
	ret := _m.Called(deadline)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(deadline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebsocketConnection_SetWriteDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteDeadline'
type MockWebsocketConnection_SetWriteDeadline_Call struct {
	*mock.Call
}

// SetWriteDeadline is a helper method to define mock.On call
//   - deadline time.Time
func (_e *MockWebsocketConnection_Expecter) SetWriteDeadline(deadline interface{}) *MockWebsocketConnection_SetWriteDeadline_Call {
	return &MockWebsocketConnection_SetWriteDeadline_Call{Call: _e.mock.On("SetWriteDeadline", deadline)}
}

func (_c *MockWebsocketConnection_SetWriteDeadline_Call) Run(run func(deadline time.Time)) *MockWebsocketConnection_SetWriteDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockWebsocketConnection_SetWriteDeadline_Call) Return(_a0 error) *MockWebsocketConnection_SetWriteDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebsocketConnection_SetWriteDeadline_Call) RunAndReturn(run func(time.Time) error) *MockWebsocketConnection_SetWriteDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// WriteControl provides a mock function with given fields: messageType, deadline
func (_m *MockWebsocketConnection) WriteControl(messageType int, deadline time.Time) error {
	ret := _m.Called(messageType, deadline)

	if len(ret) == 0 {
		panic("no return value specified for WriteControl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, time.Time) error); ok {
		r0 = rf(messageType, deadline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebsocketConnection_WriteControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteControl'
type MockWebsocketConnection_WriteControl_Call struct {
	*mock.Call
}

// WriteControl is a helper method to define mock.On call
//   - messageType int
//   - deadline time.Time
func (_e *MockWebsocketConnection_Expecter) WriteControl(messageType interface{}, deadline interface{}) *MockWebsocketConnection_WriteControl_Call {
	return &MockWebsocketConnection_WriteControl_Call{Call: _e.mock.On("WriteControl", messageType, deadline)}
}

func (_c *MockWebsocketConnection_WriteControl_Call) Run(run func(messageType int, deadline time.Time)) *MockWebsocketConnection_WriteControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(time.Time))
	})
	return _c
}

func (_c *MockWebsocketConnection_WriteControl_Call) Return(_a0 error) *MockWebsocketConnection_WriteControl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebsocketConnection_WriteControl_Call) RunAndReturn(run func(int, time.Time) error) *MockWebsocketConnection_WriteControl_Call {
	_c.Call.Return(run)
	return _c
}

// WriteJSON provides a mock function with given fields: v
func (_m *MockWebsocketConnection) WriteJSON(v interface{}) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for WriteJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebsocketConnection_WriteJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteJSON'
type MockWebsocketConnection_WriteJSON_Call struct {
	*mock.Call
}

// WriteJSON is a helper method to define mock.On call
//   - v interface{}
func (_e *MockWebsocketConnection_Expecter) WriteJSON(v interface{}) *MockWebsocketConnection_WriteJSON_Call {
	return &MockWebsocketConnection_WriteJSON_Call{Call: _e.mock.On("WriteJSON", v)}
}

func (_c *MockWebsocketConnection_WriteJSON_Call) Run(run func(v interface{})) *MockWebsocketConnection_WriteJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockWebsocketConnection_WriteJSON_Call) Return(_a0 error) *MockWebsocketConnection_WriteJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebsocketConnection_WriteJSON_Call) RunAndReturn(run func(interface{}) error) *MockWebsocketConnection_WriteJSON_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWebsocketConnection creates a new instance of MockWebsocketConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebsocketConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebsocketConnection {
	mock := &MockWebsocketConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
