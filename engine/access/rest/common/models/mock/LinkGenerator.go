// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockLinkGenerator is an autogenerated mock type for the LinkGenerator type
type MockLinkGenerator struct {
	mock.Mock
}

type MockLinkGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLinkGenerator) EXPECT() *MockLinkGenerator_Expecter {
	return &MockLinkGenerator_Expecter{mock: &_m.Mock}
}

// AccountLink provides a mock function with given fields: address
func (_m *MockLinkGenerator) AccountLink(address string) (string, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for AccountLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLinkGenerator_AccountLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountLink'
type MockLinkGenerator_AccountLink_Call struct {
	*mock.Call
}

// AccountLink is a helper method to define mock.On call
//   - address string
func (_e *MockLinkGenerator_Expecter) AccountLink(address interface{}) *MockLinkGenerator_AccountLink_Call {
	return &MockLinkGenerator_AccountLink_Call{Call: _e.mock.On("AccountLink", address)}
}

func (_c *MockLinkGenerator_AccountLink_Call) Run(run func(address string)) *MockLinkGenerator_AccountLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLinkGenerator_AccountLink_Call) Return(_a0 string, _a1 error) *MockLinkGenerator_AccountLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLinkGenerator_AccountLink_Call) RunAndReturn(run func(string) (string, error)) *MockLinkGenerator_AccountLink_Call {
	_c.Call.Return(run)
	return _c
}

// BlockLink provides a mock function with given fields: id
func (_m *MockLinkGenerator) BlockLink(id flow.Identifier) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BlockLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLinkGenerator_BlockLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockLink'
type MockLinkGenerator_BlockLink_Call struct {
	*mock.Call
}

// BlockLink is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockLinkGenerator_Expecter) BlockLink(id interface{}) *MockLinkGenerator_BlockLink_Call {
	return &MockLinkGenerator_BlockLink_Call{Call: _e.mock.On("BlockLink", id)}
}

func (_c *MockLinkGenerator_BlockLink_Call) Run(run func(id flow.Identifier)) *MockLinkGenerator_BlockLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockLinkGenerator_BlockLink_Call) Return(_a0 string, _a1 error) *MockLinkGenerator_BlockLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLinkGenerator_BlockLink_Call) RunAndReturn(run func(flow.Identifier) (string, error)) *MockLinkGenerator_BlockLink_Call {
	_c.Call.Return(run)
	return _c
}

// CollectionLink provides a mock function with given fields: id
func (_m *MockLinkGenerator) CollectionLink(id flow.Identifier) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CollectionLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLinkGenerator_CollectionLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectionLink'
type MockLinkGenerator_CollectionLink_Call struct {
	*mock.Call
}

// CollectionLink is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockLinkGenerator_Expecter) CollectionLink(id interface{}) *MockLinkGenerator_CollectionLink_Call {
	return &MockLinkGenerator_CollectionLink_Call{Call: _e.mock.On("CollectionLink", id)}
}

func (_c *MockLinkGenerator_CollectionLink_Call) Run(run func(id flow.Identifier)) *MockLinkGenerator_CollectionLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockLinkGenerator_CollectionLink_Call) Return(_a0 string, _a1 error) *MockLinkGenerator_CollectionLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLinkGenerator_CollectionLink_Call) RunAndReturn(run func(flow.Identifier) (string, error)) *MockLinkGenerator_CollectionLink_Call {
	_c.Call.Return(run)
	return _c
}

// ExecutionResultLink provides a mock function with given fields: id
func (_m *MockLinkGenerator) ExecutionResultLink(id flow.Identifier) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExecutionResultLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLinkGenerator_ExecutionResultLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionResultLink'
type MockLinkGenerator_ExecutionResultLink_Call struct {
	*mock.Call
}

// ExecutionResultLink is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockLinkGenerator_Expecter) ExecutionResultLink(id interface{}) *MockLinkGenerator_ExecutionResultLink_Call {
	return &MockLinkGenerator_ExecutionResultLink_Call{Call: _e.mock.On("ExecutionResultLink", id)}
}

func (_c *MockLinkGenerator_ExecutionResultLink_Call) Run(run func(id flow.Identifier)) *MockLinkGenerator_ExecutionResultLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockLinkGenerator_ExecutionResultLink_Call) Return(_a0 string, _a1 error) *MockLinkGenerator_ExecutionResultLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLinkGenerator_ExecutionResultLink_Call) RunAndReturn(run func(flow.Identifier) (string, error)) *MockLinkGenerator_ExecutionResultLink_Call {
	_c.Call.Return(run)
	return _c
}

// PayloadLink provides a mock function with given fields: id
func (_m *MockLinkGenerator) PayloadLink(id flow.Identifier) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for PayloadLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLinkGenerator_PayloadLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayloadLink'
type MockLinkGenerator_PayloadLink_Call struct {
	*mock.Call
}

// PayloadLink is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockLinkGenerator_Expecter) PayloadLink(id interface{}) *MockLinkGenerator_PayloadLink_Call {
	return &MockLinkGenerator_PayloadLink_Call{Call: _e.mock.On("PayloadLink", id)}
}

func (_c *MockLinkGenerator_PayloadLink_Call) Run(run func(id flow.Identifier)) *MockLinkGenerator_PayloadLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockLinkGenerator_PayloadLink_Call) Return(_a0 string, _a1 error) *MockLinkGenerator_PayloadLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLinkGenerator_PayloadLink_Call) RunAndReturn(run func(flow.Identifier) (string, error)) *MockLinkGenerator_PayloadLink_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionLink provides a mock function with given fields: id
func (_m *MockLinkGenerator) TransactionLink(id flow.Identifier) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TransactionLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLinkGenerator_TransactionLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionLink'
type MockLinkGenerator_TransactionLink_Call struct {
	*mock.Call
}

// TransactionLink is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockLinkGenerator_Expecter) TransactionLink(id interface{}) *MockLinkGenerator_TransactionLink_Call {
	return &MockLinkGenerator_TransactionLink_Call{Call: _e.mock.On("TransactionLink", id)}
}

func (_c *MockLinkGenerator_TransactionLink_Call) Run(run func(id flow.Identifier)) *MockLinkGenerator_TransactionLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockLinkGenerator_TransactionLink_Call) Return(_a0 string, _a1 error) *MockLinkGenerator_TransactionLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLinkGenerator_TransactionLink_Call) RunAndReturn(run func(flow.Identifier) (string, error)) *MockLinkGenerator_TransactionLink_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionResultLink provides a mock function with given fields: id
func (_m *MockLinkGenerator) TransactionResultLink(id flow.Identifier) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TransactionResultLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLinkGenerator_TransactionResultLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionResultLink'
type MockLinkGenerator_TransactionResultLink_Call struct {
	*mock.Call
}

// TransactionResultLink is a helper method to define mock.On call
//   - id flow.Identifier
func (_e *MockLinkGenerator_Expecter) TransactionResultLink(id interface{}) *MockLinkGenerator_TransactionResultLink_Call {
	return &MockLinkGenerator_TransactionResultLink_Call{Call: _e.mock.On("TransactionResultLink", id)}
}

func (_c *MockLinkGenerator_TransactionResultLink_Call) Run(run func(id flow.Identifier)) *MockLinkGenerator_TransactionResultLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockLinkGenerator_TransactionResultLink_Call) Return(_a0 string, _a1 error) *MockLinkGenerator_TransactionResultLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLinkGenerator_TransactionResultLink_Call) RunAndReturn(run func(flow.Identifier) (string, error)) *MockLinkGenerator_TransactionResultLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLinkGenerator creates a new instance of MockLinkGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLinkGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLinkGenerator {
	mock := &MockLinkGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
