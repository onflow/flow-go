// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	access "github.com/onflow/flow/protobuf/go/flow/access"

	crypto "github.com/onflow/crypto"

	execution "github.com/onflow/flow/protobuf/go/flow/execution"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockConnectionFactory is an autogenerated mock type for the ConnectionFactory type
type MockConnectionFactory struct {
	mock.Mock
}

type MockConnectionFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionFactory) EXPECT() *MockConnectionFactory_Expecter {
	return &MockConnectionFactory_Expecter{mock: &_m.Mock}
}

// GetAccessAPIClient provides a mock function with given fields: address, networkPubKey
func (_m *MockConnectionFactory) GetAccessAPIClient(address string, networkPubKey crypto.PublicKey) (access.AccessAPIClient, io.Closer, error) {
	ret := _m.Called(address, networkPubKey)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessAPIClient")
	}

	var r0 access.AccessAPIClient
	var r1 io.Closer
	var r2 error
	if rf, ok := ret.Get(0).(func(string, crypto.PublicKey) (access.AccessAPIClient, io.Closer, error)); ok {
		return rf(address, networkPubKey)
	}
	if rf, ok := ret.Get(0).(func(string, crypto.PublicKey) access.AccessAPIClient); ok {
		r0 = rf(address, networkPubKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPIClient)
		}
	}

	if rf, ok := ret.Get(1).(func(string, crypto.PublicKey) io.Closer); ok {
		r1 = rf(address, networkPubKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Closer)
		}
	}

	if rf, ok := ret.Get(2).(func(string, crypto.PublicKey) error); ok {
		r2 = rf(address, networkPubKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConnectionFactory_GetAccessAPIClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessAPIClient'
type MockConnectionFactory_GetAccessAPIClient_Call struct {
	*mock.Call
}

// GetAccessAPIClient is a helper method to define mock.On call
//   - address string
//   - networkPubKey crypto.PublicKey
func (_e *MockConnectionFactory_Expecter) GetAccessAPIClient(address interface{}, networkPubKey interface{}) *MockConnectionFactory_GetAccessAPIClient_Call {
	return &MockConnectionFactory_GetAccessAPIClient_Call{Call: _e.mock.On("GetAccessAPIClient", address, networkPubKey)}
}

func (_c *MockConnectionFactory_GetAccessAPIClient_Call) Run(run func(address string, networkPubKey crypto.PublicKey)) *MockConnectionFactory_GetAccessAPIClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(crypto.PublicKey))
	})
	return _c
}

func (_c *MockConnectionFactory_GetAccessAPIClient_Call) Return(_a0 access.AccessAPIClient, _a1 io.Closer, _a2 error) *MockConnectionFactory_GetAccessAPIClient_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConnectionFactory_GetAccessAPIClient_Call) RunAndReturn(run func(string, crypto.PublicKey) (access.AccessAPIClient, io.Closer, error)) *MockConnectionFactory_GetAccessAPIClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessAPIClientWithPort provides a mock function with given fields: address, networkPubKey
func (_m *MockConnectionFactory) GetAccessAPIClientWithPort(address string, networkPubKey crypto.PublicKey) (access.AccessAPIClient, io.Closer, error) {
	ret := _m.Called(address, networkPubKey)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessAPIClientWithPort")
	}

	var r0 access.AccessAPIClient
	var r1 io.Closer
	var r2 error
	if rf, ok := ret.Get(0).(func(string, crypto.PublicKey) (access.AccessAPIClient, io.Closer, error)); ok {
		return rf(address, networkPubKey)
	}
	if rf, ok := ret.Get(0).(func(string, crypto.PublicKey) access.AccessAPIClient); ok {
		r0 = rf(address, networkPubKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPIClient)
		}
	}

	if rf, ok := ret.Get(1).(func(string, crypto.PublicKey) io.Closer); ok {
		r1 = rf(address, networkPubKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Closer)
		}
	}

	if rf, ok := ret.Get(2).(func(string, crypto.PublicKey) error); ok {
		r2 = rf(address, networkPubKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConnectionFactory_GetAccessAPIClientWithPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessAPIClientWithPort'
type MockConnectionFactory_GetAccessAPIClientWithPort_Call struct {
	*mock.Call
}

// GetAccessAPIClientWithPort is a helper method to define mock.On call
//   - address string
//   - networkPubKey crypto.PublicKey
func (_e *MockConnectionFactory_Expecter) GetAccessAPIClientWithPort(address interface{}, networkPubKey interface{}) *MockConnectionFactory_GetAccessAPIClientWithPort_Call {
	return &MockConnectionFactory_GetAccessAPIClientWithPort_Call{Call: _e.mock.On("GetAccessAPIClientWithPort", address, networkPubKey)}
}

func (_c *MockConnectionFactory_GetAccessAPIClientWithPort_Call) Run(run func(address string, networkPubKey crypto.PublicKey)) *MockConnectionFactory_GetAccessAPIClientWithPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(crypto.PublicKey))
	})
	return _c
}

func (_c *MockConnectionFactory_GetAccessAPIClientWithPort_Call) Return(_a0 access.AccessAPIClient, _a1 io.Closer, _a2 error) *MockConnectionFactory_GetAccessAPIClientWithPort_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConnectionFactory_GetAccessAPIClientWithPort_Call) RunAndReturn(run func(string, crypto.PublicKey) (access.AccessAPIClient, io.Closer, error)) *MockConnectionFactory_GetAccessAPIClientWithPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionAPIClient provides a mock function with given fields: address
func (_m *MockConnectionFactory) GetExecutionAPIClient(address string) (execution.ExecutionAPIClient, io.Closer, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionAPIClient")
	}

	var r0 execution.ExecutionAPIClient
	var r1 io.Closer
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (execution.ExecutionAPIClient, io.Closer, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) execution.ExecutionAPIClient); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(execution.ExecutionAPIClient)
		}
	}

	if rf, ok := ret.Get(1).(func(string) io.Closer); ok {
		r1 = rf(address)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Closer)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(address)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConnectionFactory_GetExecutionAPIClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionAPIClient'
type MockConnectionFactory_GetExecutionAPIClient_Call struct {
	*mock.Call
}

// GetExecutionAPIClient is a helper method to define mock.On call
//   - address string
func (_e *MockConnectionFactory_Expecter) GetExecutionAPIClient(address interface{}) *MockConnectionFactory_GetExecutionAPIClient_Call {
	return &MockConnectionFactory_GetExecutionAPIClient_Call{Call: _e.mock.On("GetExecutionAPIClient", address)}
}

func (_c *MockConnectionFactory_GetExecutionAPIClient_Call) Run(run func(address string)) *MockConnectionFactory_GetExecutionAPIClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConnectionFactory_GetExecutionAPIClient_Call) Return(_a0 execution.ExecutionAPIClient, _a1 io.Closer, _a2 error) *MockConnectionFactory_GetExecutionAPIClient_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConnectionFactory_GetExecutionAPIClient_Call) RunAndReturn(run func(string) (execution.ExecutionAPIClient, io.Closer, error)) *MockConnectionFactory_GetExecutionAPIClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionFactory creates a new instance of MockConnectionFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionFactory {
	mock := &MockConnectionFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
