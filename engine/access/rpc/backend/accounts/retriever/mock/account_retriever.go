// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// AccountRetriever is an autogenerated mock type for the AccountRetriever type
type AccountRetriever struct {
	mock.Mock
}

// GetAccountAtBlock provides a mock function with given fields: ctx, address, blockID, height
func (_m *AccountRetriever) GetAccountAtBlock(ctx context.Context, address flow.Address, blockID flow.Identifier, height uint64) (*flow.Account, error) {
	ret := _m.Called(ctx, address, blockID, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlock")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64) (*flow.Account, error)); ok {
		return rf(ctx, address, blockID, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64) *flow.Account); ok {
		r0 = rf(ctx, address, blockID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, flow.Identifier, uint64) error); ok {
		r1 = rf(ctx, address, blockID, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBalanceAtBlock provides a mock function with given fields: ctx, address, blockID, height
func (_m *AccountRetriever) GetAccountBalanceAtBlock(ctx context.Context, address flow.Address, blockID flow.Identifier, height uint64) (uint64, error) {
	ret := _m.Called(ctx, address, blockID, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64) (uint64, error)); ok {
		return rf(ctx, address, blockID, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64) uint64); ok {
		r0 = rf(ctx, address, blockID, height)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, flow.Identifier, uint64) error); ok {
		r1 = rf(ctx, address, blockID, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeyAtBlock provides a mock function with given fields: ctx, address, keyIndex, blockID, height
func (_m *AccountRetriever) GetAccountKeyAtBlock(ctx context.Context, address flow.Address, keyIndex uint32, blockID flow.Identifier, height uint64) (*flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, keyIndex, blockID, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtBlock")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, flow.Identifier, uint64) (*flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, keyIndex, blockID, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, flow.Identifier, uint64) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, keyIndex, blockID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32, flow.Identifier, uint64) error); ok {
		r1 = rf(ctx, address, keyIndex, blockID, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountKeysAtBlock provides a mock function with given fields: ctx, address, blockID, height
func (_m *AccountRetriever) GetAccountKeysAtBlock(ctx context.Context, address flow.Address, blockID flow.Identifier, height uint64) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, address, blockID, height)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtBlock")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64) ([]flow.AccountPublicKey, error)); ok {
		return rf(ctx, address, blockID, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, blockID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, flow.Identifier, uint64) error); ok {
		r1 = rf(ctx, address, blockID, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountRetriever creates a new instance of AccountRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRetriever {
	mock := &AccountRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
