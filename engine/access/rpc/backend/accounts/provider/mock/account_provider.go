// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow-go/model/access"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	optimistic_sync "github.com/onflow/flow-go/module/executiondatasync/optimistic_sync"
)

// AccountProvider is an autogenerated mock type for the AccountProvider type
type AccountProvider struct {
	mock.Mock
}

// GetAccountAtBlock provides a mock function with given fields: ctx, address, blockID, height, executionResultInfo
func (_m *AccountProvider) GetAccountAtBlock(ctx context.Context, address flow.Address, blockID flow.Identifier, height uint64, executionResultInfo *optimistic_sync.ExecutionResultInfo) (*flow.Account, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, address, blockID, height, executionResultInfo)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlock")
	}

	var r0 *flow.Account
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) (*flow.Account, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, address, blockID, height, executionResultInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) *flow.Account); ok {
		r0 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) error); ok {
		r2 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAccountBalanceAtBlock provides a mock function with given fields: ctx, address, blockID, height, executionResultInfo
func (_m *AccountProvider) GetAccountBalanceAtBlock(ctx context.Context, address flow.Address, blockID flow.Identifier, height uint64, executionResultInfo *optimistic_sync.ExecutionResultInfo) (uint64, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, address, blockID, height, executionResultInfo)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtBlock")
	}

	var r0 uint64
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) (uint64, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, address, blockID, height, executionResultInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) uint64); ok {
		r0 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) error); ok {
		r2 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAccountKeyAtBlock provides a mock function with given fields: ctx, address, keyIndex, blockID, height, executionResultInfo
func (_m *AccountProvider) GetAccountKeyAtBlock(ctx context.Context, address flow.Address, keyIndex uint32, blockID flow.Identifier, height uint64, executionResultInfo *optimistic_sync.ExecutionResultInfo) (*flow.AccountPublicKey, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, address, keyIndex, blockID, height, executionResultInfo)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtBlock")
	}

	var r0 *flow.AccountPublicKey
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) (*flow.AccountPublicKey, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, address, keyIndex, blockID, height, executionResultInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, keyIndex, blockID, height, executionResultInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, address, keyIndex, blockID, height, executionResultInfo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Address, uint32, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) error); ok {
		r2 = rf(ctx, address, keyIndex, blockID, height, executionResultInfo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAccountKeysAtBlock provides a mock function with given fields: ctx, address, blockID, height, executionResultInfo
func (_m *AccountProvider) GetAccountKeysAtBlock(ctx context.Context, address flow.Address, blockID flow.Identifier, height uint64, executionResultInfo *optimistic_sync.ExecutionResultInfo) ([]flow.AccountPublicKey, *access.ExecutorMetadata, error) {
	ret := _m.Called(ctx, address, blockID, height, executionResultInfo)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtBlock")
	}

	var r0 []flow.AccountPublicKey
	var r1 *access.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) ([]flow.AccountPublicKey, *access.ExecutorMetadata, error)); ok {
		return rf(ctx, address, blockID, height, executionResultInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) *access.ExecutorMetadata); ok {
		r1 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*access.ExecutorMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, flow.Address, flow.Identifier, uint64, *optimistic_sync.ExecutionResultInfo) error); ok {
		r2 = rf(ctx, address, blockID, height, executionResultInfo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAccountProvider creates a new instance of AccountProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountProvider {
	mock := &AccountProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
