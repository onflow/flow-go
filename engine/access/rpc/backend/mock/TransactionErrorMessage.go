// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionErrorMessage is an autogenerated mock type for the TransactionErrorMessage type
type MockTransactionErrorMessage struct {
	mock.Mock
}

type MockTransactionErrorMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionErrorMessage) EXPECT() *MockTransactionErrorMessage_Expecter {
	return &MockTransactionErrorMessage_Expecter{mock: &_m.Mock}
}

// LookupErrorMessageByIndex provides a mock function with given fields: ctx, blockID, height, index
func (_m *MockTransactionErrorMessage) LookupErrorMessageByIndex(ctx context.Context, blockID flow.Identifier, height uint64, index uint32) (string, error) {
	ret := _m.Called(ctx, blockID, height, index)

	if len(ret) == 0 {
		panic("no return value specified for LookupErrorMessageByIndex")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64, uint32) (string, error)); ok {
		return rf(ctx, blockID, height, index)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64, uint32) string); ok {
		r0 = rf(ctx, blockID, height, index)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, uint64, uint32) error); ok {
		r1 = rf(ctx, blockID, height, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionErrorMessage_LookupErrorMessageByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupErrorMessageByIndex'
type MockTransactionErrorMessage_LookupErrorMessageByIndex_Call struct {
	*mock.Call
}

// LookupErrorMessageByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - height uint64
//   - index uint32
func (_e *MockTransactionErrorMessage_Expecter) LookupErrorMessageByIndex(ctx interface{}, blockID interface{}, height interface{}, index interface{}) *MockTransactionErrorMessage_LookupErrorMessageByIndex_Call {
	return &MockTransactionErrorMessage_LookupErrorMessageByIndex_Call{Call: _e.mock.On("LookupErrorMessageByIndex", ctx, blockID, height, index)}
}

func (_c *MockTransactionErrorMessage_LookupErrorMessageByIndex_Call) Run(run func(ctx context.Context, blockID flow.Identifier, height uint64, index uint32)) *MockTransactionErrorMessage_LookupErrorMessageByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(uint64), args[3].(uint32))
	})
	return _c
}

func (_c *MockTransactionErrorMessage_LookupErrorMessageByIndex_Call) Return(_a0 string, _a1 error) *MockTransactionErrorMessage_LookupErrorMessageByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionErrorMessage_LookupErrorMessageByIndex_Call) RunAndReturn(run func(context.Context, flow.Identifier, uint64, uint32) (string, error)) *MockTransactionErrorMessage_LookupErrorMessageByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// LookupErrorMessageByTransactionID provides a mock function with given fields: ctx, blockID, height, transactionID
func (_m *MockTransactionErrorMessage) LookupErrorMessageByTransactionID(ctx context.Context, blockID flow.Identifier, height uint64, transactionID flow.Identifier) (string, error) {
	ret := _m.Called(ctx, blockID, height, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for LookupErrorMessageByTransactionID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64, flow.Identifier) (string, error)); ok {
		return rf(ctx, blockID, height, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64, flow.Identifier) string); ok {
		r0 = rf(ctx, blockID, height, transactionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, uint64, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID, height, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupErrorMessageByTransactionID'
type MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call struct {
	*mock.Call
}

// LookupErrorMessageByTransactionID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - height uint64
//   - transactionID flow.Identifier
func (_e *MockTransactionErrorMessage_Expecter) LookupErrorMessageByTransactionID(ctx interface{}, blockID interface{}, height interface{}, transactionID interface{}) *MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call {
	return &MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call{Call: _e.mock.On("LookupErrorMessageByTransactionID", ctx, blockID, height, transactionID)}
}

func (_c *MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call) Run(run func(ctx context.Context, blockID flow.Identifier, height uint64, transactionID flow.Identifier)) *MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(uint64), args[3].(flow.Identifier))
	})
	return _c
}

func (_c *MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call) Return(_a0 string, _a1 error) *MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call) RunAndReturn(run func(context.Context, flow.Identifier, uint64, flow.Identifier) (string, error)) *MockTransactionErrorMessage_LookupErrorMessageByTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// LookupErrorMessagesByBlockID provides a mock function with given fields: ctx, blockID, height
func (_m *MockTransactionErrorMessage) LookupErrorMessagesByBlockID(ctx context.Context, blockID flow.Identifier, height uint64) (map[flow.Identifier]string, error) {
	ret := _m.Called(ctx, blockID, height)

	if len(ret) == 0 {
		panic("no return value specified for LookupErrorMessagesByBlockID")
	}

	var r0 map[flow.Identifier]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64) (map[flow.Identifier]string, error)); ok {
		return rf(ctx, blockID, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64) map[flow.Identifier]string); ok {
		r0 = rf(ctx, blockID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[flow.Identifier]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, uint64) error); ok {
		r1 = rf(ctx, blockID, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupErrorMessagesByBlockID'
type MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call struct {
	*mock.Call
}

// LookupErrorMessagesByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
//   - height uint64
func (_e *MockTransactionErrorMessage_Expecter) LookupErrorMessagesByBlockID(ctx interface{}, blockID interface{}, height interface{}) *MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call {
	return &MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call{Call: _e.mock.On("LookupErrorMessagesByBlockID", ctx, blockID, height)}
}

func (_c *MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier, height uint64)) *MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(uint64))
	})
	return _c
}

func (_c *MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call) Return(_a0 map[flow.Identifier]string, _a1 error) *MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, uint64) (map[flow.Identifier]string, error)) *MockTransactionErrorMessage_LookupErrorMessagesByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionErrorMessage creates a new instance of MockTransactionErrorMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionErrorMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionErrorMessage {
	mock := &MockTransactionErrorMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
