// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockCommunicator is an autogenerated mock type for the Communicator type
type MockCommunicator struct {
	mock.Mock
}

type MockCommunicator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommunicator) EXPECT() *MockCommunicator_Expecter {
	return &MockCommunicator_Expecter{mock: &_m.Mock}
}

// CallAvailableNode provides a mock function with given fields: nodes, call, shouldTerminateOnError
func (_m *MockCommunicator) CallAvailableNode(nodes flow.GenericIdentityList[flow.IdentitySkeleton], call func(*flow.IdentitySkeleton) error, shouldTerminateOnError func(*flow.IdentitySkeleton, error) bool) error {
	ret := _m.Called(nodes, call, shouldTerminateOnError)

	if len(ret) == 0 {
		panic("no return value specified for CallAvailableNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.GenericIdentityList[flow.IdentitySkeleton], func(*flow.IdentitySkeleton) error, func(*flow.IdentitySkeleton, error) bool) error); ok {
		r0 = rf(nodes, call, shouldTerminateOnError)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommunicator_CallAvailableNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallAvailableNode'
type MockCommunicator_CallAvailableNode_Call struct {
	*mock.Call
}

// CallAvailableNode is a helper method to define mock.On call
//   - nodes flow.GenericIdentityList[flow.IdentitySkeleton]
//   - call func(*flow.IdentitySkeleton) error
//   - shouldTerminateOnError func(*flow.IdentitySkeleton , error) bool
func (_e *MockCommunicator_Expecter) CallAvailableNode(nodes interface{}, call interface{}, shouldTerminateOnError interface{}) *MockCommunicator_CallAvailableNode_Call {
	return &MockCommunicator_CallAvailableNode_Call{Call: _e.mock.On("CallAvailableNode", nodes, call, shouldTerminateOnError)}
}

func (_c *MockCommunicator_CallAvailableNode_Call) Run(run func(nodes flow.GenericIdentityList[flow.IdentitySkeleton], call func(*flow.IdentitySkeleton) error, shouldTerminateOnError func(*flow.IdentitySkeleton, error) bool)) *MockCommunicator_CallAvailableNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.GenericIdentityList[flow.IdentitySkeleton]), args[1].(func(*flow.IdentitySkeleton) error), args[2].(func(*flow.IdentitySkeleton, error) bool))
	})
	return _c
}

func (_c *MockCommunicator_CallAvailableNode_Call) Return(_a0 error) *MockCommunicator_CallAvailableNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommunicator_CallAvailableNode_Call) RunAndReturn(run func(flow.GenericIdentityList[flow.IdentitySkeleton], func(*flow.IdentitySkeleton) error, func(*flow.IdentitySkeleton, error) bool) error) *MockCommunicator_CallAvailableNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommunicator creates a new instance of MockCommunicator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommunicator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommunicator {
	mock := &MockCommunicator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
