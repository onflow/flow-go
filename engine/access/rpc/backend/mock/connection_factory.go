// Code generated by mockery v2.12.1. DO NOT EDIT.

package mock

import (
	access "github.com/onflow/flow/protobuf/go/flow/access"

	execution "github.com/onflow/flow/protobuf/go/flow/execution"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ConnectionFactory is an autogenerated mock type for the ConnectionFactory type
type ConnectionFactory struct {
	mock.Mock
}

// GetAccessAPIClient provides a mock function with given fields: address
func (_m *ConnectionFactory) GetAccessAPIClient(address string) (access.AccessAPIClient, error) {
	ret := _m.Called(address)

	var r0 access.AccessAPIClient
	if rf, ok := ret.Get(0).(func(string) access.AccessAPIClient); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPIClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionAPIClient provides a mock function with given fields: address
func (_m *ConnectionFactory) GetExecutionAPIClient(address string) (execution.ExecutionAPIClient, error) {
	ret := _m.Called(address)

	var r0 execution.ExecutionAPIClient
	if rf, ok := ret.Get(0).(func(string) execution.ExecutionAPIClient); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(execution.ExecutionAPIClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateAccessAPIClient provides a mock function with given fields: address
func (_m *ConnectionFactory) InvalidateAccessAPIClient(address string) bool {
	ret := _m.Called(address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// InvalidateExecutionAPIClient provides a mock function with given fields: address
func (_m *ConnectionFactory) InvalidateExecutionAPIClient(address string) bool {
	ret := _m.Called(address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewConnectionFactory creates a new instance of ConnectionFactory. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectionFactory(t testing.TB) *ConnectionFactory {
	mock := &ConnectionFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
