// Code generated by mockery. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// NodeSelector is an autogenerated mock type for the NodeSelector type
type NodeSelector struct {
	mock.Mock
}

// HasNext provides a mock function with no fields
func (_m *NodeSelector) HasNext() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasNext")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Next provides a mock function with no fields
func (_m *NodeSelector) Next() *flow.IdentitySkeleton {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *flow.IdentitySkeleton
	if rf, ok := ret.Get(0).(func() *flow.IdentitySkeleton); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.IdentitySkeleton)
		}
	}

	return r0
}

// NewNodeSelector creates a new instance of NodeSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeSelector {
	mock := &NodeSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
