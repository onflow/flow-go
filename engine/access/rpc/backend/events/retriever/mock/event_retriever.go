// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"

	mock "github.com/stretchr/testify/mock"

	retriever "github.com/onflow/flow-go/engine/access/rpc/backend/events/retriever"
)

// EventRetriever is an autogenerated mock type for the EventRetriever type
type EventRetriever struct {
	mock.Mock
}

// Events provides a mock function with given fields: ctx, blocks, eventType, requiredEventEncodingVersion
func (_m *EventRetriever) Events(ctx context.Context, blocks []retriever.BlockMetadata, eventType flow.EventType, requiredEventEncodingVersion entities.EventEncodingVersion) (retriever.Response, error) {
	ret := _m.Called(ctx, blocks, eventType, requiredEventEncodingVersion)

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 retriever.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []retriever.BlockMetadata, flow.EventType, entities.EventEncodingVersion) (retriever.Response, error)); ok {
		return rf(ctx, blocks, eventType, requiredEventEncodingVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []retriever.BlockMetadata, flow.EventType, entities.EventEncodingVersion) retriever.Response); ok {
		r0 = rf(ctx, blocks, eventType, requiredEventEncodingVersion)
	} else {
		r0 = ret.Get(0).(retriever.Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []retriever.BlockMetadata, flow.EventType, entities.EventEncodingVersion) error); ok {
		r1 = rf(ctx, blocks, eventType, requiredEventEncodingVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventRetriever creates a new instance of EventRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventRetriever {
	mock := &EventRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
