// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"

	mock "github.com/stretchr/testify/mock"

	provider "github.com/onflow/flow-go/engine/access/rpc/backend/events/provider"
)

// EventProvider is an autogenerated mock type for the EventProvider type
type EventProvider struct {
	mock.Mock
}

// Events provides a mock function with given fields: ctx, blocks, eventType, encodingVersion, executionState
func (_m *EventProvider) Events(ctx context.Context, blocks []provider.BlockMetadata, eventType flow.EventType, encodingVersion entities.EventEncodingVersion, executionState *entities.ExecutionStateQuery) (provider.Response, entities.ExecutorMetadata, error) {
	ret := _m.Called(ctx, blocks, eventType, encodingVersion, executionState)

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 provider.Response
	var r1 entities.ExecutorMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []provider.BlockMetadata, flow.EventType, entities.EventEncodingVersion, *entities.ExecutionStateQuery) (provider.Response, entities.ExecutorMetadata, error)); ok {
		return rf(ctx, blocks, eventType, encodingVersion, executionState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []provider.BlockMetadata, flow.EventType, entities.EventEncodingVersion, *entities.ExecutionStateQuery) provider.Response); ok {
		r0 = rf(ctx, blocks, eventType, encodingVersion, executionState)
	} else {
		r0 = ret.Get(0).(provider.Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []provider.BlockMetadata, flow.EventType, entities.EventEncodingVersion, *entities.ExecutionStateQuery) entities.ExecutorMetadata); ok {
		r1 = rf(ctx, blocks, eventType, encodingVersion, executionState)
	} else {
		r1 = ret.Get(1).(entities.ExecutorMetadata)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []provider.BlockMetadata, flow.EventType, entities.EventEncodingVersion, *entities.ExecutionStateQuery) error); ok {
		r2 = rf(ctx, blocks, eventType, encodingVersion, executionState)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewEventProvider creates a new instance of EventProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventProvider {
	mock := &EventProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
