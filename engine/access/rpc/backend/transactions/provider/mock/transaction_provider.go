// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow-go/model/access"

	entities "github.com/onflow/flow/protobuf/go/flow/entities"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// TransactionProvider is an autogenerated mock type for the TransactionProvider type
type TransactionProvider struct {
	mock.Mock
}

// TransactionResult provides a mock function with given fields: ctx, header, txID, encodingVersion, query
func (_m *TransactionProvider) TransactionResult(ctx context.Context, header *flow.Header, txID flow.Identifier, encodingVersion entities.EventEncodingVersion, query entities.ExecutionStateQuery) (*access.TransactionResult, error) {
	ret := _m.Called(ctx, header, txID, encodingVersion, query)

	if len(ret) == 0 {
		panic("no return value specified for TransactionResult")
	}

	var r0 *access.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Header, flow.Identifier, entities.EventEncodingVersion, entities.ExecutionStateQuery) (*access.TransactionResult, error)); ok {
		return rf(ctx, header, txID, encodingVersion, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Header, flow.Identifier, entities.EventEncodingVersion, entities.ExecutionStateQuery) *access.TransactionResult); ok {
		r0 = rf(ctx, header, txID, encodingVersion, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *flow.Header, flow.Identifier, entities.EventEncodingVersion, entities.ExecutionStateQuery) error); ok {
		r1 = rf(ctx, header, txID, encodingVersion, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionResultByIndex provides a mock function with given fields: ctx, block, index, encodingVersion, query
func (_m *TransactionProvider) TransactionResultByIndex(ctx context.Context, block *flow.Block, index uint32, encodingVersion entities.EventEncodingVersion, query entities.ExecutionStateQuery) (*access.TransactionResult, error) {
	ret := _m.Called(ctx, block, index, encodingVersion, query)

	if len(ret) == 0 {
		panic("no return value specified for TransactionResultByIndex")
	}

	var r0 *access.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Block, uint32, entities.EventEncodingVersion, entities.ExecutionStateQuery) (*access.TransactionResult, error)); ok {
		return rf(ctx, block, index, encodingVersion, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Block, uint32, entities.EventEncodingVersion, entities.ExecutionStateQuery) *access.TransactionResult); ok {
		r0 = rf(ctx, block, index, encodingVersion, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *flow.Block, uint32, entities.EventEncodingVersion, entities.ExecutionStateQuery) error); ok {
		r1 = rf(ctx, block, index, encodingVersion, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionResultsByBlockID provides a mock function with given fields: ctx, block, encodingVersion, query
func (_m *TransactionProvider) TransactionResultsByBlockID(ctx context.Context, block *flow.Block, encodingVersion entities.EventEncodingVersion, query entities.ExecutionStateQuery) ([]*access.TransactionResult, error) {
	ret := _m.Called(ctx, block, encodingVersion, query)

	if len(ret) == 0 {
		panic("no return value specified for TransactionResultsByBlockID")
	}

	var r0 []*access.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Block, entities.EventEncodingVersion, entities.ExecutionStateQuery) ([]*access.TransactionResult, error)); ok {
		return rf(ctx, block, encodingVersion, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *flow.Block, entities.EventEncodingVersion, entities.ExecutionStateQuery) []*access.TransactionResult); ok {
		r0 = rf(ctx, block, encodingVersion, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*access.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *flow.Block, entities.EventEncodingVersion, entities.ExecutionStateQuery) error); ok {
		r1 = rf(ctx, block, encodingVersion, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionProvider creates a new instance of TransactionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionProvider {
	mock := &TransactionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
