// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"

	mock "github.com/stretchr/testify/mock"

	state_stream "github.com/onflow/flow-go/engine/access/state_stream"

	subscription "github.com/onflow/flow-go/engine/access/subscription"
)

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

type MockAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPI) EXPECT() *MockAPI_Expecter {
	return &MockAPI_Expecter{mock: &_m.Mock}
}

// GetExecutionDataByBlockID provides a mock function with given fields: ctx, blockID
func (_m *MockAPI) GetExecutionDataByBlockID(ctx context.Context, blockID flow.Identifier) (*execution_data.BlockExecutionData, error) {
	ret := _m.Called(ctx, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionDataByBlockID")
	}

	var r0 *execution_data.BlockExecutionData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*execution_data.BlockExecutionData, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *execution_data.BlockExecutionData); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution_data.BlockExecutionData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetExecutionDataByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionDataByBlockID'
type MockAPI_GetExecutionDataByBlockID_Call struct {
	*mock.Call
}

// GetExecutionDataByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - blockID flow.Identifier
func (_e *MockAPI_Expecter) GetExecutionDataByBlockID(ctx interface{}, blockID interface{}) *MockAPI_GetExecutionDataByBlockID_Call {
	return &MockAPI_GetExecutionDataByBlockID_Call{Call: _e.mock.On("GetExecutionDataByBlockID", ctx, blockID)}
}

func (_c *MockAPI_GetExecutionDataByBlockID_Call) Run(run func(ctx context.Context, blockID flow.Identifier)) *MockAPI_GetExecutionDataByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_GetExecutionDataByBlockID_Call) Return(_a0 *execution_data.BlockExecutionData, _a1 error) *MockAPI_GetExecutionDataByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetExecutionDataByBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*execution_data.BlockExecutionData, error)) *MockAPI_GetExecutionDataByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisterValues provides a mock function with given fields: registerIDs, height
func (_m *MockAPI) GetRegisterValues(registerIDs flow.RegisterIDs, height uint64) ([][]byte, error) {
	ret := _m.Called(registerIDs, height)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisterValues")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.RegisterIDs, uint64) ([][]byte, error)); ok {
		return rf(registerIDs, height)
	}
	if rf, ok := ret.Get(0).(func(flow.RegisterIDs, uint64) [][]byte); ok {
		r0 = rf(registerIDs, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.RegisterIDs, uint64) error); ok {
		r1 = rf(registerIDs, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_GetRegisterValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisterValues'
type MockAPI_GetRegisterValues_Call struct {
	*mock.Call
}

// GetRegisterValues is a helper method to define mock.On call
//   - registerIDs flow.RegisterIDs
//   - height uint64
func (_e *MockAPI_Expecter) GetRegisterValues(registerIDs interface{}, height interface{}) *MockAPI_GetRegisterValues_Call {
	return &MockAPI_GetRegisterValues_Call{Call: _e.mock.On("GetRegisterValues", registerIDs, height)}
}

func (_c *MockAPI_GetRegisterValues_Call) Run(run func(registerIDs flow.RegisterIDs, height uint64)) *MockAPI_GetRegisterValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.RegisterIDs), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_GetRegisterValues_Call) Return(_a0 [][]byte, _a1 error) *MockAPI_GetRegisterValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_GetRegisterValues_Call) RunAndReturn(run func(flow.RegisterIDs, uint64) ([][]byte, error)) *MockAPI_GetRegisterValues_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeAccountStatusesFromLatestBlock provides a mock function with given fields: ctx, filter
func (_m *MockAPI) SubscribeAccountStatusesFromLatestBlock(ctx context.Context, filter state_stream.AccountStatusFilter) subscription.Subscription {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromLatestBlock")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, state_stream.AccountStatusFilter) subscription.Subscription); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeAccountStatusesFromLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeAccountStatusesFromLatestBlock'
type MockAPI_SubscribeAccountStatusesFromLatestBlock_Call struct {
	*mock.Call
}

// SubscribeAccountStatusesFromLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - filter state_stream.AccountStatusFilter
func (_e *MockAPI_Expecter) SubscribeAccountStatusesFromLatestBlock(ctx interface{}, filter interface{}) *MockAPI_SubscribeAccountStatusesFromLatestBlock_Call {
	return &MockAPI_SubscribeAccountStatusesFromLatestBlock_Call{Call: _e.mock.On("SubscribeAccountStatusesFromLatestBlock", ctx, filter)}
}

func (_c *MockAPI_SubscribeAccountStatusesFromLatestBlock_Call) Run(run func(ctx context.Context, filter state_stream.AccountStatusFilter)) *MockAPI_SubscribeAccountStatusesFromLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state_stream.AccountStatusFilter))
	})
	return _c
}

func (_c *MockAPI_SubscribeAccountStatusesFromLatestBlock_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeAccountStatusesFromLatestBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeAccountStatusesFromLatestBlock_Call) RunAndReturn(run func(context.Context, state_stream.AccountStatusFilter) subscription.Subscription) *MockAPI_SubscribeAccountStatusesFromLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeAccountStatusesFromStartBlockID provides a mock function with given fields: ctx, startBlockID, filter
func (_m *MockAPI) SubscribeAccountStatusesFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, filter state_stream.AccountStatusFilter) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromStartBlockID")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, state_stream.AccountStatusFilter) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeAccountStatusesFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeAccountStatusesFromStartBlockID'
type MockAPI_SubscribeAccountStatusesFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeAccountStatusesFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
//   - filter state_stream.AccountStatusFilter
func (_e *MockAPI_Expecter) SubscribeAccountStatusesFromStartBlockID(ctx interface{}, startBlockID interface{}, filter interface{}) *MockAPI_SubscribeAccountStatusesFromStartBlockID_Call {
	return &MockAPI_SubscribeAccountStatusesFromStartBlockID_Call{Call: _e.mock.On("SubscribeAccountStatusesFromStartBlockID", ctx, startBlockID, filter)}
}

func (_c *MockAPI_SubscribeAccountStatusesFromStartBlockID_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier, filter state_stream.AccountStatusFilter)) *MockAPI_SubscribeAccountStatusesFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(state_stream.AccountStatusFilter))
	})
	return _c
}

func (_c *MockAPI_SubscribeAccountStatusesFromStartBlockID_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeAccountStatusesFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeAccountStatusesFromStartBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, state_stream.AccountStatusFilter) subscription.Subscription) *MockAPI_SubscribeAccountStatusesFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeAccountStatusesFromStartHeight provides a mock function with given fields: ctx, startHeight, filter
func (_m *MockAPI) SubscribeAccountStatusesFromStartHeight(ctx context.Context, startHeight uint64, filter state_stream.AccountStatusFilter) subscription.Subscription {
	ret := _m.Called(ctx, startHeight, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAccountStatusesFromStartHeight")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64, state_stream.AccountStatusFilter) subscription.Subscription); ok {
		r0 = rf(ctx, startHeight, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeAccountStatusesFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeAccountStatusesFromStartHeight'
type MockAPI_SubscribeAccountStatusesFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeAccountStatusesFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - startHeight uint64
//   - filter state_stream.AccountStatusFilter
func (_e *MockAPI_Expecter) SubscribeAccountStatusesFromStartHeight(ctx interface{}, startHeight interface{}, filter interface{}) *MockAPI_SubscribeAccountStatusesFromStartHeight_Call {
	return &MockAPI_SubscribeAccountStatusesFromStartHeight_Call{Call: _e.mock.On("SubscribeAccountStatusesFromStartHeight", ctx, startHeight, filter)}
}

func (_c *MockAPI_SubscribeAccountStatusesFromStartHeight_Call) Run(run func(ctx context.Context, startHeight uint64, filter state_stream.AccountStatusFilter)) *MockAPI_SubscribeAccountStatusesFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(state_stream.AccountStatusFilter))
	})
	return _c
}

func (_c *MockAPI_SubscribeAccountStatusesFromStartHeight_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeAccountStatusesFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeAccountStatusesFromStartHeight_Call) RunAndReturn(run func(context.Context, uint64, state_stream.AccountStatusFilter) subscription.Subscription) *MockAPI_SubscribeAccountStatusesFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeEvents provides a mock function with given fields: ctx, startBlockID, startHeight, filter
func (_m *MockAPI) SubscribeEvents(ctx context.Context, startBlockID flow.Identifier, startHeight uint64, filter state_stream.EventFilter) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, startHeight, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeEvents")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64, state_stream.EventFilter) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, startHeight, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeEvents'
type MockAPI_SubscribeEvents_Call struct {
	*mock.Call
}

// SubscribeEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
//   - startHeight uint64
//   - filter state_stream.EventFilter
func (_e *MockAPI_Expecter) SubscribeEvents(ctx interface{}, startBlockID interface{}, startHeight interface{}, filter interface{}) *MockAPI_SubscribeEvents_Call {
	return &MockAPI_SubscribeEvents_Call{Call: _e.mock.On("SubscribeEvents", ctx, startBlockID, startHeight, filter)}
}

func (_c *MockAPI_SubscribeEvents_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier, startHeight uint64, filter state_stream.EventFilter)) *MockAPI_SubscribeEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(uint64), args[3].(state_stream.EventFilter))
	})
	return _c
}

func (_c *MockAPI_SubscribeEvents_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeEvents_Call) RunAndReturn(run func(context.Context, flow.Identifier, uint64, state_stream.EventFilter) subscription.Subscription) *MockAPI_SubscribeEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeEventsFromLatest provides a mock function with given fields: ctx, filter
func (_m *MockAPI) SubscribeEventsFromLatest(ctx context.Context, filter state_stream.EventFilter) subscription.Subscription {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeEventsFromLatest")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, state_stream.EventFilter) subscription.Subscription); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeEventsFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeEventsFromLatest'
type MockAPI_SubscribeEventsFromLatest_Call struct {
	*mock.Call
}

// SubscribeEventsFromLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - filter state_stream.EventFilter
func (_e *MockAPI_Expecter) SubscribeEventsFromLatest(ctx interface{}, filter interface{}) *MockAPI_SubscribeEventsFromLatest_Call {
	return &MockAPI_SubscribeEventsFromLatest_Call{Call: _e.mock.On("SubscribeEventsFromLatest", ctx, filter)}
}

func (_c *MockAPI_SubscribeEventsFromLatest_Call) Run(run func(ctx context.Context, filter state_stream.EventFilter)) *MockAPI_SubscribeEventsFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state_stream.EventFilter))
	})
	return _c
}

func (_c *MockAPI_SubscribeEventsFromLatest_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeEventsFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeEventsFromLatest_Call) RunAndReturn(run func(context.Context, state_stream.EventFilter) subscription.Subscription) *MockAPI_SubscribeEventsFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeEventsFromStartBlockID provides a mock function with given fields: ctx, startBlockID, filter
func (_m *MockAPI) SubscribeEventsFromStartBlockID(ctx context.Context, startBlockID flow.Identifier, filter state_stream.EventFilter) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeEventsFromStartBlockID")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, state_stream.EventFilter) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeEventsFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeEventsFromStartBlockID'
type MockAPI_SubscribeEventsFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeEventsFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
//   - filter state_stream.EventFilter
func (_e *MockAPI_Expecter) SubscribeEventsFromStartBlockID(ctx interface{}, startBlockID interface{}, filter interface{}) *MockAPI_SubscribeEventsFromStartBlockID_Call {
	return &MockAPI_SubscribeEventsFromStartBlockID_Call{Call: _e.mock.On("SubscribeEventsFromStartBlockID", ctx, startBlockID, filter)}
}

func (_c *MockAPI_SubscribeEventsFromStartBlockID_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier, filter state_stream.EventFilter)) *MockAPI_SubscribeEventsFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(state_stream.EventFilter))
	})
	return _c
}

func (_c *MockAPI_SubscribeEventsFromStartBlockID_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeEventsFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeEventsFromStartBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier, state_stream.EventFilter) subscription.Subscription) *MockAPI_SubscribeEventsFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeEventsFromStartHeight provides a mock function with given fields: ctx, startHeight, filter
func (_m *MockAPI) SubscribeEventsFromStartHeight(ctx context.Context, startHeight uint64, filter state_stream.EventFilter) subscription.Subscription {
	ret := _m.Called(ctx, startHeight, filter)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeEventsFromStartHeight")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64, state_stream.EventFilter) subscription.Subscription); ok {
		r0 = rf(ctx, startHeight, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeEventsFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeEventsFromStartHeight'
type MockAPI_SubscribeEventsFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeEventsFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - startHeight uint64
//   - filter state_stream.EventFilter
func (_e *MockAPI_Expecter) SubscribeEventsFromStartHeight(ctx interface{}, startHeight interface{}, filter interface{}) *MockAPI_SubscribeEventsFromStartHeight_Call {
	return &MockAPI_SubscribeEventsFromStartHeight_Call{Call: _e.mock.On("SubscribeEventsFromStartHeight", ctx, startHeight, filter)}
}

func (_c *MockAPI_SubscribeEventsFromStartHeight_Call) Run(run func(ctx context.Context, startHeight uint64, filter state_stream.EventFilter)) *MockAPI_SubscribeEventsFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(state_stream.EventFilter))
	})
	return _c
}

func (_c *MockAPI_SubscribeEventsFromStartHeight_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeEventsFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeEventsFromStartHeight_Call) RunAndReturn(run func(context.Context, uint64, state_stream.EventFilter) subscription.Subscription) *MockAPI_SubscribeEventsFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeExecutionData provides a mock function with given fields: ctx, startBlockID, startBlockHeight
func (_m *MockAPI) SubscribeExecutionData(ctx context.Context, startBlockID flow.Identifier, startBlockHeight uint64) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID, startBlockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeExecutionData")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, uint64) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID, startBlockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeExecutionData'
type MockAPI_SubscribeExecutionData_Call struct {
	*mock.Call
}

// SubscribeExecutionData is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
//   - startBlockHeight uint64
func (_e *MockAPI_Expecter) SubscribeExecutionData(ctx interface{}, startBlockID interface{}, startBlockHeight interface{}) *MockAPI_SubscribeExecutionData_Call {
	return &MockAPI_SubscribeExecutionData_Call{Call: _e.mock.On("SubscribeExecutionData", ctx, startBlockID, startBlockHeight)}
}

func (_c *MockAPI_SubscribeExecutionData_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier, startBlockHeight uint64)) *MockAPI_SubscribeExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(uint64))
	})
	return _c
}

func (_c *MockAPI_SubscribeExecutionData_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeExecutionData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeExecutionData_Call) RunAndReturn(run func(context.Context, flow.Identifier, uint64) subscription.Subscription) *MockAPI_SubscribeExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeExecutionDataFromLatest provides a mock function with given fields: ctx
func (_m *MockAPI) SubscribeExecutionDataFromLatest(ctx context.Context) subscription.Subscription {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeExecutionDataFromLatest")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context) subscription.Subscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeExecutionDataFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeExecutionDataFromLatest'
type MockAPI_SubscribeExecutionDataFromLatest_Call struct {
	*mock.Call
}

// SubscribeExecutionDataFromLatest is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPI_Expecter) SubscribeExecutionDataFromLatest(ctx interface{}) *MockAPI_SubscribeExecutionDataFromLatest_Call {
	return &MockAPI_SubscribeExecutionDataFromLatest_Call{Call: _e.mock.On("SubscribeExecutionDataFromLatest", ctx)}
}

func (_c *MockAPI_SubscribeExecutionDataFromLatest_Call) Run(run func(ctx context.Context)) *MockAPI_SubscribeExecutionDataFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPI_SubscribeExecutionDataFromLatest_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeExecutionDataFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeExecutionDataFromLatest_Call) RunAndReturn(run func(context.Context) subscription.Subscription) *MockAPI_SubscribeExecutionDataFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeExecutionDataFromStartBlockHeight provides a mock function with given fields: ctx, startBlockHeight
func (_m *MockAPI) SubscribeExecutionDataFromStartBlockHeight(ctx context.Context, startBlockHeight uint64) subscription.Subscription {
	ret := _m.Called(ctx, startBlockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeExecutionDataFromStartBlockHeight")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, uint64) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeExecutionDataFromStartBlockHeight'
type MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call struct {
	*mock.Call
}

// SubscribeExecutionDataFromStartBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockHeight uint64
func (_e *MockAPI_Expecter) SubscribeExecutionDataFromStartBlockHeight(ctx interface{}, startBlockHeight interface{}) *MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call {
	return &MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call{Call: _e.mock.On("SubscribeExecutionDataFromStartBlockHeight", ctx, startBlockHeight)}
}

func (_c *MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call) Run(run func(ctx context.Context, startBlockHeight uint64)) *MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call) RunAndReturn(run func(context.Context, uint64) subscription.Subscription) *MockAPI_SubscribeExecutionDataFromStartBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeExecutionDataFromStartBlockID provides a mock function with given fields: ctx, startBlockID
func (_m *MockAPI) SubscribeExecutionDataFromStartBlockID(ctx context.Context, startBlockID flow.Identifier) subscription.Subscription {
	ret := _m.Called(ctx, startBlockID)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeExecutionDataFromStartBlockID")
	}

	var r0 subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) subscription.Subscription); ok {
		r0 = rf(ctx, startBlockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.Subscription)
		}
	}

	return r0
}

// MockAPI_SubscribeExecutionDataFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeExecutionDataFromStartBlockID'
type MockAPI_SubscribeExecutionDataFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeExecutionDataFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - startBlockID flow.Identifier
func (_e *MockAPI_Expecter) SubscribeExecutionDataFromStartBlockID(ctx interface{}, startBlockID interface{}) *MockAPI_SubscribeExecutionDataFromStartBlockID_Call {
	return &MockAPI_SubscribeExecutionDataFromStartBlockID_Call{Call: _e.mock.On("SubscribeExecutionDataFromStartBlockID", ctx, startBlockID)}
}

func (_c *MockAPI_SubscribeExecutionDataFromStartBlockID_Call) Run(run func(ctx context.Context, startBlockID flow.Identifier)) *MockAPI_SubscribeExecutionDataFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockAPI_SubscribeExecutionDataFromStartBlockID_Call) Return(_a0 subscription.Subscription) *MockAPI_SubscribeExecutionDataFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_SubscribeExecutionDataFromStartBlockID_Call) RunAndReturn(run func(context.Context, flow.Identifier) subscription.Subscription) *MockAPI_SubscribeExecutionDataFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPI creates a new instance of MockAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPI {
	mock := &MockAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
