// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Streamable is an autogenerated mock type for the Streamable type
type Streamable struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Streamable) Close() {
	_m.Called()
}

// Fail provides a mock function with given fields: _a0
func (_m *Streamable) Fail(_a0 error) {
	_m.Called(_a0)
}

// ID provides a mock function with given fields:
func (_m *Streamable) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Next provides a mock function with given fields: _a0
func (_m *Streamable) Next(_a0 context.Context) (interface{}, error) {
	ret := _m.Called(_a0)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: _a0, _a1, _a2
func (_m *Streamable) Send(_a0 context.Context, _a1 interface{}, _a2 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStreamable interface {
	mock.TestingT
	Cleanup(func())
}

// NewStreamable creates a new instance of Streamable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStreamable(t mockConstructorTestingTNewStreamable) *Streamable {
	mock := &Streamable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
