// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	context "context"

	execution_data "github.com/onflow/flow-go/module/executiondatasync/execution_data"
	mock "github.com/stretchr/testify/mock"
)

// GetExecutionDataFunc is an autogenerated mock type for the GetExecutionDataFunc type
type GetExecutionDataFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *GetExecutionDataFunc) Execute(_a0 context.Context, _a1 uint64) (*execution_data.BlockExecutionDataEntity, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *execution_data.BlockExecutionDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*execution_data.BlockExecutionDataEntity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *execution_data.BlockExecutionDataEntity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution_data.BlockExecutionDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetExecutionDataFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetExecutionDataFunc creates a new instance of GetExecutionDataFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetExecutionDataFunc(t mockConstructorTestingTNewGetExecutionDataFunc) *GetExecutionDataFunc {
	mock := &GetExecutionDataFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
