// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GetDataByHeightFunc is an autogenerated mock type for the GetDataByHeightFunc type
type GetDataByHeightFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, height
func (_m *GetDataByHeightFunc) Execute(ctx context.Context, height uint64) (interface{}, error) {
	ret := _m.Called(ctx, height)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (interface{}, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) interface{}); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetDataByHeightFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetDataByHeightFunc creates a new instance of GetDataByHeightFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetDataByHeightFunc(t mockConstructorTestingTNewGetDataByHeightFunc) *GetDataByHeightFunc {
	mock := &GetDataByHeightFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
