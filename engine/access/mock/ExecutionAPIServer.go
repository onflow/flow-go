// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	execution "github.com/onflow/flow/protobuf/go/flow/execution"
	mock "github.com/stretchr/testify/mock"
)

// MockExecutionAPIServer is an autogenerated mock type for the ExecutionAPIServer type
type MockExecutionAPIServer struct {
	mock.Mock
}

type MockExecutionAPIServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionAPIServer) EXPECT() *MockExecutionAPIServer_Expecter {
	return &MockExecutionAPIServer_Expecter{mock: &_m.Mock}
}

// ExecuteScriptAtBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) ExecuteScriptAtBlockID(_a0 context.Context, _a1 *execution.ExecuteScriptAtBlockIDRequest) (*execution.ExecuteScriptAtBlockIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 *execution.ExecuteScriptAtBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.ExecuteScriptAtBlockIDRequest) (*execution.ExecuteScriptAtBlockIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.ExecuteScriptAtBlockIDRequest) *execution.ExecuteScriptAtBlockIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.ExecuteScriptAtBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.ExecuteScriptAtBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_ExecuteScriptAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockID'
type MockExecutionAPIServer_ExecuteScriptAtBlockID_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.ExecuteScriptAtBlockIDRequest
func (_e *MockExecutionAPIServer_Expecter) ExecuteScriptAtBlockID(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_ExecuteScriptAtBlockID_Call {
	return &MockExecutionAPIServer_ExecuteScriptAtBlockID_Call{Call: _e.mock.On("ExecuteScriptAtBlockID", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_ExecuteScriptAtBlockID_Call) Run(run func(_a0 context.Context, _a1 *execution.ExecuteScriptAtBlockIDRequest)) *MockExecutionAPIServer_ExecuteScriptAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.ExecuteScriptAtBlockIDRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_ExecuteScriptAtBlockID_Call) Return(_a0 *execution.ExecuteScriptAtBlockIDResponse, _a1 error) *MockExecutionAPIServer_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_ExecuteScriptAtBlockID_Call) RunAndReturn(run func(context.Context, *execution.ExecuteScriptAtBlockIDRequest) (*execution.ExecuteScriptAtBlockIDResponse, error)) *MockExecutionAPIServer_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetAccountAtBlockID(_a0 context.Context, _a1 *execution.GetAccountAtBlockIDRequest) (*execution.GetAccountAtBlockIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockID")
	}

	var r0 *execution.GetAccountAtBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetAccountAtBlockIDRequest) (*execution.GetAccountAtBlockIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetAccountAtBlockIDRequest) *execution.GetAccountAtBlockIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetAccountAtBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetAccountAtBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetAccountAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtBlockID'
type MockExecutionAPIServer_GetAccountAtBlockID_Call struct {
	*mock.Call
}

// GetAccountAtBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetAccountAtBlockIDRequest
func (_e *MockExecutionAPIServer_Expecter) GetAccountAtBlockID(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetAccountAtBlockID_Call {
	return &MockExecutionAPIServer_GetAccountAtBlockID_Call{Call: _e.mock.On("GetAccountAtBlockID", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetAccountAtBlockID_Call) Run(run func(_a0 context.Context, _a1 *execution.GetAccountAtBlockIDRequest)) *MockExecutionAPIServer_GetAccountAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetAccountAtBlockIDRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetAccountAtBlockID_Call) Return(_a0 *execution.GetAccountAtBlockIDResponse, _a1 error) *MockExecutionAPIServer_GetAccountAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetAccountAtBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetAccountAtBlockIDRequest) (*execution.GetAccountAtBlockIDResponse, error)) *MockExecutionAPIServer_GetAccountAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByID provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetBlockHeaderByID(_a0 context.Context, _a1 *execution.GetBlockHeaderByIDRequest) (*execution.BlockHeaderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByID")
	}

	var r0 *execution.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetBlockHeaderByIDRequest) (*execution.BlockHeaderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetBlockHeaderByIDRequest) *execution.BlockHeaderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetBlockHeaderByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetBlockHeaderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByID'
type MockExecutionAPIServer_GetBlockHeaderByID_Call struct {
	*mock.Call
}

// GetBlockHeaderByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetBlockHeaderByIDRequest
func (_e *MockExecutionAPIServer_Expecter) GetBlockHeaderByID(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetBlockHeaderByID_Call {
	return &MockExecutionAPIServer_GetBlockHeaderByID_Call{Call: _e.mock.On("GetBlockHeaderByID", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetBlockHeaderByID_Call) Run(run func(_a0 context.Context, _a1 *execution.GetBlockHeaderByIDRequest)) *MockExecutionAPIServer_GetBlockHeaderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetBlockHeaderByIDRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetBlockHeaderByID_Call) Return(_a0 *execution.BlockHeaderResponse, _a1 error) *MockExecutionAPIServer_GetBlockHeaderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetBlockHeaderByID_Call) RunAndReturn(run func(context.Context, *execution.GetBlockHeaderByIDRequest) (*execution.BlockHeaderResponse, error)) *MockExecutionAPIServer_GetBlockHeaderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForBlockIDs provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetEventsForBlockIDs(_a0 context.Context, _a1 *execution.GetEventsForBlockIDsRequest) (*execution.GetEventsForBlockIDsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForBlockIDs")
	}

	var r0 *execution.GetEventsForBlockIDsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetEventsForBlockIDsRequest) (*execution.GetEventsForBlockIDsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetEventsForBlockIDsRequest) *execution.GetEventsForBlockIDsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetEventsForBlockIDsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetEventsForBlockIDsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetEventsForBlockIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForBlockIDs'
type MockExecutionAPIServer_GetEventsForBlockIDs_Call struct {
	*mock.Call
}

// GetEventsForBlockIDs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetEventsForBlockIDsRequest
func (_e *MockExecutionAPIServer_Expecter) GetEventsForBlockIDs(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetEventsForBlockIDs_Call {
	return &MockExecutionAPIServer_GetEventsForBlockIDs_Call{Call: _e.mock.On("GetEventsForBlockIDs", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetEventsForBlockIDs_Call) Run(run func(_a0 context.Context, _a1 *execution.GetEventsForBlockIDsRequest)) *MockExecutionAPIServer_GetEventsForBlockIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetEventsForBlockIDsRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetEventsForBlockIDs_Call) Return(_a0 *execution.GetEventsForBlockIDsResponse, _a1 error) *MockExecutionAPIServer_GetEventsForBlockIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetEventsForBlockIDs_Call) RunAndReturn(run func(context.Context, *execution.GetEventsForBlockIDsRequest) (*execution.GetEventsForBlockIDsResponse, error)) *MockExecutionAPIServer_GetEventsForBlockIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetLatestBlockHeader(_a0 context.Context, _a1 *execution.GetLatestBlockHeaderRequest) (*execution.BlockHeaderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *execution.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetLatestBlockHeaderRequest) (*execution.BlockHeaderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetLatestBlockHeaderRequest) *execution.BlockHeaderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetLatestBlockHeaderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type MockExecutionAPIServer_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetLatestBlockHeaderRequest
func (_e *MockExecutionAPIServer_Expecter) GetLatestBlockHeader(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetLatestBlockHeader_Call {
	return &MockExecutionAPIServer_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetLatestBlockHeader_Call) Run(run func(_a0 context.Context, _a1 *execution.GetLatestBlockHeaderRequest)) *MockExecutionAPIServer_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetLatestBlockHeaderRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetLatestBlockHeader_Call) Return(_a0 *execution.BlockHeaderResponse, _a1 error) *MockExecutionAPIServer_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetLatestBlockHeader_Call) RunAndReturn(run func(context.Context, *execution.GetLatestBlockHeaderRequest) (*execution.BlockHeaderResponse, error)) *MockExecutionAPIServer_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisterAtBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetRegisterAtBlockID(_a0 context.Context, _a1 *execution.GetRegisterAtBlockIDRequest) (*execution.GetRegisterAtBlockIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisterAtBlockID")
	}

	var r0 *execution.GetRegisterAtBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetRegisterAtBlockIDRequest) (*execution.GetRegisterAtBlockIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetRegisterAtBlockIDRequest) *execution.GetRegisterAtBlockIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetRegisterAtBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetRegisterAtBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetRegisterAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisterAtBlockID'
type MockExecutionAPIServer_GetRegisterAtBlockID_Call struct {
	*mock.Call
}

// GetRegisterAtBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetRegisterAtBlockIDRequest
func (_e *MockExecutionAPIServer_Expecter) GetRegisterAtBlockID(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetRegisterAtBlockID_Call {
	return &MockExecutionAPIServer_GetRegisterAtBlockID_Call{Call: _e.mock.On("GetRegisterAtBlockID", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetRegisterAtBlockID_Call) Run(run func(_a0 context.Context, _a1 *execution.GetRegisterAtBlockIDRequest)) *MockExecutionAPIServer_GetRegisterAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetRegisterAtBlockIDRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetRegisterAtBlockID_Call) Return(_a0 *execution.GetRegisterAtBlockIDResponse, _a1 error) *MockExecutionAPIServer_GetRegisterAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetRegisterAtBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetRegisterAtBlockIDRequest) (*execution.GetRegisterAtBlockIDResponse, error)) *MockExecutionAPIServer_GetRegisterAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionErrorMessage provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetTransactionErrorMessage(_a0 context.Context, _a1 *execution.GetTransactionErrorMessageRequest) (*execution.GetTransactionErrorMessageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionErrorMessage")
	}

	var r0 *execution.GetTransactionErrorMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageRequest) (*execution.GetTransactionErrorMessageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageRequest) *execution.GetTransactionErrorMessageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionErrorMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionErrorMessageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetTransactionErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionErrorMessage'
type MockExecutionAPIServer_GetTransactionErrorMessage_Call struct {
	*mock.Call
}

// GetTransactionErrorMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetTransactionErrorMessageRequest
func (_e *MockExecutionAPIServer_Expecter) GetTransactionErrorMessage(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetTransactionErrorMessage_Call {
	return &MockExecutionAPIServer_GetTransactionErrorMessage_Call{Call: _e.mock.On("GetTransactionErrorMessage", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessage_Call) Run(run func(_a0 context.Context, _a1 *execution.GetTransactionErrorMessageRequest)) *MockExecutionAPIServer_GetTransactionErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetTransactionErrorMessageRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessage_Call) Return(_a0 *execution.GetTransactionErrorMessageResponse, _a1 error) *MockExecutionAPIServer_GetTransactionErrorMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessage_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionErrorMessageRequest) (*execution.GetTransactionErrorMessageResponse, error)) *MockExecutionAPIServer_GetTransactionErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionErrorMessageByIndex provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetTransactionErrorMessageByIndex(_a0 context.Context, _a1 *execution.GetTransactionErrorMessageByIndexRequest) (*execution.GetTransactionErrorMessageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionErrorMessageByIndex")
	}

	var r0 *execution.GetTransactionErrorMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest) (*execution.GetTransactionErrorMessageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest) *execution.GetTransactionErrorMessageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionErrorMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionErrorMessageByIndex'
type MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call struct {
	*mock.Call
}

// GetTransactionErrorMessageByIndex is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetTransactionErrorMessageByIndexRequest
func (_e *MockExecutionAPIServer_Expecter) GetTransactionErrorMessageByIndex(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call {
	return &MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call{Call: _e.mock.On("GetTransactionErrorMessageByIndex", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call) Run(run func(_a0 context.Context, _a1 *execution.GetTransactionErrorMessageByIndexRequest)) *MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetTransactionErrorMessageByIndexRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call) Return(_a0 *execution.GetTransactionErrorMessageResponse, _a1 error) *MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest) (*execution.GetTransactionErrorMessageResponse, error)) *MockExecutionAPIServer_GetTransactionErrorMessageByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionErrorMessagesByBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetTransactionErrorMessagesByBlockID(_a0 context.Context, _a1 *execution.GetTransactionErrorMessagesByBlockIDRequest) (*execution.GetTransactionErrorMessagesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionErrorMessagesByBlockID")
	}

	var r0 *execution.GetTransactionErrorMessagesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest) (*execution.GetTransactionErrorMessagesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest) *execution.GetTransactionErrorMessagesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionErrorMessagesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionErrorMessagesByBlockID'
type MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call struct {
	*mock.Call
}

// GetTransactionErrorMessagesByBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetTransactionErrorMessagesByBlockIDRequest
func (_e *MockExecutionAPIServer_Expecter) GetTransactionErrorMessagesByBlockID(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call {
	return &MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call{Call: _e.mock.On("GetTransactionErrorMessagesByBlockID", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call) Run(run func(_a0 context.Context, _a1 *execution.GetTransactionErrorMessagesByBlockIDRequest)) *MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetTransactionErrorMessagesByBlockIDRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call) Return(_a0 *execution.GetTransactionErrorMessagesResponse, _a1 error) *MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest) (*execution.GetTransactionErrorMessagesResponse, error)) *MockExecutionAPIServer_GetTransactionErrorMessagesByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionExecutionMetricsAfter provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetTransactionExecutionMetricsAfter(_a0 context.Context, _a1 *execution.GetTransactionExecutionMetricsAfterRequest) (*execution.GetTransactionExecutionMetricsAfterResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionExecutionMetricsAfter")
	}

	var r0 *execution.GetTransactionExecutionMetricsAfterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest) (*execution.GetTransactionExecutionMetricsAfterResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest) *execution.GetTransactionExecutionMetricsAfterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionExecutionMetricsAfterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionExecutionMetricsAfter'
type MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call struct {
	*mock.Call
}

// GetTransactionExecutionMetricsAfter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetTransactionExecutionMetricsAfterRequest
func (_e *MockExecutionAPIServer_Expecter) GetTransactionExecutionMetricsAfter(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call {
	return &MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call{Call: _e.mock.On("GetTransactionExecutionMetricsAfter", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call) Run(run func(_a0 context.Context, _a1 *execution.GetTransactionExecutionMetricsAfterRequest)) *MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetTransactionExecutionMetricsAfterRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call) Return(_a0 *execution.GetTransactionExecutionMetricsAfterResponse, _a1 error) *MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest) (*execution.GetTransactionExecutionMetricsAfterResponse, error)) *MockExecutionAPIServer_GetTransactionExecutionMetricsAfter_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResult provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetTransactionResult(_a0 context.Context, _a1 *execution.GetTransactionResultRequest) (*execution.GetTransactionResultResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *execution.GetTransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionResultRequest) (*execution.GetTransactionResultResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionResultRequest) *execution.GetTransactionResultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionResultRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResult'
type MockExecutionAPIServer_GetTransactionResult_Call struct {
	*mock.Call
}

// GetTransactionResult is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetTransactionResultRequest
func (_e *MockExecutionAPIServer_Expecter) GetTransactionResult(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetTransactionResult_Call {
	return &MockExecutionAPIServer_GetTransactionResult_Call{Call: _e.mock.On("GetTransactionResult", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetTransactionResult_Call) Run(run func(_a0 context.Context, _a1 *execution.GetTransactionResultRequest)) *MockExecutionAPIServer_GetTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetTransactionResultRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionResult_Call) Return(_a0 *execution.GetTransactionResultResponse, _a1 error) *MockExecutionAPIServer_GetTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionResult_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionResultRequest) (*execution.GetTransactionResultResponse, error)) *MockExecutionAPIServer_GetTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultByIndex provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetTransactionResultByIndex(_a0 context.Context, _a1 *execution.GetTransactionByIndexRequest) (*execution.GetTransactionResultResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultByIndex")
	}

	var r0 *execution.GetTransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionByIndexRequest) (*execution.GetTransactionResultResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionByIndexRequest) *execution.GetTransactionResultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionByIndexRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetTransactionResultByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultByIndex'
type MockExecutionAPIServer_GetTransactionResultByIndex_Call struct {
	*mock.Call
}

// GetTransactionResultByIndex is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetTransactionByIndexRequest
func (_e *MockExecutionAPIServer_Expecter) GetTransactionResultByIndex(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetTransactionResultByIndex_Call {
	return &MockExecutionAPIServer_GetTransactionResultByIndex_Call{Call: _e.mock.On("GetTransactionResultByIndex", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetTransactionResultByIndex_Call) Run(run func(_a0 context.Context, _a1 *execution.GetTransactionByIndexRequest)) *MockExecutionAPIServer_GetTransactionResultByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetTransactionByIndexRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionResultByIndex_Call) Return(_a0 *execution.GetTransactionResultResponse, _a1 error) *MockExecutionAPIServer_GetTransactionResultByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionResultByIndex_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionByIndexRequest) (*execution.GetTransactionResultResponse, error)) *MockExecutionAPIServer_GetTransactionResultByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultsByBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) GetTransactionResultsByBlockID(_a0 context.Context, _a1 *execution.GetTransactionsByBlockIDRequest) (*execution.GetTransactionResultsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultsByBlockID")
	}

	var r0 *execution.GetTransactionResultsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionsByBlockIDRequest) (*execution.GetTransactionResultsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionsByBlockIDRequest) *execution.GetTransactionResultsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionResultsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionsByBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_GetTransactionResultsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultsByBlockID'
type MockExecutionAPIServer_GetTransactionResultsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionResultsByBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.GetTransactionsByBlockIDRequest
func (_e *MockExecutionAPIServer_Expecter) GetTransactionResultsByBlockID(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_GetTransactionResultsByBlockID_Call {
	return &MockExecutionAPIServer_GetTransactionResultsByBlockID_Call{Call: _e.mock.On("GetTransactionResultsByBlockID", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_GetTransactionResultsByBlockID_Call) Run(run func(_a0 context.Context, _a1 *execution.GetTransactionsByBlockIDRequest)) *MockExecutionAPIServer_GetTransactionResultsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.GetTransactionsByBlockIDRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionResultsByBlockID_Call) Return(_a0 *execution.GetTransactionResultsResponse, _a1 error) *MockExecutionAPIServer_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_GetTransactionResultsByBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionsByBlockIDRequest) (*execution.GetTransactionResultsResponse, error)) *MockExecutionAPIServer_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: _a0, _a1
func (_m *MockExecutionAPIServer) Ping(_a0 context.Context, _a1 *execution.PingRequest) (*execution.PingResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *execution.PingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.PingRequest) (*execution.PingResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.PingRequest) *execution.PingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.PingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.PingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIServer_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockExecutionAPIServer_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *execution.PingRequest
func (_e *MockExecutionAPIServer_Expecter) Ping(_a0 interface{}, _a1 interface{}) *MockExecutionAPIServer_Ping_Call {
	return &MockExecutionAPIServer_Ping_Call{Call: _e.mock.On("Ping", _a0, _a1)}
}

func (_c *MockExecutionAPIServer_Ping_Call) Run(run func(_a0 context.Context, _a1 *execution.PingRequest)) *MockExecutionAPIServer_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*execution.PingRequest))
	})
	return _c
}

func (_c *MockExecutionAPIServer_Ping_Call) Return(_a0 *execution.PingResponse, _a1 error) *MockExecutionAPIServer_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIServer_Ping_Call) RunAndReturn(run func(context.Context, *execution.PingRequest) (*execution.PingResponse, error)) *MockExecutionAPIServer_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionAPIServer creates a new instance of MockExecutionAPIServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionAPIServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionAPIServer {
	mock := &MockExecutionAPIServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
