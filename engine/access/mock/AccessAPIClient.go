// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow/protobuf/go/flow/access"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockAccessAPIClient is an autogenerated mock type for the AccessAPIClient type
type MockAccessAPIClient struct {
	mock.Mock
}

type MockAccessAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessAPIClient) EXPECT() *MockAccessAPIClient_Expecter {
	return &MockAccessAPIClient_Expecter{mock: &_m.Mock}
}

// ExecuteScriptAtBlockHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) ExecuteScriptAtBlockHeight(ctx context.Context, in *access.ExecuteScriptAtBlockHeightRequest, opts ...grpc.CallOption) (*access.ExecuteScriptResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockHeight")
	}

	var r0 *access.ExecuteScriptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockHeightRequest, ...grpc.CallOption) (*access.ExecuteScriptResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockHeightRequest, ...grpc.CallOption) *access.ExecuteScriptResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecuteScriptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ExecuteScriptAtBlockHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockHeight'
type MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.ExecuteScriptAtBlockHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) ExecuteScriptAtBlockHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call {
	return &MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call{Call: _e.mock.On("ExecuteScriptAtBlockHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call) Run(run func(ctx context.Context, in *access.ExecuteScriptAtBlockHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.ExecuteScriptAtBlockHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call) Return(_a0 *access.ExecuteScriptResponse, _a1 error) *MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.ExecuteScriptAtBlockHeightRequest, ...grpc.CallOption) (*access.ExecuteScriptResponse, error)) *MockAccessAPIClient_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptAtBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) ExecuteScriptAtBlockID(ctx context.Context, in *access.ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption) (*access.ExecuteScriptResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 *access.ExecuteScriptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) (*access.ExecuteScriptResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) *access.ExecuteScriptResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecuteScriptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_ExecuteScriptAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockID'
type MockAccessAPIClient_ExecuteScriptAtBlockID_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.ExecuteScriptAtBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) ExecuteScriptAtBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_ExecuteScriptAtBlockID_Call {
	return &MockAccessAPIClient_ExecuteScriptAtBlockID_Call{Call: _e.mock.On("ExecuteScriptAtBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_ExecuteScriptAtBlockID_Call) Run(run func(ctx context.Context, in *access.ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_ExecuteScriptAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.ExecuteScriptAtBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_ExecuteScriptAtBlockID_Call) Return(_a0 *access.ExecuteScriptResponse, _a1 error) *MockAccessAPIClient_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_ExecuteScriptAtBlockID_Call) RunAndReturn(run func(context.Context, *access.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) (*access.ExecuteScriptResponse, error)) *MockAccessAPIClient_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptAtLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) ExecuteScriptAtLatestBlock(ctx context.Context, in *access.ExecuteScriptAtLatestBlockRequest, opts ...grpc.CallOption) (*access.ExecuteScriptResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtLatestBlock")
	}

	var r0 *access.ExecuteScriptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtLatestBlockRequest, ...grpc.CallOption) (*access.ExecuteScriptResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtLatestBlockRequest, ...grpc.CallOption) *access.ExecuteScriptResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecuteScriptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ExecuteScriptAtLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtLatestBlock'
type MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call struct {
	*mock.Call
}

// ExecuteScriptAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.ExecuteScriptAtLatestBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) ExecuteScriptAtLatestBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call {
	return &MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call{Call: _e.mock.On("ExecuteScriptAtLatestBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call) Run(run func(ctx context.Context, in *access.ExecuteScriptAtLatestBlockRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.ExecuteScriptAtLatestBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call) Return(_a0 *access.ExecuteScriptResponse, _a1 error) *MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.ExecuteScriptAtLatestBlockRequest, ...grpc.CallOption) (*access.ExecuteScriptResponse, error)) *MockAccessAPIClient_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccount(ctx context.Context, in *access.GetAccountRequest, opts ...grpc.CallOption) (*access.GetAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *access.GetAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountRequest, ...grpc.CallOption) (*access.GetAccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountRequest, ...grpc.CallOption) *access.GetAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.GetAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockAccessAPIClient_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccount(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccount_Call {
	return &MockAccessAPIClient_GetAccount_Call{Call: _e.mock.On("GetAccount",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccount_Call) Run(run func(ctx context.Context, in *access.GetAccountRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccount_Call) Return(_a0 *access.GetAccountResponse, _a1 error) *MockAccessAPIClient_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccount_Call) RunAndReturn(run func(context.Context, *access.GetAccountRequest, ...grpc.CallOption) (*access.GetAccountResponse, error)) *MockAccessAPIClient_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtBlockHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountAtBlockHeight(ctx context.Context, in *access.GetAccountAtBlockHeightRequest, opts ...grpc.CallOption) (*access.AccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockHeight")
	}

	var r0 *access.AccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtBlockHeightRequest, ...grpc.CallOption) *access.AccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountAtBlockHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtBlockHeight'
type MockAccessAPIClient_GetAccountAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountAtBlockHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountAtBlockHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountAtBlockHeight_Call {
	return &MockAccessAPIClient_GetAccountAtBlockHeight_Call{Call: _e.mock.On("GetAccountAtBlockHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountAtBlockHeight_Call) Run(run func(ctx context.Context, in *access.GetAccountAtBlockHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountAtBlockHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountAtBlockHeight_Call) Return(_a0 *access.AccountResponse, _a1 error) *MockAccessAPIClient_GetAccountAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountResponse, error)) *MockAccessAPIClient_GetAccountAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountAtLatestBlock(ctx context.Context, in *access.GetAccountAtLatestBlockRequest, opts ...grpc.CallOption) (*access.AccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtLatestBlock")
	}

	var r0 *access.AccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtLatestBlockRequest, ...grpc.CallOption) *access.AccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountAtLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtLatestBlock'
type MockAccessAPIClient_GetAccountAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountAtLatestBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountAtLatestBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountAtLatestBlock_Call {
	return &MockAccessAPIClient_GetAccountAtLatestBlock_Call{Call: _e.mock.On("GetAccountAtLatestBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountAtLatestBlock_Call) Run(run func(ctx context.Context, in *access.GetAccountAtLatestBlockRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountAtLatestBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountAtLatestBlock_Call) Return(_a0 *access.AccountResponse, _a1 error) *MockAccessAPIClient_GetAccountAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountResponse, error)) *MockAccessAPIClient_GetAccountAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalanceAtBlockHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountBalanceAtBlockHeight(ctx context.Context, in *access.GetAccountBalanceAtBlockHeightRequest, opts ...grpc.CallOption) (*access.AccountBalanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtBlockHeight")
	}

	var r0 *access.AccountBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountBalanceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest, ...grpc.CallOption) *access.AccountBalanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalanceAtBlockHeight'
type MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountBalanceAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountBalanceAtBlockHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountBalanceAtBlockHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call {
	return &MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call{Call: _e.mock.On("GetAccountBalanceAtBlockHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call) Run(run func(ctx context.Context, in *access.GetAccountBalanceAtBlockHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountBalanceAtBlockHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call) Return(_a0 *access.AccountBalanceResponse, _a1 error) *MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountBalanceResponse, error)) *MockAccessAPIClient_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalanceAtLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountBalanceAtLatestBlock(ctx context.Context, in *access.GetAccountBalanceAtLatestBlockRequest, opts ...grpc.CallOption) (*access.AccountBalanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtLatestBlock")
	}

	var r0 *access.AccountBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountBalanceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest, ...grpc.CallOption) *access.AccountBalanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalanceAtLatestBlock'
type MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountBalanceAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountBalanceAtLatestBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountBalanceAtLatestBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call {
	return &MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call{Call: _e.mock.On("GetAccountBalanceAtLatestBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call) Run(run func(ctx context.Context, in *access.GetAccountBalanceAtLatestBlockRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountBalanceAtLatestBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call) Return(_a0 *access.AccountBalanceResponse, _a1 error) *MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountBalanceResponse, error)) *MockAccessAPIClient_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeyAtBlockHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountKeyAtBlockHeight(ctx context.Context, in *access.GetAccountKeyAtBlockHeightRequest, opts ...grpc.CallOption) (*access.AccountKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtBlockHeight")
	}

	var r0 *access.AccountKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountKeyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtBlockHeightRequest, ...grpc.CallOption) *access.AccountKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeyAtBlockHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeyAtBlockHeight'
type MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountKeyAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountKeyAtBlockHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountKeyAtBlockHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call {
	return &MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call{Call: _e.mock.On("GetAccountKeyAtBlockHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call) Run(run func(ctx context.Context, in *access.GetAccountKeyAtBlockHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountKeyAtBlockHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call) Return(_a0 *access.AccountKeyResponse, _a1 error) *MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeyAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountKeyResponse, error)) *MockAccessAPIClient_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeyAtLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountKeyAtLatestBlock(ctx context.Context, in *access.GetAccountKeyAtLatestBlockRequest, opts ...grpc.CallOption) (*access.AccountKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtLatestBlock")
	}

	var r0 *access.AccountKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountKeyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtLatestBlockRequest, ...grpc.CallOption) *access.AccountKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeyAtLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeyAtLatestBlock'
type MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountKeyAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountKeyAtLatestBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountKeyAtLatestBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call {
	return &MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call{Call: _e.mock.On("GetAccountKeyAtLatestBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call) Run(run func(ctx context.Context, in *access.GetAccountKeyAtLatestBlockRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountKeyAtLatestBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call) Return(_a0 *access.AccountKeyResponse, _a1 error) *MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeyAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountKeyResponse, error)) *MockAccessAPIClient_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeysAtBlockHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountKeysAtBlockHeight(ctx context.Context, in *access.GetAccountKeysAtBlockHeightRequest, opts ...grpc.CallOption) (*access.AccountKeysResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtBlockHeight")
	}

	var r0 *access.AccountKeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountKeysResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtBlockHeightRequest, ...grpc.CallOption) *access.AccountKeysResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeysAtBlockHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeysAtBlockHeight'
type MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountKeysAtBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountKeysAtBlockHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountKeysAtBlockHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call {
	return &MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call{Call: _e.mock.On("GetAccountKeysAtBlockHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call) Run(run func(ctx context.Context, in *access.GetAccountKeysAtBlockHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountKeysAtBlockHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call) Return(_a0 *access.AccountKeysResponse, _a1 error) *MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeysAtBlockHeightRequest, ...grpc.CallOption) (*access.AccountKeysResponse, error)) *MockAccessAPIClient_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeysAtLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetAccountKeysAtLatestBlock(ctx context.Context, in *access.GetAccountKeysAtLatestBlockRequest, opts ...grpc.CallOption) (*access.AccountKeysResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtLatestBlock")
	}

	var r0 *access.AccountKeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountKeysResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtLatestBlockRequest, ...grpc.CallOption) *access.AccountKeysResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeysAtLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeysAtLatestBlock'
type MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountKeysAtLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetAccountKeysAtLatestBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetAccountKeysAtLatestBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call {
	return &MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call{Call: _e.mock.On("GetAccountKeysAtLatestBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call) Run(run func(ctx context.Context, in *access.GetAccountKeysAtLatestBlockRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetAccountKeysAtLatestBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call) Return(_a0 *access.AccountKeysResponse, _a1 error) *MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeysAtLatestBlockRequest, ...grpc.CallOption) (*access.AccountKeysResponse, error)) *MockAccessAPIClient_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetBlockByHeight(ctx context.Context, in *access.GetBlockByHeightRequest, opts ...grpc.CallOption) (*access.BlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 *access.BlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByHeightRequest, ...grpc.CallOption) (*access.BlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByHeightRequest, ...grpc.CallOption) *access.BlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHeight'
type MockAccessAPIClient_GetBlockByHeight_Call struct {
	*mock.Call
}

// GetBlockByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetBlockByHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetBlockByHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetBlockByHeight_Call {
	return &MockAccessAPIClient_GetBlockByHeight_Call{Call: _e.mock.On("GetBlockByHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetBlockByHeight_Call) Run(run func(ctx context.Context, in *access.GetBlockByHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetBlockByHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetBlockByHeight_Call) Return(_a0 *access.BlockResponse, _a1 error) *MockAccessAPIClient_GetBlockByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetBlockByHeight_Call) RunAndReturn(run func(context.Context, *access.GetBlockByHeightRequest, ...grpc.CallOption) (*access.BlockResponse, error)) *MockAccessAPIClient_GetBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetBlockByID(ctx context.Context, in *access.GetBlockByIDRequest, opts ...grpc.CallOption) (*access.BlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByID")
	}

	var r0 *access.BlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByIDRequest, ...grpc.CallOption) (*access.BlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByIDRequest, ...grpc.CallOption) *access.BlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetBlockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByID'
type MockAccessAPIClient_GetBlockByID_Call struct {
	*mock.Call
}

// GetBlockByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetBlockByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetBlockByID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetBlockByID_Call {
	return &MockAccessAPIClient_GetBlockByID_Call{Call: _e.mock.On("GetBlockByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetBlockByID_Call) Run(run func(ctx context.Context, in *access.GetBlockByIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetBlockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetBlockByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetBlockByID_Call) Return(_a0 *access.BlockResponse, _a1 error) *MockAccessAPIClient_GetBlockByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetBlockByID_Call) RunAndReturn(run func(context.Context, *access.GetBlockByIDRequest, ...grpc.CallOption) (*access.BlockResponse, error)) *MockAccessAPIClient_GetBlockByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetBlockHeaderByHeight(ctx context.Context, in *access.GetBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*access.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByHeight")
	}

	var r0 *access.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByHeightRequest, ...grpc.CallOption) (*access.BlockHeaderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByHeightRequest, ...grpc.CallOption) *access.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockHeaderByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetBlockHeaderByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByHeight'
type MockAccessAPIClient_GetBlockHeaderByHeight_Call struct {
	*mock.Call
}

// GetBlockHeaderByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetBlockHeaderByHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetBlockHeaderByHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetBlockHeaderByHeight_Call {
	return &MockAccessAPIClient_GetBlockHeaderByHeight_Call{Call: _e.mock.On("GetBlockHeaderByHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetBlockHeaderByHeight_Call) Run(run func(ctx context.Context, in *access.GetBlockHeaderByHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetBlockHeaderByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetBlockHeaderByHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetBlockHeaderByHeight_Call) Return(_a0 *access.BlockHeaderResponse, _a1 error) *MockAccessAPIClient_GetBlockHeaderByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetBlockHeaderByHeight_Call) RunAndReturn(run func(context.Context, *access.GetBlockHeaderByHeightRequest, ...grpc.CallOption) (*access.BlockHeaderResponse, error)) *MockAccessAPIClient_GetBlockHeaderByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetBlockHeaderByID(ctx context.Context, in *access.GetBlockHeaderByIDRequest, opts ...grpc.CallOption) (*access.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByID")
	}

	var r0 *access.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByIDRequest, ...grpc.CallOption) (*access.BlockHeaderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByIDRequest, ...grpc.CallOption) *access.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockHeaderByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetBlockHeaderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByID'
type MockAccessAPIClient_GetBlockHeaderByID_Call struct {
	*mock.Call
}

// GetBlockHeaderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetBlockHeaderByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetBlockHeaderByID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetBlockHeaderByID_Call {
	return &MockAccessAPIClient_GetBlockHeaderByID_Call{Call: _e.mock.On("GetBlockHeaderByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetBlockHeaderByID_Call) Run(run func(ctx context.Context, in *access.GetBlockHeaderByIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetBlockHeaderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetBlockHeaderByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetBlockHeaderByID_Call) Return(_a0 *access.BlockHeaderResponse, _a1 error) *MockAccessAPIClient_GetBlockHeaderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetBlockHeaderByID_Call) RunAndReturn(run func(context.Context, *access.GetBlockHeaderByIDRequest, ...grpc.CallOption) (*access.BlockHeaderResponse, error)) *MockAccessAPIClient_GetBlockHeaderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionByID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetCollectionByID(ctx context.Context, in *access.GetCollectionByIDRequest, opts ...grpc.CallOption) (*access.CollectionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionByID")
	}

	var r0 *access.CollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetCollectionByIDRequest, ...grpc.CallOption) (*access.CollectionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetCollectionByIDRequest, ...grpc.CallOption) *access.CollectionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.CollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetCollectionByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetCollectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionByID'
type MockAccessAPIClient_GetCollectionByID_Call struct {
	*mock.Call
}

// GetCollectionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetCollectionByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetCollectionByID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetCollectionByID_Call {
	return &MockAccessAPIClient_GetCollectionByID_Call{Call: _e.mock.On("GetCollectionByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetCollectionByID_Call) Run(run func(ctx context.Context, in *access.GetCollectionByIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetCollectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetCollectionByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetCollectionByID_Call) Return(_a0 *access.CollectionResponse, _a1 error) *MockAccessAPIClient_GetCollectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetCollectionByID_Call) RunAndReturn(run func(context.Context, *access.GetCollectionByIDRequest, ...grpc.CallOption) (*access.CollectionResponse, error)) *MockAccessAPIClient_GetCollectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForBlockIDs provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetEventsForBlockIDs(ctx context.Context, in *access.GetEventsForBlockIDsRequest, opts ...grpc.CallOption) (*access.EventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForBlockIDs")
	}

	var r0 *access.EventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForBlockIDsRequest, ...grpc.CallOption) (*access.EventsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForBlockIDsRequest, ...grpc.CallOption) *access.EventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.EventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetEventsForBlockIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetEventsForBlockIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForBlockIDs'
type MockAccessAPIClient_GetEventsForBlockIDs_Call struct {
	*mock.Call
}

// GetEventsForBlockIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetEventsForBlockIDsRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetEventsForBlockIDs(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetEventsForBlockIDs_Call {
	return &MockAccessAPIClient_GetEventsForBlockIDs_Call{Call: _e.mock.On("GetEventsForBlockIDs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetEventsForBlockIDs_Call) Run(run func(ctx context.Context, in *access.GetEventsForBlockIDsRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetEventsForBlockIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetEventsForBlockIDsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetEventsForBlockIDs_Call) Return(_a0 *access.EventsResponse, _a1 error) *MockAccessAPIClient_GetEventsForBlockIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetEventsForBlockIDs_Call) RunAndReturn(run func(context.Context, *access.GetEventsForBlockIDsRequest, ...grpc.CallOption) (*access.EventsResponse, error)) *MockAccessAPIClient_GetEventsForBlockIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForHeightRange provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetEventsForHeightRange(ctx context.Context, in *access.GetEventsForHeightRangeRequest, opts ...grpc.CallOption) (*access.EventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForHeightRange")
	}

	var r0 *access.EventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForHeightRangeRequest, ...grpc.CallOption) (*access.EventsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForHeightRangeRequest, ...grpc.CallOption) *access.EventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.EventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetEventsForHeightRangeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetEventsForHeightRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForHeightRange'
type MockAccessAPIClient_GetEventsForHeightRange_Call struct {
	*mock.Call
}

// GetEventsForHeightRange is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetEventsForHeightRangeRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetEventsForHeightRange(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetEventsForHeightRange_Call {
	return &MockAccessAPIClient_GetEventsForHeightRange_Call{Call: _e.mock.On("GetEventsForHeightRange",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetEventsForHeightRange_Call) Run(run func(ctx context.Context, in *access.GetEventsForHeightRangeRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetEventsForHeightRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetEventsForHeightRangeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetEventsForHeightRange_Call) Return(_a0 *access.EventsResponse, _a1 error) *MockAccessAPIClient_GetEventsForHeightRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetEventsForHeightRange_Call) RunAndReturn(run func(context.Context, *access.GetEventsForHeightRangeRequest, ...grpc.CallOption) (*access.EventsResponse, error)) *MockAccessAPIClient_GetEventsForHeightRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionResultByID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetExecutionResultByID(ctx context.Context, in *access.GetExecutionResultByIDRequest, opts ...grpc.CallOption) (*access.ExecutionResultByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultByID")
	}

	var r0 *access.ExecutionResultByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultByIDRequest, ...grpc.CallOption) (*access.ExecutionResultByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultByIDRequest, ...grpc.CallOption) *access.ExecutionResultByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecutionResultByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetExecutionResultByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetExecutionResultByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionResultByID'
type MockAccessAPIClient_GetExecutionResultByID_Call struct {
	*mock.Call
}

// GetExecutionResultByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetExecutionResultByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetExecutionResultByID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetExecutionResultByID_Call {
	return &MockAccessAPIClient_GetExecutionResultByID_Call{Call: _e.mock.On("GetExecutionResultByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetExecutionResultByID_Call) Run(run func(ctx context.Context, in *access.GetExecutionResultByIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetExecutionResultByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetExecutionResultByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetExecutionResultByID_Call) Return(_a0 *access.ExecutionResultByIDResponse, _a1 error) *MockAccessAPIClient_GetExecutionResultByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetExecutionResultByID_Call) RunAndReturn(run func(context.Context, *access.GetExecutionResultByIDRequest, ...grpc.CallOption) (*access.ExecutionResultByIDResponse, error)) *MockAccessAPIClient_GetExecutionResultByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionResultForBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetExecutionResultForBlockID(ctx context.Context, in *access.GetExecutionResultForBlockIDRequest, opts ...grpc.CallOption) (*access.ExecutionResultForBlockIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultForBlockID")
	}

	var r0 *access.ExecutionResultForBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultForBlockIDRequest, ...grpc.CallOption) (*access.ExecutionResultForBlockIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultForBlockIDRequest, ...grpc.CallOption) *access.ExecutionResultForBlockIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecutionResultForBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetExecutionResultForBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetExecutionResultForBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionResultForBlockID'
type MockAccessAPIClient_GetExecutionResultForBlockID_Call struct {
	*mock.Call
}

// GetExecutionResultForBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetExecutionResultForBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetExecutionResultForBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetExecutionResultForBlockID_Call {
	return &MockAccessAPIClient_GetExecutionResultForBlockID_Call{Call: _e.mock.On("GetExecutionResultForBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetExecutionResultForBlockID_Call) Run(run func(ctx context.Context, in *access.GetExecutionResultForBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetExecutionResultForBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetExecutionResultForBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetExecutionResultForBlockID_Call) Return(_a0 *access.ExecutionResultForBlockIDResponse, _a1 error) *MockAccessAPIClient_GetExecutionResultForBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetExecutionResultForBlockID_Call) RunAndReturn(run func(context.Context, *access.GetExecutionResultForBlockIDRequest, ...grpc.CallOption) (*access.ExecutionResultForBlockIDResponse, error)) *MockAccessAPIClient_GetExecutionResultForBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullCollectionByID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetFullCollectionByID(ctx context.Context, in *access.GetFullCollectionByIDRequest, opts ...grpc.CallOption) (*access.FullCollectionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFullCollectionByID")
	}

	var r0 *access.FullCollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetFullCollectionByIDRequest, ...grpc.CallOption) (*access.FullCollectionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetFullCollectionByIDRequest, ...grpc.CallOption) *access.FullCollectionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.FullCollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetFullCollectionByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetFullCollectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullCollectionByID'
type MockAccessAPIClient_GetFullCollectionByID_Call struct {
	*mock.Call
}

// GetFullCollectionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetFullCollectionByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetFullCollectionByID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetFullCollectionByID_Call {
	return &MockAccessAPIClient_GetFullCollectionByID_Call{Call: _e.mock.On("GetFullCollectionByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetFullCollectionByID_Call) Run(run func(ctx context.Context, in *access.GetFullCollectionByIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetFullCollectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetFullCollectionByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetFullCollectionByID_Call) Return(_a0 *access.FullCollectionResponse, _a1 error) *MockAccessAPIClient_GetFullCollectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetFullCollectionByID_Call) RunAndReturn(run func(context.Context, *access.GetFullCollectionByIDRequest, ...grpc.CallOption) (*access.FullCollectionResponse, error)) *MockAccessAPIClient_GetFullCollectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetLatestBlock(ctx context.Context, in *access.GetLatestBlockRequest, opts ...grpc.CallOption) (*access.BlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *access.BlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockRequest, ...grpc.CallOption) (*access.BlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockRequest, ...grpc.CallOption) *access.BlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockAccessAPIClient_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetLatestBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetLatestBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetLatestBlock_Call {
	return &MockAccessAPIClient_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetLatestBlock_Call) Run(run func(ctx context.Context, in *access.GetLatestBlockRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetLatestBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetLatestBlock_Call) Return(_a0 *access.BlockResponse, _a1 error) *MockAccessAPIClient_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetLatestBlockRequest, ...grpc.CallOption) (*access.BlockResponse, error)) *MockAccessAPIClient_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetLatestBlockHeader(ctx context.Context, in *access.GetLatestBlockHeaderRequest, opts ...grpc.CallOption) (*access.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *access.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockHeaderRequest, ...grpc.CallOption) (*access.BlockHeaderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockHeaderRequest, ...grpc.CallOption) *access.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetLatestBlockHeaderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type MockAccessAPIClient_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetLatestBlockHeaderRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetLatestBlockHeader(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetLatestBlockHeader_Call {
	return &MockAccessAPIClient_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetLatestBlockHeader_Call) Run(run func(ctx context.Context, in *access.GetLatestBlockHeaderRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetLatestBlockHeaderRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetLatestBlockHeader_Call) Return(_a0 *access.BlockHeaderResponse, _a1 error) *MockAccessAPIClient_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetLatestBlockHeader_Call) RunAndReturn(run func(context.Context, *access.GetLatestBlockHeaderRequest, ...grpc.CallOption) (*access.BlockHeaderResponse, error)) *MockAccessAPIClient_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProtocolStateSnapshot provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetLatestProtocolStateSnapshot(ctx context.Context, in *access.GetLatestProtocolStateSnapshotRequest, opts ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProtocolStateSnapshot")
	}

	var r0 *access.ProtocolStateSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestProtocolStateSnapshotRequest, ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestProtocolStateSnapshotRequest, ...grpc.CallOption) *access.ProtocolStateSnapshotResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ProtocolStateSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetLatestProtocolStateSnapshotRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProtocolStateSnapshot'
type MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call struct {
	*mock.Call
}

// GetLatestProtocolStateSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetLatestProtocolStateSnapshotRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetLatestProtocolStateSnapshot(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call {
	return &MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call{Call: _e.mock.On("GetLatestProtocolStateSnapshot",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call) Run(run func(ctx context.Context, in *access.GetLatestProtocolStateSnapshotRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetLatestProtocolStateSnapshotRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call) Return(_a0 *access.ProtocolStateSnapshotResponse, _a1 error) *MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call) RunAndReturn(run func(context.Context, *access.GetLatestProtocolStateSnapshotRequest, ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error)) *MockAccessAPIClient_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkParameters provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetNetworkParameters(ctx context.Context, in *access.GetNetworkParametersRequest, opts ...grpc.CallOption) (*access.GetNetworkParametersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkParameters")
	}

	var r0 *access.GetNetworkParametersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNetworkParametersRequest, ...grpc.CallOption) (*access.GetNetworkParametersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNetworkParametersRequest, ...grpc.CallOption) *access.GetNetworkParametersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.GetNetworkParametersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetNetworkParametersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetNetworkParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkParameters'
type MockAccessAPIClient_GetNetworkParameters_Call struct {
	*mock.Call
}

// GetNetworkParameters is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetNetworkParametersRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetNetworkParameters(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetNetworkParameters_Call {
	return &MockAccessAPIClient_GetNetworkParameters_Call{Call: _e.mock.On("GetNetworkParameters",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetNetworkParameters_Call) Run(run func(ctx context.Context, in *access.GetNetworkParametersRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetNetworkParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetNetworkParametersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetNetworkParameters_Call) Return(_a0 *access.GetNetworkParametersResponse, _a1 error) *MockAccessAPIClient_GetNetworkParameters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetNetworkParameters_Call) RunAndReturn(run func(context.Context, *access.GetNetworkParametersRequest, ...grpc.CallOption) (*access.GetNetworkParametersResponse, error)) *MockAccessAPIClient_GetNetworkParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeVersionInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetNodeVersionInfo(ctx context.Context, in *access.GetNodeVersionInfoRequest, opts ...grpc.CallOption) (*access.GetNodeVersionInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeVersionInfo")
	}

	var r0 *access.GetNodeVersionInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNodeVersionInfoRequest, ...grpc.CallOption) (*access.GetNodeVersionInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNodeVersionInfoRequest, ...grpc.CallOption) *access.GetNodeVersionInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.GetNodeVersionInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetNodeVersionInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetNodeVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeVersionInfo'
type MockAccessAPIClient_GetNodeVersionInfo_Call struct {
	*mock.Call
}

// GetNodeVersionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetNodeVersionInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetNodeVersionInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetNodeVersionInfo_Call {
	return &MockAccessAPIClient_GetNodeVersionInfo_Call{Call: _e.mock.On("GetNodeVersionInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetNodeVersionInfo_Call) Run(run func(ctx context.Context, in *access.GetNodeVersionInfoRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetNodeVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetNodeVersionInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetNodeVersionInfo_Call) Return(_a0 *access.GetNodeVersionInfoResponse, _a1 error) *MockAccessAPIClient_GetNodeVersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetNodeVersionInfo_Call) RunAndReturn(run func(context.Context, *access.GetNodeVersionInfoRequest, ...grpc.CallOption) (*access.GetNodeVersionInfoResponse, error)) *MockAccessAPIClient_GetNodeVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetProtocolStateSnapshotByBlockID(ctx context.Context, in *access.GetProtocolStateSnapshotByBlockIDRequest, opts ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByBlockID")
	}

	var r0 *access.ProtocolStateSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest, ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest, ...grpc.CallOption) *access.ProtocolStateSnapshotResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ProtocolStateSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByBlockID'
type MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetProtocolStateSnapshotByBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetProtocolStateSnapshotByBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call {
	return &MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call{Call: _e.mock.On("GetProtocolStateSnapshotByBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call) Run(run func(ctx context.Context, in *access.GetProtocolStateSnapshotByBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetProtocolStateSnapshotByBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call) Return(_a0 *access.ProtocolStateSnapshotResponse, _a1 error) *MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call) RunAndReturn(run func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest, ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error)) *MockAccessAPIClient_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetProtocolStateSnapshotByHeight(ctx context.Context, in *access.GetProtocolStateSnapshotByHeightRequest, opts ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByHeight")
	}

	var r0 *access.ProtocolStateSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest, ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest, ...grpc.CallOption) *access.ProtocolStateSnapshotResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ProtocolStateSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByHeight'
type MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetProtocolStateSnapshotByHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetProtocolStateSnapshotByHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call {
	return &MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call{Call: _e.mock.On("GetProtocolStateSnapshotByHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call) Run(run func(ctx context.Context, in *access.GetProtocolStateSnapshotByHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetProtocolStateSnapshotByHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call) Return(_a0 *access.ProtocolStateSnapshotResponse, _a1 error) *MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call) RunAndReturn(run func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest, ...grpc.CallOption) (*access.ProtocolStateSnapshotResponse, error)) *MockAccessAPIClient_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransaction provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetSystemTransaction(ctx context.Context, in *access.GetSystemTransactionRequest, opts ...grpc.CallOption) (*access.TransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransaction")
	}

	var r0 *access.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionRequest, ...grpc.CallOption) (*access.TransactionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionRequest, ...grpc.CallOption) *access.TransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetSystemTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetSystemTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransaction'
type MockAccessAPIClient_GetSystemTransaction_Call struct {
	*mock.Call
}

// GetSystemTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetSystemTransactionRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetSystemTransaction(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetSystemTransaction_Call {
	return &MockAccessAPIClient_GetSystemTransaction_Call{Call: _e.mock.On("GetSystemTransaction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetSystemTransaction_Call) Run(run func(ctx context.Context, in *access.GetSystemTransactionRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetSystemTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetSystemTransactionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetSystemTransaction_Call) Return(_a0 *access.TransactionResponse, _a1 error) *MockAccessAPIClient_GetSystemTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetSystemTransaction_Call) RunAndReturn(run func(context.Context, *access.GetSystemTransactionRequest, ...grpc.CallOption) (*access.TransactionResponse, error)) *MockAccessAPIClient_GetSystemTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransactionResult provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetSystemTransactionResult(ctx context.Context, in *access.GetSystemTransactionResultRequest, opts ...grpc.CallOption) (*access.TransactionResultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransactionResult")
	}

	var r0 *access.TransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionResultRequest, ...grpc.CallOption) (*access.TransactionResultResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionResultRequest, ...grpc.CallOption) *access.TransactionResultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetSystemTransactionResultRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetSystemTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransactionResult'
type MockAccessAPIClient_GetSystemTransactionResult_Call struct {
	*mock.Call
}

// GetSystemTransactionResult is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetSystemTransactionResultRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetSystemTransactionResult(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetSystemTransactionResult_Call {
	return &MockAccessAPIClient_GetSystemTransactionResult_Call{Call: _e.mock.On("GetSystemTransactionResult",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetSystemTransactionResult_Call) Run(run func(ctx context.Context, in *access.GetSystemTransactionResultRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetSystemTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetSystemTransactionResultRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetSystemTransactionResult_Call) Return(_a0 *access.TransactionResultResponse, _a1 error) *MockAccessAPIClient_GetSystemTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetSystemTransactionResult_Call) RunAndReturn(run func(context.Context, *access.GetSystemTransactionResultRequest, ...grpc.CallOption) (*access.TransactionResultResponse, error)) *MockAccessAPIClient_GetSystemTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetTransaction(ctx context.Context, in *access.GetTransactionRequest, opts ...grpc.CallOption) (*access.TransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *access.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) (*access.TransactionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) *access.TransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockAccessAPIClient_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetTransactionRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetTransaction(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetTransaction_Call {
	return &MockAccessAPIClient_GetTransaction_Call{Call: _e.mock.On("GetTransaction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetTransaction_Call) Run(run func(ctx context.Context, in *access.GetTransactionRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetTransactionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetTransaction_Call) Return(_a0 *access.TransactionResponse, _a1 error) *MockAccessAPIClient_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetTransaction_Call) RunAndReturn(run func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) (*access.TransactionResponse, error)) *MockAccessAPIClient_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResult provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetTransactionResult(ctx context.Context, in *access.GetTransactionRequest, opts ...grpc.CallOption) (*access.TransactionResultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *access.TransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) (*access.TransactionResultResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) *access.TransactionResultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResult'
type MockAccessAPIClient_GetTransactionResult_Call struct {
	*mock.Call
}

// GetTransactionResult is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetTransactionRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetTransactionResult(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetTransactionResult_Call {
	return &MockAccessAPIClient_GetTransactionResult_Call{Call: _e.mock.On("GetTransactionResult",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetTransactionResult_Call) Run(run func(ctx context.Context, in *access.GetTransactionRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetTransactionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionResult_Call) Return(_a0 *access.TransactionResultResponse, _a1 error) *MockAccessAPIClient_GetTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionResult_Call) RunAndReturn(run func(context.Context, *access.GetTransactionRequest, ...grpc.CallOption) (*access.TransactionResultResponse, error)) *MockAccessAPIClient_GetTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultByIndex provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetTransactionResultByIndex(ctx context.Context, in *access.GetTransactionByIndexRequest, opts ...grpc.CallOption) (*access.TransactionResultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultByIndex")
	}

	var r0 *access.TransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionByIndexRequest, ...grpc.CallOption) (*access.TransactionResultResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionByIndexRequest, ...grpc.CallOption) *access.TransactionResultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionByIndexRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetTransactionResultByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultByIndex'
type MockAccessAPIClient_GetTransactionResultByIndex_Call struct {
	*mock.Call
}

// GetTransactionResultByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetTransactionByIndexRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetTransactionResultByIndex(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetTransactionResultByIndex_Call {
	return &MockAccessAPIClient_GetTransactionResultByIndex_Call{Call: _e.mock.On("GetTransactionResultByIndex",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetTransactionResultByIndex_Call) Run(run func(ctx context.Context, in *access.GetTransactionByIndexRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetTransactionResultByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetTransactionByIndexRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionResultByIndex_Call) Return(_a0 *access.TransactionResultResponse, _a1 error) *MockAccessAPIClient_GetTransactionResultByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionResultByIndex_Call) RunAndReturn(run func(context.Context, *access.GetTransactionByIndexRequest, ...grpc.CallOption) (*access.TransactionResultResponse, error)) *MockAccessAPIClient_GetTransactionResultByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultsByBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetTransactionResultsByBlockID(ctx context.Context, in *access.GetTransactionsByBlockIDRequest, opts ...grpc.CallOption) (*access.TransactionResultsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultsByBlockID")
	}

	var r0 *access.TransactionResultsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) (*access.TransactionResultsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) *access.TransactionResultsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetTransactionResultsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultsByBlockID'
type MockAccessAPIClient_GetTransactionResultsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionResultsByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetTransactionsByBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetTransactionResultsByBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetTransactionResultsByBlockID_Call {
	return &MockAccessAPIClient_GetTransactionResultsByBlockID_Call{Call: _e.mock.On("GetTransactionResultsByBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetTransactionResultsByBlockID_Call) Run(run func(ctx context.Context, in *access.GetTransactionsByBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetTransactionResultsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetTransactionsByBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionResultsByBlockID_Call) Return(_a0 *access.TransactionResultsResponse, _a1 error) *MockAccessAPIClient_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionResultsByBlockID_Call) RunAndReturn(run func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) (*access.TransactionResultsResponse, error)) *MockAccessAPIClient_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) GetTransactionsByBlockID(ctx context.Context, in *access.GetTransactionsByBlockIDRequest, opts ...grpc.CallOption) (*access.TransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByBlockID")
	}

	var r0 *access.TransactionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) (*access.TransactionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) *access.TransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_GetTransactionsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByBlockID'
type MockAccessAPIClient_GetTransactionsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionsByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.GetTransactionsByBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) GetTransactionsByBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_GetTransactionsByBlockID_Call {
	return &MockAccessAPIClient_GetTransactionsByBlockID_Call{Call: _e.mock.On("GetTransactionsByBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_GetTransactionsByBlockID_Call) Run(run func(ctx context.Context, in *access.GetTransactionsByBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_GetTransactionsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.GetTransactionsByBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionsByBlockID_Call) Return(_a0 *access.TransactionsResponse, _a1 error) *MockAccessAPIClient_GetTransactionsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_GetTransactionsByBlockID_Call) RunAndReturn(run func(context.Context, *access.GetTransactionsByBlockIDRequest, ...grpc.CallOption) (*access.TransactionsResponse, error)) *MockAccessAPIClient_GetTransactionsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) Ping(ctx context.Context, in *access.PingRequest, opts ...grpc.CallOption) (*access.PingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *access.PingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.PingRequest, ...grpc.CallOption) (*access.PingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.PingRequest, ...grpc.CallOption) *access.PingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.PingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.PingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockAccessAPIClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.PingRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) Ping(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_Ping_Call {
	return &MockAccessAPIClient_Ping_Call{Call: _e.mock.On("Ping",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_Ping_Call) Run(run func(ctx context.Context, in *access.PingRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.PingRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_Ping_Call) Return(_a0 *access.PingResponse, _a1 error) *MockAccessAPIClient_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_Ping_Call) RunAndReturn(run func(context.Context, *access.PingRequest, ...grpc.CallOption) (*access.PingResponse, error)) *MockAccessAPIClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SendAndSubscribeTransactionStatuses provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SendAndSubscribeTransactionStatuses(ctx context.Context, in *access.SendAndSubscribeTransactionStatusesRequest, opts ...grpc.CallOption) (access.AccessAPI_SendAndSubscribeTransactionStatusesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendAndSubscribeTransactionStatuses")
	}

	var r0 access.AccessAPI_SendAndSubscribeTransactionStatusesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SendAndSubscribeTransactionStatusesRequest, ...grpc.CallOption) (access.AccessAPI_SendAndSubscribeTransactionStatusesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SendAndSubscribeTransactionStatusesRequest, ...grpc.CallOption) access.AccessAPI_SendAndSubscribeTransactionStatusesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SendAndSubscribeTransactionStatusesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SendAndSubscribeTransactionStatusesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAndSubscribeTransactionStatuses'
type MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call struct {
	*mock.Call
}

// SendAndSubscribeTransactionStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SendAndSubscribeTransactionStatusesRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SendAndSubscribeTransactionStatuses(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call {
	return &MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call{Call: _e.mock.On("SendAndSubscribeTransactionStatuses",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call) Run(run func(ctx context.Context, in *access.SendAndSubscribeTransactionStatusesRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SendAndSubscribeTransactionStatusesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call) Return(_a0 access.AccessAPI_SendAndSubscribeTransactionStatusesClient, _a1 error) *MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call) RunAndReturn(run func(context.Context, *access.SendAndSubscribeTransactionStatusesRequest, ...grpc.CallOption) (access.AccessAPI_SendAndSubscribeTransactionStatusesClient, error)) *MockAccessAPIClient_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransaction provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SendTransaction(ctx context.Context, in *access.SendTransactionRequest, opts ...grpc.CallOption) (*access.SendTransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 *access.SendTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SendTransactionRequest, ...grpc.CallOption) (*access.SendTransactionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SendTransactionRequest, ...grpc.CallOption) *access.SendTransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.SendTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SendTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SendTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransaction'
type MockAccessAPIClient_SendTransaction_Call struct {
	*mock.Call
}

// SendTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SendTransactionRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SendTransaction(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SendTransaction_Call {
	return &MockAccessAPIClient_SendTransaction_Call{Call: _e.mock.On("SendTransaction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SendTransaction_Call) Run(run func(ctx context.Context, in *access.SendTransactionRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SendTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SendTransactionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SendTransaction_Call) Return(_a0 *access.SendTransactionResponse, _a1 error) *MockAccessAPIClient_SendTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SendTransaction_Call) RunAndReturn(run func(context.Context, *access.SendTransactionRequest, ...grpc.CallOption) (*access.SendTransactionResponse, error)) *MockAccessAPIClient_SendTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromLatest provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlockDigestsFromLatest(ctx context.Context, in *access.SubscribeBlockDigestsFromLatestRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromLatestClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromLatest")
	}

	var r0 access.AccessAPI_SubscribeBlockDigestsFromLatestClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockDigestsFromLatestRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromLatestClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockDigestsFromLatestRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlockDigestsFromLatestClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlockDigestsFromLatestClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlockDigestsFromLatestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromLatest'
type MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlockDigestsFromLatestRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlockDigestsFromLatest(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call {
	return &MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call{Call: _e.mock.On("SubscribeBlockDigestsFromLatest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call) Run(run func(ctx context.Context, in *access.SubscribeBlockDigestsFromLatestRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlockDigestsFromLatestRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call) Return(_a0 access.AccessAPI_SubscribeBlockDigestsFromLatestClient, _a1 error) *MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlockDigestsFromLatestRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromLatestClient, error)) *MockAccessAPIClient_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromStartBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlockDigestsFromStartBlockID(ctx context.Context, in *access.SubscribeBlockDigestsFromStartBlockIDRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartBlockID")
	}

	var r0 access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockDigestsFromStartBlockIDRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockDigestsFromStartBlockIDRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlockDigestsFromStartBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromStartBlockID'
type MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlockDigestsFromStartBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlockDigestsFromStartBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call {
	return &MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlockDigestsFromStartBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call) Run(run func(ctx context.Context, in *access.SubscribeBlockDigestsFromStartBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlockDigestsFromStartBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call) Return(_a0 access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient, _a1 error) *MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlockDigestsFromStartBlockIDRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient, error)) *MockAccessAPIClient_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromStartHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlockDigestsFromStartHeight(ctx context.Context, in *access.SubscribeBlockDigestsFromStartHeightRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromStartHeightClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartHeight")
	}

	var r0 access.AccessAPI_SubscribeBlockDigestsFromStartHeightClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockDigestsFromStartHeightRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromStartHeightClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockDigestsFromStartHeightRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlockDigestsFromStartHeightClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlockDigestsFromStartHeightClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlockDigestsFromStartHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromStartHeight'
type MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlockDigestsFromStartHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlockDigestsFromStartHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call {
	return &MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call{Call: _e.mock.On("SubscribeBlockDigestsFromStartHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call) Run(run func(ctx context.Context, in *access.SubscribeBlockDigestsFromStartHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlockDigestsFromStartHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call) Return(_a0 access.AccessAPI_SubscribeBlockDigestsFromStartHeightClient, _a1 error) *MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlockDigestsFromStartHeightRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockDigestsFromStartHeightClient, error)) *MockAccessAPIClient_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromLatest provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlockHeadersFromLatest(ctx context.Context, in *access.SubscribeBlockHeadersFromLatestRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromLatestClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromLatest")
	}

	var r0 access.AccessAPI_SubscribeBlockHeadersFromLatestClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockHeadersFromLatestRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromLatestClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockHeadersFromLatestRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlockHeadersFromLatestClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlockHeadersFromLatestClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlockHeadersFromLatestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromLatest'
type MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlockHeadersFromLatestRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlockHeadersFromLatest(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call {
	return &MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call{Call: _e.mock.On("SubscribeBlockHeadersFromLatest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call) Run(run func(ctx context.Context, in *access.SubscribeBlockHeadersFromLatestRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlockHeadersFromLatestRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call) Return(_a0 access.AccessAPI_SubscribeBlockHeadersFromLatestClient, _a1 error) *MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlockHeadersFromLatestRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromLatestClient, error)) *MockAccessAPIClient_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromStartBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlockHeadersFromStartBlockID(ctx context.Context, in *access.SubscribeBlockHeadersFromStartBlockIDRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartBlockID")
	}

	var r0 access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockHeadersFromStartBlockIDRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockHeadersFromStartBlockIDRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlockHeadersFromStartBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromStartBlockID'
type MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlockHeadersFromStartBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlockHeadersFromStartBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call {
	return &MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlockHeadersFromStartBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call) Run(run func(ctx context.Context, in *access.SubscribeBlockHeadersFromStartBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlockHeadersFromStartBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call) Return(_a0 access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient, _a1 error) *MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlockHeadersFromStartBlockIDRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient, error)) *MockAccessAPIClient_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromStartHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlockHeadersFromStartHeight(ctx context.Context, in *access.SubscribeBlockHeadersFromStartHeightRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromStartHeightClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartHeight")
	}

	var r0 access.AccessAPI_SubscribeBlockHeadersFromStartHeightClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockHeadersFromStartHeightRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromStartHeightClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlockHeadersFromStartHeightRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlockHeadersFromStartHeightClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlockHeadersFromStartHeightClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlockHeadersFromStartHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromStartHeight'
type MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlockHeadersFromStartHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlockHeadersFromStartHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call {
	return &MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call{Call: _e.mock.On("SubscribeBlockHeadersFromStartHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call) Run(run func(ctx context.Context, in *access.SubscribeBlockHeadersFromStartHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlockHeadersFromStartHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call) Return(_a0 access.AccessAPI_SubscribeBlockHeadersFromStartHeightClient, _a1 error) *MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlockHeadersFromStartHeightRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlockHeadersFromStartHeightClient, error)) *MockAccessAPIClient_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromLatest provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlocksFromLatest(ctx context.Context, in *access.SubscribeBlocksFromLatestRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromLatestClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromLatest")
	}

	var r0 access.AccessAPI_SubscribeBlocksFromLatestClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlocksFromLatestRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromLatestClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlocksFromLatestRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlocksFromLatestClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlocksFromLatestClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlocksFromLatestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlocksFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromLatest'
type MockAccessAPIClient_SubscribeBlocksFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlocksFromLatest is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlocksFromLatestRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlocksFromLatest(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlocksFromLatest_Call {
	return &MockAccessAPIClient_SubscribeBlocksFromLatest_Call{Call: _e.mock.On("SubscribeBlocksFromLatest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromLatest_Call) Run(run func(ctx context.Context, in *access.SubscribeBlocksFromLatestRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlocksFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlocksFromLatestRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromLatest_Call) Return(_a0 access.AccessAPI_SubscribeBlocksFromLatestClient, _a1 error) *MockAccessAPIClient_SubscribeBlocksFromLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromLatest_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlocksFromLatestRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromLatestClient, error)) *MockAccessAPIClient_SubscribeBlocksFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromStartBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlocksFromStartBlockID(ctx context.Context, in *access.SubscribeBlocksFromStartBlockIDRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromStartBlockIDClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartBlockID")
	}

	var r0 access.AccessAPI_SubscribeBlocksFromStartBlockIDClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlocksFromStartBlockIDRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromStartBlockIDClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlocksFromStartBlockIDRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlocksFromStartBlockIDClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlocksFromStartBlockIDClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlocksFromStartBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromStartBlockID'
type MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlocksFromStartBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlocksFromStartBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlocksFromStartBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call {
	return &MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlocksFromStartBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call) Run(run func(ctx context.Context, in *access.SubscribeBlocksFromStartBlockIDRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlocksFromStartBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call) Return(_a0 access.AccessAPI_SubscribeBlocksFromStartBlockIDClient, _a1 error) *MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlocksFromStartBlockIDRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromStartBlockIDClient, error)) *MockAccessAPIClient_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromStartHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockAccessAPIClient) SubscribeBlocksFromStartHeight(ctx context.Context, in *access.SubscribeBlocksFromStartHeightRequest, opts ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromStartHeightClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartHeight")
	}

	var r0 access.AccessAPI_SubscribeBlocksFromStartHeightClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlocksFromStartHeightRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromStartHeightClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SubscribeBlocksFromStartHeightRequest, ...grpc.CallOption) access.AccessAPI_SubscribeBlocksFromStartHeightClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(access.AccessAPI_SubscribeBlocksFromStartHeightClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SubscribeBlocksFromStartHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromStartHeight'
type MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlocksFromStartHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *access.SubscribeBlocksFromStartHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockAccessAPIClient_Expecter) SubscribeBlocksFromStartHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call {
	return &MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call{Call: _e.mock.On("SubscribeBlocksFromStartHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call) Run(run func(ctx context.Context, in *access.SubscribeBlocksFromStartHeightRequest, opts ...grpc.CallOption)) *MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*access.SubscribeBlocksFromStartHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call) Return(_a0 access.AccessAPI_SubscribeBlocksFromStartHeightClient, _a1 error) *MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call) RunAndReturn(run func(context.Context, *access.SubscribeBlocksFromStartHeightRequest, ...grpc.CallOption) (access.AccessAPI_SubscribeBlocksFromStartHeightClient, error)) *MockAccessAPIClient_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccessAPIClient creates a new instance of MockAccessAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessAPIClient {
	mock := &MockAccessAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
