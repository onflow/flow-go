// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	execution "github.com/onflow/flow/protobuf/go/flow/execution"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockExecutionAPIClient is an autogenerated mock type for the ExecutionAPIClient type
type MockExecutionAPIClient struct {
	mock.Mock
}

type MockExecutionAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionAPIClient) EXPECT() *MockExecutionAPIClient_Expecter {
	return &MockExecutionAPIClient_Expecter{mock: &_m.Mock}
}

// ExecuteScriptAtBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) ExecuteScriptAtBlockID(ctx context.Context, in *execution.ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption) (*execution.ExecuteScriptAtBlockIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 *execution.ExecuteScriptAtBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) (*execution.ExecuteScriptAtBlockIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) *execution.ExecuteScriptAtBlockIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.ExecuteScriptAtBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_ExecuteScriptAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockID'
type MockExecutionAPIClient_ExecuteScriptAtBlockID_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.ExecuteScriptAtBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) ExecuteScriptAtBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_ExecuteScriptAtBlockID_Call {
	return &MockExecutionAPIClient_ExecuteScriptAtBlockID_Call{Call: _e.mock.On("ExecuteScriptAtBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_ExecuteScriptAtBlockID_Call) Run(run func(ctx context.Context, in *execution.ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_ExecuteScriptAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.ExecuteScriptAtBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_ExecuteScriptAtBlockID_Call) Return(_a0 *execution.ExecuteScriptAtBlockIDResponse, _a1 error) *MockExecutionAPIClient_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_ExecuteScriptAtBlockID_Call) RunAndReturn(run func(context.Context, *execution.ExecuteScriptAtBlockIDRequest, ...grpc.CallOption) (*execution.ExecuteScriptAtBlockIDResponse, error)) *MockExecutionAPIClient_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetAccountAtBlockID(ctx context.Context, in *execution.GetAccountAtBlockIDRequest, opts ...grpc.CallOption) (*execution.GetAccountAtBlockIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockID")
	}

	var r0 *execution.GetAccountAtBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetAccountAtBlockIDRequest, ...grpc.CallOption) (*execution.GetAccountAtBlockIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetAccountAtBlockIDRequest, ...grpc.CallOption) *execution.GetAccountAtBlockIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetAccountAtBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetAccountAtBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetAccountAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtBlockID'
type MockExecutionAPIClient_GetAccountAtBlockID_Call struct {
	*mock.Call
}

// GetAccountAtBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetAccountAtBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetAccountAtBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetAccountAtBlockID_Call {
	return &MockExecutionAPIClient_GetAccountAtBlockID_Call{Call: _e.mock.On("GetAccountAtBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetAccountAtBlockID_Call) Run(run func(ctx context.Context, in *execution.GetAccountAtBlockIDRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetAccountAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetAccountAtBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetAccountAtBlockID_Call) Return(_a0 *execution.GetAccountAtBlockIDResponse, _a1 error) *MockExecutionAPIClient_GetAccountAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetAccountAtBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetAccountAtBlockIDRequest, ...grpc.CallOption) (*execution.GetAccountAtBlockIDResponse, error)) *MockExecutionAPIClient_GetAccountAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByID provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetBlockHeaderByID(ctx context.Context, in *execution.GetBlockHeaderByIDRequest, opts ...grpc.CallOption) (*execution.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByID")
	}

	var r0 *execution.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetBlockHeaderByIDRequest, ...grpc.CallOption) (*execution.BlockHeaderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetBlockHeaderByIDRequest, ...grpc.CallOption) *execution.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetBlockHeaderByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetBlockHeaderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByID'
type MockExecutionAPIClient_GetBlockHeaderByID_Call struct {
	*mock.Call
}

// GetBlockHeaderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetBlockHeaderByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetBlockHeaderByID(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetBlockHeaderByID_Call {
	return &MockExecutionAPIClient_GetBlockHeaderByID_Call{Call: _e.mock.On("GetBlockHeaderByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetBlockHeaderByID_Call) Run(run func(ctx context.Context, in *execution.GetBlockHeaderByIDRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetBlockHeaderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetBlockHeaderByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetBlockHeaderByID_Call) Return(_a0 *execution.BlockHeaderResponse, _a1 error) *MockExecutionAPIClient_GetBlockHeaderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetBlockHeaderByID_Call) RunAndReturn(run func(context.Context, *execution.GetBlockHeaderByIDRequest, ...grpc.CallOption) (*execution.BlockHeaderResponse, error)) *MockExecutionAPIClient_GetBlockHeaderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForBlockIDs provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetEventsForBlockIDs(ctx context.Context, in *execution.GetEventsForBlockIDsRequest, opts ...grpc.CallOption) (*execution.GetEventsForBlockIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForBlockIDs")
	}

	var r0 *execution.GetEventsForBlockIDsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetEventsForBlockIDsRequest, ...grpc.CallOption) (*execution.GetEventsForBlockIDsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetEventsForBlockIDsRequest, ...grpc.CallOption) *execution.GetEventsForBlockIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetEventsForBlockIDsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetEventsForBlockIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetEventsForBlockIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForBlockIDs'
type MockExecutionAPIClient_GetEventsForBlockIDs_Call struct {
	*mock.Call
}

// GetEventsForBlockIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetEventsForBlockIDsRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetEventsForBlockIDs(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetEventsForBlockIDs_Call {
	return &MockExecutionAPIClient_GetEventsForBlockIDs_Call{Call: _e.mock.On("GetEventsForBlockIDs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetEventsForBlockIDs_Call) Run(run func(ctx context.Context, in *execution.GetEventsForBlockIDsRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetEventsForBlockIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetEventsForBlockIDsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetEventsForBlockIDs_Call) Return(_a0 *execution.GetEventsForBlockIDsResponse, _a1 error) *MockExecutionAPIClient_GetEventsForBlockIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetEventsForBlockIDs_Call) RunAndReturn(run func(context.Context, *execution.GetEventsForBlockIDsRequest, ...grpc.CallOption) (*execution.GetEventsForBlockIDsResponse, error)) *MockExecutionAPIClient_GetEventsForBlockIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetLatestBlockHeader(ctx context.Context, in *execution.GetLatestBlockHeaderRequest, opts ...grpc.CallOption) (*execution.BlockHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *execution.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetLatestBlockHeaderRequest, ...grpc.CallOption) (*execution.BlockHeaderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetLatestBlockHeaderRequest, ...grpc.CallOption) *execution.BlockHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetLatestBlockHeaderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type MockExecutionAPIClient_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetLatestBlockHeaderRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetLatestBlockHeader(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetLatestBlockHeader_Call {
	return &MockExecutionAPIClient_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetLatestBlockHeader_Call) Run(run func(ctx context.Context, in *execution.GetLatestBlockHeaderRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetLatestBlockHeaderRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetLatestBlockHeader_Call) Return(_a0 *execution.BlockHeaderResponse, _a1 error) *MockExecutionAPIClient_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetLatestBlockHeader_Call) RunAndReturn(run func(context.Context, *execution.GetLatestBlockHeaderRequest, ...grpc.CallOption) (*execution.BlockHeaderResponse, error)) *MockExecutionAPIClient_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisterAtBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetRegisterAtBlockID(ctx context.Context, in *execution.GetRegisterAtBlockIDRequest, opts ...grpc.CallOption) (*execution.GetRegisterAtBlockIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisterAtBlockID")
	}

	var r0 *execution.GetRegisterAtBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetRegisterAtBlockIDRequest, ...grpc.CallOption) (*execution.GetRegisterAtBlockIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetRegisterAtBlockIDRequest, ...grpc.CallOption) *execution.GetRegisterAtBlockIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetRegisterAtBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetRegisterAtBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetRegisterAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisterAtBlockID'
type MockExecutionAPIClient_GetRegisterAtBlockID_Call struct {
	*mock.Call
}

// GetRegisterAtBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetRegisterAtBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetRegisterAtBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetRegisterAtBlockID_Call {
	return &MockExecutionAPIClient_GetRegisterAtBlockID_Call{Call: _e.mock.On("GetRegisterAtBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetRegisterAtBlockID_Call) Run(run func(ctx context.Context, in *execution.GetRegisterAtBlockIDRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetRegisterAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetRegisterAtBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetRegisterAtBlockID_Call) Return(_a0 *execution.GetRegisterAtBlockIDResponse, _a1 error) *MockExecutionAPIClient_GetRegisterAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetRegisterAtBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetRegisterAtBlockIDRequest, ...grpc.CallOption) (*execution.GetRegisterAtBlockIDResponse, error)) *MockExecutionAPIClient_GetRegisterAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionErrorMessage provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetTransactionErrorMessage(ctx context.Context, in *execution.GetTransactionErrorMessageRequest, opts ...grpc.CallOption) (*execution.GetTransactionErrorMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionErrorMessage")
	}

	var r0 *execution.GetTransactionErrorMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageRequest, ...grpc.CallOption) (*execution.GetTransactionErrorMessageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageRequest, ...grpc.CallOption) *execution.GetTransactionErrorMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionErrorMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionErrorMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetTransactionErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionErrorMessage'
type MockExecutionAPIClient_GetTransactionErrorMessage_Call struct {
	*mock.Call
}

// GetTransactionErrorMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetTransactionErrorMessageRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetTransactionErrorMessage(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetTransactionErrorMessage_Call {
	return &MockExecutionAPIClient_GetTransactionErrorMessage_Call{Call: _e.mock.On("GetTransactionErrorMessage",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessage_Call) Run(run func(ctx context.Context, in *execution.GetTransactionErrorMessageRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetTransactionErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetTransactionErrorMessageRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessage_Call) Return(_a0 *execution.GetTransactionErrorMessageResponse, _a1 error) *MockExecutionAPIClient_GetTransactionErrorMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessage_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionErrorMessageRequest, ...grpc.CallOption) (*execution.GetTransactionErrorMessageResponse, error)) *MockExecutionAPIClient_GetTransactionErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionErrorMessageByIndex provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetTransactionErrorMessageByIndex(ctx context.Context, in *execution.GetTransactionErrorMessageByIndexRequest, opts ...grpc.CallOption) (*execution.GetTransactionErrorMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionErrorMessageByIndex")
	}

	var r0 *execution.GetTransactionErrorMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest, ...grpc.CallOption) (*execution.GetTransactionErrorMessageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest, ...grpc.CallOption) *execution.GetTransactionErrorMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionErrorMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionErrorMessageByIndex'
type MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call struct {
	*mock.Call
}

// GetTransactionErrorMessageByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetTransactionErrorMessageByIndexRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetTransactionErrorMessageByIndex(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call {
	return &MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call{Call: _e.mock.On("GetTransactionErrorMessageByIndex",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call) Run(run func(ctx context.Context, in *execution.GetTransactionErrorMessageByIndexRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetTransactionErrorMessageByIndexRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call) Return(_a0 *execution.GetTransactionErrorMessageResponse, _a1 error) *MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionErrorMessageByIndexRequest, ...grpc.CallOption) (*execution.GetTransactionErrorMessageResponse, error)) *MockExecutionAPIClient_GetTransactionErrorMessageByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionErrorMessagesByBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetTransactionErrorMessagesByBlockID(ctx context.Context, in *execution.GetTransactionErrorMessagesByBlockIDRequest, opts ...grpc.CallOption) (*execution.GetTransactionErrorMessagesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionErrorMessagesByBlockID")
	}

	var r0 *execution.GetTransactionErrorMessagesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest, ...grpc.CallOption) (*execution.GetTransactionErrorMessagesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest, ...grpc.CallOption) *execution.GetTransactionErrorMessagesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionErrorMessagesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionErrorMessagesByBlockID'
type MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call struct {
	*mock.Call
}

// GetTransactionErrorMessagesByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetTransactionErrorMessagesByBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetTransactionErrorMessagesByBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call {
	return &MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call{Call: _e.mock.On("GetTransactionErrorMessagesByBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call) Run(run func(ctx context.Context, in *execution.GetTransactionErrorMessagesByBlockIDRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetTransactionErrorMessagesByBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call) Return(_a0 *execution.GetTransactionErrorMessagesResponse, _a1 error) *MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionErrorMessagesByBlockIDRequest, ...grpc.CallOption) (*execution.GetTransactionErrorMessagesResponse, error)) *MockExecutionAPIClient_GetTransactionErrorMessagesByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionExecutionMetricsAfter provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetTransactionExecutionMetricsAfter(ctx context.Context, in *execution.GetTransactionExecutionMetricsAfterRequest, opts ...grpc.CallOption) (*execution.GetTransactionExecutionMetricsAfterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionExecutionMetricsAfter")
	}

	var r0 *execution.GetTransactionExecutionMetricsAfterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest, ...grpc.CallOption) (*execution.GetTransactionExecutionMetricsAfterResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest, ...grpc.CallOption) *execution.GetTransactionExecutionMetricsAfterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionExecutionMetricsAfterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionExecutionMetricsAfter'
type MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call struct {
	*mock.Call
}

// GetTransactionExecutionMetricsAfter is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetTransactionExecutionMetricsAfterRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetTransactionExecutionMetricsAfter(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call {
	return &MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call{Call: _e.mock.On("GetTransactionExecutionMetricsAfter",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call) Run(run func(ctx context.Context, in *execution.GetTransactionExecutionMetricsAfterRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetTransactionExecutionMetricsAfterRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call) Return(_a0 *execution.GetTransactionExecutionMetricsAfterResponse, _a1 error) *MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionExecutionMetricsAfterRequest, ...grpc.CallOption) (*execution.GetTransactionExecutionMetricsAfterResponse, error)) *MockExecutionAPIClient_GetTransactionExecutionMetricsAfter_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResult provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetTransactionResult(ctx context.Context, in *execution.GetTransactionResultRequest, opts ...grpc.CallOption) (*execution.GetTransactionResultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *execution.GetTransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionResultRequest, ...grpc.CallOption) (*execution.GetTransactionResultResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionResultRequest, ...grpc.CallOption) *execution.GetTransactionResultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionResultRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResult'
type MockExecutionAPIClient_GetTransactionResult_Call struct {
	*mock.Call
}

// GetTransactionResult is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetTransactionResultRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetTransactionResult(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetTransactionResult_Call {
	return &MockExecutionAPIClient_GetTransactionResult_Call{Call: _e.mock.On("GetTransactionResult",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetTransactionResult_Call) Run(run func(ctx context.Context, in *execution.GetTransactionResultRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetTransactionResultRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionResult_Call) Return(_a0 *execution.GetTransactionResultResponse, _a1 error) *MockExecutionAPIClient_GetTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionResult_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionResultRequest, ...grpc.CallOption) (*execution.GetTransactionResultResponse, error)) *MockExecutionAPIClient_GetTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultByIndex provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetTransactionResultByIndex(ctx context.Context, in *execution.GetTransactionByIndexRequest, opts ...grpc.CallOption) (*execution.GetTransactionResultResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultByIndex")
	}

	var r0 *execution.GetTransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionByIndexRequest, ...grpc.CallOption) (*execution.GetTransactionResultResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionByIndexRequest, ...grpc.CallOption) *execution.GetTransactionResultResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionByIndexRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetTransactionResultByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultByIndex'
type MockExecutionAPIClient_GetTransactionResultByIndex_Call struct {
	*mock.Call
}

// GetTransactionResultByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetTransactionByIndexRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetTransactionResultByIndex(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetTransactionResultByIndex_Call {
	return &MockExecutionAPIClient_GetTransactionResultByIndex_Call{Call: _e.mock.On("GetTransactionResultByIndex",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetTransactionResultByIndex_Call) Run(run func(ctx context.Context, in *execution.GetTransactionByIndexRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetTransactionResultByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetTransactionByIndexRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionResultByIndex_Call) Return(_a0 *execution.GetTransactionResultResponse, _a1 error) *MockExecutionAPIClient_GetTransactionResultByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionResultByIndex_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionByIndexRequest, ...grpc.CallOption) (*execution.GetTransactionResultResponse, error)) *MockExecutionAPIClient_GetTransactionResultByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultsByBlockID provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) GetTransactionResultsByBlockID(ctx context.Context, in *execution.GetTransactionsByBlockIDRequest, opts ...grpc.CallOption) (*execution.GetTransactionResultsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultsByBlockID")
	}

	var r0 *execution.GetTransactionResultsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionsByBlockIDRequest, ...grpc.CallOption) (*execution.GetTransactionResultsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.GetTransactionsByBlockIDRequest, ...grpc.CallOption) *execution.GetTransactionResultsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.GetTransactionResultsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.GetTransactionsByBlockIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_GetTransactionResultsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultsByBlockID'
type MockExecutionAPIClient_GetTransactionResultsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionResultsByBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.GetTransactionsByBlockIDRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) GetTransactionResultsByBlockID(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_GetTransactionResultsByBlockID_Call {
	return &MockExecutionAPIClient_GetTransactionResultsByBlockID_Call{Call: _e.mock.On("GetTransactionResultsByBlockID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_GetTransactionResultsByBlockID_Call) Run(run func(ctx context.Context, in *execution.GetTransactionsByBlockIDRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_GetTransactionResultsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.GetTransactionsByBlockIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionResultsByBlockID_Call) Return(_a0 *execution.GetTransactionResultsResponse, _a1 error) *MockExecutionAPIClient_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_GetTransactionResultsByBlockID_Call) RunAndReturn(run func(context.Context, *execution.GetTransactionsByBlockIDRequest, ...grpc.CallOption) (*execution.GetTransactionResultsResponse, error)) *MockExecutionAPIClient_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *MockExecutionAPIClient) Ping(ctx context.Context, in *execution.PingRequest, opts ...grpc.CallOption) (*execution.PingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *execution.PingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *execution.PingRequest, ...grpc.CallOption) (*execution.PingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *execution.PingRequest, ...grpc.CallOption) *execution.PingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.PingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *execution.PingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionAPIClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockExecutionAPIClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
//   - in *execution.PingRequest
//   - opts ...grpc.CallOption
func (_e *MockExecutionAPIClient_Expecter) Ping(ctx interface{}, in interface{}, opts ...interface{}) *MockExecutionAPIClient_Ping_Call {
	return &MockExecutionAPIClient_Ping_Call{Call: _e.mock.On("Ping",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockExecutionAPIClient_Ping_Call) Run(run func(ctx context.Context, in *execution.PingRequest, opts ...grpc.CallOption)) *MockExecutionAPIClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*execution.PingRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockExecutionAPIClient_Ping_Call) Return(_a0 *execution.PingResponse, _a1 error) *MockExecutionAPIClient_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionAPIClient_Ping_Call) RunAndReturn(run func(context.Context, *execution.PingRequest, ...grpc.CallOption) (*execution.PingResponse, error)) *MockExecutionAPIClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionAPIClient creates a new instance of MockExecutionAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionAPIClient {
	mock := &MockExecutionAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
