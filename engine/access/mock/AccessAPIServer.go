// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	access "github.com/onflow/flow/protobuf/go/flow/access"

	mock "github.com/stretchr/testify/mock"
)

// MockAccessAPIServer is an autogenerated mock type for the AccessAPIServer type
type MockAccessAPIServer struct {
	mock.Mock
}

type MockAccessAPIServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessAPIServer) EXPECT() *MockAccessAPIServer_Expecter {
	return &MockAccessAPIServer_Expecter{mock: &_m.Mock}
}

// ExecuteScriptAtBlockHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) ExecuteScriptAtBlockHeight(_a0 context.Context, _a1 *access.ExecuteScriptAtBlockHeightRequest) (*access.ExecuteScriptResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockHeight")
	}

	var r0 *access.ExecuteScriptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockHeightRequest) (*access.ExecuteScriptResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockHeightRequest) *access.ExecuteScriptResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecuteScriptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ExecuteScriptAtBlockHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockHeight'
type MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.ExecuteScriptAtBlockHeightRequest
func (_e *MockAccessAPIServer_Expecter) ExecuteScriptAtBlockHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call {
	return &MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call{Call: _e.mock.On("ExecuteScriptAtBlockHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call) Run(run func(_a0 context.Context, _a1 *access.ExecuteScriptAtBlockHeightRequest)) *MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.ExecuteScriptAtBlockHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call) Return(_a0 *access.ExecuteScriptResponse, _a1 error) *MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.ExecuteScriptAtBlockHeightRequest) (*access.ExecuteScriptResponse, error)) *MockAccessAPIServer_ExecuteScriptAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptAtBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) ExecuteScriptAtBlockID(_a0 context.Context, _a1 *access.ExecuteScriptAtBlockIDRequest) (*access.ExecuteScriptResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 *access.ExecuteScriptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockIDRequest) (*access.ExecuteScriptResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtBlockIDRequest) *access.ExecuteScriptResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecuteScriptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ExecuteScriptAtBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_ExecuteScriptAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockID'
type MockAccessAPIServer_ExecuteScriptAtBlockID_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.ExecuteScriptAtBlockIDRequest
func (_e *MockAccessAPIServer_Expecter) ExecuteScriptAtBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_ExecuteScriptAtBlockID_Call {
	return &MockAccessAPIServer_ExecuteScriptAtBlockID_Call{Call: _e.mock.On("ExecuteScriptAtBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_ExecuteScriptAtBlockID_Call) Run(run func(_a0 context.Context, _a1 *access.ExecuteScriptAtBlockIDRequest)) *MockAccessAPIServer_ExecuteScriptAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.ExecuteScriptAtBlockIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_ExecuteScriptAtBlockID_Call) Return(_a0 *access.ExecuteScriptResponse, _a1 error) *MockAccessAPIServer_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_ExecuteScriptAtBlockID_Call) RunAndReturn(run func(context.Context, *access.ExecuteScriptAtBlockIDRequest) (*access.ExecuteScriptResponse, error)) *MockAccessAPIServer_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScriptAtLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) ExecuteScriptAtLatestBlock(_a0 context.Context, _a1 *access.ExecuteScriptAtLatestBlockRequest) (*access.ExecuteScriptResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtLatestBlock")
	}

	var r0 *access.ExecuteScriptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtLatestBlockRequest) (*access.ExecuteScriptResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ExecuteScriptAtLatestBlockRequest) *access.ExecuteScriptResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecuteScriptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ExecuteScriptAtLatestBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtLatestBlock'
type MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call struct {
	*mock.Call
}

// ExecuteScriptAtLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.ExecuteScriptAtLatestBlockRequest
func (_e *MockAccessAPIServer_Expecter) ExecuteScriptAtLatestBlock(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call {
	return &MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call{Call: _e.mock.On("ExecuteScriptAtLatestBlock", _a0, _a1)}
}

func (_c *MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call) Run(run func(_a0 context.Context, _a1 *access.ExecuteScriptAtLatestBlockRequest)) *MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.ExecuteScriptAtLatestBlockRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call) Return(_a0 *access.ExecuteScriptResponse, _a1 error) *MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.ExecuteScriptAtLatestBlockRequest) (*access.ExecuteScriptResponse, error)) *MockAccessAPIServer_ExecuteScriptAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccount(_a0 context.Context, _a1 *access.GetAccountRequest) (*access.GetAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *access.GetAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountRequest) (*access.GetAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountRequest) *access.GetAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.GetAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockAccessAPIServer_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountRequest
func (_e *MockAccessAPIServer_Expecter) GetAccount(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccount_Call {
	return &MockAccessAPIServer_GetAccount_Call{Call: _e.mock.On("GetAccount", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccount_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountRequest)) *MockAccessAPIServer_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccount_Call) Return(_a0 *access.GetAccountResponse, _a1 error) *MockAccessAPIServer_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccount_Call) RunAndReturn(run func(context.Context, *access.GetAccountRequest) (*access.GetAccountResponse, error)) *MockAccessAPIServer_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtBlockHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountAtBlockHeight(_a0 context.Context, _a1 *access.GetAccountAtBlockHeightRequest) (*access.AccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtBlockHeight")
	}

	var r0 *access.AccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtBlockHeightRequest) (*access.AccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtBlockHeightRequest) *access.AccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountAtBlockHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtBlockHeight'
type MockAccessAPIServer_GetAccountAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountAtBlockHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountAtBlockHeightRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountAtBlockHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountAtBlockHeight_Call {
	return &MockAccessAPIServer_GetAccountAtBlockHeight_Call{Call: _e.mock.On("GetAccountAtBlockHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountAtBlockHeight_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountAtBlockHeightRequest)) *MockAccessAPIServer_GetAccountAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountAtBlockHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountAtBlockHeight_Call) Return(_a0 *access.AccountResponse, _a1 error) *MockAccessAPIServer_GetAccountAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountAtBlockHeightRequest) (*access.AccountResponse, error)) *MockAccessAPIServer_GetAccountAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAtLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountAtLatestBlock(_a0 context.Context, _a1 *access.GetAccountAtLatestBlockRequest) (*access.AccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAtLatestBlock")
	}

	var r0 *access.AccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtLatestBlockRequest) (*access.AccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountAtLatestBlockRequest) *access.AccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountAtLatestBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAtLatestBlock'
type MockAccessAPIServer_GetAccountAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountAtLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountAtLatestBlockRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountAtLatestBlock(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountAtLatestBlock_Call {
	return &MockAccessAPIServer_GetAccountAtLatestBlock_Call{Call: _e.mock.On("GetAccountAtLatestBlock", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountAtLatestBlock_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountAtLatestBlockRequest)) *MockAccessAPIServer_GetAccountAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountAtLatestBlockRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountAtLatestBlock_Call) Return(_a0 *access.AccountResponse, _a1 error) *MockAccessAPIServer_GetAccountAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountAtLatestBlockRequest) (*access.AccountResponse, error)) *MockAccessAPIServer_GetAccountAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalanceAtBlockHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountBalanceAtBlockHeight(_a0 context.Context, _a1 *access.GetAccountBalanceAtBlockHeightRequest) (*access.AccountBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtBlockHeight")
	}

	var r0 *access.AccountBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest) (*access.AccountBalanceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest) *access.AccountBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalanceAtBlockHeight'
type MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountBalanceAtBlockHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountBalanceAtBlockHeightRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountBalanceAtBlockHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call {
	return &MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call{Call: _e.mock.On("GetAccountBalanceAtBlockHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountBalanceAtBlockHeightRequest)) *MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountBalanceAtBlockHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call) Return(_a0 *access.AccountBalanceResponse, _a1 error) *MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountBalanceAtBlockHeightRequest) (*access.AccountBalanceResponse, error)) *MockAccessAPIServer_GetAccountBalanceAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalanceAtLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountBalanceAtLatestBlock(_a0 context.Context, _a1 *access.GetAccountBalanceAtLatestBlockRequest) (*access.AccountBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceAtLatestBlock")
	}

	var r0 *access.AccountBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest) (*access.AccountBalanceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest) *access.AccountBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalanceAtLatestBlock'
type MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountBalanceAtLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountBalanceAtLatestBlockRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountBalanceAtLatestBlock(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call {
	return &MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call{Call: _e.mock.On("GetAccountBalanceAtLatestBlock", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountBalanceAtLatestBlockRequest)) *MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountBalanceAtLatestBlockRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call) Return(_a0 *access.AccountBalanceResponse, _a1 error) *MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountBalanceAtLatestBlockRequest) (*access.AccountBalanceResponse, error)) *MockAccessAPIServer_GetAccountBalanceAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeyAtBlockHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountKeyAtBlockHeight(_a0 context.Context, _a1 *access.GetAccountKeyAtBlockHeightRequest) (*access.AccountKeyResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtBlockHeight")
	}

	var r0 *access.AccountKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtBlockHeightRequest) (*access.AccountKeyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtBlockHeightRequest) *access.AccountKeyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeyAtBlockHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeyAtBlockHeight'
type MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountKeyAtBlockHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountKeyAtBlockHeightRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountKeyAtBlockHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call {
	return &MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call{Call: _e.mock.On("GetAccountKeyAtBlockHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountKeyAtBlockHeightRequest)) *MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountKeyAtBlockHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call) Return(_a0 *access.AccountKeyResponse, _a1 error) *MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeyAtBlockHeightRequest) (*access.AccountKeyResponse, error)) *MockAccessAPIServer_GetAccountKeyAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeyAtLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountKeyAtLatestBlock(_a0 context.Context, _a1 *access.GetAccountKeyAtLatestBlockRequest) (*access.AccountKeyResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeyAtLatestBlock")
	}

	var r0 *access.AccountKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtLatestBlockRequest) (*access.AccountKeyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeyAtLatestBlockRequest) *access.AccountKeyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeyAtLatestBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeyAtLatestBlock'
type MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountKeyAtLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountKeyAtLatestBlockRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountKeyAtLatestBlock(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call {
	return &MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call{Call: _e.mock.On("GetAccountKeyAtLatestBlock", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountKeyAtLatestBlockRequest)) *MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountKeyAtLatestBlockRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call) Return(_a0 *access.AccountKeyResponse, _a1 error) *MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeyAtLatestBlockRequest) (*access.AccountKeyResponse, error)) *MockAccessAPIServer_GetAccountKeyAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeysAtBlockHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountKeysAtBlockHeight(_a0 context.Context, _a1 *access.GetAccountKeysAtBlockHeightRequest) (*access.AccountKeysResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtBlockHeight")
	}

	var r0 *access.AccountKeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtBlockHeightRequest) (*access.AccountKeysResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtBlockHeightRequest) *access.AccountKeysResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeysAtBlockHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeysAtBlockHeight'
type MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call struct {
	*mock.Call
}

// GetAccountKeysAtBlockHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountKeysAtBlockHeightRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountKeysAtBlockHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call {
	return &MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call{Call: _e.mock.On("GetAccountKeysAtBlockHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountKeysAtBlockHeightRequest)) *MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountKeysAtBlockHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call) Return(_a0 *access.AccountKeysResponse, _a1 error) *MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeysAtBlockHeightRequest) (*access.AccountKeysResponse, error)) *MockAccessAPIServer_GetAccountKeysAtBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeysAtLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetAccountKeysAtLatestBlock(_a0 context.Context, _a1 *access.GetAccountKeysAtLatestBlockRequest) (*access.AccountKeysResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeysAtLatestBlock")
	}

	var r0 *access.AccountKeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtLatestBlockRequest) (*access.AccountKeysResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetAccountKeysAtLatestBlockRequest) *access.AccountKeysResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.AccountKeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetAccountKeysAtLatestBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeysAtLatestBlock'
type MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call struct {
	*mock.Call
}

// GetAccountKeysAtLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetAccountKeysAtLatestBlockRequest
func (_e *MockAccessAPIServer_Expecter) GetAccountKeysAtLatestBlock(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call {
	return &MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call{Call: _e.mock.On("GetAccountKeysAtLatestBlock", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call) Run(run func(_a0 context.Context, _a1 *access.GetAccountKeysAtLatestBlockRequest)) *MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetAccountKeysAtLatestBlockRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call) Return(_a0 *access.AccountKeysResponse, _a1 error) *MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetAccountKeysAtLatestBlockRequest) (*access.AccountKeysResponse, error)) *MockAccessAPIServer_GetAccountKeysAtLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetBlockByHeight(_a0 context.Context, _a1 *access.GetBlockByHeightRequest) (*access.BlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 *access.BlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByHeightRequest) (*access.BlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByHeightRequest) *access.BlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockByHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHeight'
type MockAccessAPIServer_GetBlockByHeight_Call struct {
	*mock.Call
}

// GetBlockByHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetBlockByHeightRequest
func (_e *MockAccessAPIServer_Expecter) GetBlockByHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetBlockByHeight_Call {
	return &MockAccessAPIServer_GetBlockByHeight_Call{Call: _e.mock.On("GetBlockByHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetBlockByHeight_Call) Run(run func(_a0 context.Context, _a1 *access.GetBlockByHeightRequest)) *MockAccessAPIServer_GetBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetBlockByHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetBlockByHeight_Call) Return(_a0 *access.BlockResponse, _a1 error) *MockAccessAPIServer_GetBlockByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetBlockByHeight_Call) RunAndReturn(run func(context.Context, *access.GetBlockByHeightRequest) (*access.BlockResponse, error)) *MockAccessAPIServer_GetBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetBlockByID(_a0 context.Context, _a1 *access.GetBlockByIDRequest) (*access.BlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByID")
	}

	var r0 *access.BlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByIDRequest) (*access.BlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockByIDRequest) *access.BlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetBlockByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByID'
type MockAccessAPIServer_GetBlockByID_Call struct {
	*mock.Call
}

// GetBlockByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetBlockByIDRequest
func (_e *MockAccessAPIServer_Expecter) GetBlockByID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetBlockByID_Call {
	return &MockAccessAPIServer_GetBlockByID_Call{Call: _e.mock.On("GetBlockByID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetBlockByID_Call) Run(run func(_a0 context.Context, _a1 *access.GetBlockByIDRequest)) *MockAccessAPIServer_GetBlockByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetBlockByIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetBlockByID_Call) Return(_a0 *access.BlockResponse, _a1 error) *MockAccessAPIServer_GetBlockByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetBlockByID_Call) RunAndReturn(run func(context.Context, *access.GetBlockByIDRequest) (*access.BlockResponse, error)) *MockAccessAPIServer_GetBlockByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetBlockHeaderByHeight(_a0 context.Context, _a1 *access.GetBlockHeaderByHeightRequest) (*access.BlockHeaderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByHeight")
	}

	var r0 *access.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByHeightRequest) (*access.BlockHeaderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByHeightRequest) *access.BlockHeaderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockHeaderByHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetBlockHeaderByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByHeight'
type MockAccessAPIServer_GetBlockHeaderByHeight_Call struct {
	*mock.Call
}

// GetBlockHeaderByHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetBlockHeaderByHeightRequest
func (_e *MockAccessAPIServer_Expecter) GetBlockHeaderByHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetBlockHeaderByHeight_Call {
	return &MockAccessAPIServer_GetBlockHeaderByHeight_Call{Call: _e.mock.On("GetBlockHeaderByHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetBlockHeaderByHeight_Call) Run(run func(_a0 context.Context, _a1 *access.GetBlockHeaderByHeightRequest)) *MockAccessAPIServer_GetBlockHeaderByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetBlockHeaderByHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetBlockHeaderByHeight_Call) Return(_a0 *access.BlockHeaderResponse, _a1 error) *MockAccessAPIServer_GetBlockHeaderByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetBlockHeaderByHeight_Call) RunAndReturn(run func(context.Context, *access.GetBlockHeaderByHeightRequest) (*access.BlockHeaderResponse, error)) *MockAccessAPIServer_GetBlockHeaderByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeaderByID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetBlockHeaderByID(_a0 context.Context, _a1 *access.GetBlockHeaderByIDRequest) (*access.BlockHeaderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeaderByID")
	}

	var r0 *access.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByIDRequest) (*access.BlockHeaderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetBlockHeaderByIDRequest) *access.BlockHeaderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetBlockHeaderByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetBlockHeaderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeaderByID'
type MockAccessAPIServer_GetBlockHeaderByID_Call struct {
	*mock.Call
}

// GetBlockHeaderByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetBlockHeaderByIDRequest
func (_e *MockAccessAPIServer_Expecter) GetBlockHeaderByID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetBlockHeaderByID_Call {
	return &MockAccessAPIServer_GetBlockHeaderByID_Call{Call: _e.mock.On("GetBlockHeaderByID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetBlockHeaderByID_Call) Run(run func(_a0 context.Context, _a1 *access.GetBlockHeaderByIDRequest)) *MockAccessAPIServer_GetBlockHeaderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetBlockHeaderByIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetBlockHeaderByID_Call) Return(_a0 *access.BlockHeaderResponse, _a1 error) *MockAccessAPIServer_GetBlockHeaderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetBlockHeaderByID_Call) RunAndReturn(run func(context.Context, *access.GetBlockHeaderByIDRequest) (*access.BlockHeaderResponse, error)) *MockAccessAPIServer_GetBlockHeaderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionByID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetCollectionByID(_a0 context.Context, _a1 *access.GetCollectionByIDRequest) (*access.CollectionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionByID")
	}

	var r0 *access.CollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetCollectionByIDRequest) (*access.CollectionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetCollectionByIDRequest) *access.CollectionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.CollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetCollectionByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetCollectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionByID'
type MockAccessAPIServer_GetCollectionByID_Call struct {
	*mock.Call
}

// GetCollectionByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetCollectionByIDRequest
func (_e *MockAccessAPIServer_Expecter) GetCollectionByID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetCollectionByID_Call {
	return &MockAccessAPIServer_GetCollectionByID_Call{Call: _e.mock.On("GetCollectionByID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetCollectionByID_Call) Run(run func(_a0 context.Context, _a1 *access.GetCollectionByIDRequest)) *MockAccessAPIServer_GetCollectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetCollectionByIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetCollectionByID_Call) Return(_a0 *access.CollectionResponse, _a1 error) *MockAccessAPIServer_GetCollectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetCollectionByID_Call) RunAndReturn(run func(context.Context, *access.GetCollectionByIDRequest) (*access.CollectionResponse, error)) *MockAccessAPIServer_GetCollectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForBlockIDs provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetEventsForBlockIDs(_a0 context.Context, _a1 *access.GetEventsForBlockIDsRequest) (*access.EventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForBlockIDs")
	}

	var r0 *access.EventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForBlockIDsRequest) (*access.EventsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForBlockIDsRequest) *access.EventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.EventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetEventsForBlockIDsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetEventsForBlockIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForBlockIDs'
type MockAccessAPIServer_GetEventsForBlockIDs_Call struct {
	*mock.Call
}

// GetEventsForBlockIDs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetEventsForBlockIDsRequest
func (_e *MockAccessAPIServer_Expecter) GetEventsForBlockIDs(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetEventsForBlockIDs_Call {
	return &MockAccessAPIServer_GetEventsForBlockIDs_Call{Call: _e.mock.On("GetEventsForBlockIDs", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetEventsForBlockIDs_Call) Run(run func(_a0 context.Context, _a1 *access.GetEventsForBlockIDsRequest)) *MockAccessAPIServer_GetEventsForBlockIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetEventsForBlockIDsRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetEventsForBlockIDs_Call) Return(_a0 *access.EventsResponse, _a1 error) *MockAccessAPIServer_GetEventsForBlockIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetEventsForBlockIDs_Call) RunAndReturn(run func(context.Context, *access.GetEventsForBlockIDsRequest) (*access.EventsResponse, error)) *MockAccessAPIServer_GetEventsForBlockIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForHeightRange provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetEventsForHeightRange(_a0 context.Context, _a1 *access.GetEventsForHeightRangeRequest) (*access.EventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForHeightRange")
	}

	var r0 *access.EventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForHeightRangeRequest) (*access.EventsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetEventsForHeightRangeRequest) *access.EventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.EventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetEventsForHeightRangeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetEventsForHeightRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForHeightRange'
type MockAccessAPIServer_GetEventsForHeightRange_Call struct {
	*mock.Call
}

// GetEventsForHeightRange is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetEventsForHeightRangeRequest
func (_e *MockAccessAPIServer_Expecter) GetEventsForHeightRange(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetEventsForHeightRange_Call {
	return &MockAccessAPIServer_GetEventsForHeightRange_Call{Call: _e.mock.On("GetEventsForHeightRange", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetEventsForHeightRange_Call) Run(run func(_a0 context.Context, _a1 *access.GetEventsForHeightRangeRequest)) *MockAccessAPIServer_GetEventsForHeightRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetEventsForHeightRangeRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetEventsForHeightRange_Call) Return(_a0 *access.EventsResponse, _a1 error) *MockAccessAPIServer_GetEventsForHeightRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetEventsForHeightRange_Call) RunAndReturn(run func(context.Context, *access.GetEventsForHeightRangeRequest) (*access.EventsResponse, error)) *MockAccessAPIServer_GetEventsForHeightRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionResultByID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetExecutionResultByID(_a0 context.Context, _a1 *access.GetExecutionResultByIDRequest) (*access.ExecutionResultByIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultByID")
	}

	var r0 *access.ExecutionResultByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultByIDRequest) (*access.ExecutionResultByIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultByIDRequest) *access.ExecutionResultByIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecutionResultByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetExecutionResultByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetExecutionResultByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionResultByID'
type MockAccessAPIServer_GetExecutionResultByID_Call struct {
	*mock.Call
}

// GetExecutionResultByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetExecutionResultByIDRequest
func (_e *MockAccessAPIServer_Expecter) GetExecutionResultByID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetExecutionResultByID_Call {
	return &MockAccessAPIServer_GetExecutionResultByID_Call{Call: _e.mock.On("GetExecutionResultByID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetExecutionResultByID_Call) Run(run func(_a0 context.Context, _a1 *access.GetExecutionResultByIDRequest)) *MockAccessAPIServer_GetExecutionResultByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetExecutionResultByIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetExecutionResultByID_Call) Return(_a0 *access.ExecutionResultByIDResponse, _a1 error) *MockAccessAPIServer_GetExecutionResultByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetExecutionResultByID_Call) RunAndReturn(run func(context.Context, *access.GetExecutionResultByIDRequest) (*access.ExecutionResultByIDResponse, error)) *MockAccessAPIServer_GetExecutionResultByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionResultForBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetExecutionResultForBlockID(_a0 context.Context, _a1 *access.GetExecutionResultForBlockIDRequest) (*access.ExecutionResultForBlockIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionResultForBlockID")
	}

	var r0 *access.ExecutionResultForBlockIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultForBlockIDRequest) (*access.ExecutionResultForBlockIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetExecutionResultForBlockIDRequest) *access.ExecutionResultForBlockIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ExecutionResultForBlockIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetExecutionResultForBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetExecutionResultForBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionResultForBlockID'
type MockAccessAPIServer_GetExecutionResultForBlockID_Call struct {
	*mock.Call
}

// GetExecutionResultForBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetExecutionResultForBlockIDRequest
func (_e *MockAccessAPIServer_Expecter) GetExecutionResultForBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetExecutionResultForBlockID_Call {
	return &MockAccessAPIServer_GetExecutionResultForBlockID_Call{Call: _e.mock.On("GetExecutionResultForBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetExecutionResultForBlockID_Call) Run(run func(_a0 context.Context, _a1 *access.GetExecutionResultForBlockIDRequest)) *MockAccessAPIServer_GetExecutionResultForBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetExecutionResultForBlockIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetExecutionResultForBlockID_Call) Return(_a0 *access.ExecutionResultForBlockIDResponse, _a1 error) *MockAccessAPIServer_GetExecutionResultForBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetExecutionResultForBlockID_Call) RunAndReturn(run func(context.Context, *access.GetExecutionResultForBlockIDRequest) (*access.ExecutionResultForBlockIDResponse, error)) *MockAccessAPIServer_GetExecutionResultForBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullCollectionByID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetFullCollectionByID(_a0 context.Context, _a1 *access.GetFullCollectionByIDRequest) (*access.FullCollectionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetFullCollectionByID")
	}

	var r0 *access.FullCollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetFullCollectionByIDRequest) (*access.FullCollectionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetFullCollectionByIDRequest) *access.FullCollectionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.FullCollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetFullCollectionByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetFullCollectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullCollectionByID'
type MockAccessAPIServer_GetFullCollectionByID_Call struct {
	*mock.Call
}

// GetFullCollectionByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetFullCollectionByIDRequest
func (_e *MockAccessAPIServer_Expecter) GetFullCollectionByID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetFullCollectionByID_Call {
	return &MockAccessAPIServer_GetFullCollectionByID_Call{Call: _e.mock.On("GetFullCollectionByID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetFullCollectionByID_Call) Run(run func(_a0 context.Context, _a1 *access.GetFullCollectionByIDRequest)) *MockAccessAPIServer_GetFullCollectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetFullCollectionByIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetFullCollectionByID_Call) Return(_a0 *access.FullCollectionResponse, _a1 error) *MockAccessAPIServer_GetFullCollectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetFullCollectionByID_Call) RunAndReturn(run func(context.Context, *access.GetFullCollectionByIDRequest) (*access.FullCollectionResponse, error)) *MockAccessAPIServer_GetFullCollectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetLatestBlock(_a0 context.Context, _a1 *access.GetLatestBlockRequest) (*access.BlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *access.BlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockRequest) (*access.BlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockRequest) *access.BlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetLatestBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockAccessAPIServer_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetLatestBlockRequest
func (_e *MockAccessAPIServer_Expecter) GetLatestBlock(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetLatestBlock_Call {
	return &MockAccessAPIServer_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetLatestBlock_Call) Run(run func(_a0 context.Context, _a1 *access.GetLatestBlockRequest)) *MockAccessAPIServer_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetLatestBlockRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetLatestBlock_Call) Return(_a0 *access.BlockResponse, _a1 error) *MockAccessAPIServer_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetLatestBlock_Call) RunAndReturn(run func(context.Context, *access.GetLatestBlockRequest) (*access.BlockResponse, error)) *MockAccessAPIServer_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetLatestBlockHeader(_a0 context.Context, _a1 *access.GetLatestBlockHeaderRequest) (*access.BlockHeaderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *access.BlockHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockHeaderRequest) (*access.BlockHeaderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestBlockHeaderRequest) *access.BlockHeaderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.BlockHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetLatestBlockHeaderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type MockAccessAPIServer_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetLatestBlockHeaderRequest
func (_e *MockAccessAPIServer_Expecter) GetLatestBlockHeader(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetLatestBlockHeader_Call {
	return &MockAccessAPIServer_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetLatestBlockHeader_Call) Run(run func(_a0 context.Context, _a1 *access.GetLatestBlockHeaderRequest)) *MockAccessAPIServer_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetLatestBlockHeaderRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetLatestBlockHeader_Call) Return(_a0 *access.BlockHeaderResponse, _a1 error) *MockAccessAPIServer_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetLatestBlockHeader_Call) RunAndReturn(run func(context.Context, *access.GetLatestBlockHeaderRequest) (*access.BlockHeaderResponse, error)) *MockAccessAPIServer_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProtocolStateSnapshot provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetLatestProtocolStateSnapshot(_a0 context.Context, _a1 *access.GetLatestProtocolStateSnapshotRequest) (*access.ProtocolStateSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProtocolStateSnapshot")
	}

	var r0 *access.ProtocolStateSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestProtocolStateSnapshotRequest) (*access.ProtocolStateSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetLatestProtocolStateSnapshotRequest) *access.ProtocolStateSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ProtocolStateSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetLatestProtocolStateSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProtocolStateSnapshot'
type MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call struct {
	*mock.Call
}

// GetLatestProtocolStateSnapshot is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetLatestProtocolStateSnapshotRequest
func (_e *MockAccessAPIServer_Expecter) GetLatestProtocolStateSnapshot(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call {
	return &MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call{Call: _e.mock.On("GetLatestProtocolStateSnapshot", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call) Run(run func(_a0 context.Context, _a1 *access.GetLatestProtocolStateSnapshotRequest)) *MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetLatestProtocolStateSnapshotRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call) Return(_a0 *access.ProtocolStateSnapshotResponse, _a1 error) *MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call) RunAndReturn(run func(context.Context, *access.GetLatestProtocolStateSnapshotRequest) (*access.ProtocolStateSnapshotResponse, error)) *MockAccessAPIServer_GetLatestProtocolStateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkParameters provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetNetworkParameters(_a0 context.Context, _a1 *access.GetNetworkParametersRequest) (*access.GetNetworkParametersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkParameters")
	}

	var r0 *access.GetNetworkParametersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNetworkParametersRequest) (*access.GetNetworkParametersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNetworkParametersRequest) *access.GetNetworkParametersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.GetNetworkParametersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetNetworkParametersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetNetworkParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkParameters'
type MockAccessAPIServer_GetNetworkParameters_Call struct {
	*mock.Call
}

// GetNetworkParameters is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetNetworkParametersRequest
func (_e *MockAccessAPIServer_Expecter) GetNetworkParameters(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetNetworkParameters_Call {
	return &MockAccessAPIServer_GetNetworkParameters_Call{Call: _e.mock.On("GetNetworkParameters", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetNetworkParameters_Call) Run(run func(_a0 context.Context, _a1 *access.GetNetworkParametersRequest)) *MockAccessAPIServer_GetNetworkParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetNetworkParametersRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetNetworkParameters_Call) Return(_a0 *access.GetNetworkParametersResponse, _a1 error) *MockAccessAPIServer_GetNetworkParameters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetNetworkParameters_Call) RunAndReturn(run func(context.Context, *access.GetNetworkParametersRequest) (*access.GetNetworkParametersResponse, error)) *MockAccessAPIServer_GetNetworkParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeVersionInfo provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetNodeVersionInfo(_a0 context.Context, _a1 *access.GetNodeVersionInfoRequest) (*access.GetNodeVersionInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeVersionInfo")
	}

	var r0 *access.GetNodeVersionInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNodeVersionInfoRequest) (*access.GetNodeVersionInfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetNodeVersionInfoRequest) *access.GetNodeVersionInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.GetNodeVersionInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetNodeVersionInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetNodeVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeVersionInfo'
type MockAccessAPIServer_GetNodeVersionInfo_Call struct {
	*mock.Call
}

// GetNodeVersionInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetNodeVersionInfoRequest
func (_e *MockAccessAPIServer_Expecter) GetNodeVersionInfo(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetNodeVersionInfo_Call {
	return &MockAccessAPIServer_GetNodeVersionInfo_Call{Call: _e.mock.On("GetNodeVersionInfo", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetNodeVersionInfo_Call) Run(run func(_a0 context.Context, _a1 *access.GetNodeVersionInfoRequest)) *MockAccessAPIServer_GetNodeVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetNodeVersionInfoRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetNodeVersionInfo_Call) Return(_a0 *access.GetNodeVersionInfoResponse, _a1 error) *MockAccessAPIServer_GetNodeVersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetNodeVersionInfo_Call) RunAndReturn(run func(context.Context, *access.GetNodeVersionInfoRequest) (*access.GetNodeVersionInfoResponse, error)) *MockAccessAPIServer_GetNodeVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetProtocolStateSnapshotByBlockID(_a0 context.Context, _a1 *access.GetProtocolStateSnapshotByBlockIDRequest) (*access.ProtocolStateSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByBlockID")
	}

	var r0 *access.ProtocolStateSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest) (*access.ProtocolStateSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest) *access.ProtocolStateSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ProtocolStateSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByBlockID'
type MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetProtocolStateSnapshotByBlockIDRequest
func (_e *MockAccessAPIServer_Expecter) GetProtocolStateSnapshotByBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call {
	return &MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call{Call: _e.mock.On("GetProtocolStateSnapshotByBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call) Run(run func(_a0 context.Context, _a1 *access.GetProtocolStateSnapshotByBlockIDRequest)) *MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetProtocolStateSnapshotByBlockIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call) Return(_a0 *access.ProtocolStateSnapshotResponse, _a1 error) *MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call) RunAndReturn(run func(context.Context, *access.GetProtocolStateSnapshotByBlockIDRequest) (*access.ProtocolStateSnapshotResponse, error)) *MockAccessAPIServer_GetProtocolStateSnapshotByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocolStateSnapshotByHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetProtocolStateSnapshotByHeight(_a0 context.Context, _a1 *access.GetProtocolStateSnapshotByHeightRequest) (*access.ProtocolStateSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolStateSnapshotByHeight")
	}

	var r0 *access.ProtocolStateSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest) (*access.ProtocolStateSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest) *access.ProtocolStateSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ProtocolStateSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocolStateSnapshotByHeight'
type MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call struct {
	*mock.Call
}

// GetProtocolStateSnapshotByHeight is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetProtocolStateSnapshotByHeightRequest
func (_e *MockAccessAPIServer_Expecter) GetProtocolStateSnapshotByHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call {
	return &MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call{Call: _e.mock.On("GetProtocolStateSnapshotByHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call) Run(run func(_a0 context.Context, _a1 *access.GetProtocolStateSnapshotByHeightRequest)) *MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetProtocolStateSnapshotByHeightRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call) Return(_a0 *access.ProtocolStateSnapshotResponse, _a1 error) *MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call) RunAndReturn(run func(context.Context, *access.GetProtocolStateSnapshotByHeightRequest) (*access.ProtocolStateSnapshotResponse, error)) *MockAccessAPIServer_GetProtocolStateSnapshotByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetSystemTransaction(_a0 context.Context, _a1 *access.GetSystemTransactionRequest) (*access.TransactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransaction")
	}

	var r0 *access.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionRequest) (*access.TransactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionRequest) *access.TransactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetSystemTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetSystemTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransaction'
type MockAccessAPIServer_GetSystemTransaction_Call struct {
	*mock.Call
}

// GetSystemTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetSystemTransactionRequest
func (_e *MockAccessAPIServer_Expecter) GetSystemTransaction(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetSystemTransaction_Call {
	return &MockAccessAPIServer_GetSystemTransaction_Call{Call: _e.mock.On("GetSystemTransaction", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetSystemTransaction_Call) Run(run func(_a0 context.Context, _a1 *access.GetSystemTransactionRequest)) *MockAccessAPIServer_GetSystemTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetSystemTransactionRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetSystemTransaction_Call) Return(_a0 *access.TransactionResponse, _a1 error) *MockAccessAPIServer_GetSystemTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetSystemTransaction_Call) RunAndReturn(run func(context.Context, *access.GetSystemTransactionRequest) (*access.TransactionResponse, error)) *MockAccessAPIServer_GetSystemTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransactionResult provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetSystemTransactionResult(_a0 context.Context, _a1 *access.GetSystemTransactionResultRequest) (*access.TransactionResultResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransactionResult")
	}

	var r0 *access.TransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionResultRequest) (*access.TransactionResultResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetSystemTransactionResultRequest) *access.TransactionResultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetSystemTransactionResultRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetSystemTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransactionResult'
type MockAccessAPIServer_GetSystemTransactionResult_Call struct {
	*mock.Call
}

// GetSystemTransactionResult is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetSystemTransactionResultRequest
func (_e *MockAccessAPIServer_Expecter) GetSystemTransactionResult(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetSystemTransactionResult_Call {
	return &MockAccessAPIServer_GetSystemTransactionResult_Call{Call: _e.mock.On("GetSystemTransactionResult", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetSystemTransactionResult_Call) Run(run func(_a0 context.Context, _a1 *access.GetSystemTransactionResultRequest)) *MockAccessAPIServer_GetSystemTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetSystemTransactionResultRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetSystemTransactionResult_Call) Return(_a0 *access.TransactionResultResponse, _a1 error) *MockAccessAPIServer_GetSystemTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetSystemTransactionResult_Call) RunAndReturn(run func(context.Context, *access.GetSystemTransactionResultRequest) (*access.TransactionResultResponse, error)) *MockAccessAPIServer_GetSystemTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetTransaction(_a0 context.Context, _a1 *access.GetTransactionRequest) (*access.TransactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *access.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest) (*access.TransactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest) *access.TransactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockAccessAPIServer_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetTransactionRequest
func (_e *MockAccessAPIServer_Expecter) GetTransaction(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetTransaction_Call {
	return &MockAccessAPIServer_GetTransaction_Call{Call: _e.mock.On("GetTransaction", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetTransaction_Call) Run(run func(_a0 context.Context, _a1 *access.GetTransactionRequest)) *MockAccessAPIServer_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetTransactionRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetTransaction_Call) Return(_a0 *access.TransactionResponse, _a1 error) *MockAccessAPIServer_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetTransaction_Call) RunAndReturn(run func(context.Context, *access.GetTransactionRequest) (*access.TransactionResponse, error)) *MockAccessAPIServer_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResult provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetTransactionResult(_a0 context.Context, _a1 *access.GetTransactionRequest) (*access.TransactionResultResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResult")
	}

	var r0 *access.TransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest) (*access.TransactionResultResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionRequest) *access.TransactionResultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResult'
type MockAccessAPIServer_GetTransactionResult_Call struct {
	*mock.Call
}

// GetTransactionResult is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetTransactionRequest
func (_e *MockAccessAPIServer_Expecter) GetTransactionResult(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetTransactionResult_Call {
	return &MockAccessAPIServer_GetTransactionResult_Call{Call: _e.mock.On("GetTransactionResult", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetTransactionResult_Call) Run(run func(_a0 context.Context, _a1 *access.GetTransactionRequest)) *MockAccessAPIServer_GetTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetTransactionRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionResult_Call) Return(_a0 *access.TransactionResultResponse, _a1 error) *MockAccessAPIServer_GetTransactionResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionResult_Call) RunAndReturn(run func(context.Context, *access.GetTransactionRequest) (*access.TransactionResultResponse, error)) *MockAccessAPIServer_GetTransactionResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultByIndex provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetTransactionResultByIndex(_a0 context.Context, _a1 *access.GetTransactionByIndexRequest) (*access.TransactionResultResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultByIndex")
	}

	var r0 *access.TransactionResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionByIndexRequest) (*access.TransactionResultResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionByIndexRequest) *access.TransactionResultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionByIndexRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetTransactionResultByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultByIndex'
type MockAccessAPIServer_GetTransactionResultByIndex_Call struct {
	*mock.Call
}

// GetTransactionResultByIndex is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetTransactionByIndexRequest
func (_e *MockAccessAPIServer_Expecter) GetTransactionResultByIndex(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetTransactionResultByIndex_Call {
	return &MockAccessAPIServer_GetTransactionResultByIndex_Call{Call: _e.mock.On("GetTransactionResultByIndex", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetTransactionResultByIndex_Call) Run(run func(_a0 context.Context, _a1 *access.GetTransactionByIndexRequest)) *MockAccessAPIServer_GetTransactionResultByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetTransactionByIndexRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionResultByIndex_Call) Return(_a0 *access.TransactionResultResponse, _a1 error) *MockAccessAPIServer_GetTransactionResultByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionResultByIndex_Call) RunAndReturn(run func(context.Context, *access.GetTransactionByIndexRequest) (*access.TransactionResultResponse, error)) *MockAccessAPIServer_GetTransactionResultByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionResultsByBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetTransactionResultsByBlockID(_a0 context.Context, _a1 *access.GetTransactionsByBlockIDRequest) (*access.TransactionResultsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionResultsByBlockID")
	}

	var r0 *access.TransactionResultsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest) (*access.TransactionResultsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest) *access.TransactionResultsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionResultsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionsByBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetTransactionResultsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionResultsByBlockID'
type MockAccessAPIServer_GetTransactionResultsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionResultsByBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetTransactionsByBlockIDRequest
func (_e *MockAccessAPIServer_Expecter) GetTransactionResultsByBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetTransactionResultsByBlockID_Call {
	return &MockAccessAPIServer_GetTransactionResultsByBlockID_Call{Call: _e.mock.On("GetTransactionResultsByBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetTransactionResultsByBlockID_Call) Run(run func(_a0 context.Context, _a1 *access.GetTransactionsByBlockIDRequest)) *MockAccessAPIServer_GetTransactionResultsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetTransactionsByBlockIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionResultsByBlockID_Call) Return(_a0 *access.TransactionResultsResponse, _a1 error) *MockAccessAPIServer_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionResultsByBlockID_Call) RunAndReturn(run func(context.Context, *access.GetTransactionsByBlockIDRequest) (*access.TransactionResultsResponse, error)) *MockAccessAPIServer_GetTransactionResultsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) GetTransactionsByBlockID(_a0 context.Context, _a1 *access.GetTransactionsByBlockIDRequest) (*access.TransactionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByBlockID")
	}

	var r0 *access.TransactionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest) (*access.TransactionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.GetTransactionsByBlockIDRequest) *access.TransactionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.TransactionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.GetTransactionsByBlockIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_GetTransactionsByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByBlockID'
type MockAccessAPIServer_GetTransactionsByBlockID_Call struct {
	*mock.Call
}

// GetTransactionsByBlockID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.GetTransactionsByBlockIDRequest
func (_e *MockAccessAPIServer_Expecter) GetTransactionsByBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_GetTransactionsByBlockID_Call {
	return &MockAccessAPIServer_GetTransactionsByBlockID_Call{Call: _e.mock.On("GetTransactionsByBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_GetTransactionsByBlockID_Call) Run(run func(_a0 context.Context, _a1 *access.GetTransactionsByBlockIDRequest)) *MockAccessAPIServer_GetTransactionsByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.GetTransactionsByBlockIDRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionsByBlockID_Call) Return(_a0 *access.TransactionsResponse, _a1 error) *MockAccessAPIServer_GetTransactionsByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_GetTransactionsByBlockID_Call) RunAndReturn(run func(context.Context, *access.GetTransactionsByBlockIDRequest) (*access.TransactionsResponse, error)) *MockAccessAPIServer_GetTransactionsByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) Ping(_a0 context.Context, _a1 *access.PingRequest) (*access.PingResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *access.PingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.PingRequest) (*access.PingResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.PingRequest) *access.PingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.PingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.PingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockAccessAPIServer_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.PingRequest
func (_e *MockAccessAPIServer_Expecter) Ping(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_Ping_Call {
	return &MockAccessAPIServer_Ping_Call{Call: _e.mock.On("Ping", _a0, _a1)}
}

func (_c *MockAccessAPIServer_Ping_Call) Run(run func(_a0 context.Context, _a1 *access.PingRequest)) *MockAccessAPIServer_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.PingRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_Ping_Call) Return(_a0 *access.PingResponse, _a1 error) *MockAccessAPIServer_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_Ping_Call) RunAndReturn(run func(context.Context, *access.PingRequest) (*access.PingResponse, error)) *MockAccessAPIServer_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SendAndSubscribeTransactionStatuses provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SendAndSubscribeTransactionStatuses(_a0 *access.SendAndSubscribeTransactionStatusesRequest, _a1 access.AccessAPI_SendAndSubscribeTransactionStatusesServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendAndSubscribeTransactionStatuses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SendAndSubscribeTransactionStatusesRequest, access.AccessAPI_SendAndSubscribeTransactionStatusesServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAndSubscribeTransactionStatuses'
type MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call struct {
	*mock.Call
}

// SendAndSubscribeTransactionStatuses is a helper method to define mock.On call
//   - _a0 *access.SendAndSubscribeTransactionStatusesRequest
//   - _a1 access.AccessAPI_SendAndSubscribeTransactionStatusesServer
func (_e *MockAccessAPIServer_Expecter) SendAndSubscribeTransactionStatuses(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call {
	return &MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call{Call: _e.mock.On("SendAndSubscribeTransactionStatuses", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call) Run(run func(_a0 *access.SendAndSubscribeTransactionStatusesRequest, _a1 access.AccessAPI_SendAndSubscribeTransactionStatusesServer)) *MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SendAndSubscribeTransactionStatusesRequest), args[1].(access.AccessAPI_SendAndSubscribeTransactionStatusesServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call) Return(_a0 error) *MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call) RunAndReturn(run func(*access.SendAndSubscribeTransactionStatusesRequest, access.AccessAPI_SendAndSubscribeTransactionStatusesServer) error) *MockAccessAPIServer_SendAndSubscribeTransactionStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SendTransaction(_a0 context.Context, _a1 *access.SendTransactionRequest) (*access.SendTransactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 *access.SendTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SendTransactionRequest) (*access.SendTransactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SendTransactionRequest) *access.SendTransactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.SendTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SendTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessAPIServer_SendTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransaction'
type MockAccessAPIServer_SendTransaction_Call struct {
	*mock.Call
}

// SendTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.SendTransactionRequest
func (_e *MockAccessAPIServer_Expecter) SendTransaction(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SendTransaction_Call {
	return &MockAccessAPIServer_SendTransaction_Call{Call: _e.mock.On("SendTransaction", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SendTransaction_Call) Run(run func(_a0 context.Context, _a1 *access.SendTransactionRequest)) *MockAccessAPIServer_SendTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.SendTransactionRequest))
	})
	return _c
}

func (_c *MockAccessAPIServer_SendTransaction_Call) Return(_a0 *access.SendTransactionResponse, _a1 error) *MockAccessAPIServer_SendTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessAPIServer_SendTransaction_Call) RunAndReturn(run func(context.Context, *access.SendTransactionRequest) (*access.SendTransactionResponse, error)) *MockAccessAPIServer_SendTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromLatest provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlockDigestsFromLatest(_a0 *access.SubscribeBlockDigestsFromLatestRequest, _a1 access.AccessAPI_SubscribeBlockDigestsFromLatestServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromLatest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlockDigestsFromLatestRequest, access.AccessAPI_SubscribeBlockDigestsFromLatestServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromLatest'
type MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromLatest is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlockDigestsFromLatestRequest
//   - _a1 access.AccessAPI_SubscribeBlockDigestsFromLatestServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlockDigestsFromLatest(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call {
	return &MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call{Call: _e.mock.On("SubscribeBlockDigestsFromLatest", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call) Run(run func(_a0 *access.SubscribeBlockDigestsFromLatestRequest, _a1 access.AccessAPI_SubscribeBlockDigestsFromLatestServer)) *MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlockDigestsFromLatestRequest), args[1].(access.AccessAPI_SubscribeBlockDigestsFromLatestServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call) RunAndReturn(run func(*access.SubscribeBlockDigestsFromLatestRequest, access.AccessAPI_SubscribeBlockDigestsFromLatestServer) error) *MockAccessAPIServer_SubscribeBlockDigestsFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromStartBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlockDigestsFromStartBlockID(_a0 *access.SubscribeBlockDigestsFromStartBlockIDRequest, _a1 access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlockDigestsFromStartBlockIDRequest, access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromStartBlockID'
type MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromStartBlockID is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlockDigestsFromStartBlockIDRequest
//   - _a1 access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlockDigestsFromStartBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call {
	return &MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlockDigestsFromStartBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call) Run(run func(_a0 *access.SubscribeBlockDigestsFromStartBlockIDRequest, _a1 access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer)) *MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlockDigestsFromStartBlockIDRequest), args[1].(access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call) RunAndReturn(run func(*access.SubscribeBlockDigestsFromStartBlockIDRequest, access.AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer) error) *MockAccessAPIServer_SubscribeBlockDigestsFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockDigestsFromStartHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlockDigestsFromStartHeight(_a0 *access.SubscribeBlockDigestsFromStartHeightRequest, _a1 access.AccessAPI_SubscribeBlockDigestsFromStartHeightServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockDigestsFromStartHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlockDigestsFromStartHeightRequest, access.AccessAPI_SubscribeBlockDigestsFromStartHeightServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockDigestsFromStartHeight'
type MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlockDigestsFromStartHeight is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlockDigestsFromStartHeightRequest
//   - _a1 access.AccessAPI_SubscribeBlockDigestsFromStartHeightServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlockDigestsFromStartHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call {
	return &MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call{Call: _e.mock.On("SubscribeBlockDigestsFromStartHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call) Run(run func(_a0 *access.SubscribeBlockDigestsFromStartHeightRequest, _a1 access.AccessAPI_SubscribeBlockDigestsFromStartHeightServer)) *MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlockDigestsFromStartHeightRequest), args[1].(access.AccessAPI_SubscribeBlockDigestsFromStartHeightServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call) RunAndReturn(run func(*access.SubscribeBlockDigestsFromStartHeightRequest, access.AccessAPI_SubscribeBlockDigestsFromStartHeightServer) error) *MockAccessAPIServer_SubscribeBlockDigestsFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromLatest provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlockHeadersFromLatest(_a0 *access.SubscribeBlockHeadersFromLatestRequest, _a1 access.AccessAPI_SubscribeBlockHeadersFromLatestServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromLatest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlockHeadersFromLatestRequest, access.AccessAPI_SubscribeBlockHeadersFromLatestServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromLatest'
type MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromLatest is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlockHeadersFromLatestRequest
//   - _a1 access.AccessAPI_SubscribeBlockHeadersFromLatestServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlockHeadersFromLatest(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call {
	return &MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call{Call: _e.mock.On("SubscribeBlockHeadersFromLatest", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call) Run(run func(_a0 *access.SubscribeBlockHeadersFromLatestRequest, _a1 access.AccessAPI_SubscribeBlockHeadersFromLatestServer)) *MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlockHeadersFromLatestRequest), args[1].(access.AccessAPI_SubscribeBlockHeadersFromLatestServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call) RunAndReturn(run func(*access.SubscribeBlockHeadersFromLatestRequest, access.AccessAPI_SubscribeBlockHeadersFromLatestServer) error) *MockAccessAPIServer_SubscribeBlockHeadersFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromStartBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlockHeadersFromStartBlockID(_a0 *access.SubscribeBlockHeadersFromStartBlockIDRequest, _a1 access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlockHeadersFromStartBlockIDRequest, access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromStartBlockID'
type MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromStartBlockID is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlockHeadersFromStartBlockIDRequest
//   - _a1 access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlockHeadersFromStartBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call {
	return &MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlockHeadersFromStartBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call) Run(run func(_a0 *access.SubscribeBlockHeadersFromStartBlockIDRequest, _a1 access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer)) *MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlockHeadersFromStartBlockIDRequest), args[1].(access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call) RunAndReturn(run func(*access.SubscribeBlockHeadersFromStartBlockIDRequest, access.AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer) error) *MockAccessAPIServer_SubscribeBlockHeadersFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlockHeadersFromStartHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlockHeadersFromStartHeight(_a0 *access.SubscribeBlockHeadersFromStartHeightRequest, _a1 access.AccessAPI_SubscribeBlockHeadersFromStartHeightServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlockHeadersFromStartHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlockHeadersFromStartHeightRequest, access.AccessAPI_SubscribeBlockHeadersFromStartHeightServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlockHeadersFromStartHeight'
type MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlockHeadersFromStartHeight is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlockHeadersFromStartHeightRequest
//   - _a1 access.AccessAPI_SubscribeBlockHeadersFromStartHeightServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlockHeadersFromStartHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call {
	return &MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call{Call: _e.mock.On("SubscribeBlockHeadersFromStartHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call) Run(run func(_a0 *access.SubscribeBlockHeadersFromStartHeightRequest, _a1 access.AccessAPI_SubscribeBlockHeadersFromStartHeightServer)) *MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlockHeadersFromStartHeightRequest), args[1].(access.AccessAPI_SubscribeBlockHeadersFromStartHeightServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call) RunAndReturn(run func(*access.SubscribeBlockHeadersFromStartHeightRequest, access.AccessAPI_SubscribeBlockHeadersFromStartHeightServer) error) *MockAccessAPIServer_SubscribeBlockHeadersFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromLatest provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlocksFromLatest(_a0 *access.SubscribeBlocksFromLatestRequest, _a1 access.AccessAPI_SubscribeBlocksFromLatestServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromLatest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlocksFromLatestRequest, access.AccessAPI_SubscribeBlocksFromLatestServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlocksFromLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromLatest'
type MockAccessAPIServer_SubscribeBlocksFromLatest_Call struct {
	*mock.Call
}

// SubscribeBlocksFromLatest is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlocksFromLatestRequest
//   - _a1 access.AccessAPI_SubscribeBlocksFromLatestServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlocksFromLatest(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlocksFromLatest_Call {
	return &MockAccessAPIServer_SubscribeBlocksFromLatest_Call{Call: _e.mock.On("SubscribeBlocksFromLatest", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromLatest_Call) Run(run func(_a0 *access.SubscribeBlocksFromLatestRequest, _a1 access.AccessAPI_SubscribeBlocksFromLatestServer)) *MockAccessAPIServer_SubscribeBlocksFromLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlocksFromLatestRequest), args[1].(access.AccessAPI_SubscribeBlocksFromLatestServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromLatest_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlocksFromLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromLatest_Call) RunAndReturn(run func(*access.SubscribeBlocksFromLatestRequest, access.AccessAPI_SubscribeBlocksFromLatestServer) error) *MockAccessAPIServer_SubscribeBlocksFromLatest_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromStartBlockID provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlocksFromStartBlockID(_a0 *access.SubscribeBlocksFromStartBlockIDRequest, _a1 access.AccessAPI_SubscribeBlocksFromStartBlockIDServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlocksFromStartBlockIDRequest, access.AccessAPI_SubscribeBlocksFromStartBlockIDServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromStartBlockID'
type MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call struct {
	*mock.Call
}

// SubscribeBlocksFromStartBlockID is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlocksFromStartBlockIDRequest
//   - _a1 access.AccessAPI_SubscribeBlocksFromStartBlockIDServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlocksFromStartBlockID(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call {
	return &MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call{Call: _e.mock.On("SubscribeBlocksFromStartBlockID", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call) Run(run func(_a0 *access.SubscribeBlocksFromStartBlockIDRequest, _a1 access.AccessAPI_SubscribeBlocksFromStartBlockIDServer)) *MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlocksFromStartBlockIDRequest), args[1].(access.AccessAPI_SubscribeBlocksFromStartBlockIDServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call) RunAndReturn(run func(*access.SubscribeBlocksFromStartBlockIDRequest, access.AccessAPI_SubscribeBlocksFromStartBlockIDServer) error) *MockAccessAPIServer_SubscribeBlocksFromStartBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBlocksFromStartHeight provides a mock function with given fields: _a0, _a1
func (_m *MockAccessAPIServer) SubscribeBlocksFromStartHeight(_a0 *access.SubscribeBlocksFromStartHeightRequest, _a1 access.AccessAPI_SubscribeBlocksFromStartHeightServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBlocksFromStartHeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*access.SubscribeBlocksFromStartHeightRequest, access.AccessAPI_SubscribeBlocksFromStartHeightServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBlocksFromStartHeight'
type MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call struct {
	*mock.Call
}

// SubscribeBlocksFromStartHeight is a helper method to define mock.On call
//   - _a0 *access.SubscribeBlocksFromStartHeightRequest
//   - _a1 access.AccessAPI_SubscribeBlocksFromStartHeightServer
func (_e *MockAccessAPIServer_Expecter) SubscribeBlocksFromStartHeight(_a0 interface{}, _a1 interface{}) *MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call {
	return &MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call{Call: _e.mock.On("SubscribeBlocksFromStartHeight", _a0, _a1)}
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call) Run(run func(_a0 *access.SubscribeBlocksFromStartHeightRequest, _a1 access.AccessAPI_SubscribeBlocksFromStartHeightServer)) *MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access.SubscribeBlocksFromStartHeightRequest), args[1].(access.AccessAPI_SubscribeBlocksFromStartHeightServer))
	})
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call) Return(_a0 error) *MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call) RunAndReturn(run func(*access.SubscribeBlocksFromStartHeightRequest, access.AccessAPI_SubscribeBlocksFromStartHeightServer) error) *MockAccessAPIServer_SubscribeBlocksFromStartHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccessAPIServer creates a new instance of MockAccessAPIServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessAPIServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessAPIServer {
	mock := &MockAccessAPIServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
