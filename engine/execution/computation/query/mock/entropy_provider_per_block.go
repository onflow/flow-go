// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	environment "github.com/onflow/flow-go/fvm/environment"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// EntropyProviderPerBlock is an autogenerated mock type for the EntropyProviderPerBlock type
type EntropyProviderPerBlock struct {
	mock.Mock
}

// AtBlockID provides a mock function with given fields: blockID
func (_m *EntropyProviderPerBlock) AtBlockID(blockID flow.Identifier) environment.EntropyProvider {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for AtBlockID")
	}

	var r0 environment.EntropyProvider
	if rf, ok := ret.Get(0).(func(flow.Identifier) environment.EntropyProvider); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(environment.EntropyProvider)
		}
	}

	return r0
}

// NewEntropyProviderPerBlock creates a new instance of EntropyProviderPerBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntropyProviderPerBlock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntropyProviderPerBlock {
	mock := &EntropyProviderPerBlock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
