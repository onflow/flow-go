// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"
)

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// ExecuteScript provides a mock function with given fields: ctx, script, arguments, blockHeader, _a4
func (_m *MockExecutor) ExecuteScript(ctx context.Context, script []byte, arguments [][]byte, blockHeader *flow.Header, _a4 snapshot.StorageSnapshot) ([]byte, uint64, error) {
	ret := _m.Called(ctx, script, arguments, blockHeader, _a4)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScript")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) ([]byte, uint64, error)); ok {
		return rf(ctx, script, arguments, blockHeader, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) []byte); ok {
		r0 = rf(ctx, script, arguments, blockHeader, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) uint64); ok {
		r1 = rf(ctx, script, arguments, blockHeader, _a4)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r2 = rf(ctx, script, arguments, blockHeader, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockExecutor_ExecuteScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScript'
type MockExecutor_ExecuteScript_Call struct {
	*mock.Call
}

// ExecuteScript is a helper method to define mock.On call
//   - ctx context.Context
//   - script []byte
//   - arguments [][]byte
//   - blockHeader *flow.Header
//   - _a4 snapshot.StorageSnapshot
func (_e *MockExecutor_Expecter) ExecuteScript(ctx interface{}, script interface{}, arguments interface{}, blockHeader interface{}, _a4 interface{}) *MockExecutor_ExecuteScript_Call {
	return &MockExecutor_ExecuteScript_Call{Call: _e.mock.On("ExecuteScript", ctx, script, arguments, blockHeader, _a4)}
}

func (_c *MockExecutor_ExecuteScript_Call) Run(run func(ctx context.Context, script []byte, arguments [][]byte, blockHeader *flow.Header, _a4 snapshot.StorageSnapshot)) *MockExecutor_ExecuteScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([][]byte), args[3].(*flow.Header), args[4].(snapshot.StorageSnapshot))
	})
	return _c
}

func (_c *MockExecutor_ExecuteScript_Call) Return(_a0 []byte, _a1 uint64, _a2 error) *MockExecutor_ExecuteScript_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockExecutor_ExecuteScript_Call) RunAndReturn(run func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) ([]byte, uint64, error)) *MockExecutor_ExecuteScript_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, addr, header, _a3
func (_m *MockExecutor) GetAccount(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot) (*flow.Account, error) {
	ret := _m.Called(ctx, addr, header, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) (*flow.Account, error)); ok {
		return rf(ctx, addr, header, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) *flow.Account); ok {
		r0 = rf(ctx, addr, header, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r1 = rf(ctx, addr, header, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockExecutor_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - addr flow.Address
//   - header *flow.Header
//   - _a3 snapshot.StorageSnapshot
func (_e *MockExecutor_Expecter) GetAccount(ctx interface{}, addr interface{}, header interface{}, _a3 interface{}) *MockExecutor_GetAccount_Call {
	return &MockExecutor_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, addr, header, _a3)}
}

func (_c *MockExecutor_GetAccount_Call) Run(run func(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot)) *MockExecutor_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(*flow.Header), args[3].(snapshot.StorageSnapshot))
	})
	return _c
}

func (_c *MockExecutor_GetAccount_Call) Return(_a0 *flow.Account, _a1 error) *MockExecutor_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_GetAccount_Call) RunAndReturn(run func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) (*flow.Account, error)) *MockExecutor_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAvailableBalance provides a mock function with given fields: ctx, addr, header, _a3
func (_m *MockExecutor) GetAccountAvailableBalance(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot) (uint64, error) {
	ret := _m.Called(ctx, addr, header, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAvailableBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) (uint64, error)); ok {
		return rf(ctx, addr, header, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) uint64); ok {
		r0 = rf(ctx, addr, header, _a3)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r1 = rf(ctx, addr, header, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_GetAccountAvailableBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAvailableBalance'
type MockExecutor_GetAccountAvailableBalance_Call struct {
	*mock.Call
}

// GetAccountAvailableBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - addr flow.Address
//   - header *flow.Header
//   - _a3 snapshot.StorageSnapshot
func (_e *MockExecutor_Expecter) GetAccountAvailableBalance(ctx interface{}, addr interface{}, header interface{}, _a3 interface{}) *MockExecutor_GetAccountAvailableBalance_Call {
	return &MockExecutor_GetAccountAvailableBalance_Call{Call: _e.mock.On("GetAccountAvailableBalance", ctx, addr, header, _a3)}
}

func (_c *MockExecutor_GetAccountAvailableBalance_Call) Run(run func(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot)) *MockExecutor_GetAccountAvailableBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(*flow.Header), args[3].(snapshot.StorageSnapshot))
	})
	return _c
}

func (_c *MockExecutor_GetAccountAvailableBalance_Call) Return(_a0 uint64, _a1 error) *MockExecutor_GetAccountAvailableBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_GetAccountAvailableBalance_Call) RunAndReturn(run func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) (uint64, error)) *MockExecutor_GetAccountAvailableBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalance provides a mock function with given fields: ctx, addr, header, _a3
func (_m *MockExecutor) GetAccountBalance(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot) (uint64, error) {
	ret := _m.Called(ctx, addr, header, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) (uint64, error)); ok {
		return rf(ctx, addr, header, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) uint64); ok {
		r0 = rf(ctx, addr, header, _a3)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r1 = rf(ctx, addr, header, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type MockExecutor_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - addr flow.Address
//   - header *flow.Header
//   - _a3 snapshot.StorageSnapshot
func (_e *MockExecutor_Expecter) GetAccountBalance(ctx interface{}, addr interface{}, header interface{}, _a3 interface{}) *MockExecutor_GetAccountBalance_Call {
	return &MockExecutor_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", ctx, addr, header, _a3)}
}

func (_c *MockExecutor_GetAccountBalance_Call) Run(run func(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot)) *MockExecutor_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(*flow.Header), args[3].(snapshot.StorageSnapshot))
	})
	return _c
}

func (_c *MockExecutor_GetAccountBalance_Call) Return(_a0 uint64, _a1 error) *MockExecutor_GetAccountBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_GetAccountBalance_Call) RunAndReturn(run func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) (uint64, error)) *MockExecutor_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKey provides a mock function with given fields: ctx, addr, keyIndex, header, _a4
func (_m *MockExecutor) GetAccountKey(ctx context.Context, addr flow.Address, keyIndex uint32, header *flow.Header, _a4 snapshot.StorageSnapshot) (*flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, addr, keyIndex, header, _a4)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKey")
	}

	var r0 *flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, *flow.Header, snapshot.StorageSnapshot) (*flow.AccountPublicKey, error)); ok {
		return rf(ctx, addr, keyIndex, header, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, uint32, *flow.Header, snapshot.StorageSnapshot) *flow.AccountPublicKey); ok {
		r0 = rf(ctx, addr, keyIndex, header, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, uint32, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r1 = rf(ctx, addr, keyIndex, header, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_GetAccountKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKey'
type MockExecutor_GetAccountKey_Call struct {
	*mock.Call
}

// GetAccountKey is a helper method to define mock.On call
//   - ctx context.Context
//   - addr flow.Address
//   - keyIndex uint32
//   - header *flow.Header
//   - _a4 snapshot.StorageSnapshot
func (_e *MockExecutor_Expecter) GetAccountKey(ctx interface{}, addr interface{}, keyIndex interface{}, header interface{}, _a4 interface{}) *MockExecutor_GetAccountKey_Call {
	return &MockExecutor_GetAccountKey_Call{Call: _e.mock.On("GetAccountKey", ctx, addr, keyIndex, header, _a4)}
}

func (_c *MockExecutor_GetAccountKey_Call) Run(run func(ctx context.Context, addr flow.Address, keyIndex uint32, header *flow.Header, _a4 snapshot.StorageSnapshot)) *MockExecutor_GetAccountKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(uint32), args[3].(*flow.Header), args[4].(snapshot.StorageSnapshot))
	})
	return _c
}

func (_c *MockExecutor_GetAccountKey_Call) Return(_a0 *flow.AccountPublicKey, _a1 error) *MockExecutor_GetAccountKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_GetAccountKey_Call) RunAndReturn(run func(context.Context, flow.Address, uint32, *flow.Header, snapshot.StorageSnapshot) (*flow.AccountPublicKey, error)) *MockExecutor_GetAccountKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountKeys provides a mock function with given fields: ctx, addr, header, _a3
func (_m *MockExecutor) GetAccountKeys(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot) ([]flow.AccountPublicKey, error) {
	ret := _m.Called(ctx, addr, header, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountKeys")
	}

	var r0 []flow.AccountPublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) ([]flow.AccountPublicKey, error)); ok {
		return rf(ctx, addr, header, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) []flow.AccountPublicKey); ok {
		r0 = rf(ctx, addr, header, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.AccountPublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r1 = rf(ctx, addr, header, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_GetAccountKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountKeys'
type MockExecutor_GetAccountKeys_Call struct {
	*mock.Call
}

// GetAccountKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - addr flow.Address
//   - header *flow.Header
//   - _a3 snapshot.StorageSnapshot
func (_e *MockExecutor_Expecter) GetAccountKeys(ctx interface{}, addr interface{}, header interface{}, _a3 interface{}) *MockExecutor_GetAccountKeys_Call {
	return &MockExecutor_GetAccountKeys_Call{Call: _e.mock.On("GetAccountKeys", ctx, addr, header, _a3)}
}

func (_c *MockExecutor_GetAccountKeys_Call) Run(run func(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot)) *MockExecutor_GetAccountKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(*flow.Header), args[3].(snapshot.StorageSnapshot))
	})
	return _c
}

func (_c *MockExecutor_GetAccountKeys_Call) Return(_a0 []flow.AccountPublicKey, _a1 error) *MockExecutor_GetAccountKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_GetAccountKeys_Call) RunAndReturn(run func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) ([]flow.AccountPublicKey, error)) *MockExecutor_GetAccountKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
