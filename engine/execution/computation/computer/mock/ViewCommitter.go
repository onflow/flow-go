// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	execution "github.com/onflow/flow-go/engine/execution"
	flow "github.com/onflow/flow-go/model/flow"

	ledger "github.com/onflow/flow-go/ledger"

	mock "github.com/stretchr/testify/mock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"
)

// MockViewCommitter is an autogenerated mock type for the ViewCommitter type
type MockViewCommitter struct {
	mock.Mock
}

type MockViewCommitter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViewCommitter) EXPECT() *MockViewCommitter_Expecter {
	return &MockViewCommitter_Expecter{mock: &_m.Mock}
}

// CommitView provides a mock function with given fields: _a0, _a1
func (_m *MockViewCommitter) CommitView(_a0 *snapshot.ExecutionSnapshot, _a1 execution.ExtendableStorageSnapshot) (flow.StateCommitment, []byte, *ledger.TrieUpdate, execution.ExtendableStorageSnapshot, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CommitView")
	}

	var r0 flow.StateCommitment
	var r1 []byte
	var r2 *ledger.TrieUpdate
	var r3 execution.ExtendableStorageSnapshot
	var r4 error
	if rf, ok := ret.Get(0).(func(*snapshot.ExecutionSnapshot, execution.ExtendableStorageSnapshot) (flow.StateCommitment, []byte, *ledger.TrieUpdate, execution.ExtendableStorageSnapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*snapshot.ExecutionSnapshot, execution.ExtendableStorageSnapshot) flow.StateCommitment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	if rf, ok := ret.Get(1).(func(*snapshot.ExecutionSnapshot, execution.ExtendableStorageSnapshot) []byte); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(*snapshot.ExecutionSnapshot, execution.ExtendableStorageSnapshot) *ledger.TrieUpdate); ok {
		r2 = rf(_a0, _a1)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*ledger.TrieUpdate)
		}
	}

	if rf, ok := ret.Get(3).(func(*snapshot.ExecutionSnapshot, execution.ExtendableStorageSnapshot) execution.ExtendableStorageSnapshot); ok {
		r3 = rf(_a0, _a1)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(execution.ExtendableStorageSnapshot)
		}
	}

	if rf, ok := ret.Get(4).(func(*snapshot.ExecutionSnapshot, execution.ExtendableStorageSnapshot) error); ok {
		r4 = rf(_a0, _a1)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// MockViewCommitter_CommitView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitView'
type MockViewCommitter_CommitView_Call struct {
	*mock.Call
}

// CommitView is a helper method to define mock.On call
//   - _a0 *snapshot.ExecutionSnapshot
//   - _a1 execution.ExtendableStorageSnapshot
func (_e *MockViewCommitter_Expecter) CommitView(_a0 interface{}, _a1 interface{}) *MockViewCommitter_CommitView_Call {
	return &MockViewCommitter_CommitView_Call{Call: _e.mock.On("CommitView", _a0, _a1)}
}

func (_c *MockViewCommitter_CommitView_Call) Run(run func(_a0 *snapshot.ExecutionSnapshot, _a1 execution.ExtendableStorageSnapshot)) *MockViewCommitter_CommitView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*snapshot.ExecutionSnapshot), args[1].(execution.ExtendableStorageSnapshot))
	})
	return _c
}

func (_c *MockViewCommitter_CommitView_Call) Return(_a0 flow.StateCommitment, _a1 []byte, _a2 *ledger.TrieUpdate, _a3 execution.ExtendableStorageSnapshot, _a4 error) *MockViewCommitter_CommitView_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3, _a4)
	return _c
}

func (_c *MockViewCommitter_CommitView_Call) RunAndReturn(run func(*snapshot.ExecutionSnapshot, execution.ExtendableStorageSnapshot) (flow.StateCommitment, []byte, *ledger.TrieUpdate, execution.ExtendableStorageSnapshot, error)) *MockViewCommitter_CommitView_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockViewCommitter creates a new instance of MockViewCommitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockViewCommitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockViewCommitter {
	mock := &MockViewCommitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
