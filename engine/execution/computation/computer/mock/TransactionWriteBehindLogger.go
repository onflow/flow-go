// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	computer "github.com/onflow/flow-go/engine/execution/computation/computer"
	fvm "github.com/onflow/flow-go/fvm"

	mock "github.com/stretchr/testify/mock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"

	time "time"
)

// MockTransactionWriteBehindLogger is an autogenerated mock type for the TransactionWriteBehindLogger type
type MockTransactionWriteBehindLogger struct {
	mock.Mock
}

type MockTransactionWriteBehindLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionWriteBehindLogger) EXPECT() *MockTransactionWriteBehindLogger_Expecter {
	return &MockTransactionWriteBehindLogger_Expecter{mock: &_m.Mock}
}

// AddTransactionResult provides a mock function with given fields: txn, _a1, output, timeSpent, numTxnConflictRetries
func (_m *MockTransactionWriteBehindLogger) AddTransactionResult(txn computer.TransactionRequest, _a1 *snapshot.ExecutionSnapshot, output fvm.ProcedureOutput, timeSpent time.Duration, numTxnConflictRetries int) {
	_m.Called(txn, _a1, output, timeSpent, numTxnConflictRetries)
}

// MockTransactionWriteBehindLogger_AddTransactionResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTransactionResult'
type MockTransactionWriteBehindLogger_AddTransactionResult_Call struct {
	*mock.Call
}

// AddTransactionResult is a helper method to define mock.On call
//   - txn computer.TransactionRequest
//   - _a1 *snapshot.ExecutionSnapshot
//   - output fvm.ProcedureOutput
//   - timeSpent time.Duration
//   - numTxnConflictRetries int
func (_e *MockTransactionWriteBehindLogger_Expecter) AddTransactionResult(txn interface{}, _a1 interface{}, output interface{}, timeSpent interface{}, numTxnConflictRetries interface{}) *MockTransactionWriteBehindLogger_AddTransactionResult_Call {
	return &MockTransactionWriteBehindLogger_AddTransactionResult_Call{Call: _e.mock.On("AddTransactionResult", txn, _a1, output, timeSpent, numTxnConflictRetries)}
}

func (_c *MockTransactionWriteBehindLogger_AddTransactionResult_Call) Run(run func(txn computer.TransactionRequest, _a1 *snapshot.ExecutionSnapshot, output fvm.ProcedureOutput, timeSpent time.Duration, numTxnConflictRetries int)) *MockTransactionWriteBehindLogger_AddTransactionResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(computer.TransactionRequest), args[1].(*snapshot.ExecutionSnapshot), args[2].(fvm.ProcedureOutput), args[3].(time.Duration), args[4].(int))
	})
	return _c
}

func (_c *MockTransactionWriteBehindLogger_AddTransactionResult_Call) Return() *MockTransactionWriteBehindLogger_AddTransactionResult_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionWriteBehindLogger_AddTransactionResult_Call) RunAndReturn(run func(computer.TransactionRequest, *snapshot.ExecutionSnapshot, fvm.ProcedureOutput, time.Duration, int)) *MockTransactionWriteBehindLogger_AddTransactionResult_Call {
	_c.Run(run)
	return _c
}

// NewMockTransactionWriteBehindLogger creates a new instance of MockTransactionWriteBehindLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionWriteBehindLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionWriteBehindLogger {
	mock := &MockTransactionWriteBehindLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
