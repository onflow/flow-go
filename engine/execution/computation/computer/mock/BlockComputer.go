// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	derived "github.com/onflow/flow-go/fvm/storage/derived"
	entity "github.com/onflow/flow-go/module/mempool/entity"

	execution "github.com/onflow/flow-go/engine/execution"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"
)

// MockBlockComputer is an autogenerated mock type for the BlockComputer type
type MockBlockComputer struct {
	mock.Mock
}

type MockBlockComputer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockComputer) EXPECT() *MockBlockComputer_Expecter {
	return &MockBlockComputer_Expecter{mock: &_m.Mock}
}

// ExecuteBlock provides a mock function with given fields: ctx, parentBlockExecutionResultID, block, _a3, derivedBlockData
func (_m *MockBlockComputer) ExecuteBlock(ctx context.Context, parentBlockExecutionResultID flow.Identifier, block *entity.ExecutableBlock, _a3 snapshot.StorageSnapshot, derivedBlockData *derived.DerivedBlockData) (*execution.ComputationResult, error) {
	ret := _m.Called(ctx, parentBlockExecutionResultID, block, _a3, derivedBlockData)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteBlock")
	}

	var r0 *execution.ComputationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, *entity.ExecutableBlock, snapshot.StorageSnapshot, *derived.DerivedBlockData) (*execution.ComputationResult, error)); ok {
		return rf(ctx, parentBlockExecutionResultID, block, _a3, derivedBlockData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, *entity.ExecutableBlock, snapshot.StorageSnapshot, *derived.DerivedBlockData) *execution.ComputationResult); ok {
		r0 = rf(ctx, parentBlockExecutionResultID, block, _a3, derivedBlockData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.ComputationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, *entity.ExecutableBlock, snapshot.StorageSnapshot, *derived.DerivedBlockData) error); ok {
		r1 = rf(ctx, parentBlockExecutionResultID, block, _a3, derivedBlockData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockComputer_ExecuteBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteBlock'
type MockBlockComputer_ExecuteBlock_Call struct {
	*mock.Call
}

// ExecuteBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - parentBlockExecutionResultID flow.Identifier
//   - block *entity.ExecutableBlock
//   - _a3 snapshot.StorageSnapshot
//   - derivedBlockData *derived.DerivedBlockData
func (_e *MockBlockComputer_Expecter) ExecuteBlock(ctx interface{}, parentBlockExecutionResultID interface{}, block interface{}, _a3 interface{}, derivedBlockData interface{}) *MockBlockComputer_ExecuteBlock_Call {
	return &MockBlockComputer_ExecuteBlock_Call{Call: _e.mock.On("ExecuteBlock", ctx, parentBlockExecutionResultID, block, _a3, derivedBlockData)}
}

func (_c *MockBlockComputer_ExecuteBlock_Call) Run(run func(ctx context.Context, parentBlockExecutionResultID flow.Identifier, block *entity.ExecutableBlock, _a3 snapshot.StorageSnapshot, derivedBlockData *derived.DerivedBlockData)) *MockBlockComputer_ExecuteBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier), args[2].(*entity.ExecutableBlock), args[3].(snapshot.StorageSnapshot), args[4].(*derived.DerivedBlockData))
	})
	return _c
}

func (_c *MockBlockComputer_ExecuteBlock_Call) Return(_a0 *execution.ComputationResult, _a1 error) *MockBlockComputer_ExecuteBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockComputer_ExecuteBlock_Call) RunAndReturn(run func(context.Context, flow.Identifier, *entity.ExecutableBlock, snapshot.StorageSnapshot, *derived.DerivedBlockData) (*execution.ComputationResult, error)) *MockBlockComputer_ExecuteBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockComputer creates a new instance of MockBlockComputer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockComputer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockComputer {
	mock := &MockBlockComputer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
