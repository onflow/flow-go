// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	context "context"

	execution "github.com/onflow/flow-go/engine/execution"
	entity "github.com/onflow/flow-go/module/mempool/entity"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"
)

// ComputationManager is an autogenerated mock type for the ComputationManager type
type ComputationManager struct {
	mock.Mock
}

// ComputeBlock provides a mock function with given fields: ctx, parentBlockExecutionResultID, block, _a3
func (_m *ComputationManager) ComputeBlock(ctx context.Context, parentBlockExecutionResultID flow.Identifier, block *entity.ExecutableBlock, _a3 snapshot.StorageSnapshot) (*execution.ComputationResult, error) {
	ret := _m.Called(ctx, parentBlockExecutionResultID, block, _a3)

	if len(ret) == 0 {
		panic("no return value specified for ComputeBlock")
	}

	var r0 *execution.ComputationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, *entity.ExecutableBlock, snapshot.StorageSnapshot) (*execution.ComputationResult, error)); ok {
		return rf(ctx, parentBlockExecutionResultID, block, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, *entity.ExecutableBlock, snapshot.StorageSnapshot) *execution.ComputationResult); ok {
		r0 = rf(ctx, parentBlockExecutionResultID, block, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.ComputationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, *entity.ExecutableBlock, snapshot.StorageSnapshot) error); ok {
		r1 = rf(ctx, parentBlockExecutionResultID, block, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteScript provides a mock function with given fields: ctx, script, arguments, blockHeader, _a4
func (_m *ComputationManager) ExecuteScript(ctx context.Context, script []byte, arguments [][]byte, blockHeader *flow.Header, _a4 snapshot.StorageSnapshot) ([]byte, uint64, error) {
	ret := _m.Called(ctx, script, arguments, blockHeader, _a4)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScript")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) ([]byte, uint64, error)); ok {
		return rf(ctx, script, arguments, blockHeader, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) []byte); ok {
		r0 = rf(ctx, script, arguments, blockHeader, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) uint64); ok {
		r1 = rf(ctx, script, arguments, blockHeader, _a4)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, [][]byte, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r2 = rf(ctx, script, arguments, blockHeader, _a4)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAccount provides a mock function with given fields: ctx, addr, header, _a3
func (_m *ComputationManager) GetAccount(ctx context.Context, addr flow.Address, header *flow.Header, _a3 snapshot.StorageSnapshot) (*flow.Account, error) {
	ret := _m.Called(ctx, addr, header, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) (*flow.Account, error)); ok {
		return rf(ctx, addr, header, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) *flow.Account); ok {
		r0 = rf(ctx, addr, header, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, *flow.Header, snapshot.StorageSnapshot) error); ok {
		r1 = rf(ctx, addr, header, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComputationManager creates a new instance of ComputationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComputationManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComputationManager {
	mock := &ComputationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
