// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	context "context"

	channels "github.com/onflow/flow-go/network/channels"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// ProviderEngine is an autogenerated mock type for the ProviderEngine type
type ProviderEngine struct {
	mock.Mock
}

// BroadcastExecutionReceipt provides a mock function with given fields: _a0, _a1
func (_m *ProviderEngine) BroadcastExecutionReceipt(_a0 context.Context, _a1 *flow.ExecutionReceipt) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *flow.ExecutionReceipt) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Process provides a mock function with given fields: channel, originID, message
func (_m *ProviderEngine) Process(channel channels.Channel, originID flow.Identifier, message interface{}) error {
	ret := _m.Called(channel, originID, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, flow.Identifier, interface{}) error); ok {
		r0 = rf(channel, originID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProviderEngine interface {
	mock.TestingT
	Cleanup(func())
}

// NewProviderEngine creates a new instance of ProviderEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderEngine(t mockConstructorTestingTNewProviderEngine) *ProviderEngine {
	mock := &ProviderEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
