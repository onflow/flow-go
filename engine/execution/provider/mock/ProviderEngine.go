// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	channels "github.com/onflow/flow-go/network/channels"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockProviderEngine is an autogenerated mock type for the ProviderEngine type
type MockProviderEngine struct {
	mock.Mock
}

type MockProviderEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderEngine) EXPECT() *MockProviderEngine_Expecter {
	return &MockProviderEngine_Expecter{mock: &_m.Mock}
}

// BroadcastExecutionReceipt provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockProviderEngine) BroadcastExecutionReceipt(_a0 context.Context, _a1 uint64, _a2 *flow.ExecutionReceipt) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastExecutionReceipt")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *flow.ExecutionReceipt) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *flow.ExecutionReceipt) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *flow.ExecutionReceipt) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderEngine_BroadcastExecutionReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastExecutionReceipt'
type MockProviderEngine_BroadcastExecutionReceipt_Call struct {
	*mock.Call
}

// BroadcastExecutionReceipt is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
//   - _a2 *flow.ExecutionReceipt
func (_e *MockProviderEngine_Expecter) BroadcastExecutionReceipt(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockProviderEngine_BroadcastExecutionReceipt_Call {
	return &MockProviderEngine_BroadcastExecutionReceipt_Call{Call: _e.mock.On("BroadcastExecutionReceipt", _a0, _a1, _a2)}
}

func (_c *MockProviderEngine_BroadcastExecutionReceipt_Call) Run(run func(_a0 context.Context, _a1 uint64, _a2 *flow.ExecutionReceipt)) *MockProviderEngine_BroadcastExecutionReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(*flow.ExecutionReceipt))
	})
	return _c
}

func (_c *MockProviderEngine_BroadcastExecutionReceipt_Call) Return(_a0 bool, _a1 error) *MockProviderEngine_BroadcastExecutionReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderEngine_BroadcastExecutionReceipt_Call) RunAndReturn(run func(context.Context, uint64, *flow.ExecutionReceipt) (bool, error)) *MockProviderEngine_BroadcastExecutionReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *MockProviderEngine) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockProviderEngine_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockProviderEngine_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockProviderEngine_Expecter) Done() *MockProviderEngine_Done_Call {
	return &MockProviderEngine_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockProviderEngine_Done_Call) Run(run func()) *MockProviderEngine_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderEngine_Done_Call) Return(_a0 <-chan struct{}) *MockProviderEngine_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderEngine_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockProviderEngine_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: channel, originID, message
func (_m *MockProviderEngine) Process(channel channels.Channel, originID flow.Identifier, message interface{}) error {
	ret := _m.Called(channel, originID, message)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(channels.Channel, flow.Identifier, interface{}) error); ok {
		r0 = rf(channel, originID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderEngine_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockProviderEngine_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - channel channels.Channel
//   - originID flow.Identifier
//   - message interface{}
func (_e *MockProviderEngine_Expecter) Process(channel interface{}, originID interface{}, message interface{}) *MockProviderEngine_Process_Call {
	return &MockProviderEngine_Process_Call{Call: _e.mock.On("Process", channel, originID, message)}
}

func (_c *MockProviderEngine_Process_Call) Run(run func(channel channels.Channel, originID flow.Identifier, message interface{})) *MockProviderEngine_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(channels.Channel), args[1].(flow.Identifier), args[2].(interface{}))
	})
	return _c
}

func (_c *MockProviderEngine_Process_Call) Return(_a0 error) *MockProviderEngine_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderEngine_Process_Call) RunAndReturn(run func(channels.Channel, flow.Identifier, interface{}) error) *MockProviderEngine_Process_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockProviderEngine) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockProviderEngine_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockProviderEngine_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockProviderEngine_Expecter) Ready() *MockProviderEngine_Ready_Call {
	return &MockProviderEngine_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockProviderEngine_Ready_Call) Run(run func()) *MockProviderEngine_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderEngine_Ready_Call) Return(_a0 <-chan struct{}) *MockProviderEngine_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderEngine_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockProviderEngine_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderEngine creates a new instance of MockProviderEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderEngine {
	mock := &MockProviderEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
