// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// MockRegisterStoreNotifier is an autogenerated mock type for the RegisterStoreNotifier type
type MockRegisterStoreNotifier struct {
	mock.Mock
}

type MockRegisterStoreNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterStoreNotifier) EXPECT() *MockRegisterStoreNotifier_Expecter {
	return &MockRegisterStoreNotifier_Expecter{mock: &_m.Mock}
}

// OnFinalizedAndExecutedHeightUpdated provides a mock function with given fields: height
func (_m *MockRegisterStoreNotifier) OnFinalizedAndExecutedHeightUpdated(height uint64) {
	_m.Called(height)
}

// MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnFinalizedAndExecutedHeightUpdated'
type MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call struct {
	*mock.Call
}

// OnFinalizedAndExecutedHeightUpdated is a helper method to define mock.On call
//   - height uint64
func (_e *MockRegisterStoreNotifier_Expecter) OnFinalizedAndExecutedHeightUpdated(height interface{}) *MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call {
	return &MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call{Call: _e.mock.On("OnFinalizedAndExecutedHeightUpdated", height)}
}

func (_c *MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call) Run(run func(height uint64)) *MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call) Return() *MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call) RunAndReturn(run func(uint64)) *MockRegisterStoreNotifier_OnFinalizedAndExecutedHeightUpdated_Call {
	_c.Run(run)
	return _c
}

// NewMockRegisterStoreNotifier creates a new instance of MockRegisterStoreNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterStoreNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterStoreNotifier {
	mock := &MockRegisterStoreNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
