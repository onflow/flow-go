// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// OnDiskRegisterStore is an autogenerated mock type for the OnDiskRegisterStore type
type OnDiskRegisterStore struct {
	mock.Mock
}

// FirstHeight provides a mock function with no fields
func (_m *OnDiskRegisterStore) FirstHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FirstHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Get provides a mock function with given fields: ID, height
func (_m *OnDiskRegisterStore) Get(ID flow.RegisterID, height uint64) ([]byte, error) {
	ret := _m.Called(ID, height)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.RegisterID, uint64) ([]byte, error)); ok {
		return rf(ID, height)
	}
	if rf, ok := ret.Get(0).(func(flow.RegisterID, uint64) []byte); ok {
		r0 = rf(ID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.RegisterID, uint64) error); ok {
		r1 = rf(ID, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestHeight provides a mock function with no fields
func (_m *OnDiskRegisterStore) LatestHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Store provides a mock function with given fields: entries, height
func (_m *OnDiskRegisterStore) Store(entries flow.RegisterEntries, height uint64) error {
	ret := _m.Called(entries, height)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.RegisterEntries, uint64) error); ok {
		r0 = rf(entries, height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOnDiskRegisterStore creates a new instance of OnDiskRegisterStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOnDiskRegisterStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *OnDiskRegisterStore {
	mock := &OnDiskRegisterStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
