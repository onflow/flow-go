// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockInMemoryRegisterStore is an autogenerated mock type for the InMemoryRegisterStore type
type MockInMemoryRegisterStore struct {
	mock.Mock
}

type MockInMemoryRegisterStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInMemoryRegisterStore) EXPECT() *MockInMemoryRegisterStore_Expecter {
	return &MockInMemoryRegisterStore_Expecter{mock: &_m.Mock}
}

// GetRegister provides a mock function with given fields: height, blockID, register
func (_m *MockInMemoryRegisterStore) GetRegister(height uint64, blockID flow.Identifier, register flow.RegisterID) ([]byte, error) {
	ret := _m.Called(height, blockID, register)

	if len(ret) == 0 {
		panic("no return value specified for GetRegister")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, flow.RegisterID) ([]byte, error)); ok {
		return rf(height, blockID, register)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, flow.RegisterID) []byte); ok {
		r0 = rf(height, blockID, register)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier, flow.RegisterID) error); ok {
		r1 = rf(height, blockID, register)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInMemoryRegisterStore_GetRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegister'
type MockInMemoryRegisterStore_GetRegister_Call struct {
	*mock.Call
}

// GetRegister is a helper method to define mock.On call
//   - height uint64
//   - blockID flow.Identifier
//   - register flow.RegisterID
func (_e *MockInMemoryRegisterStore_Expecter) GetRegister(height interface{}, blockID interface{}, register interface{}) *MockInMemoryRegisterStore_GetRegister_Call {
	return &MockInMemoryRegisterStore_GetRegister_Call{Call: _e.mock.On("GetRegister", height, blockID, register)}
}

func (_c *MockInMemoryRegisterStore_GetRegister_Call) Run(run func(height uint64, blockID flow.Identifier, register flow.RegisterID)) *MockInMemoryRegisterStore_GetRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier), args[2].(flow.RegisterID))
	})
	return _c
}

func (_c *MockInMemoryRegisterStore_GetRegister_Call) Return(_a0 []byte, _a1 error) *MockInMemoryRegisterStore_GetRegister_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInMemoryRegisterStore_GetRegister_Call) RunAndReturn(run func(uint64, flow.Identifier, flow.RegisterID) ([]byte, error)) *MockInMemoryRegisterStore_GetRegister_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdatedRegisters provides a mock function with given fields: height, blockID
func (_m *MockInMemoryRegisterStore) GetUpdatedRegisters(height uint64, blockID flow.Identifier) (flow.RegisterEntries, error) {
	ret := _m.Called(height, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatedRegisters")
	}

	var r0 flow.RegisterEntries
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) (flow.RegisterEntries, error)); ok {
		return rf(height, blockID)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) flow.RegisterEntries); ok {
		r0 = rf(height, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.RegisterEntries)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier) error); ok {
		r1 = rf(height, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInMemoryRegisterStore_GetUpdatedRegisters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdatedRegisters'
type MockInMemoryRegisterStore_GetUpdatedRegisters_Call struct {
	*mock.Call
}

// GetUpdatedRegisters is a helper method to define mock.On call
//   - height uint64
//   - blockID flow.Identifier
func (_e *MockInMemoryRegisterStore_Expecter) GetUpdatedRegisters(height interface{}, blockID interface{}) *MockInMemoryRegisterStore_GetUpdatedRegisters_Call {
	return &MockInMemoryRegisterStore_GetUpdatedRegisters_Call{Call: _e.mock.On("GetUpdatedRegisters", height, blockID)}
}

func (_c *MockInMemoryRegisterStore_GetUpdatedRegisters_Call) Run(run func(height uint64, blockID flow.Identifier)) *MockInMemoryRegisterStore_GetUpdatedRegisters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockInMemoryRegisterStore_GetUpdatedRegisters_Call) Return(_a0 flow.RegisterEntries, _a1 error) *MockInMemoryRegisterStore_GetUpdatedRegisters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInMemoryRegisterStore_GetUpdatedRegisters_Call) RunAndReturn(run func(uint64, flow.Identifier) (flow.RegisterEntries, error)) *MockInMemoryRegisterStore_GetUpdatedRegisters_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlockExecuted provides a mock function with given fields: height, blockID
func (_m *MockInMemoryRegisterStore) IsBlockExecuted(height uint64, blockID flow.Identifier) (bool, error) {
	ret := _m.Called(height, blockID)

	if len(ret) == 0 {
		panic("no return value specified for IsBlockExecuted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) (bool, error)); ok {
		return rf(height, blockID)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) bool); ok {
		r0 = rf(height, blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier) error); ok {
		r1 = rf(height, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInMemoryRegisterStore_IsBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlockExecuted'
type MockInMemoryRegisterStore_IsBlockExecuted_Call struct {
	*mock.Call
}

// IsBlockExecuted is a helper method to define mock.On call
//   - height uint64
//   - blockID flow.Identifier
func (_e *MockInMemoryRegisterStore_Expecter) IsBlockExecuted(height interface{}, blockID interface{}) *MockInMemoryRegisterStore_IsBlockExecuted_Call {
	return &MockInMemoryRegisterStore_IsBlockExecuted_Call{Call: _e.mock.On("IsBlockExecuted", height, blockID)}
}

func (_c *MockInMemoryRegisterStore_IsBlockExecuted_Call) Run(run func(height uint64, blockID flow.Identifier)) *MockInMemoryRegisterStore_IsBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockInMemoryRegisterStore_IsBlockExecuted_Call) Return(_a0 bool, _a1 error) *MockInMemoryRegisterStore_IsBlockExecuted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInMemoryRegisterStore_IsBlockExecuted_Call) RunAndReturn(run func(uint64, flow.Identifier) (bool, error)) *MockInMemoryRegisterStore_IsBlockExecuted_Call {
	_c.Call.Return(run)
	return _c
}

// Prune provides a mock function with given fields: finalizedHeight, finalizedBlockID
func (_m *MockInMemoryRegisterStore) Prune(finalizedHeight uint64, finalizedBlockID flow.Identifier) error {
	ret := _m.Called(finalizedHeight, finalizedBlockID)

	if len(ret) == 0 {
		panic("no return value specified for Prune")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) error); ok {
		r0 = rf(finalizedHeight, finalizedBlockID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInMemoryRegisterStore_Prune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prune'
type MockInMemoryRegisterStore_Prune_Call struct {
	*mock.Call
}

// Prune is a helper method to define mock.On call
//   - finalizedHeight uint64
//   - finalizedBlockID flow.Identifier
func (_e *MockInMemoryRegisterStore_Expecter) Prune(finalizedHeight interface{}, finalizedBlockID interface{}) *MockInMemoryRegisterStore_Prune_Call {
	return &MockInMemoryRegisterStore_Prune_Call{Call: _e.mock.On("Prune", finalizedHeight, finalizedBlockID)}
}

func (_c *MockInMemoryRegisterStore_Prune_Call) Run(run func(finalizedHeight uint64, finalizedBlockID flow.Identifier)) *MockInMemoryRegisterStore_Prune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockInMemoryRegisterStore_Prune_Call) Return(_a0 error) *MockInMemoryRegisterStore_Prune_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInMemoryRegisterStore_Prune_Call) RunAndReturn(run func(uint64, flow.Identifier) error) *MockInMemoryRegisterStore_Prune_Call {
	_c.Call.Return(run)
	return _c
}

// PrunedHeight provides a mock function with no fields
func (_m *MockInMemoryRegisterStore) PrunedHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrunedHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockInMemoryRegisterStore_PrunedHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrunedHeight'
type MockInMemoryRegisterStore_PrunedHeight_Call struct {
	*mock.Call
}

// PrunedHeight is a helper method to define mock.On call
func (_e *MockInMemoryRegisterStore_Expecter) PrunedHeight() *MockInMemoryRegisterStore_PrunedHeight_Call {
	return &MockInMemoryRegisterStore_PrunedHeight_Call{Call: _e.mock.On("PrunedHeight")}
}

func (_c *MockInMemoryRegisterStore_PrunedHeight_Call) Run(run func()) *MockInMemoryRegisterStore_PrunedHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInMemoryRegisterStore_PrunedHeight_Call) Return(_a0 uint64) *MockInMemoryRegisterStore_PrunedHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInMemoryRegisterStore_PrunedHeight_Call) RunAndReturn(run func() uint64) *MockInMemoryRegisterStore_PrunedHeight_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRegisters provides a mock function with given fields: height, blockID, parentID, registers
func (_m *MockInMemoryRegisterStore) SaveRegisters(height uint64, blockID flow.Identifier, parentID flow.Identifier, registers flow.RegisterEntries) error {
	ret := _m.Called(height, blockID, parentID, registers)

	if len(ret) == 0 {
		panic("no return value specified for SaveRegisters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, flow.Identifier, flow.RegisterEntries) error); ok {
		r0 = rf(height, blockID, parentID, registers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInMemoryRegisterStore_SaveRegisters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRegisters'
type MockInMemoryRegisterStore_SaveRegisters_Call struct {
	*mock.Call
}

// SaveRegisters is a helper method to define mock.On call
//   - height uint64
//   - blockID flow.Identifier
//   - parentID flow.Identifier
//   - registers flow.RegisterEntries
func (_e *MockInMemoryRegisterStore_Expecter) SaveRegisters(height interface{}, blockID interface{}, parentID interface{}, registers interface{}) *MockInMemoryRegisterStore_SaveRegisters_Call {
	return &MockInMemoryRegisterStore_SaveRegisters_Call{Call: _e.mock.On("SaveRegisters", height, blockID, parentID, registers)}
}

func (_c *MockInMemoryRegisterStore_SaveRegisters_Call) Run(run func(height uint64, blockID flow.Identifier, parentID flow.Identifier, registers flow.RegisterEntries)) *MockInMemoryRegisterStore_SaveRegisters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier), args[2].(flow.Identifier), args[3].(flow.RegisterEntries))
	})
	return _c
}

func (_c *MockInMemoryRegisterStore_SaveRegisters_Call) Return(_a0 error) *MockInMemoryRegisterStore_SaveRegisters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInMemoryRegisterStore_SaveRegisters_Call) RunAndReturn(run func(uint64, flow.Identifier, flow.Identifier, flow.RegisterEntries) error) *MockInMemoryRegisterStore_SaveRegisters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInMemoryRegisterStore creates a new instance of MockInMemoryRegisterStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInMemoryRegisterStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInMemoryRegisterStore {
	mock := &MockInMemoryRegisterStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
