// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockRegisterStore is an autogenerated mock type for the RegisterStore type
type MockRegisterStore struct {
	mock.Mock
}

type MockRegisterStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterStore) EXPECT() *MockRegisterStore_Expecter {
	return &MockRegisterStore_Expecter{mock: &_m.Mock}
}

// GetRegister provides a mock function with given fields: height, blockID, register
func (_m *MockRegisterStore) GetRegister(height uint64, blockID flow.Identifier, register flow.RegisterID) ([]byte, error) {
	ret := _m.Called(height, blockID, register)

	if len(ret) == 0 {
		panic("no return value specified for GetRegister")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, flow.RegisterID) ([]byte, error)); ok {
		return rf(height, blockID, register)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier, flow.RegisterID) []byte); ok {
		r0 = rf(height, blockID, register)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier, flow.RegisterID) error); ok {
		r1 = rf(height, blockID, register)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegisterStore_GetRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegister'
type MockRegisterStore_GetRegister_Call struct {
	*mock.Call
}

// GetRegister is a helper method to define mock.On call
//   - height uint64
//   - blockID flow.Identifier
//   - register flow.RegisterID
func (_e *MockRegisterStore_Expecter) GetRegister(height interface{}, blockID interface{}, register interface{}) *MockRegisterStore_GetRegister_Call {
	return &MockRegisterStore_GetRegister_Call{Call: _e.mock.On("GetRegister", height, blockID, register)}
}

func (_c *MockRegisterStore_GetRegister_Call) Run(run func(height uint64, blockID flow.Identifier, register flow.RegisterID)) *MockRegisterStore_GetRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier), args[2].(flow.RegisterID))
	})
	return _c
}

func (_c *MockRegisterStore_GetRegister_Call) Return(_a0 []byte, _a1 error) *MockRegisterStore_GetRegister_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegisterStore_GetRegister_Call) RunAndReturn(run func(uint64, flow.Identifier, flow.RegisterID) ([]byte, error)) *MockRegisterStore_GetRegister_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlockExecuted provides a mock function with given fields: height, blockID
func (_m *MockRegisterStore) IsBlockExecuted(height uint64, blockID flow.Identifier) (bool, error) {
	ret := _m.Called(height, blockID)

	if len(ret) == 0 {
		panic("no return value specified for IsBlockExecuted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) (bool, error)); ok {
		return rf(height, blockID)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) bool); ok {
		r0 = rf(height, blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier) error); ok {
		r1 = rf(height, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegisterStore_IsBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlockExecuted'
type MockRegisterStore_IsBlockExecuted_Call struct {
	*mock.Call
}

// IsBlockExecuted is a helper method to define mock.On call
//   - height uint64
//   - blockID flow.Identifier
func (_e *MockRegisterStore_Expecter) IsBlockExecuted(height interface{}, blockID interface{}) *MockRegisterStore_IsBlockExecuted_Call {
	return &MockRegisterStore_IsBlockExecuted_Call{Call: _e.mock.On("IsBlockExecuted", height, blockID)}
}

func (_c *MockRegisterStore_IsBlockExecuted_Call) Run(run func(height uint64, blockID flow.Identifier)) *MockRegisterStore_IsBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockRegisterStore_IsBlockExecuted_Call) Return(_a0 bool, _a1 error) *MockRegisterStore_IsBlockExecuted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegisterStore_IsBlockExecuted_Call) RunAndReturn(run func(uint64, flow.Identifier) (bool, error)) *MockRegisterStore_IsBlockExecuted_Call {
	_c.Call.Return(run)
	return _c
}

// LastFinalizedAndExecutedHeight provides a mock function with no fields
func (_m *MockRegisterStore) LastFinalizedAndExecutedHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastFinalizedAndExecutedHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockRegisterStore_LastFinalizedAndExecutedHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastFinalizedAndExecutedHeight'
type MockRegisterStore_LastFinalizedAndExecutedHeight_Call struct {
	*mock.Call
}

// LastFinalizedAndExecutedHeight is a helper method to define mock.On call
func (_e *MockRegisterStore_Expecter) LastFinalizedAndExecutedHeight() *MockRegisterStore_LastFinalizedAndExecutedHeight_Call {
	return &MockRegisterStore_LastFinalizedAndExecutedHeight_Call{Call: _e.mock.On("LastFinalizedAndExecutedHeight")}
}

func (_c *MockRegisterStore_LastFinalizedAndExecutedHeight_Call) Run(run func()) *MockRegisterStore_LastFinalizedAndExecutedHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegisterStore_LastFinalizedAndExecutedHeight_Call) Return(_a0 uint64) *MockRegisterStore_LastFinalizedAndExecutedHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegisterStore_LastFinalizedAndExecutedHeight_Call) RunAndReturn(run func() uint64) *MockRegisterStore_LastFinalizedAndExecutedHeight_Call {
	_c.Call.Return(run)
	return _c
}

// OnBlockFinalized provides a mock function with no fields
func (_m *MockRegisterStore) OnBlockFinalized() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnBlockFinalized")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegisterStore_OnBlockFinalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBlockFinalized'
type MockRegisterStore_OnBlockFinalized_Call struct {
	*mock.Call
}

// OnBlockFinalized is a helper method to define mock.On call
func (_e *MockRegisterStore_Expecter) OnBlockFinalized() *MockRegisterStore_OnBlockFinalized_Call {
	return &MockRegisterStore_OnBlockFinalized_Call{Call: _e.mock.On("OnBlockFinalized")}
}

func (_c *MockRegisterStore_OnBlockFinalized_Call) Run(run func()) *MockRegisterStore_OnBlockFinalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegisterStore_OnBlockFinalized_Call) Return(_a0 error) *MockRegisterStore_OnBlockFinalized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegisterStore_OnBlockFinalized_Call) RunAndReturn(run func() error) *MockRegisterStore_OnBlockFinalized_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRegisters provides a mock function with given fields: header, registers
func (_m *MockRegisterStore) SaveRegisters(header *flow.Header, registers flow.RegisterEntries) error {
	ret := _m.Called(header, registers)

	if len(ret) == 0 {
		panic("no return value specified for SaveRegisters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.Header, flow.RegisterEntries) error); ok {
		r0 = rf(header, registers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegisterStore_SaveRegisters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRegisters'
type MockRegisterStore_SaveRegisters_Call struct {
	*mock.Call
}

// SaveRegisters is a helper method to define mock.On call
//   - header *flow.Header
//   - registers flow.RegisterEntries
func (_e *MockRegisterStore_Expecter) SaveRegisters(header interface{}, registers interface{}) *MockRegisterStore_SaveRegisters_Call {
	return &MockRegisterStore_SaveRegisters_Call{Call: _e.mock.On("SaveRegisters", header, registers)}
}

func (_c *MockRegisterStore_SaveRegisters_Call) Run(run func(header *flow.Header, registers flow.RegisterEntries)) *MockRegisterStore_SaveRegisters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.Header), args[1].(flow.RegisterEntries))
	})
	return _c
}

func (_c *MockRegisterStore_SaveRegisters_Call) Return(_a0 error) *MockRegisterStore_SaveRegisters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegisterStore_SaveRegisters_Call) RunAndReturn(run func(*flow.Header, flow.RegisterEntries) error) *MockRegisterStore_SaveRegisters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterStore creates a new instance of MockRegisterStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterStore {
	mock := &MockRegisterStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
