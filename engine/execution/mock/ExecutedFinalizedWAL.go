// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	execution "github.com/onflow/flow-go/engine/execution"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockExecutedFinalizedWAL is an autogenerated mock type for the ExecutedFinalizedWAL type
type MockExecutedFinalizedWAL struct {
	mock.Mock
}

type MockExecutedFinalizedWAL_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutedFinalizedWAL) EXPECT() *MockExecutedFinalizedWAL_Expecter {
	return &MockExecutedFinalizedWAL_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: height, registers
func (_m *MockExecutedFinalizedWAL) Append(height uint64, registers flow.RegisterEntries) error {
	ret := _m.Called(height, registers)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, flow.RegisterEntries) error); ok {
		r0 = rf(height, registers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutedFinalizedWAL_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockExecutedFinalizedWAL_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - height uint64
//   - registers flow.RegisterEntries
func (_e *MockExecutedFinalizedWAL_Expecter) Append(height interface{}, registers interface{}) *MockExecutedFinalizedWAL_Append_Call {
	return &MockExecutedFinalizedWAL_Append_Call{Call: _e.mock.On("Append", height, registers)}
}

func (_c *MockExecutedFinalizedWAL_Append_Call) Run(run func(height uint64, registers flow.RegisterEntries)) *MockExecutedFinalizedWAL_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.RegisterEntries))
	})
	return _c
}

func (_c *MockExecutedFinalizedWAL_Append_Call) Return(_a0 error) *MockExecutedFinalizedWAL_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutedFinalizedWAL_Append_Call) RunAndReturn(run func(uint64, flow.RegisterEntries) error) *MockExecutedFinalizedWAL_Append_Call {
	_c.Call.Return(run)
	return _c
}

// GetReader provides a mock function with given fields: height
func (_m *MockExecutedFinalizedWAL) GetReader(height uint64) execution.WALReader {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetReader")
	}

	var r0 execution.WALReader
	if rf, ok := ret.Get(0).(func(uint64) execution.WALReader); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(execution.WALReader)
		}
	}

	return r0
}

// MockExecutedFinalizedWAL_GetReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReader'
type MockExecutedFinalizedWAL_GetReader_Call struct {
	*mock.Call
}

// GetReader is a helper method to define mock.On call
//   - height uint64
func (_e *MockExecutedFinalizedWAL_Expecter) GetReader(height interface{}) *MockExecutedFinalizedWAL_GetReader_Call {
	return &MockExecutedFinalizedWAL_GetReader_Call{Call: _e.mock.On("GetReader", height)}
}

func (_c *MockExecutedFinalizedWAL_GetReader_Call) Run(run func(height uint64)) *MockExecutedFinalizedWAL_GetReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockExecutedFinalizedWAL_GetReader_Call) Return(_a0 execution.WALReader) *MockExecutedFinalizedWAL_GetReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutedFinalizedWAL_GetReader_Call) RunAndReturn(run func(uint64) execution.WALReader) *MockExecutedFinalizedWAL_GetReader_Call {
	_c.Call.Return(run)
	return _c
}

// Latest provides a mock function with no fields
func (_m *MockExecutedFinalizedWAL) Latest() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Latest")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutedFinalizedWAL_Latest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Latest'
type MockExecutedFinalizedWAL_Latest_Call struct {
	*mock.Call
}

// Latest is a helper method to define mock.On call
func (_e *MockExecutedFinalizedWAL_Expecter) Latest() *MockExecutedFinalizedWAL_Latest_Call {
	return &MockExecutedFinalizedWAL_Latest_Call{Call: _e.mock.On("Latest")}
}

func (_c *MockExecutedFinalizedWAL_Latest_Call) Run(run func()) *MockExecutedFinalizedWAL_Latest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutedFinalizedWAL_Latest_Call) Return(_a0 uint64, _a1 error) *MockExecutedFinalizedWAL_Latest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutedFinalizedWAL_Latest_Call) RunAndReturn(run func() (uint64, error)) *MockExecutedFinalizedWAL_Latest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutedFinalizedWAL creates a new instance of MockExecutedFinalizedWAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutedFinalizedWAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutedFinalizedWAL {
	mock := &MockExecutedFinalizedWAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
