// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockScriptExecutor is an autogenerated mock type for the ScriptExecutor type
type MockScriptExecutor struct {
	mock.Mock
}

type MockScriptExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScriptExecutor) EXPECT() *MockScriptExecutor_Expecter {
	return &MockScriptExecutor_Expecter{mock: &_m.Mock}
}

// ExecuteScriptAtBlockID provides a mock function with given fields: ctx, script, arguments, blockID
func (_m *MockScriptExecutor) ExecuteScriptAtBlockID(ctx context.Context, script []byte, arguments [][]byte, blockID flow.Identifier) ([]byte, uint64, error) {
	ret := _m.Called(ctx, script, arguments, blockID)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScriptAtBlockID")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, flow.Identifier) ([]byte, uint64, error)); ok {
		return rf(ctx, script, arguments, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, [][]byte, flow.Identifier) []byte); ok {
		r0 = rf(ctx, script, arguments, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, [][]byte, flow.Identifier) uint64); ok {
		r1 = rf(ctx, script, arguments, blockID)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte, [][]byte, flow.Identifier) error); ok {
		r2 = rf(ctx, script, arguments, blockID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockScriptExecutor_ExecuteScriptAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScriptAtBlockID'
type MockScriptExecutor_ExecuteScriptAtBlockID_Call struct {
	*mock.Call
}

// ExecuteScriptAtBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - script []byte
//   - arguments [][]byte
//   - blockID flow.Identifier
func (_e *MockScriptExecutor_Expecter) ExecuteScriptAtBlockID(ctx interface{}, script interface{}, arguments interface{}, blockID interface{}) *MockScriptExecutor_ExecuteScriptAtBlockID_Call {
	return &MockScriptExecutor_ExecuteScriptAtBlockID_Call{Call: _e.mock.On("ExecuteScriptAtBlockID", ctx, script, arguments, blockID)}
}

func (_c *MockScriptExecutor_ExecuteScriptAtBlockID_Call) Run(run func(ctx context.Context, script []byte, arguments [][]byte, blockID flow.Identifier)) *MockScriptExecutor_ExecuteScriptAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([][]byte), args[3].(flow.Identifier))
	})
	return _c
}

func (_c *MockScriptExecutor_ExecuteScriptAtBlockID_Call) Return(_a0 []byte, _a1 uint64, _a2 error) *MockScriptExecutor_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockScriptExecutor_ExecuteScriptAtBlockID_Call) RunAndReturn(run func(context.Context, []byte, [][]byte, flow.Identifier) ([]byte, uint64, error)) *MockScriptExecutor_ExecuteScriptAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, address, blockID
func (_m *MockScriptExecutor) GetAccount(ctx context.Context, address flow.Address, blockID flow.Identifier) (*flow.Account, error) {
	ret := _m.Called(ctx, address, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier) (*flow.Account, error)); ok {
		return rf(ctx, address, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Address, flow.Identifier) *flow.Account); ok {
		r0 = rf(ctx, address, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Address, flow.Identifier) error); ok {
		r1 = rf(ctx, address, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockScriptExecutor_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - address flow.Address
//   - blockID flow.Identifier
func (_e *MockScriptExecutor_Expecter) GetAccount(ctx interface{}, address interface{}, blockID interface{}) *MockScriptExecutor_GetAccount_Call {
	return &MockScriptExecutor_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, address, blockID)}
}

func (_c *MockScriptExecutor_GetAccount_Call) Run(run func(ctx context.Context, address flow.Address, blockID flow.Identifier)) *MockScriptExecutor_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Address), args[2].(flow.Identifier))
	})
	return _c
}

func (_c *MockScriptExecutor_GetAccount_Call) Return(_a0 *flow.Account, _a1 error) *MockScriptExecutor_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_GetAccount_Call) RunAndReturn(run func(context.Context, flow.Address, flow.Identifier) (*flow.Account, error)) *MockScriptExecutor_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisterAtBlockID provides a mock function with given fields: ctx, owner, key, blockID
func (_m *MockScriptExecutor) GetRegisterAtBlockID(ctx context.Context, owner []byte, key []byte, blockID flow.Identifier) ([]byte, error) {
	ret := _m.Called(ctx, owner, key, blockID)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisterAtBlockID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, flow.Identifier) ([]byte, error)); ok {
		return rf(ctx, owner, key, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, flow.Identifier) []byte); ok {
		r0 = rf(ctx, owner, key, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []byte, flow.Identifier) error); ok {
		r1 = rf(ctx, owner, key, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutor_GetRegisterAtBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisterAtBlockID'
type MockScriptExecutor_GetRegisterAtBlockID_Call struct {
	*mock.Call
}

// GetRegisterAtBlockID is a helper method to define mock.On call
//   - ctx context.Context
//   - owner []byte
//   - key []byte
//   - blockID flow.Identifier
func (_e *MockScriptExecutor_Expecter) GetRegisterAtBlockID(ctx interface{}, owner interface{}, key interface{}, blockID interface{}) *MockScriptExecutor_GetRegisterAtBlockID_Call {
	return &MockScriptExecutor_GetRegisterAtBlockID_Call{Call: _e.mock.On("GetRegisterAtBlockID", ctx, owner, key, blockID)}
}

func (_c *MockScriptExecutor_GetRegisterAtBlockID_Call) Run(run func(ctx context.Context, owner []byte, key []byte, blockID flow.Identifier)) *MockScriptExecutor_GetRegisterAtBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte), args[3].(flow.Identifier))
	})
	return _c
}

func (_c *MockScriptExecutor_GetRegisterAtBlockID_Call) Return(_a0 []byte, _a1 error) *MockScriptExecutor_GetRegisterAtBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutor_GetRegisterAtBlockID_Call) RunAndReturn(run func(context.Context, []byte, []byte, flow.Identifier) ([]byte, error)) *MockScriptExecutor_GetRegisterAtBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScriptExecutor creates a new instance of MockScriptExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScriptExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScriptExecutor {
	mock := &MockScriptExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
