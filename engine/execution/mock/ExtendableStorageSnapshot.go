// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	execution "github.com/onflow/flow-go/engine/execution"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockExtendableStorageSnapshot is an autogenerated mock type for the ExtendableStorageSnapshot type
type MockExtendableStorageSnapshot struct {
	mock.Mock
}

type MockExtendableStorageSnapshot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExtendableStorageSnapshot) EXPECT() *MockExtendableStorageSnapshot_Expecter {
	return &MockExtendableStorageSnapshot_Expecter{mock: &_m.Mock}
}

// Commitment provides a mock function with no fields
func (_m *MockExtendableStorageSnapshot) Commitment() flow.StateCommitment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commitment")
	}

	var r0 flow.StateCommitment
	if rf, ok := ret.Get(0).(func() flow.StateCommitment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	return r0
}

// MockExtendableStorageSnapshot_Commitment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commitment'
type MockExtendableStorageSnapshot_Commitment_Call struct {
	*mock.Call
}

// Commitment is a helper method to define mock.On call
func (_e *MockExtendableStorageSnapshot_Expecter) Commitment() *MockExtendableStorageSnapshot_Commitment_Call {
	return &MockExtendableStorageSnapshot_Commitment_Call{Call: _e.mock.On("Commitment")}
}

func (_c *MockExtendableStorageSnapshot_Commitment_Call) Run(run func()) *MockExtendableStorageSnapshot_Commitment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExtendableStorageSnapshot_Commitment_Call) Return(_a0 flow.StateCommitment) *MockExtendableStorageSnapshot_Commitment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExtendableStorageSnapshot_Commitment_Call) RunAndReturn(run func() flow.StateCommitment) *MockExtendableStorageSnapshot_Commitment_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function with given fields: newCommit, updatedRegisters
func (_m *MockExtendableStorageSnapshot) Extend(newCommit flow.StateCommitment, updatedRegisters map[flow.RegisterID][]byte) execution.ExtendableStorageSnapshot {
	ret := _m.Called(newCommit, updatedRegisters)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 execution.ExtendableStorageSnapshot
	if rf, ok := ret.Get(0).(func(flow.StateCommitment, map[flow.RegisterID][]byte) execution.ExtendableStorageSnapshot); ok {
		r0 = rf(newCommit, updatedRegisters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(execution.ExtendableStorageSnapshot)
		}
	}

	return r0
}

// MockExtendableStorageSnapshot_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type MockExtendableStorageSnapshot_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - newCommit flow.StateCommitment
//   - updatedRegisters map[flow.RegisterID][]byte
func (_e *MockExtendableStorageSnapshot_Expecter) Extend(newCommit interface{}, updatedRegisters interface{}) *MockExtendableStorageSnapshot_Extend_Call {
	return &MockExtendableStorageSnapshot_Extend_Call{Call: _e.mock.On("Extend", newCommit, updatedRegisters)}
}

func (_c *MockExtendableStorageSnapshot_Extend_Call) Run(run func(newCommit flow.StateCommitment, updatedRegisters map[flow.RegisterID][]byte)) *MockExtendableStorageSnapshot_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.StateCommitment), args[1].(map[flow.RegisterID][]byte))
	})
	return _c
}

func (_c *MockExtendableStorageSnapshot_Extend_Call) Return(_a0 execution.ExtendableStorageSnapshot) *MockExtendableStorageSnapshot_Extend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExtendableStorageSnapshot_Extend_Call) RunAndReturn(run func(flow.StateCommitment, map[flow.RegisterID][]byte) execution.ExtendableStorageSnapshot) *MockExtendableStorageSnapshot_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockExtendableStorageSnapshot) Get(id flow.RegisterID) ([]byte, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.RegisterID) ([]byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.RegisterID) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.RegisterID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExtendableStorageSnapshot_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockExtendableStorageSnapshot_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id flow.RegisterID
func (_e *MockExtendableStorageSnapshot_Expecter) Get(id interface{}) *MockExtendableStorageSnapshot_Get_Call {
	return &MockExtendableStorageSnapshot_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockExtendableStorageSnapshot_Get_Call) Run(run func(id flow.RegisterID)) *MockExtendableStorageSnapshot_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.RegisterID))
	})
	return _c
}

func (_c *MockExtendableStorageSnapshot_Get_Call) Return(_a0 []byte, _a1 error) *MockExtendableStorageSnapshot_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExtendableStorageSnapshot_Get_Call) RunAndReturn(run func(flow.RegisterID) ([]byte, error)) *MockExtendableStorageSnapshot_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExtendableStorageSnapshot creates a new instance of MockExtendableStorageSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtendableStorageSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtendableStorageSnapshot {
	mock := &MockExtendableStorageSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
