// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	execution "github.com/onflow/flow-go/engine/execution"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// ExtendableStorageSnapshot is an autogenerated mock type for the ExtendableStorageSnapshot type
type ExtendableStorageSnapshot struct {
	mock.Mock
}

// Commitment provides a mock function with given fields:
func (_m *ExtendableStorageSnapshot) Commitment() flow.StateCommitment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commitment")
	}

	var r0 flow.StateCommitment
	if rf, ok := ret.Get(0).(func() flow.StateCommitment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	return r0
}

// Extend provides a mock function with given fields: newCommit, updatedRegisters
func (_m *ExtendableStorageSnapshot) Extend(newCommit flow.StateCommitment, updatedRegisters map[flow.RegisterID][]byte) execution.ExtendableStorageSnapshot {
	ret := _m.Called(newCommit, updatedRegisters)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 execution.ExtendableStorageSnapshot
	if rf, ok := ret.Get(0).(func(flow.StateCommitment, map[flow.RegisterID][]byte) execution.ExtendableStorageSnapshot); ok {
		r0 = rf(newCommit, updatedRegisters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(execution.ExtendableStorageSnapshot)
		}
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ExtendableStorageSnapshot) Get(id flow.RegisterID) ([]byte, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.RegisterID) ([]byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(flow.RegisterID) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.RegisterID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExtendableStorageSnapshot creates a new instance of ExtendableStorageSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtendableStorageSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtendableStorageSnapshot {
	mock := &ExtendableStorageSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
