// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	execution "github.com/onflow/flow-go/engine/execution"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// ExecutedFinalizedWAL is an autogenerated mock type for the ExecutedFinalizedWAL type
type ExecutedFinalizedWAL struct {
	mock.Mock
}

// Append provides a mock function with given fields: height, registers
func (_m *ExecutedFinalizedWAL) Append(height uint64, registers flow.RegisterEntries) error {
	ret := _m.Called(height, registers)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, flow.RegisterEntries) error); ok {
		r0 = rf(height, registers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReader provides a mock function with given fields: height
func (_m *ExecutedFinalizedWAL) GetReader(height uint64) execution.WALReader {
	ret := _m.Called(height)

	var r0 execution.WALReader
	if rf, ok := ret.Get(0).(func(uint64) execution.WALReader); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(execution.WALReader)
		}
	}

	return r0
}

// Latest provides a mock function with given fields:
func (_m *ExecutedFinalizedWAL) Latest() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExecutedFinalizedWAL interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecutedFinalizedWAL creates a new instance of ExecutedFinalizedWAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecutedFinalizedWAL(t mockConstructorTestingTNewExecutedFinalizedWAL) *ExecutedFinalizedWAL {
	mock := &ExecutedFinalizedWAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
