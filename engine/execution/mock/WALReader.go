// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockWALReader is an autogenerated mock type for the WALReader type
type MockWALReader struct {
	mock.Mock
}

type MockWALReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWALReader) EXPECT() *MockWALReader_Expecter {
	return &MockWALReader_Expecter{mock: &_m.Mock}
}

// Next provides a mock function with no fields
func (_m *MockWALReader) Next() (uint64, flow.RegisterEntries, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 uint64
	var r1 flow.RegisterEntries
	var r2 error
	if rf, ok := ret.Get(0).(func() (uint64, flow.RegisterEntries, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() flow.RegisterEntries); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(flow.RegisterEntries)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWALReader_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockWALReader_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockWALReader_Expecter) Next() *MockWALReader_Next_Call {
	return &MockWALReader_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockWALReader_Next_Call) Run(run func()) *MockWALReader_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWALReader_Next_Call) Return(height uint64, registers flow.RegisterEntries, err error) *MockWALReader_Next_Call {
	_c.Call.Return(height, registers, err)
	return _c
}

func (_c *MockWALReader_Next_Call) RunAndReturn(run func() (uint64, flow.RegisterEntries, error)) *MockWALReader_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWALReader creates a new instance of MockWALReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWALReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWALReader {
	mock := &MockWALReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
