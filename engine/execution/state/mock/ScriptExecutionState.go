// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	snapshot "github.com/onflow/flow-go/fvm/storage/snapshot"
)

// MockScriptExecutionState is an autogenerated mock type for the ScriptExecutionState type
type MockScriptExecutionState struct {
	mock.Mock
}

type MockScriptExecutionState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScriptExecutionState) EXPECT() *MockScriptExecutionState_Expecter {
	return &MockScriptExecutionState_Expecter{mock: &_m.Mock}
}

// CreateStorageSnapshot provides a mock function with given fields: blockID
func (_m *MockScriptExecutionState) CreateStorageSnapshot(blockID flow.Identifier) (snapshot.StorageSnapshot, *flow.Header, error) {
	ret := _m.Called(blockID)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorageSnapshot")
	}

	var r0 snapshot.StorageSnapshot
	var r1 *flow.Header
	var r2 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (snapshot.StorageSnapshot, *flow.Header, error)); ok {
		return rf(blockID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) snapshot.StorageSnapshot); ok {
		r0 = rf(blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(snapshot.StorageSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) *flow.Header); ok {
		r1 = rf(blockID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*flow.Header)
		}
	}

	if rf, ok := ret.Get(2).(func(flow.Identifier) error); ok {
		r2 = rf(blockID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockScriptExecutionState_CreateStorageSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStorageSnapshot'
type MockScriptExecutionState_CreateStorageSnapshot_Call struct {
	*mock.Call
}

// CreateStorageSnapshot is a helper method to define mock.On call
//   - blockID flow.Identifier
func (_e *MockScriptExecutionState_Expecter) CreateStorageSnapshot(blockID interface{}) *MockScriptExecutionState_CreateStorageSnapshot_Call {
	return &MockScriptExecutionState_CreateStorageSnapshot_Call{Call: _e.mock.On("CreateStorageSnapshot", blockID)}
}

func (_c *MockScriptExecutionState_CreateStorageSnapshot_Call) Run(run func(blockID flow.Identifier)) *MockScriptExecutionState_CreateStorageSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockScriptExecutionState_CreateStorageSnapshot_Call) Return(_a0 snapshot.StorageSnapshot, _a1 *flow.Header, _a2 error) *MockScriptExecutionState_CreateStorageSnapshot_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockScriptExecutionState_CreateStorageSnapshot_Call) RunAndReturn(run func(flow.Identifier) (snapshot.StorageSnapshot, *flow.Header, error)) *MockScriptExecutionState_CreateStorageSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlockExecuted provides a mock function with given fields: height, blockID
func (_m *MockScriptExecutionState) IsBlockExecuted(height uint64, blockID flow.Identifier) (bool, error) {
	ret := _m.Called(height, blockID)

	if len(ret) == 0 {
		panic("no return value specified for IsBlockExecuted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) (bool, error)); ok {
		return rf(height, blockID)
	}
	if rf, ok := ret.Get(0).(func(uint64, flow.Identifier) bool); ok {
		r0 = rf(height, blockID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64, flow.Identifier) error); ok {
		r1 = rf(height, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutionState_IsBlockExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlockExecuted'
type MockScriptExecutionState_IsBlockExecuted_Call struct {
	*mock.Call
}

// IsBlockExecuted is a helper method to define mock.On call
//   - height uint64
//   - blockID flow.Identifier
func (_e *MockScriptExecutionState_Expecter) IsBlockExecuted(height interface{}, blockID interface{}) *MockScriptExecutionState_IsBlockExecuted_Call {
	return &MockScriptExecutionState_IsBlockExecuted_Call{Call: _e.mock.On("IsBlockExecuted", height, blockID)}
}

func (_c *MockScriptExecutionState_IsBlockExecuted_Call) Run(run func(height uint64, blockID flow.Identifier)) *MockScriptExecutionState_IsBlockExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockScriptExecutionState_IsBlockExecuted_Call) Return(_a0 bool, _a1 error) *MockScriptExecutionState_IsBlockExecuted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutionState_IsBlockExecuted_Call) RunAndReturn(run func(uint64, flow.Identifier) (bool, error)) *MockScriptExecutionState_IsBlockExecuted_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageSnapshot provides a mock function with given fields: commit, blockID, height
func (_m *MockScriptExecutionState) NewStorageSnapshot(commit flow.StateCommitment, blockID flow.Identifier, height uint64) snapshot.StorageSnapshot {
	ret := _m.Called(commit, blockID, height)

	if len(ret) == 0 {
		panic("no return value specified for NewStorageSnapshot")
	}

	var r0 snapshot.StorageSnapshot
	if rf, ok := ret.Get(0).(func(flow.StateCommitment, flow.Identifier, uint64) snapshot.StorageSnapshot); ok {
		r0 = rf(commit, blockID, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(snapshot.StorageSnapshot)
		}
	}

	return r0
}

// MockScriptExecutionState_NewStorageSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStorageSnapshot'
type MockScriptExecutionState_NewStorageSnapshot_Call struct {
	*mock.Call
}

// NewStorageSnapshot is a helper method to define mock.On call
//   - commit flow.StateCommitment
//   - blockID flow.Identifier
//   - height uint64
func (_e *MockScriptExecutionState_Expecter) NewStorageSnapshot(commit interface{}, blockID interface{}, height interface{}) *MockScriptExecutionState_NewStorageSnapshot_Call {
	return &MockScriptExecutionState_NewStorageSnapshot_Call{Call: _e.mock.On("NewStorageSnapshot", commit, blockID, height)}
}

func (_c *MockScriptExecutionState_NewStorageSnapshot_Call) Run(run func(commit flow.StateCommitment, blockID flow.Identifier, height uint64)) *MockScriptExecutionState_NewStorageSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.StateCommitment), args[1].(flow.Identifier), args[2].(uint64))
	})
	return _c
}

func (_c *MockScriptExecutionState_NewStorageSnapshot_Call) Return(_a0 snapshot.StorageSnapshot) *MockScriptExecutionState_NewStorageSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScriptExecutionState_NewStorageSnapshot_Call) RunAndReturn(run func(flow.StateCommitment, flow.Identifier, uint64) snapshot.StorageSnapshot) *MockScriptExecutionState_NewStorageSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// StateCommitmentByBlockID provides a mock function with given fields: _a0
func (_m *MockScriptExecutionState) StateCommitmentByBlockID(_a0 flow.Identifier) (flow.StateCommitment, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StateCommitmentByBlockID")
	}

	var r0 flow.StateCommitment
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) (flow.StateCommitment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) flow.StateCommitment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.StateCommitment)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScriptExecutionState_StateCommitmentByBlockID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateCommitmentByBlockID'
type MockScriptExecutionState_StateCommitmentByBlockID_Call struct {
	*mock.Call
}

// StateCommitmentByBlockID is a helper method to define mock.On call
//   - _a0 flow.Identifier
func (_e *MockScriptExecutionState_Expecter) StateCommitmentByBlockID(_a0 interface{}) *MockScriptExecutionState_StateCommitmentByBlockID_Call {
	return &MockScriptExecutionState_StateCommitmentByBlockID_Call{Call: _e.mock.On("StateCommitmentByBlockID", _a0)}
}

func (_c *MockScriptExecutionState_StateCommitmentByBlockID_Call) Run(run func(_a0 flow.Identifier)) *MockScriptExecutionState_StateCommitmentByBlockID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier))
	})
	return _c
}

func (_c *MockScriptExecutionState_StateCommitmentByBlockID_Call) Return(_a0 flow.StateCommitment, _a1 error) *MockScriptExecutionState_StateCommitmentByBlockID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScriptExecutionState_StateCommitmentByBlockID_Call) RunAndReturn(run func(flow.Identifier) (flow.StateCommitment, error)) *MockScriptExecutionState_StateCommitmentByBlockID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScriptExecutionState creates a new instance of MockScriptExecutionState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScriptExecutionState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScriptExecutionState {
	mock := &MockScriptExecutionState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
