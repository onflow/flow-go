// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockfetcher

import (
	fetcher "github.com/onflow/flow-go/engine/verification/fetcher"
	mock "github.com/stretchr/testify/mock"

	verification "github.com/onflow/flow-go/model/verification"
)

// MockChunkDataPackRequester is an autogenerated mock type for the ChunkDataPackRequester type
type MockChunkDataPackRequester struct {
	mock.Mock
}

type MockChunkDataPackRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkDataPackRequester) EXPECT() *MockChunkDataPackRequester_Expecter {
	return &MockChunkDataPackRequester_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockChunkDataPackRequester) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockChunkDataPackRequester_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockChunkDataPackRequester_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockChunkDataPackRequester_Expecter) Done() *MockChunkDataPackRequester_Done_Call {
	return &MockChunkDataPackRequester_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockChunkDataPackRequester_Done_Call) Run(run func()) *MockChunkDataPackRequester_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkDataPackRequester_Done_Call) Return(_a0 <-chan struct{}) *MockChunkDataPackRequester_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPackRequester_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockChunkDataPackRequester_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockChunkDataPackRequester) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockChunkDataPackRequester_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockChunkDataPackRequester_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockChunkDataPackRequester_Expecter) Ready() *MockChunkDataPackRequester_Ready_Call {
	return &MockChunkDataPackRequester_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockChunkDataPackRequester_Ready_Call) Run(run func()) *MockChunkDataPackRequester_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkDataPackRequester_Ready_Call) Return(_a0 <-chan struct{}) *MockChunkDataPackRequester_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkDataPackRequester_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockChunkDataPackRequester_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: request
func (_m *MockChunkDataPackRequester) Request(request *verification.ChunkDataPackRequest) {
	_m.Called(request)
}

// MockChunkDataPackRequester_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockChunkDataPackRequester_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - request *verification.ChunkDataPackRequest
func (_e *MockChunkDataPackRequester_Expecter) Request(request interface{}) *MockChunkDataPackRequester_Request_Call {
	return &MockChunkDataPackRequester_Request_Call{Call: _e.mock.On("Request", request)}
}

func (_c *MockChunkDataPackRequester_Request_Call) Run(run func(request *verification.ChunkDataPackRequest)) *MockChunkDataPackRequester_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*verification.ChunkDataPackRequest))
	})
	return _c
}

func (_c *MockChunkDataPackRequester_Request_Call) Return() *MockChunkDataPackRequester_Request_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChunkDataPackRequester_Request_Call) RunAndReturn(run func(*verification.ChunkDataPackRequest)) *MockChunkDataPackRequester_Request_Call {
	_c.Run(run)
	return _c
}

// WithChunkDataPackHandler provides a mock function with given fields: handler
func (_m *MockChunkDataPackRequester) WithChunkDataPackHandler(handler fetcher.ChunkDataPackHandler) {
	_m.Called(handler)
}

// MockChunkDataPackRequester_WithChunkDataPackHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithChunkDataPackHandler'
type MockChunkDataPackRequester_WithChunkDataPackHandler_Call struct {
	*mock.Call
}

// WithChunkDataPackHandler is a helper method to define mock.On call
//   - handler fetcher.ChunkDataPackHandler
func (_e *MockChunkDataPackRequester_Expecter) WithChunkDataPackHandler(handler interface{}) *MockChunkDataPackRequester_WithChunkDataPackHandler_Call {
	return &MockChunkDataPackRequester_WithChunkDataPackHandler_Call{Call: _e.mock.On("WithChunkDataPackHandler", handler)}
}

func (_c *MockChunkDataPackRequester_WithChunkDataPackHandler_Call) Run(run func(handler fetcher.ChunkDataPackHandler)) *MockChunkDataPackRequester_WithChunkDataPackHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fetcher.ChunkDataPackHandler))
	})
	return _c
}

func (_c *MockChunkDataPackRequester_WithChunkDataPackHandler_Call) Return() *MockChunkDataPackRequester_WithChunkDataPackHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChunkDataPackRequester_WithChunkDataPackHandler_Call) RunAndReturn(run func(fetcher.ChunkDataPackHandler)) *MockChunkDataPackRequester_WithChunkDataPackHandler_Call {
	_c.Run(run)
	return _c
}

// NewMockChunkDataPackRequester creates a new instance of MockChunkDataPackRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkDataPackRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkDataPackRequester {
	mock := &MockChunkDataPackRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
