// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockfetcher

import (
	chunks "github.com/onflow/flow-go/model/chunks"

	mock "github.com/stretchr/testify/mock"

	module "github.com/onflow/flow-go/module"
)

// MockAssignedChunkProcessor is an autogenerated mock type for the AssignedChunkProcessor type
type MockAssignedChunkProcessor struct {
	mock.Mock
}

type MockAssignedChunkProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssignedChunkProcessor) EXPECT() *MockAssignedChunkProcessor_Expecter {
	return &MockAssignedChunkProcessor_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockAssignedChunkProcessor) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockAssignedChunkProcessor_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockAssignedChunkProcessor_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockAssignedChunkProcessor_Expecter) Done() *MockAssignedChunkProcessor_Done_Call {
	return &MockAssignedChunkProcessor_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockAssignedChunkProcessor_Done_Call) Run(run func()) *MockAssignedChunkProcessor_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignedChunkProcessor_Done_Call) Return(_a0 <-chan struct{}) *MockAssignedChunkProcessor_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignedChunkProcessor_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockAssignedChunkProcessor_Done_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessAssignedChunk provides a mock function with given fields: locator
func (_m *MockAssignedChunkProcessor) ProcessAssignedChunk(locator *chunks.Locator) {
	_m.Called(locator)
}

// MockAssignedChunkProcessor_ProcessAssignedChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessAssignedChunk'
type MockAssignedChunkProcessor_ProcessAssignedChunk_Call struct {
	*mock.Call
}

// ProcessAssignedChunk is a helper method to define mock.On call
//   - locator *chunks.Locator
func (_e *MockAssignedChunkProcessor_Expecter) ProcessAssignedChunk(locator interface{}) *MockAssignedChunkProcessor_ProcessAssignedChunk_Call {
	return &MockAssignedChunkProcessor_ProcessAssignedChunk_Call{Call: _e.mock.On("ProcessAssignedChunk", locator)}
}

func (_c *MockAssignedChunkProcessor_ProcessAssignedChunk_Call) Run(run func(locator *chunks.Locator)) *MockAssignedChunkProcessor_ProcessAssignedChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*chunks.Locator))
	})
	return _c
}

func (_c *MockAssignedChunkProcessor_ProcessAssignedChunk_Call) Return() *MockAssignedChunkProcessor_ProcessAssignedChunk_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssignedChunkProcessor_ProcessAssignedChunk_Call) RunAndReturn(run func(*chunks.Locator)) *MockAssignedChunkProcessor_ProcessAssignedChunk_Call {
	_c.Run(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *MockAssignedChunkProcessor) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockAssignedChunkProcessor_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockAssignedChunkProcessor_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *MockAssignedChunkProcessor_Expecter) Ready() *MockAssignedChunkProcessor_Ready_Call {
	return &MockAssignedChunkProcessor_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *MockAssignedChunkProcessor_Ready_Call) Run(run func()) *MockAssignedChunkProcessor_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssignedChunkProcessor_Ready_Call) Return(_a0 <-chan struct{}) *MockAssignedChunkProcessor_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssignedChunkProcessor_Ready_Call) RunAndReturn(run func() <-chan struct{}) *MockAssignedChunkProcessor_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// WithChunkConsumerNotifier provides a mock function with given fields: notifier
func (_m *MockAssignedChunkProcessor) WithChunkConsumerNotifier(notifier module.ProcessingNotifier) {
	_m.Called(notifier)
}

// MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithChunkConsumerNotifier'
type MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call struct {
	*mock.Call
}

// WithChunkConsumerNotifier is a helper method to define mock.On call
//   - notifier module.ProcessingNotifier
func (_e *MockAssignedChunkProcessor_Expecter) WithChunkConsumerNotifier(notifier interface{}) *MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call {
	return &MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call{Call: _e.mock.On("WithChunkConsumerNotifier", notifier)}
}

func (_c *MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call) Run(run func(notifier module.ProcessingNotifier)) *MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(module.ProcessingNotifier))
	})
	return _c
}

func (_c *MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call) Return() *MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call) RunAndReturn(run func(module.ProcessingNotifier)) *MockAssignedChunkProcessor_WithChunkConsumerNotifier_Call {
	_c.Run(run)
	return _c
}

// NewMockAssignedChunkProcessor creates a new instance of MockAssignedChunkProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssignedChunkProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssignedChunkProcessor {
	mock := &MockAssignedChunkProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
