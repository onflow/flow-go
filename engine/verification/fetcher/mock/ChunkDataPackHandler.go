// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockfetcher

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	verification "github.com/onflow/flow-go/model/verification"
)

// MockChunkDataPackHandler is an autogenerated mock type for the ChunkDataPackHandler type
type MockChunkDataPackHandler struct {
	mock.Mock
}

type MockChunkDataPackHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkDataPackHandler) EXPECT() *MockChunkDataPackHandler_Expecter {
	return &MockChunkDataPackHandler_Expecter{mock: &_m.Mock}
}

// HandleChunkDataPack provides a mock function with given fields: originID, response
func (_m *MockChunkDataPackHandler) HandleChunkDataPack(originID flow.Identifier, response *verification.ChunkDataPackResponse) {
	_m.Called(originID, response)
}

// MockChunkDataPackHandler_HandleChunkDataPack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleChunkDataPack'
type MockChunkDataPackHandler_HandleChunkDataPack_Call struct {
	*mock.Call
}

// HandleChunkDataPack is a helper method to define mock.On call
//   - originID flow.Identifier
//   - response *verification.ChunkDataPackResponse
func (_e *MockChunkDataPackHandler_Expecter) HandleChunkDataPack(originID interface{}, response interface{}) *MockChunkDataPackHandler_HandleChunkDataPack_Call {
	return &MockChunkDataPackHandler_HandleChunkDataPack_Call{Call: _e.mock.On("HandleChunkDataPack", originID, response)}
}

func (_c *MockChunkDataPackHandler_HandleChunkDataPack_Call) Run(run func(originID flow.Identifier, response *verification.ChunkDataPackResponse)) *MockChunkDataPackHandler_HandleChunkDataPack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.Identifier), args[1].(*verification.ChunkDataPackResponse))
	})
	return _c
}

func (_c *MockChunkDataPackHandler_HandleChunkDataPack_Call) Return() *MockChunkDataPackHandler_HandleChunkDataPack_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChunkDataPackHandler_HandleChunkDataPack_Call) RunAndReturn(run func(flow.Identifier, *verification.ChunkDataPackResponse)) *MockChunkDataPackHandler_HandleChunkDataPack_Call {
	_c.Run(run)
	return _c
}

// NotifyChunkDataPackSealed provides a mock function with given fields: chunkIndex, resultID
func (_m *MockChunkDataPackHandler) NotifyChunkDataPackSealed(chunkIndex uint64, resultID flow.Identifier) {
	_m.Called(chunkIndex, resultID)
}

// MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyChunkDataPackSealed'
type MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call struct {
	*mock.Call
}

// NotifyChunkDataPackSealed is a helper method to define mock.On call
//   - chunkIndex uint64
//   - resultID flow.Identifier
func (_e *MockChunkDataPackHandler_Expecter) NotifyChunkDataPackSealed(chunkIndex interface{}, resultID interface{}) *MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call {
	return &MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call{Call: _e.mock.On("NotifyChunkDataPackSealed", chunkIndex, resultID)}
}

func (_c *MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call) Run(run func(chunkIndex uint64, resultID flow.Identifier)) *MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call) Return() *MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call) RunAndReturn(run func(uint64, flow.Identifier)) *MockChunkDataPackHandler_NotifyChunkDataPackSealed_Call {
	_c.Run(run)
	return _c
}

// NewMockChunkDataPackHandler creates a new instance of MockChunkDataPackHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkDataPackHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkDataPackHandler {
	mock := &MockChunkDataPackHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
