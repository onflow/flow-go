package synchronization

import (
	"time"

	core "github.com/onflow/flow-go/module/chainsync"
)

type Config struct {
	PollInterval time.Duration
	ScanInterval time.Duration
}

func DefaultConfig() *Config {
	scanInterval := 2 * time.Second
	pollInterval := time.Duration(core.DefaultQueuedHeightMultiplicity) * scanInterval
	return &Config{
		PollInterval: pollInterval,
		ScanInterval: scanInterval,
	}
}

type OptionFunc func(*Config)

// WithPollInterval sets a custom interval at which we scan for poll items
func WithPollInterval(interval time.Duration) OptionFunc {
	return func(cfg *Config) {
		cfg.PollInterval = interval
	}
}

// WithScanInterval sets a custom interval at which we scan for pending items
// and batch them for requesting.
func WithScanInterval(interval time.Duration) OptionFunc {
	return func(cfg *Config) {
		cfg.ScanInterval = interval
	}
}

// spamProbabilityMultiplier is used to convert probability factor to an integer as well as a maximum value - 1
// random number that can be generated by the random number generator.
const spamProbabilityMultiplier = 1001

// SpamDetectionConfig contains configuration parameters for spam detection for different message types.
// The probability of creating a misbehavior report for a message of a given type is calculated differently for different
// message types.
type SpamDetectionConfig struct {

	// syncRequestProb is the probability of creating a misbehavior report for a SyncRequest message.
	syncRequestProb float32

	// rangeRequestBaseProb is the base probability that's used in creating the final probability of creating a
	// misbehavior report for a RangeRequest message. This is why the word "base" is used in the name of this field,
	// since it's not the final probability and there are other factors that determine the final probability.
	// The reason for this is that we want to increase the probability of creating a misbehavior report for a large range.
	rangeRequestBaseProb float32
}

func NewSpamDetectionConfig() *SpamDetectionConfig {
	return &SpamDetectionConfig{
		// create misbehavior report for 1% of SyncRequest messages
		// TODO: make this configurable as a start up flag for the engine
		syncRequestProb: 0.01,

		// create misbehavior report for about 0.2% of RangeRequest messages for normal range requests (i.e. not too large)
		// and about 15% of RangeRequest messages for very large range requests
		// The final probability is calculated as follows:
		// rangeRequestBaseProb * ((rangeRequest.ToHeight-rangeRequest.FromHeight) + 1) / synccore.DefaultConfig().MaxSize
		// Example 1 (small range) if the range request is for 10 blocks and rangeRequestBaseProb is 0.01, then the probability of
		// creating a misbehavior report is:
		// rangeRequestBaseProb * (10+1) / synccore.DefaultConfig().MaxSize
		// = 0.01 * 11 / 64 = 0.00171875 = 0.171875%
		// Example 2 (large range) if the range request is for 1000 blocks and rangeRequestBaseProb is 0.01, then the probability of
		// creating a misbehavior report is:
		// rangeRequestBaseProb * (1000+1) / synccore.DefaultConfig().MaxSize
		// = 0.01 * 1001 / 64 = 0.15640625 = 15.640625%
		// TODO: make this configurable as a start up flag for the engine
		rangeRequestBaseProb: 0.01,
	}
}
