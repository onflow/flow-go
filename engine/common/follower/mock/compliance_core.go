// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"
)

// ComplianceCore is an autogenerated mock type for the complianceCore type
type ComplianceCore struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *ComplianceCore) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// OnBlockRange provides a mock function with given fields: originID, connectedRange
func (_m *ComplianceCore) OnBlockRange(originID flow.Identifier, connectedRange []*flow.Block) error {
	ret := _m.Called(originID, connectedRange)

	if len(ret) == 0 {
		panic("no return value specified for OnBlockRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, []*flow.Block) error); ok {
		r0 = rf(originID, connectedRange)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnFinalizedBlock provides a mock function with given fields: finalized
func (_m *ComplianceCore) OnFinalizedBlock(finalized *flow.Header) {
	_m.Called(finalized)
}

// Ready provides a mock function with given fields:
func (_m *ComplianceCore) Ready() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *ComplianceCore) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// NewComplianceCore creates a new instance of ComplianceCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComplianceCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComplianceCore {
	mock := &ComplianceCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
