// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	component "github.com/onflow/flow-go/module/component"
	cluster "github.com/onflow/flow-go/state/cluster"

	hotstuff "github.com/onflow/flow-go/consensus/hotstuff"

	mock "github.com/stretchr/testify/mock"

	module "github.com/onflow/flow-go/module"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// MockEpochComponentsFactory is an autogenerated mock type for the EpochComponentsFactory type
type MockEpochComponentsFactory struct {
	mock.Mock
}

type MockEpochComponentsFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpochComponentsFactory) EXPECT() *MockEpochComponentsFactory_Expecter {
	return &MockEpochComponentsFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: epoch
func (_m *MockEpochComponentsFactory) Create(epoch protocol.CommittedEpoch) (cluster.State, component.Component, module.ReadyDoneAware, module.HotStuff, hotstuff.VoteAggregator, hotstuff.TimeoutAggregator, component.Component, error) {
	ret := _m.Called(epoch)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 cluster.State
	var r1 component.Component
	var r2 module.ReadyDoneAware
	var r3 module.HotStuff
	var r4 hotstuff.VoteAggregator
	var r5 hotstuff.TimeoutAggregator
	var r6 component.Component
	var r7 error
	if rf, ok := ret.Get(0).(func(protocol.CommittedEpoch) (cluster.State, component.Component, module.ReadyDoneAware, module.HotStuff, hotstuff.VoteAggregator, hotstuff.TimeoutAggregator, component.Component, error)); ok {
		return rf(epoch)
	}
	if rf, ok := ret.Get(0).(func(protocol.CommittedEpoch) cluster.State); ok {
		r0 = rf(epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.State)
		}
	}

	if rf, ok := ret.Get(1).(func(protocol.CommittedEpoch) component.Component); ok {
		r1 = rf(epoch)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(component.Component)
		}
	}

	if rf, ok := ret.Get(2).(func(protocol.CommittedEpoch) module.ReadyDoneAware); ok {
		r2 = rf(epoch)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(module.ReadyDoneAware)
		}
	}

	if rf, ok := ret.Get(3).(func(protocol.CommittedEpoch) module.HotStuff); ok {
		r3 = rf(epoch)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(module.HotStuff)
		}
	}

	if rf, ok := ret.Get(4).(func(protocol.CommittedEpoch) hotstuff.VoteAggregator); ok {
		r4 = rf(epoch)
	} else {
		if ret.Get(4) != nil {
			r4 = ret.Get(4).(hotstuff.VoteAggregator)
		}
	}

	if rf, ok := ret.Get(5).(func(protocol.CommittedEpoch) hotstuff.TimeoutAggregator); ok {
		r5 = rf(epoch)
	} else {
		if ret.Get(5) != nil {
			r5 = ret.Get(5).(hotstuff.TimeoutAggregator)
		}
	}

	if rf, ok := ret.Get(6).(func(protocol.CommittedEpoch) component.Component); ok {
		r6 = rf(epoch)
	} else {
		if ret.Get(6) != nil {
			r6 = ret.Get(6).(component.Component)
		}
	}

	if rf, ok := ret.Get(7).(func(protocol.CommittedEpoch) error); ok {
		r7 = rf(epoch)
	} else {
		r7 = ret.Error(7)
	}

	return r0, r1, r2, r3, r4, r5, r6, r7
}

// MockEpochComponentsFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockEpochComponentsFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - epoch protocol.CommittedEpoch
func (_e *MockEpochComponentsFactory_Expecter) Create(epoch interface{}) *MockEpochComponentsFactory_Create_Call {
	return &MockEpochComponentsFactory_Create_Call{Call: _e.mock.On("Create", epoch)}
}

func (_c *MockEpochComponentsFactory_Create_Call) Run(run func(epoch protocol.CommittedEpoch)) *MockEpochComponentsFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protocol.CommittedEpoch))
	})
	return _c
}

func (_c *MockEpochComponentsFactory_Create_Call) Return(state cluster.State, proposal component.Component, sync module.ReadyDoneAware, _a3 module.HotStuff, voteAggregator hotstuff.VoteAggregator, timeoutAggregator hotstuff.TimeoutAggregator, messageHub component.Component, err error) *MockEpochComponentsFactory_Create_Call {
	_c.Call.Return(state, proposal, sync, _a3, voteAggregator, timeoutAggregator, messageHub, err)
	return _c
}

func (_c *MockEpochComponentsFactory_Create_Call) RunAndReturn(run func(protocol.CommittedEpoch) (cluster.State, component.Component, module.ReadyDoneAware, module.HotStuff, hotstuff.VoteAggregator, hotstuff.TimeoutAggregator, component.Component, error)) *MockEpochComponentsFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEpochComponentsFactory creates a new instance of MockEpochComponentsFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpochComponentsFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpochComponentsFactory {
	mock := &MockEpochComponentsFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
