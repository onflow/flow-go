// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockClusterEvents is an autogenerated mock type for the ClusterEvents type
type MockClusterEvents struct {
	mock.Mock
}

type MockClusterEvents_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterEvents) EXPECT() *MockClusterEvents_Expecter {
	return &MockClusterEvents_Expecter{mock: &_m.Mock}
}

// ActiveClustersChanged provides a mock function with given fields: _a0
func (_m *MockClusterEvents) ActiveClustersChanged(_a0 flow.ChainIDList) {
	_m.Called(_a0)
}

// MockClusterEvents_ActiveClustersChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActiveClustersChanged'
type MockClusterEvents_ActiveClustersChanged_Call struct {
	*mock.Call
}

// ActiveClustersChanged is a helper method to define mock.On call
//   - _a0 flow.ChainIDList
func (_e *MockClusterEvents_Expecter) ActiveClustersChanged(_a0 interface{}) *MockClusterEvents_ActiveClustersChanged_Call {
	return &MockClusterEvents_ActiveClustersChanged_Call{Call: _e.mock.On("ActiveClustersChanged", _a0)}
}

func (_c *MockClusterEvents_ActiveClustersChanged_Call) Run(run func(_a0 flow.ChainIDList)) *MockClusterEvents_ActiveClustersChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flow.ChainIDList))
	})
	return _c
}

func (_c *MockClusterEvents_ActiveClustersChanged_Call) Return() *MockClusterEvents_ActiveClustersChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClusterEvents_ActiveClustersChanged_Call) RunAndReturn(run func(flow.ChainIDList)) *MockClusterEvents_ActiveClustersChanged_Call {
	_c.Run(run)
	return _c
}

// NewMockClusterEvents creates a new instance of MockClusterEvents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterEvents(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterEvents {
	mock := &MockClusterEvents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
