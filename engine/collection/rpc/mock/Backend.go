// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// MockBackend is an autogenerated mock type for the Backend type
type MockBackend struct {
	mock.Mock
}

type MockBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackend) EXPECT() *MockBackend_Expecter {
	return &MockBackend_Expecter{mock: &_m.Mock}
}

// ProcessTransaction provides a mock function with given fields: _a0
func (_m *MockBackend) ProcessTransaction(_a0 *flow.TransactionBody) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.TransactionBody) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackend_ProcessTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTransaction'
type MockBackend_ProcessTransaction_Call struct {
	*mock.Call
}

// ProcessTransaction is a helper method to define mock.On call
//   - _a0 *flow.TransactionBody
func (_e *MockBackend_Expecter) ProcessTransaction(_a0 interface{}) *MockBackend_ProcessTransaction_Call {
	return &MockBackend_ProcessTransaction_Call{Call: _e.mock.On("ProcessTransaction", _a0)}
}

func (_c *MockBackend_ProcessTransaction_Call) Run(run func(_a0 *flow.TransactionBody)) *MockBackend_ProcessTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flow.TransactionBody))
	})
	return _c
}

func (_c *MockBackend_ProcessTransaction_Call) Return(_a0 error) *MockBackend_ProcessTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackend_ProcessTransaction_Call) RunAndReturn(run func(*flow.TransactionBody) error) *MockBackend_ProcessTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBackend creates a new instance of MockBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackend {
	mock := &MockBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
